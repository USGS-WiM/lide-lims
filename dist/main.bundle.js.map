{"version":3,"sources":["./package.json","./src/$_gendir lazy","./src/app/FILTERS/collection-end-date-filter/collection-end-date-filter.component.html","./src/app/FILTERS/collection-end-date-filter/collection-end-date-filter.component.scss","./src/app/FILTERS/collection-end-date-filter/collection-end-date-filter.component.ts","./src/app/FILTERS/collection-start-date-filter/collection-start-date-filter.component.html","./src/app/FILTERS/collection-start-date-filter/collection-start-date-filter.component.scss","./src/app/FILTERS/collection-start-date-filter/collection-start-date-filter.component.ts","./src/app/FILTERS/date-added-filter/date-added-filter.component.html","./src/app/FILTERS/date-added-filter/date-added-filter.component.scss","./src/app/FILTERS/date-added-filter/date-added-filter.component.ts","./src/app/FILTERS/date-updated-filter/date-updated-filter.component.html","./src/app/FILTERS/date-updated-filter/date-updated-filter.component.scss","./src/app/FILTERS/date-updated-filter/date-updated-filter.component.ts","./src/app/FILTERS/filter-born-on-date-filter/filter-born-on-date-filter.component.html","./src/app/FILTERS/filter-born-on-date-filter/filter-born-on-date-filter.component.scss","./src/app/FILTERS/filter-born-on-date-filter/filter-born-on-date-filter.component.ts","./src/app/FILTERS/filter-type-filter/filter-type-filter.component.html","./src/app/FILTERS/filter-type-filter/filter-type-filter.component.scss","./src/app/FILTERS/filter-type-filter/filter-type-filter.component.ts","./src/app/FILTERS/matrix-type-filter/matrix-type-filter.component.html","./src/app/FILTERS/matrix-type-filter/matrix-type-filter.component.scss","./src/app/FILTERS/matrix-type-filter/matrix-type-filter.component.ts","./src/app/FILTERS/multi-study-filter/multi-study-filter.component.html","./src/app/FILTERS/multi-study-filter/multi-study-filter.component.scss","./src/app/FILTERS/multi-study-filter/multi-study-filter.component.ts","./src/app/FILTERS/range-filter/range-filter.component.html","./src/app/FILTERS/range-filter/range-filter.component.scss","./src/app/FILTERS/range-filter/range-filter.component.ts","./src/app/FILTERS/record-type-filter/record-type-filter.component.html","./src/app/FILTERS/record-type-filter/record-type-filter.component.scss","./src/app/FILTERS/record-type-filter/record-type-filter.component.ts","./src/app/FILTERS/sample-type-filter/sample-type-filter.component.html","./src/app/FILTERS/sample-type-filter/sample-type-filter.component.scss","./src/app/FILTERS/sample-type-filter/sample-type-filter.component.ts","./src/app/FILTERS/sampler-name-filter/sampler-name-filter.component.html","./src/app/FILTERS/sampler-name-filter/sampler-name-filter.component.scss","./src/app/FILTERS/sampler-name-filter/sampler-name-filter.component.ts","./src/app/FILTERS/study-filter/study-filter.component.html","./src/app/FILTERS/study-filter/study-filter.component.scss","./src/app/FILTERS/study-filter/study-filter.component.ts","./src/app/FILTERS/target-filter/target-filter.component.html","./src/app/FILTERS/target-filter/target-filter.component.scss","./src/app/FILTERS/target-filter/target-filter.component.ts","./src/app/SHARED/display-value.pipe.ts","./src/app/SHARED/filter-type.resolve.ts","./src/app/SHARED/filter-type.service.ts","./src/app/SHARED/matrix.resolve.ts","./src/app/SHARED/matrix.service.ts","./src/app/SHARED/record-type.service.ts","./src/app/SHARED/reverse-transcription.service.ts","./src/app/SHARED/sample-type.resolve.ts","./src/app/SHARED/sample-type.service.ts","./src/app/SHARED/server-test.service.ts","./src/app/SHARED/user.resolve.ts","./src/app/SHARED/user.service.ts","./src/app/admin/admin.component.html","./src/app/admin/admin.component.scss","./src/app/admin/admin.component.ts","./src/app/admin/concentration-types/concentration-types.component.html","./src/app/admin/concentration-types/concentration-types.component.scss","./src/app/admin/concentration-types/concentration-types.component.ts","./src/app/admin/extraction-methods/extraction-methods.component.html","./src/app/admin/extraction-methods/extraction-methods.component.scss","./src/app/admin/extraction-methods/extraction-methods.component.ts","./src/app/admin/filter-types/filter-types.component.html","./src/app/admin/filter-types/filter-types.component.scss","./src/app/admin/filter-types/filter-types.component.ts","./src/app/admin/matrix-types/matrix-types.component.html","./src/app/admin/matrix-types/matrix-types.component.scss","./src/app/admin/matrix-types/matrix-types.component.ts","./src/app/admin/sample-types/sample-types.component.html","./src/app/admin/sample-types/sample-types.component.scss","./src/app/admin/sample-types/sample-types.component.ts","./src/app/admin/targets/targets.component.html","./src/app/admin/targets/targets.component.scss","./src/app/admin/targets/targets.component.ts","./src/app/admin/units/units.component.html","./src/app/admin/units/units.component.scss","./src/app/admin/units/units.component.ts","./src/app/admin/users/users.component.html","./src/app/admin/users/users.component.scss","./src/app/admin/users/users.component.ts","./src/app/aliquots/aliquot.service.ts","./src/app/aliquots/freezer-locations.service.ts","./src/app/aliquots/freezer.service.ts","./src/app/analysis-batches/analysis-batch-detail/analysis-batch-detail.component.html","./src/app/analysis-batches/analysis-batch-detail/analysis-batch-detail.component.scss","./src/app/analysis-batches/analysis-batch-detail/analysis-batch-detail.component.ts","./src/app/analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component.html","./src/app/analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component.scss","./src/app/analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component.ts","./src/app/analysis-batches/analysis-batch.service.ts","./src/app/analysis-batches/analysis-batches.component.html","./src/app/analysis-batches/analysis-batches.component.scss","./src/app/analysis-batches/analysis-batches.component.ts","./src/app/app.component.html","./src/app/app.component.scss","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/app.routing.ts","./src/app/app.settings.ts","./src/app/app.utilities.ts","./src/app/authentication/authentication.component.html","./src/app/authentication/authentication.component.scss","./src/app/authentication/authentication.component.ts","./src/app/authentication/authentication.guard.ts","./src/app/authentication/authentication.service.ts","./src/app/authentication/current-user.service.ts","./src/app/concentration-types/concentration-types.resolve.ts","./src/app/concentration-types/concentration-types.service.ts","./src/app/data-upload/data-upload.component.html","./src/app/data-upload/data-upload.component.scss","./src/app/data-upload/data-upload.component.ts","./src/app/extraction-batches/extraction-batch.service.ts","./src/app/extraction-batches/extraction-method.resolve.ts","./src/app/extraction-batches/extraction-method.service.ts","./src/app/fcsv/final-concentrated-sample-volume.service.ts","./src/app/home/home.component.html","./src/app/home/home.component.scss","./src/app/home/home.component.ts","./src/app/index.ts","./src/app/inhibitions/inhibition.service.ts","./src/app/pcr-replicates/pcr-replicate-batch.service.ts","./src/app/pcr-replicates/pcr-replicate.service.ts","./src/app/reports/control-results-report.service.ts","./src/app/reports/quality-control-report.service.ts","./src/app/reports/report-file.service.ts","./src/app/reports/report-status.service.ts","./src/app/reports/report-types.service.ts","./src/app/reports/reports.component.html","./src/app/reports/reports.component.scss","./src/app/reports/reports.component.ts","./src/app/results/final-sample-mean-concentration.service.ts","./src/app/results/results.component.html","./src/app/results/results.component.scss","./src/app/results/results.component.ts","./src/app/samples/sample-label/sample-label.component.html","./src/app/samples/sample-label/sample-label.component.scss","./src/app/samples/sample-label/sample-label.component.ts","./src/app/samples/sample.service.ts","./src/app/samples/samples.component.html","./src/app/samples/samples.component.scss","./src/app/samples/samples.component.ts","./src/app/studies/studies.component.html","./src/app/studies/studies.component.scss","./src/app/studies/studies.component.ts","./src/app/studies/study.service.ts","./src/app/targets/target.resolve.ts","./src/app/targets/target.service.ts","./src/app/units/unit.resolve.ts","./src/app/units/unit.service.ts","./src/environments/environment.ts","./src/main.ts","./src/polyfills.ts"],"names":[],"mappings":"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,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,0CAA0C,OAAO,oDAAoD,2GAA2G,2CAA2C,OAAO,mDAAmD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,2GAA2G,2CAA2C,OAAO,mDAAmD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,2GAA2G,2CAA2C,OAAO,mDAAmD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,2GAA2G,2CAA2C,OAAO,mDAAmD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,2GAA2G,2CAA2C,OAAO,mDAAmD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,2GAA2G,2CAA2C,OAAO,mDAAmD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,2GAA2G,2CAA2C,OAAO,mDAAmD,uBAAuB,4CAA4C,OAAO,kDAAkD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,2GAA2G,2CAA2C,OAAO,mDAAmD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,2GAA2G,2CAA2C,OAAO,mDAAmD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,2GAA2G,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,2GAA2G,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,2GAA2G,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,2GAA2G,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,2GAA2G,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,2GAA2G,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,2GAA2G,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,uBAAuB,4CAA4C,OAAO,oDAAoD,iNAAiN,2SAA2S,4CAA4C,OAAO,oDAAoD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,qHAAqH,4CAA4C,OAAO,oDAAoD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,sHAAsH,4CAA4C,OAAO,oDAAoD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,sHAAsH,4CAA4C,OAAO,oDAAoD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,sHAAsH,4CAA4C,OAAO,oDAAoD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,sHAAsH,4CAA4C,OAAO,oDAAoD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,sHAAsH,4CAA4C,OAAO,oDAAoD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,sHAAsH,4CAA4C,OAAO,oDAAoD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,sHAAsH,4CAA4C,OAAO,oDAAoD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,uHAAuH,4CAA4C,OAAO,oDAAoD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,uHAAuH,4CAA4C,OAAO,oDAAoD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,uHAAuH,4CAA4C,OAAO,oDAAoD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,uHAAuH,4CAA4C,OAAO,oDAAoD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,uHAAuH,4CAA4C,OAAO,oDAAoD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,wHAAwH,4CAA4C,OAAO,oDAAoD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,wHAAwH,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,wHAAwH,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,yBAAyB,6CAA6C,OAAO,qDAAqD,sPAAsP,2NAA2N,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,8HAA8H,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,+HAA+H,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,gIAAgI,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,+HAA+H,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,+HAA+H,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,+HAA+H,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,kIAAkI,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,+HAA+H,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,gIAAgI,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,gIAAgI,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,iIAAiI,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,gIAAgI,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6C,OAAO,qDAAqD,2BAA2B,6CAA6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","file":"main.bundle.js","sourcesContent":["module.exports = {\"name\":\"lili\",\"version\":\"1.4.1\",\"description\":\"LIDE LIMS\",\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/USGS-WiM/lili.git\"},\"license\":\"Public Domain\",\"readme\":\"https://github.com/USGS-WiM/lili/blob/master/README.md\",\"angular-cli\":{},\"scripts\":{\"start\":\"ng serve\",\"lint\":\"tslint \\\"src/**/*.ts\\\"\",\"test\":\"ng test --single-run\",\"pree2e\":\"webdriver-manager update\",\"e2e\":\"protractor protractor.config.js\"},\"private\":true,\"dependencies\":{\"@angular/animations\":\"^4.4.6\",\"@angular/common\":\"^4.4.6\",\"@angular/compiler\":\"^4.4.6\",\"@angular/core\":\"^4.4.6\",\"@angular/forms\":\"^4.4.6\",\"@angular/http\":\"^4.4.6\",\"@angular/platform-browser\":\"^4.4.6\",\"@angular/platform-browser-dynamic\":\"^4.4.6\",\"@angular/router\":\"^4.4.6\",\"@webcomponents/custom-elements\":\"^1.0.8\",\"clarity-angular\":\"^0.10.25\",\"clarity-icons\":\"^0.10.25\",\"clarity-ui\":\"^0.10.25\",\"common-tags\":\"^1.7.2\",\"core-js\":\"^2.5.3\",\"font-awesome\":\"^4.7.0\",\"html2canvas\":\"^0.5.0-beta4\",\"jspdf\":\"^1.3.5\",\"jspdf-autotable\":\"^2.3.2\",\"mutationobserver-shim\":\"^0.3.2\",\"node-sass\":\"^4.13.1\",\"rxjs\":\"^5.5.6\",\"ts-helpers\":\"^1.1.1\",\"web-animations-js\":\"^2.2.1\",\"webpack\":\"^3.10.0\",\"zone.js\":\"^0.8.20\"},\"devDependencies\":{\"@angular/cli\":\"^1.6.8\",\"@angular/compiler-cli\":\"^4.4.6\",\"@types/core-js\":\"^0.9.46\",\"@types/html2canvas\":\"^0.5.35\",\"@types/jasmine\":\"^2.8.6\",\"@types/jspdf\":\"^1.1.31\",\"@types/node\":\"^8.9.1\",\"bootstrap\":\"4.0.0-beta\",\"codelyzer\":\"^3.2.2\",\"enhanced-resolve\":\"^3.0.0\",\"jasmine-core\":\"^2.99.1\",\"jasmine-spec-reporter\":\"^4.2.1\",\"karma\":\"^1.7.*\",\"karma-cli\":\"^1.0.*\",\"karma-jasmine\":\"^1.1.1\",\"karma-mocha-reporter\":\"^2.2.5\",\"karma-phantomjs-launcher\":\"^1.0.0\",\"karma-remap-istanbul\":\"^0.6.*\",\"protractor\":\"^5.3.0\",\"ts-node\":\"^3.3.0\",\"tslint\":\"^5.9.1\",\"typescript\":\"^2.3.4\",\"typings\":\"^2.1.1\",\"webdriver-manager\":\"^12.0.6\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./package.json\n// module id = ./package.json\n// module chunks = main","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_gendir lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/$$_gendir lazy\n// module id = ./src/$$_gendir lazy recursive\n// module chunks = main","module.exports = \"<label for=\\\"from\\\">From</label>\\r\\n<input id=\\\"from\\\" type=\\\"date\\\" style=\\\"width: 12em\\\" (change)=\\\"onFromChange($event.target.value)\\\">\\r\\n\\r\\n<label for=\\\"to\\\">To</label>\\r\\n<input id=\\\"to\\\" type=\\\"date\\\" style=\\\"width: 12em\\\" (change)=\\\"onToChange($event.target.value)\\\">\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/collection-end-date-filter/collection-end-date-filter.component.html\n// module id = ./src/app/FILTERS/collection-end-date-filter/collection-end-date-filter.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/collection-end-date-filter/collection-end-date-filter.component.scss\n// module id = ./src/app/FILTERS/collection-end-date-filter/collection-end-date-filter.component.scss\n// module chunks = main","import { Component, EventEmitter, OnInit, Input } from '@angular/core';\r\nimport {Filter, DatagridFilter} from \"clarity-angular\";\r\n\r\n@Component({\r\n  selector: 'collection-end-date-filter',\r\n  templateUrl: './collection-end-date-filter.component.html',\r\n  styleUrls: ['./collection-end-date-filter.component.scss']\r\n})\r\nexport class CollectionEndDateFilter implements OnInit, Filter <any> {\r\n  @Input() dateField: string;\r\n  private lower: string = \"\";\r\n  private upper: string = \"\";\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  changes: EventEmitter<any> = new EventEmitter<any>(false);\r\n  \r\n     accepts(sample: any){\r\n        return ((Date.parse(sample[this.dateField]) >= Date.parse(this.lower)) && (Date.parse(sample[this.dateField]) <= Date.parse(this.upper)));\r\n        //return true\r\n    }\r\n  \r\n    isActive():boolean {\r\n        return ((this.lower !== '' && this.upper !== '') ? true : false);\r\n        //return true;\r\n    }\r\n  \r\n    onFromChange(value: any){\r\n      if (value == ''){\r\n        this.lower = value\r\n        console.log(\"last 'from' date value was EMPTY\")\r\n        this.changes.emit(true);\r\n      } else {\r\n        this.lower = value\r\n        console.log(\"last from date value was:\" + this.lower)\r\n        this.changes.emit(true);\r\n      }\r\n    }\r\n  \r\n    onToChange(value: any){\r\n      if (value == '') {\r\n        this.lower = value\r\n        console.log(\"last 'to' date value was EMPTY\")\r\n        this.changes.emit(true);\r\n      } else {\r\n        this.upper = value\r\n        console.log(\"last to date value was:\" + this.upper)\r\n        this.changes.emit(true);\r\n      }\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/FILTERS/collection-end-date-filter/collection-end-date-filter.component.ts","module.exports = \"<label for=\\\"from\\\">From</label>\\r\\n<input id=\\\"from\\\" type=\\\"date\\\" style=\\\"width: 12em\\\" (change)=\\\"onFromChange($event.target.value)\\\">\\r\\n\\r\\n<label for=\\\"to\\\">To</label>\\r\\n<input id=\\\"to\\\" type=\\\"date\\\" style=\\\"width: 12em\\\" (change)=\\\"onToChange($event.target.value)\\\">\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/collection-start-date-filter/collection-start-date-filter.component.html\n// module id = ./src/app/FILTERS/collection-start-date-filter/collection-start-date-filter.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/collection-start-date-filter/collection-start-date-filter.component.scss\n// module id = ./src/app/FILTERS/collection-start-date-filter/collection-start-date-filter.component.scss\n// module chunks = main","import { Component, EventEmitter, OnInit, Input } from '@angular/core';\r\nimport {Filter, DatagridFilter} from \"clarity-angular\";\r\n\r\n@Component({\r\n  selector: 'collection-start-date-filter',\r\n  templateUrl: './collection-start-date-filter.component.html',\r\n  styleUrls: ['./collection-start-date-filter.component.scss']\r\n})\r\nexport class CollectionStartDateFilter implements OnInit, Filter<any> {\r\n  @Input() dateField: string;\r\n  private lower: string = \"\";\r\n  private upper: string = \"\";\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    \r\n  }\r\n\r\n   changes: EventEmitter<any> = new EventEmitter<any>(false);\r\n\r\n   accepts(sample: any){\r\n      return ((Date.parse(sample[this.dateField]) >= Date.parse(this.lower)) && (Date.parse(sample[this.dateField]) <= Date.parse(this.upper)));\r\n      //return true\r\n  }\r\n\r\n  isActive():boolean {\r\n      return ((this.lower !== '' && this.upper !== '') ? true : false);\r\n      //return true;\r\n  }\r\n\r\n  onFromChange(value: any){\r\n    if (value == ''){\r\n      this.lower = value\r\n      console.log(\"last 'from' date value was EMPTY\")\r\n      this.changes.emit(true);\r\n    } else {\r\n      this.lower = value\r\n      console.log(\"last from date value was:\" + this.lower)\r\n      this.changes.emit(true);\r\n    }\r\n  }\r\n\r\n  onToChange(value: any){\r\n    if (value == '') {\r\n      this.lower = value\r\n      console.log(\"last 'to' date value was EMPTY\")\r\n      this.changes.emit(true);\r\n    } else {\r\n      this.upper = value\r\n      console.log(\"last to date value was:\" + this.upper)\r\n      this.changes.emit(true);\r\n    }\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/FILTERS/collection-start-date-filter/collection-start-date-filter.component.ts","module.exports = \"<label for=\\\"from\\\">From</label>\\r\\n<input id=\\\"from\\\" type=\\\"date\\\" style=\\\"width: 12em\\\" (change)=\\\"onFromChange($event.target.value)\\\">\\r\\n\\r\\n<label for=\\\"to\\\">To</label>\\r\\n<input id=\\\"to\\\" type=\\\"date\\\" style=\\\"width: 12em\\\" (change)=\\\"onToChange($event.target.value)\\\">\\r\\n\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/date-added-filter/date-added-filter.component.html\n// module id = ./src/app/FILTERS/date-added-filter/date-added-filter.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/date-added-filter/date-added-filter.component.scss\n// module id = ./src/app/FILTERS/date-added-filter/date-added-filter.component.scss\n// module chunks = main","import { Component, EventEmitter, OnInit, Input } from '@angular/core';\r\nimport {Filter, DatagridFilter} from \"clarity-angular\";\r\n\r\n@Component({\r\n  selector: 'date-added-filter',\r\n  templateUrl: './date-added-filter.component.html',\r\n  styleUrls: ['./date-added-filter.component.scss']\r\n})\r\nexport class DateAddedFilter implements OnInit, Filter<any> {\r\n  @Input() dateField: string;\r\n  private lower: string = \"\";\r\n  private upper: string = \"\";\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  changes: EventEmitter<any> = new EventEmitter<any>(false);\r\n  \r\n     accepts(sample: any){\r\n        return ((Date.parse(sample[this.dateField]) >= Date.parse(this.lower)) && (Date.parse(sample[this.dateField]) <= Date.parse(this.upper)));\r\n        //return true\r\n    }\r\n  \r\n    isActive():boolean {\r\n        return ((this.lower !== '' && this.upper !== '') ? true : false);\r\n        //return true;\r\n    }\r\n  \r\n    onFromChange(value: any){\r\n      if (value == ''){\r\n        this.lower = value\r\n        console.log(\"last 'from' date value was EMPTY\")\r\n        this.changes.emit(true);\r\n      } else {\r\n        this.lower = value\r\n        console.log(\"last from date value was:\" + this.lower)\r\n        this.changes.emit(true);\r\n      }\r\n    }\r\n  \r\n    onToChange(value: any){\r\n      if (value == '') {\r\n        this.lower = value\r\n        console.log(\"last 'to' date value was EMPTY\")\r\n        this.changes.emit(true);\r\n      } else {\r\n        this.upper = value\r\n        console.log(\"last to date value was:\" + this.upper)\r\n        this.changes.emit(true);\r\n      }\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/FILTERS/date-added-filter/date-added-filter.component.ts","module.exports = \"<label for=\\\"from\\\">From</label>\\r\\n<input id=\\\"from\\\" type=\\\"date\\\" style=\\\"width: 12em\\\" (change)=\\\"onFromChange($event.target.value)\\\">\\r\\n\\r\\n<label for=\\\"to\\\">To</label>\\r\\n<input id=\\\"to\\\" type=\\\"date\\\" style=\\\"width: 12em\\\" (change)=\\\"onToChange($event.target.value)\\\">\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/date-updated-filter/date-updated-filter.component.html\n// module id = ./src/app/FILTERS/date-updated-filter/date-updated-filter.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/date-updated-filter/date-updated-filter.component.scss\n// module id = ./src/app/FILTERS/date-updated-filter/date-updated-filter.component.scss\n// module chunks = main","import { Component, EventEmitter, OnInit, Input } from '@angular/core';\r\nimport {Filter, DatagridFilter} from \"clarity-angular\";\r\n\r\n@Component({\r\n  selector: 'date-updated-filter',\r\n  templateUrl: './date-updated-filter.component.html',\r\n  styleUrls: ['./date-updated-filter.component.scss']\r\n})\r\nexport class DateUpdatedFilter implements OnInit {\r\n  @Input() dateField: string;\r\n  private lower: string = \"\";\r\n  private upper: string = \"\";\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  changes: EventEmitter<any> = new EventEmitter<any>(false);\r\n  \r\n     accepts(sample: any){\r\n        return ((Date.parse(sample[this.dateField]) >= Date.parse(this.lower)) && (Date.parse(sample[this.dateField]) <= Date.parse(this.upper)));\r\n        //return true\r\n    }\r\n  \r\n    isActive():boolean {\r\n        return ((this.lower !== '' && this.upper !== '') ? true : false);\r\n        //return true;\r\n    }\r\n  \r\n    onFromChange(value: any){\r\n      if (value == ''){\r\n        this.lower = value\r\n        console.log(\"last 'from' date value was EMPTY\")\r\n        this.changes.emit(true);\r\n      } else {\r\n        this.lower = value\r\n        console.log(\"last from date value was:\" + this.lower)\r\n        this.changes.emit(true);\r\n      }\r\n    }\r\n  \r\n    onToChange(value: any){\r\n      if (value == '') {\r\n        this.lower = value\r\n        console.log(\"last 'to' date value was EMPTY\")\r\n        this.changes.emit(true);\r\n      } else {\r\n        this.upper = value\r\n        console.log(\"last to date value was:\" + this.upper)\r\n        this.changes.emit(true);\r\n      }\r\n    }\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/FILTERS/date-updated-filter/date-updated-filter.component.ts","module.exports = \"<label for=\\\"from\\\">From</label>\\r\\n<input id=\\\"from\\\" type=\\\"date\\\" style=\\\"width: 12em\\\" (change)=\\\"onFromChange($event.target.value)\\\">\\r\\n\\r\\n<label for=\\\"to\\\">To</label>\\r\\n<input id=\\\"to\\\" type=\\\"date\\\" style=\\\"width: 12em\\\" (change)=\\\"onToChange($event.target.value)\\\">\\r\\n\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/filter-born-on-date-filter/filter-born-on-date-filter.component.html\n// module id = ./src/app/FILTERS/filter-born-on-date-filter/filter-born-on-date-filter.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/filter-born-on-date-filter/filter-born-on-date-filter.component.scss\n// module id = ./src/app/FILTERS/filter-born-on-date-filter/filter-born-on-date-filter.component.scss\n// module chunks = main","import { Component, EventEmitter, OnInit, Input } from '@angular/core';\r\nimport {Filter, DatagridFilter} from \"clarity-angular\";\r\n\r\n@Component({\r\n  selector: 'filter-born-on-date-filter',\r\n  templateUrl: './filter-born-on-date-filter.component.html',\r\n  styleUrls: ['./filter-born-on-date-filter.component.scss']\r\n})\r\nexport class FilterBornOnDateFilter implements OnInit, Filter<any> {\r\n  @Input() dateField: string;\r\n  private lower: string = \"\";\r\n  private upper: string = \"\";\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  changes: EventEmitter<any> = new EventEmitter<any>(false);\r\n  \r\n     accepts(sample: any){\r\n        return ((Date.parse(sample[this.dateField]) >= Date.parse(this.lower)) && (Date.parse(sample[this.dateField]) <= Date.parse(this.upper)));\r\n        //return true\r\n    }\r\n  \r\n    isActive():boolean {\r\n        return ((this.lower !== '' && this.upper !== '') ? true : false);\r\n        //return true;\r\n    }\r\n  \r\n    onFromChange(value: any){\r\n      if (value == ''){\r\n        this.lower = value\r\n        console.log(\"last 'from' date value was EMPTY\")\r\n        this.changes.emit(true);\r\n      } else {\r\n        this.lower = value\r\n        console.log(\"last from date value was:\" + this.lower)\r\n        this.changes.emit(true);\r\n      }\r\n    }\r\n  \r\n    onToChange(value: any){\r\n      if (value == '') {\r\n        this.lower = value\r\n        console.log(\"last 'to' date value was EMPTY\")\r\n        this.changes.emit(true);\r\n      } else {\r\n        this.upper = value\r\n        console.log(\"last to date value was:\" + this.upper)\r\n        this.changes.emit(true);\r\n      }\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/FILTERS/filter-born-on-date-filter/filter-born-on-date-filter.component.ts","module.exports = \"<div class=\\\"select\\\">\\r\\n    <select [(ngModel)]=\\\"selectedFilterType\\\" name=\\\"filter_type\\\" (ngModelChange)=\\\"onSelect($event)\\\">\\r\\n        <option value=\\\"-1\\\"><span class=\\\"all\\\">ALL SAMPLE TYPES</span></option>\\r\\n        <option *ngFor=\\\"let filterType of allFilterTypes\\\" [ngValue]=\\\"filterType.id\\\">{{filterType.name}}</option>\\r\\n    </select>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/filter-type-filter/filter-type-filter.component.html\n// module id = ./src/app/FILTERS/filter-type-filter/filter-type-filter.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/filter-type-filter/filter-type-filter.component.scss\n// module id = ./src/app/FILTERS/filter-type-filter/filter-type-filter.component.scss\n// module chunks = main","import { Component, EventEmitter, OnInit } from '@angular/core';\r\nimport { Filter, DatagridFilter } from \"clarity-angular\";\r\n\r\nimport { IFilterType } from '../../SHARED/filter-type'\r\nimport { FilterTypeService } from '../../SHARED/filter-type.service';\r\n\r\n@Component({\r\n  selector: 'filter-type-filter',\r\n  templateUrl: './filter-type-filter.component.html',\r\n  styleUrls: ['./filter-type-filter.component.scss']\r\n})\r\nexport class FilterTypeFilter implements OnInit, Filter<any> {\r\n  allFilterTypes: IFilterType[];\r\n  selectedFilterType: number;\r\n  private errorMessage: string;\r\n\r\n  constructor(private _filterTypeService: FilterTypeService) { }\r\n\r\n  ngOnInit(): void {\r\n    //on init, call getStudies function which subscribes to the StudyService, set results to the allFilterTypes var\r\n    this._filterTypeService.getFilterTypes()\r\n      .subscribe(filterTypes => this.allFilterTypes = filterTypes,\r\n        error => this.errorMessage = <any>error);\r\n  }\r\n\r\n  changes: EventEmitter<any> = new EventEmitter<any>(false);\r\n\r\n  accepts(sample: any) {\r\n    return (this.selectedFilterType === sample.filter_type);\r\n  }\r\n\r\n  isActive(): boolean {\r\n    return ((this.selectedFilterType > -1) ? true : false);\r\n  }\r\n\r\n  onSelect(value: any) {\r\n    console.log(\"Filter type has been selected\");\r\n    this.selectedFilterType = value;\r\n    this.changes.emit(true);\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/FILTERS/filter-type-filter/filter-type-filter.component.ts","module.exports = \"<div class=\\\"select\\\">\\r\\n    <select [(ngModel)]=\\\"selectedMatrix\\\" name=\\\"matrix\\\" (ngModelChange)=\\\"onSelect($event)\\\">\\r\\n        <option value=\\\"-1\\\"><span class=\\\"all\\\">ALL MATRICES</span></option>\\r\\n        <option *ngFor=\\\"let matrix of allMatrices\\\" [ngValue]=\\\"matrix.id\\\">{{matrix.name}}</option>\\r\\n    </select>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/matrix-type-filter/matrix-type-filter.component.html\n// module id = ./src/app/FILTERS/matrix-type-filter/matrix-type-filter.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/matrix-type-filter/matrix-type-filter.component.scss\n// module id = ./src/app/FILTERS/matrix-type-filter/matrix-type-filter.component.scss\n// module chunks = main","import { Component, EventEmitter, OnInit } from '@angular/core';\r\nimport { Filter, DatagridFilter } from \"clarity-angular\";\r\n\r\nimport { IMatrix } from '../../SHARED/matrix'\r\nimport { MatrixService } from '../../SHARED/matrix.service';\r\n\r\n@Component({\r\n  selector: 'matrix-type-filter',\r\n  templateUrl: './matrix-type-filter.component.html',\r\n  styleUrls: ['./matrix-type-filter.component.scss']\r\n})\r\nexport class MatrixTypeFilter implements OnInit, Filter<any> {\r\n  allMatrices: IMatrix[];\r\n  selectedMatrix: number;\r\n  errorMessage: string;\r\n  changes: EventEmitter<any> = new EventEmitter<any>(false);\r\n\r\n  constructor(private _matrixService: MatrixService) { }\r\n\r\n  ngOnInit(): void {\r\n    // on init, call getMatrices function which subscribes to the MatrixService, set results to the allMatrices var\r\n    this._matrixService.getMatrices()\r\n      .subscribe(matrices => this.allMatrices = matrices,\r\n        error => this.errorMessage = <any>error);\r\n  }\r\n\r\n  accepts(sample: any) {\r\n    return (this.selectedMatrix === sample.matrix);\r\n  }\r\n\r\n  isActive(): boolean {\r\n    return ((this.selectedMatrix > -1) ? true : false);\r\n  }\r\n\r\n  onSelect(value: any) {\r\n    this.selectedMatrix = value;\r\n    this.changes.emit(true);\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/FILTERS/matrix-type-filter/matrix-type-filter.component.ts","module.exports = \"<div class=\\\"select\\\">\\r\\n  <select [(ngModel)]=\\\"selectedStudies\\\" name=\\\"study\\\" (ngModelChange)=\\\"onSelect($event)\\\">\\r\\n    <option value=\\\"-1\\\">\\r\\n      <span class=\\\"all\\\">ALL STUDIES</span>\\r\\n    </option>\\r\\n    <option *ngFor=\\\"let study of allStudies\\\" [ngValue]=\\\"study.id\\\">{{study.name}}</option>\\r\\n  </select>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/multi-study-filter/multi-study-filter.component.html\n// module id = ./src/app/FILTERS/multi-study-filter/multi-study-filter.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/multi-study-filter/multi-study-filter.component.scss\n// module id = ./src/app/FILTERS/multi-study-filter/multi-study-filter.component.scss\n// module chunks = main","import { Component, EventEmitter, OnInit } from '@angular/core';\r\nimport { Filter, DatagridFilter } from \"clarity-angular\";\r\n\r\nimport { IStudy } from '../../studies/study'\r\nimport { StudyService } from '../../studies/study.service';\r\n\r\n@Component({\r\n  selector: 'multi-study-filter',\r\n  templateUrl: './multi-study-filter.component.html',\r\n  styleUrls: ['./multi-study-filter.component.scss']\r\n})\r\nexport class MultiStudyFilterComponent implements OnInit, Filter<any> {\r\n  allStudies: IStudy[];\r\n  selectedStudy: number;\r\n  selectedStudies;\r\n  private errorMessage: string;\r\n\r\n  changes: EventEmitter<any> = new EventEmitter<any>(false);\r\n\r\n  constructor(private _studyService: StudyService) { }\r\n\r\n  ngOnInit() {\r\n    // on init, call getStudies function which subscribes to the StudyService, set results to the allStudies var\r\n    this._studyService.getStudies()\r\n      .subscribe(studies => this.allStudies = studies,\r\n        error => this.errorMessage = <any>error);\r\n  }\r\n\r\n  accepts(sample: any) {\r\n\r\n    for (let study of sample.studies) {\r\n      if (study.id === this.selectedStudy) {\r\n        return true;\r\n      }\r\n    }\r\n    //return (this.selectedStudy === sample.studies);\r\n  }\r\n\r\n  isActive(): boolean {\r\n    return ((this.selectedStudy > -1) ? true : false);\r\n  }\r\n\r\n  onSelect(value: any) {\r\n    console.log(\"Study has been selected\");\r\n    this.selectedStudy = value;\r\n    this.changes.emit(true);\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/FILTERS/multi-study-filter/multi-study-filter.component.ts","module.exports = \"<label>ID Range</label><br>\\r\\n<label style=\\\"width: 8em\\\">From </label><input type=\\\"number\\\" min=\\\"0\\\" id=\\\"lower\\\" style=\\\"width: 4em\\\" (change)=\\\"onLowerChange($event.target.value)\\\"><br>\\r\\n<label style=\\\"width: 8em\\\">To </label><input type=\\\"number\\\" min=\\\"0\\\"  id=\\\"upper\\\" style=\\\"width: 4em\\\" (change)=\\\"onUpperChange($event.target.value)\\\">\\r\\n    \"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/range-filter/range-filter.component.html\n// module id = ./src/app/FILTERS/range-filter/range-filter.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/range-filter/range-filter.component.scss\n// module id = ./src/app/FILTERS/range-filter/range-filter.component.scss\n// module chunks = main","import { Component, EventEmitter, OnInit } from '@angular/core';\r\nimport {Filter, DatagridFilter} from \"clarity-angular\";\r\n\r\n@Component({\r\n  selector: 'range-filter',\r\n  templateUrl: './range-filter.component.html',\r\n  styleUrls: ['./range-filter.component.scss']\r\n})\r\nexport class RangeFilter implements OnInit, Filter<any> {\r\n  private lower: number = -1;\r\n  private upper: number = -1;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  changes: EventEmitter<any> = new EventEmitter<any>(false);\r\n  \r\n  accepts(sample: any){\r\n      return ((sample.id >= Number(this.lower)) && (sample.id<= Number(this.upper)));\r\n      //return true\r\n  }\r\n\r\n  isActive():boolean {\r\n      return ((this.lower > -1 && this.upper > -1) ? true : false);\r\n      //return true;\r\n  }\r\n\r\n  //capture the value from the onchange, set it equal to a variable, compare within the accepts() function\r\n  onLowerChange(value: any){\r\n    if (value == '') {\r\n      this.lower = -1\r\n      console.log(\"last lower range value was EMPTY \");\r\n      this.changes.emit(true);\r\n    }\r\n    else {\r\n      this.lower = value\r\n      console.log(\"last lower range value was:\" + this.upper)\r\n      this.changes.emit(true);\r\n    }\r\n  }\r\n  onUpperChange(value: any){\r\n    if (value == '') {\r\n      this.upper = -1\r\n      console.log(\"last upper range value was EMPTY \");\r\n      this.changes.emit(true);\r\n    }\r\n    else {\r\n      this.upper = value\r\n      console.log(\"last upper range value was:\" + this.upper)\r\n      this.changes.emit(true);\r\n    }\r\n \r\n  }\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/FILTERS/range-filter/range-filter.component.ts","module.exports = \"<div class=\\\"select\\\">\\r\\n  <select [(ngModel)]=\\\"selectedRecordType\\\" name=\\\"recordType\\\" (ngModelChange)=\\\"onSelect($event)\\\">\\r\\n    <option value=\\\"-1\\\"><span class=\\\"all\\\">ALL RECORD TYPES</span></option>\\r\\n    <option *ngFor=\\\"let recordType of allRecordTypes\\\" [ngValue]=\\\"recordType.id\\\">{{recordType.name}}</option>\\r\\n  </select>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/record-type-filter/record-type-filter.component.html\n// module id = ./src/app/FILTERS/record-type-filter/record-type-filter.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/record-type-filter/record-type-filter.component.scss\n// module id = ./src/app/FILTERS/record-type-filter/record-type-filter.component.scss\n// module chunks = main","import { Component, EventEmitter, OnInit } from '@angular/core';\r\nimport { Filter, DatagridFilter } from \"clarity-angular\";\r\n\r\nimport { IRecordType } from '../../SHARED/record-type'\r\nimport { RecordTypeService } from '../../SHARED/record-type.service';\r\n\r\n\r\n@Component({\r\n  selector: 'record-type-filter',\r\n  templateUrl: './record-type-filter.component.html',\r\n  styleUrls: ['./record-type-filter.component.scss']\r\n})\r\nexport class RecordTypeFilter implements OnInit, Filter<any> {\r\n  allRecordTypes: IRecordType[];\r\n  selectedRecordType: number;\r\n  errorMessage: string;\r\n  changes: EventEmitter<any> = new EventEmitter<any>(false);\r\n\r\n  constructor(private _recordTypeService: RecordTypeService) { }\r\n\r\n  ngOnInit(): void {\r\n    this._recordTypeService.getRecordTypes()\r\n      .subscribe(recordTypes => this.allRecordTypes = recordTypes,\r\n        error => this.errorMessage = <any>error);\r\n  }\r\n\r\n  accepts(sample: any) {\r\n    return (this.selectedRecordType === sample.record_type);\r\n  }\r\n\r\n  isActive(): boolean {\r\n    return ((this.selectedRecordType > -1) ? true : false);\r\n  }\r\n\r\n  onSelect(value: any) {\r\n    this.selectedRecordType = value;\r\n    this.changes.emit(true);\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/FILTERS/record-type-filter/record-type-filter.component.ts","module.exports = \"<div class=\\\"select\\\">\\r\\n    <select [(ngModel)]=\\\"selectedSampleType\\\" name=\\\"sample_type\\\" (ngModelChange)=\\\"onSelect($event)\\\">\\r\\n        <option value=\\\"-1\\\"><span class=\\\"all\\\">ALL SAMPLE TYPES</span></option>\\r\\n        <option *ngFor=\\\"let sampleType of allSampleTypes\\\" [ngValue]=\\\"sampleType.id\\\">{{sampleType.code}}</option>\\r\\n    </select>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/sample-type-filter/sample-type-filter.component.html\n// module id = ./src/app/FILTERS/sample-type-filter/sample-type-filter.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/sample-type-filter/sample-type-filter.component.scss\n// module id = ./src/app/FILTERS/sample-type-filter/sample-type-filter.component.scss\n// module chunks = main","import { Component, EventEmitter, OnInit } from '@angular/core';\r\nimport {Filter, DatagridFilter} from \"clarity-angular\";\r\n\r\nimport {ISampleType} from '../../SHARED/sample-type'\r\nimport { SampleTypeService } from '../../SHARED/sample-type.service';\r\n\r\n@Component({\r\n  selector: 'sample-type-filter',\r\n  templateUrl: './sample-type-filter.component.html',\r\n  styleUrls: ['./sample-type-filter.component.scss']\r\n})\r\nexport class SampleTypeFilter implements OnInit, Filter<any> {\r\n  allSampleTypes: ISampleType[];\r\n  selectedSampleType: number;\r\n  errorMessage: string;\r\n\r\n  constructor(private _sampleTypeService: SampleTypeService) { }\r\n\r\n  ngOnInit(): void {\r\n        //on init, call getStudies function which subscribes to the StudyService, set results to the allSampleTypes var\r\n        this._sampleTypeService.getSampleTypes()\r\n            .subscribe(sampleTypes => this.allSampleTypes = sampleTypes,\r\n                error => this.errorMessage = < any > error);\r\n    }\r\n\r\n  changes: EventEmitter<any> = new EventEmitter<any>(false);\r\n  \r\n  accepts(sample: any){\r\n      return (this.selectedSampleType === sample.sample_type);\r\n  }\r\n\r\n  isActive():boolean {\r\n      return ((this.selectedSampleType > -1) ? true : false);\r\n  }\r\n\r\n  onSelect(value: any){\r\n    console.log(\"Sample type has been selected\");\r\n    this.selectedSampleType = value;\r\n    this.changes.emit(true);\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/FILTERS/sample-type-filter/sample-type-filter.component.ts","module.exports = \"<div class=\\\"select\\\">\\r\\n    <select [(ngModel)]=\\\"selectedUsers\\\" name=\\\"sampler_name\\\" (ngModelChange)=\\\"onSelect($event)\\\">\\r\\n        <option value=\\\"-1\\\"><span class=\\\"all\\\">ALL USERS</span></option>\\r\\n        <option *ngFor=\\\"let user of allUsers\\\" [ngValue]=\\\"user.id\\\">{{user.username}}</option>\\r\\n    </select>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/sampler-name-filter/sampler-name-filter.component.html\n// module id = ./src/app/FILTERS/sampler-name-filter/sampler-name-filter.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/sampler-name-filter/sampler-name-filter.component.scss\n// module id = ./src/app/FILTERS/sampler-name-filter/sampler-name-filter.component.scss\n// module chunks = main","import { Component, EventEmitter, OnInit } from '@angular/core';\r\nimport {Filter, DatagridFilter} from \"clarity-angular\";\r\n\r\nimport {IUser} from '../../SHARED/user'\r\nimport { UserService } from '../../SHARED/user.service';\r\n\r\n@Component({\r\n  selector: 'sampler-name-filter',\r\n  templateUrl: './sampler-name-filter.component.html',\r\n  styleUrls: ['./sampler-name-filter.component.scss']\r\n})\r\nexport class SamplerNameFilter implements OnInit, Filter<any> {\r\n  allUsers: IUser[];\r\n  selectedUser: number;\r\n  private errorMessage: string;\r\n\r\n  selectedUsers;\r\n\r\n  constructor(private _userService: UserService) { }\r\n\r\n  ngOnInit(): void {\r\n        //on init, call getUsers function which subscribes to the UserService, set results to the allUsers var\r\n        this._userService.getUsers()\r\n            .subscribe(users => this.allUsers = users,\r\n                error => this.errorMessage = < any > error);\r\n    }\r\n\r\n  changes: EventEmitter<any> = new EventEmitter<any>(false);\r\n  \r\n  accepts(sample: any){\r\n      return (this.selectedUser === sample.sampler_name.id);\r\n  }\r\n\r\n  isActive():boolean {\r\n      return ((this.selectedUser > -1) ? true : false);\r\n  }\r\n\r\n  onSelect(value: any){\r\n    console.log(\"Sample type has been selected\");\r\n    this.selectedUser = value;\r\n    this.changes.emit(true); \r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/FILTERS/sampler-name-filter/sampler-name-filter.component.ts","module.exports = \"<div class=\\\"select\\\">\\r\\n    <select [(ngModel)]=\\\"selectedStudy\\\" name=\\\"study\\\" (ngModelChange)=\\\"onSelect($event)\\\">\\r\\n        <option value=\\\"-1\\\">\\r\\n            <span class=\\\"all\\\">ALL STUDIES</span>\\r\\n        </option>\\r\\n        <option *ngFor=\\\"let study of allStudies\\\" [ngValue]=\\\"study.id\\\">{{study.name}}</option>\\r\\n    </select>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/study-filter/study-filter.component.html\n// module id = ./src/app/FILTERS/study-filter/study-filter.component.html\n// module chunks = main","module.exports = \".all {\\n  font-weight: bold; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/study-filter/study-filter.component.scss\n// module id = ./src/app/FILTERS/study-filter/study-filter.component.scss\n// module chunks = main","import { Component, EventEmitter, OnInit } from '@angular/core';\r\nimport { Filter, DatagridFilter } from \"clarity-angular\";\r\n\r\nimport { IStudy } from '../../studies/study'\r\nimport { StudyService } from '../../studies/study.service';\r\n\r\n@Component({\r\n  selector: 'study-filter',\r\n  templateUrl: './study-filter.component.html',\r\n  styleUrls: ['./study-filter.component.scss']\r\n})\r\nexport class StudyFilter implements OnInit, Filter<any> {\r\n  allStudies: IStudy[];\r\n  selectedStudy: number;\r\n  private errorMessage: string;\r\n\r\n  changes: EventEmitter<any> = new EventEmitter<any>(false);\r\n\r\n  constructor(private _studyService: StudyService) { }\r\n\r\n  ngOnInit(): void {\r\n    // on init, call getStudies function which subscribes to the StudyService, set results to the allStudies var\r\n    this._studyService.getStudies()\r\n      .subscribe(studies => this.allStudies = studies,\r\n        error => this.errorMessage = <any>error);\r\n  }\r\n\r\n\r\n\r\n  accepts(sample: any) {\r\n    return (this.selectedStudy === sample.study);\r\n  }\r\n\r\n  isActive(): boolean {\r\n    return ((this.selectedStudy > -1) ? true : false);\r\n  }\r\n\r\n  onSelect(value: any) {\r\n    this.selectedStudy = value;\r\n    this.changes.emit(true);\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/FILTERS/study-filter/study-filter.component.ts","module.exports = \"<div class=\\\"select\\\">\\r\\n  <select [(ngModel)]=\\\"selectedTarget\\\" name=\\\"target\\\" (ngModelChange)=\\\"onSelect($event)\\\">\\r\\n    <option value=\\\"-1\\\">\\r\\n      <span class=\\\"all\\\">ALL TARGETS</span>\\r\\n    </option>\\r\\n    <option *ngFor=\\\"let target of allTargets\\\" [ngValue]=\\\"target.id\\\">{{target.name}}</option>\\r\\n  </select>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/target-filter/target-filter.component.html\n// module id = ./src/app/FILTERS/target-filter/target-filter.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/FILTERS/target-filter/target-filter.component.scss\n// module id = ./src/app/FILTERS/target-filter/target-filter.component.scss\n// module chunks = main","import { Component, EventEmitter, OnInit } from '@angular/core';\r\nimport { Filter, DatagridFilter } from \"clarity-angular\";\r\n\r\nimport { ITarget } from '../../targets/target';\r\nimport { TargetService } from '../../targets/target.service';\r\n\r\n@Component({\r\n  selector: 'target-filter',\r\n  templateUrl: './target-filter.component.html',\r\n  styleUrls: ['./target-filter.component.scss']\r\n})\r\nexport class TargetFilter implements OnInit {\r\n\r\n  allTargets: ITarget[];\r\n  selectedTarget: number;\r\n  errorMessage: string;\r\n\r\n  constructor(private _targetService: TargetService) { }\r\n\r\n  ngOnInit() {\r\n\r\n    //on init, call getTargets function which subscribes to the TargetService, set results to the allTargets var\r\n    this._targetService.getTargets()\r\n      .subscribe(\r\n        (targets) => {\r\n          this.allTargets = targets;\r\n          this.allTargets.sort(function (a, b) {\r\n            if (a.name < b.name) { return -1 };\r\n            if (a.name > b.name) { return 1 };\r\n            return 0;\r\n          });\r\n        },\r\n        error => { this.errorMessage = <any>error });\r\n\r\n  }\r\n  changes: EventEmitter<any> = new EventEmitter<any>(false);\r\n\r\n  accepts(fsmc: any) {\r\n    return (this.selectedTarget === fsmc.target);\r\n  }\r\n\r\n  isActive(): boolean {\r\n    return ((this.selectedTarget > -1) ? true : false);\r\n  }\r\n\r\n  onSelect(value: any) {\r\n    this.selectedTarget = value;\r\n    this.changes.emit(true);\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/FILTERS/target-filter/target-filter.component.ts","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/*\r\n * Retrieve display value for a field\r\n * Accepts the field name and the field id\r\n * returns the appropriate display value for UI display\r\n * Usage:\r\n *  value | displayValue:sourceArray\r\n * Example:\r\n *  {{sample.sample_type | displayValue:'name':this.sampleTypes}}\r\n * formats to: \"Performance Evaluation\"\r\n */\r\n\r\n@Pipe({\r\n  name: 'displayValue'\r\n})\r\nexport class DisplayValuePipe implements PipeTransform {\r\n\r\n  transform(value: any, displayProperty: string, sourceArray: Array<any>): any {\r\n\r\n    let displayValue;\r\n    for (var i = 0; i < sourceArray.length; i++) {\r\n        if (sourceArray[i].id === parseInt(value, 10)) {\r\n          displayValue = sourceArray[i][displayProperty];\r\n        }  \r\n    }\r\n    return displayValue;\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/SHARED/display-value.pipe.ts","import { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { IFilterType } from '../SHARED/filter-type';\r\nimport { FilterTypeService } from '../SHARED/filter-type.service';\r\n\r\n@Injectable()\r\nexport class FilterResolve implements Resolve<Array<IFilterType>> {\r\n\r\n  constructor(private _filterService: FilterTypeService) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot): Observable<Array<IFilterType>> {\r\n     return this._filterService.getFilterTypes();\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/SHARED/filter-type.resolve.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings'\r\n\r\nimport { IFilterType } from './filter-type'\r\n\r\n@Injectable()\r\nexport class FilterTypeService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  getFilterTypes(): Observable<IFilterType[]> {\r\n\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.get(APP_SETTINGS.FILTER_TYPES_URL, options)\r\n      .map((response: Response) => <IFilterType[]>response.json())\r\n      //.do(data => console.log('Sample types data: ' + JSON.stringify(data)))\r\n      .catch(this.handleError);\r\n  }\r\n    \r\n  public create(formValue: IFilterType): Observable<IFilterType> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.AUTH_JSON_HEADERS });\r\n\r\n    return this._http.post(APP_SETTINGS.FILTER_TYPES_URL, formValue, options)\r\n      .map((response: Response) => <IFilterType>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public update(formValue: IFilterType): Observable<IFilterType> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.put(APP_SETTINGS.FILTER_TYPES_URL + formValue.id + '/', formValue, options)\r\n      .map((response: Response) => <IFilterType>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public delete(id: number): Observable<IFilterType> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS});\r\n\r\n    return this._http.delete(APP_SETTINGS.FILTER_TYPES_URL + id, options)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  private handleError (error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/SHARED/filter-type.service.ts","import { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { IMatrix } from 'app/SHARED/matrix';\r\nimport { MatrixService } from 'app/SHARED/matrix.service';\r\n\r\n@Injectable()\r\nexport class MatrixResolve implements Resolve<Array<IMatrix>> {\r\n\r\n  constructor(private _matrixService: MatrixService) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot): Observable<Array<IMatrix>> {\r\n     return this._matrixService.getMatrices();\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/SHARED/matrix.resolve.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings'\r\n\r\nimport { IMatrix } from './matrix'\r\n\r\n@Injectable()\r\nexport class MatrixService {\r\n  private _matricesUrl = 'https://raw.githubusercontent.com/USGS-WiM/lide-lims/master/src/app/demo-services/matrix.json'\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  getMatrices(): Observable<IMatrix[]> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.get(APP_SETTINGS.MATRICES_URL, options)\r\n      // return this._http.get(this._matricesUrl)\r\n      .map((response: Response) => <IMatrix[]>response.json())\r\n      // .do(data => console.log('Matricies data: ' + JSON.stringify(data)))\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public create(formValue: IMatrix): Observable<IMatrix> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.AUTH_JSON_HEADERS });\r\n\r\n    return this._http.post(APP_SETTINGS.MATRICES_URL, formValue, options)\r\n      .map((response: Response) => <IMatrix>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public update(formValue: IMatrix): Observable<IMatrix> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.put(APP_SETTINGS.MATRICES_URL + formValue.id + '/', formValue, options)\r\n      .map((response: Response) => <IMatrix>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public delete(id: number): Observable<IMatrix> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.delete(APP_SETTINGS.MATRICES_URL + id, options)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/SHARED/matrix.service.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings'\r\n\r\nimport { IRecordType } from '../SHARED/record-type';\r\n\r\n@Injectable()\r\nexport class RecordTypeService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  getRecordTypes(): Observable<IRecordType[]> {\r\n\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.get(APP_SETTINGS.RECORD_TYPES_URL, options)\r\n      .map((response: Response) => <IRecordType[]>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/SHARED/record-type.service.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\nimport { IReverseTranscription } from '../reverse-transcriptions/reverse-transcription';\r\n\r\nimport { APP_SETTINGS } from '../app.settings'\r\n\r\n@Injectable()\r\nexport class ReverseTranscriptionService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  public update(formValue: IReverseTranscription): Observable<IReverseTranscription> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.patch(APP_SETTINGS.RT_URL + formValue.id + '/', formValue, options)\r\n      .map((response: Response) => <IReverseTranscription>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public delete(id: number): Observable<IReverseTranscription> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.delete(APP_SETTINGS.RT_URL + id, options)\r\n      .catch(this.handleError);\r\n  }\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/SHARED/reverse-transcription.service.ts","import { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { ISampleType } from '../SHARED/sample-type';\r\nimport { SampleTypeService } from '../SHARED/sample-type.service';\r\n\r\n@Injectable()\r\nexport class SampleTypeResolve implements Resolve<Array<ISampleType>> {\r\n\r\n  constructor(private _filterService: SampleTypeService) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot): Observable<Array<ISampleType>> {\r\n     return this._filterService.getSampleTypes();\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/SHARED/sample-type.resolve.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings'\r\n\r\nimport { ISampleType } from './sample-type';\r\n\r\n@Injectable()\r\nexport class SampleTypeService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  getSampleTypes(): Observable<ISampleType[]> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.get(APP_SETTINGS.SAMP_TYPES_URL, options)\r\n      // return this._http.get(this._sampleTypeUrl)\r\n      .map((response: Response) => <ISampleType[]>response.json())\r\n      // .do(data => console.log('Sample types data: ' + JSON.stringify(data)))\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  \r\n  public create(formValue: ISampleType): Observable<ISampleType> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.AUTH_JSON_HEADERS });\r\n\r\n    return this._http.post(APP_SETTINGS.SAMP_TYPES_URL, formValue, options)\r\n      .map((response: Response) => <ISampleType>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public update(formValue: ISampleType): Observable<ISampleType> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.put(APP_SETTINGS.SAMP_TYPES_URL + formValue.id + '/', formValue, options)\r\n      .map((response: Response) => <ISampleType>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public delete(id: number): Observable<ISampleType> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS});\r\n\r\n    return this._http.delete(APP_SETTINGS.SAMP_TYPES_URL + id, options)\r\n      .catch(this.handleError);\r\n  }\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/SHARED/sample-type.service.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\r\nimport { catchError, retry } from 'rxjs/operators';\r\n\r\nimport { APP_SETTINGS } from '../app.settings'\r\n\r\n@Injectable()\r\nexport class ServerTestService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  testLIDEServices(): Observable<any> {\r\n\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.ADMIN_MIN_AUTH_JSON_HEADERS});\r\n\r\n    return this._http.get(APP_SETTINGS.ROOT_URL, options)\r\n      // return this._http.get(this._matricesUrl)\r\n      .map((response: Response) => <any>response.json())\r\n      // .do(data => console.log('Matricies data: ' + JSON.stringify(data)))\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` +\r\n        `body was: ${error.error}`);\r\n    }\r\n    // return an ErrorObservable with a user-facing error message\r\n    return new ErrorObservable(\r\n      'Something bad happened; please try again later.');\r\n  };\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/SHARED/server-test.service.ts","import { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { IUser } from '../SHARED/user';\r\nimport { UserService } from '../SHARED/user.service';\r\n\r\n@Injectable()\r\nexport class UserResolve implements Resolve<Array<IUser>> {\r\n\r\n  constructor(private _userService: UserService) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot): Observable<Array<IUser>> {\r\n     return this._userService.getUsers();\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/SHARED/user.resolve.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings'\r\n\r\nimport { IUser } from './user';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  getUsers(): Observable<IUser[]> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.get(APP_SETTINGS.USERS_URL, options)\r\n      .map((response: Response) => <IUser[]>response.json())\r\n      // .do(data => console.log('Users data: ' + JSON.stringify(data)))\r\n      .catch(this.handleError);\r\n  }\r\n\r\n\r\n  public create(formValue: IUser): Observable<IUser> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.AUTH_JSON_HEADERS });\r\n\r\n    return this._http.post(APP_SETTINGS.USERS_URL, formValue, options)\r\n      .map((response: Response) => <IUser>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public update(formValue: IUser): Observable<IUser> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.put(APP_SETTINGS.USERS_URL + formValue.id + '/', formValue, options)\r\n      .map((response: Response) => <IUser>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public delete(id: number): Observable<IUser> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.delete(APP_SETTINGS.USERS_URL + id, options)\r\n      .catch(this.handleError);\r\n  }\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/SHARED/user.service.ts","module.exports = \"<div class=\\\"masonry-layout-2\\\">\\r\\n    <div class=\\\"masonry-block\\\">\\r\\n        <concentrationtypes [ConcentrationTypes]=\\\"ctypes\\\"></concentrationtypes>\\r\\n    </div>\\r\\n    <div class=\\\"masonry-block\\\">\\r\\n        <units [Units]=\\\"units\\\"></units>\\r\\n    </div>\\r\\n\\r\\n\\r\\n    <div class=\\\"masonry-block\\\">\\r\\n        <extractionmethods [ExtractionMethods]=\\\"extractionMethods\\\"></extractionmethods>\\r\\n    </div>\\r\\n    <div class=\\\"masonry-block\\\">\\r\\n        <filtertypes [FilterTypes]=\\\"filters\\\" [Matrices]=\\\"matrices\\\"></filtertypes>\\r\\n    </div>\\r\\n\\r\\n\\r\\n    <div class=\\\"masonry-block\\\">\\r\\n        <matrices [MatrixTypes]=\\\"matrices\\\"></matrices>\\r\\n    </div>\\r\\n    <div class=\\\"masonry-block\\\">\\r\\n        <sampletypes [SampleTypes]=\\\"stypes\\\"></sampletypes>\\r\\n    </div>\\r\\n\\r\\n\\r\\n    <div class=\\\"masonry-block\\\">\\r\\n        <targets [Targets]=\\\"targets\\\"></targets>\\r\\n    </div>\\r\\n    <div class=\\\"masonry-block\\\">\\r\\n        <users [Users]=\\\"users\\\"></users>\\r\\n    </div>\\r\\n</div>\\r\\n<!--\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-6 col-md-6 col-xs-12\\\">\\r\\n        <users [Users]=\\\"users\\\"></users>\\r\\n    </div>\\r\\n</div>-->\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/admin.component.html\n// module id = ./src/app/admin/admin.component.html\n// module chunks = main","module.exports = \"/*Masonry layout - admin page - 2 columns*/\\n.masonry-layout-2 {\\n  -webkit-column-count: 2;\\n          column-count: 2;\\n  -webkit-box-sizing: border-box;\\n          box-sizing: border-box;\\n  padding: 0 0 80px 0; }\\n@media (max-width: 1200px) {\\n    .masonry-layout-2 {\\n      -webkit-column-count: 1;\\n              column-count: 1; } }\\n.masonry-layout-2 .masonry-block .card {\\n    height: 420px !important; }\\n.masonry-layout-2 .masonry-block .col-lg-12,\\n  .masonry-layout-2 .masonry-block .col-md-12,\\n  .masonry-layout-2 .masonry-block .col-sm-12,\\n  .masonry-layout-2 .masonry-block .col-xs-12,\\n  .masonry-layout-2 .masonry-block .col-lg-6,\\n  .masonry-layout-2 .masonry-block .col-md-6,\\n  .masonry-layout-2 .masonry-block .col-sm-6,\\n  .masonry-layout-2 .masonry-block .col-xs-6 {\\n    padding: 0 !important; }\\n.datagrid-action-bar,\\nclr-dg-action-bar {\\n  -ms-flex-wrap: wrap !important;\\n      flex-wrap: wrap !important; }\\n.btn-group {\\n  padding-top: 5px !important;\\n  padding-bottom: 5px !important; }\\n@media (max-width: 800px) {\\n  .content-area {\\n    padding: 15px !important; } }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/admin.component.scss\n// module id = ./src/app/admin/admin.component.scss\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\nimport { IConcentrationType } from '../concentration-types/concentration-type';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { IUnit } from '../units/unit';\r\nimport { IExtractionMethod } from '../extraction-batches/extraction-method';\r\nimport { IFilterType } from '../SHARED/filter-type';\r\nimport { IMatrix } from '../SHARED/matrix';\r\nimport { ISampleType } from '../SHARED/sample-type';\r\nimport { ITarget } from '../targets/target';\r\nimport { IUser } from '../SHARED/user';\r\n\r\n@Component({\r\n  selector: 'app-admin',\r\n  templateUrl: './admin.component.html',\r\n  styleUrls: ['./admin.component.scss']\r\n})\r\nexport class AdminComponent implements OnInit {\r\n  public ctypes: Array<IConcentrationType>;\r\n  public units: Array<IUnit>;\r\n  public extractionMethods: Array<IExtractionMethod>;\r\n  public filters: Array<IFilterType>;\r\n  public matrices: Array<IMatrix>;\r\n  public stypes: Array<ISampleType>;\r\n  public targets: Array<ITarget>;\r\n  public users: Array<IUser>;\r\n\r\n  constructor(private _route: ActivatedRoute) { }\r\n\r\n  ngOnInit() {\r\n    this._route.data.subscribe((data: { concentrationTypes: Array<IConcentrationType> }) => {\r\n      this.ctypes = data.concentrationTypes;\r\n    });\r\n    this._route.data.subscribe((data: { units: Array<IUnit> }) => {\r\n      this.units = data.units;\r\n    });\r\n    this._route.data.subscribe((data: { extractionMethods: Array<IExtractionMethod> }) => {\r\n      this.extractionMethods = data.extractionMethods;\r\n    });\r\n    this._route.data.subscribe((data: { filterTypes: Array<IFilterType> }) => {\r\n      this.filters = data.filterTypes;\r\n    });\r\n\r\n    this._route.data.subscribe((data: { matrixTypes: Array<IMatrix> }) => {\r\n      this.matrices = data.matrixTypes;\r\n    });\r\n\r\n    this._route.data.subscribe((data: { sampleTypes: Array<IMatrix> }) => {\r\n      this.stypes = data.sampleTypes;\r\n    });\r\n\r\n    this._route.data.subscribe((data: { targets: Array<ITarget> }) => {\r\n      this.targets = data.targets;\r\n    });\r\n    this._route.data.subscribe((data: { users: Array<IUser> }) => {\r\n      this.users = data.users;\r\n    });\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/admin/admin.component.ts","module.exports = \"<!-- concentration type table -->\\r\\n<div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n\\t<div class=\\\"card\\\">\\r\\n\\t\\t<div class=\\\"card-block\\\">\\r\\n\\t\\t\\t<div class=\\\"card-title\\\">Concentration Types</div>\\r\\n\\t\\t\\t<div class=\\\"card-text\\\">\\r\\n\\t\\t\\t\\t<!-- add concentration card -->\\r\\n\\t\\t\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\" *ngIf=\\\"showHideAdd\\\">\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"card\\\">\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t\\t\\t<clr-datagrid [(clrDgSingleSelected)]=\\\"selectedConcentration\\\">\\r\\n\\t\\t\\t\\t\\t<!-- add, edit and delete concentration buttons -->\\r\\n\\t\\t\\t\\t\\t<clr-dg-action-bar>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"btn-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<button class=\\\"btn btn-sm\\\" (click)=\\\"showAddModal()\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<clr-icon shape=\\\"plus\\\"></clr-icon> Add</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedConcentration\\\" (click)=\\\"editCT(selectedConcentration)\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedConcentration\\\" (click)=\\\"deleteCT(selectedConcentration)\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon> Delete</button>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</clr-dg-action-bar>\\r\\n\\r\\n\\t\\t\\t\\t\\t<!-- table of all concentrations -->\\r\\n\\t\\t\\t\\t\\t<clr-dg-column [clrDgField]=\\\"'id'\\\">\\r\\n\\t\\t\\t\\t\\t\\t<ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tConcentration Type ID\\r\\n\\t\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t</clr-dg-column>\\r\\n\\r\\n\\t\\t\\t\\t\\t<clr-dg-column [clrDgField]=\\\"'name'\\\">\\r\\n\\t\\t\\t\\t\\t\\t<ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tConcentration Type Name\\r\\n\\t\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t</clr-dg-column>\\r\\n\\r\\n\\t\\t\\t\\t\\t<clr-dg-row *clrDgItems=\\\"let ct of ConcentrationTypes\\\" [clrDgItem]=\\\"ct\\\">\\r\\n\\t\\t\\t\\t\\t\\t<clr-dg-cell>{{ct.id}}</clr-dg-cell>\\r\\n\\t\\t\\t\\t\\t\\t<clr-dg-cell>{{ct.name}}</clr-dg-cell>\\r\\n\\t\\t\\t\\t\\t</clr-dg-row>\\r\\n\\t\\t\\t\\t</clr-datagrid>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<!-- end main concentration card text -->\\r\\n\\t\\t</div>\\r\\n\\t\\t<!-- end main concentration card block -->\\r\\n\\t</div>\\r\\n\\t<!-- end main concentration card -->\\r\\n</div>\\r\\n\\r\\n<!-- add Concentration Type Modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideAdd\\\">\\r\\n\\t<h3 class=\\\"modal-title\\\"><clr-icon shape=\\\"plus\\\"></clr-icon> Add Concentration Type</h3>\\r\\n\\t<div class=\\\"modal-body\\\">\\r\\n\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t<div class=\\\"col-lg-12\\\">\\r\\n\\t\\t\\t\\t<form id=\\\"addCTForm\\\" class=\\\"compact\\\" [formGroup]=\\\"addCTForm\\\" (ngSubmit)=\\\"onSubmitCT('add', addCTForm.value)\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"card-block\\\">\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"card-title\\\">Add Concentration Type</div>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"card-text\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showCTCreateError\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<div clr-alert-item class=\\\"alert-item\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\\"alert-text\\\">Submission error. Concentration Type not submitted. {{errorMessage}}</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"alert-actions\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<a class=\\\"alert-action\\\" (click)=\\\"onSubmitCT('add', addCTForm.value)\\\">Try again</a>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t</clr-alert>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showCTCreateSuccess\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<div clr-alert-item class=\\\"alert-item\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\\"alert-text\\\">Concentration Type successfully submitted</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"alert-actions\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<a class=\\\"alert-action\\\" (click)=\\\"showHideAdd = false; showCTCreateSuccess = false\\\">Close</a>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t</clr-alert>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t\\t<section class=\\\"form-block\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<!--<label>Add Concentration Type</label>-->\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"form-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<label class=\\\"required\\\">Name</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm tooltip-top-left\\\" [class.invalid]=\\\"addCTForm.get('name').invalid && (addCTForm.get('name').dirty || addCTForm.get('name').touched)\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<input id=\\\"name\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" size=\\\"30\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\\"tooltip-content\\\">Name is required.</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t</section>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"addCTForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Submit</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button class=\\\"btn btn-info\\\" (click)=\\\"showHideEdit = !showHideAdd\\\">Close</button>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\t\\t\\r\\n\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</clr-modal>\\r\\n\\r\\n<!-- edit Concentration Type Modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideEdit\\\">\\r\\n\\t<h3 class=\\\"modal-title\\\"><clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit Concentration Type</h3>\\r\\n\\t<div class=\\\"modal-body\\\">\\r\\n\\r\\n\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t<div class=\\\"col-lg-12\\\">\\r\\n\\t\\t\\t\\t<clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showCTEditError\\\">\\r\\n\\t\\t\\t\\t\\t<div clr-alert-item class=\\\"alert-item\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\\\"alert-text\\\">Submission error. Concentration Type not edited.</span>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"alert-actions\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<a class=\\\"alert-action\\\" (click)=\\\"onSubmitCT('edit', editCTForm.value)\\\">Try again</a>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</clr-alert>\\r\\n\\r\\n\\t\\t\\t\\t<clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showCTEditSuccess\\\">\\r\\n\\t\\t\\t\\t\\t<div clr-alert-item class=\\\"alert-item\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\\\"alert-text\\\">Concentration Type successfully edited</span>\\r\\n\\t\\t\\t\\t\\t\\t<!--<div class=\\\"alert-actions\\\"> <!- I don't want this extra inner close -->\\r\\n\\t\\t\\t\\t\\t\\t<!--                <a class=\\\"alert-action\\\" (click)=\\\"showHideEdit = false; showCTEditSuccess = false\\\">Close</a>\\r\\n              </div>-->\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</clr-alert>\\r\\n\\r\\n\\t\\t\\t\\t<form id=\\\"editCTForm\\\" class=\\\"compact\\\" [formGroup]=\\\"editCTForm\\\" (ngSubmit)=\\\"onSubmitCT('edit', editCTForm.value)\\\">\\r\\n\\t\\t\\t\\t\\t<section class=\\\"form-block\\\">\\r\\n\\t\\t\\t\\t\\t\\t<label>Selected Concentration Type: {{selectedCTName}}</label>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label for=\\\"CTId\\\">Concentration Type ID</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" id=\\\"CTId\\\" size=\\\"35\\\" formControlName=\\\"id\\\" readonly>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"required\\\">Name</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"editCTForm.get('name').invalid && (editCTForm.get('name').dirty || editCTForm.get('name').touched)\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input id=\\\"name\\\" type=\\\"text\\\" formControlName=\\\"name\\\" size=\\\"40\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\\"tooltip-content\\\">Name is required.</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t</label>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t<button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"editCTForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Save Edits</button>\\r\\n\\t\\t\\t\\t\\t\\t<button class=\\\"btn btn-info\\\" (click)=\\\"showHideEdit = !showHideEdit\\\">Close</button>\\r\\n\\r\\n\\t\\t\\t\\t\\t</section>\\r\\n\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</clr-modal>\\r\\n\\r\\n<!-- delete concentration type Modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideDelete\\\">\\r\\n\\t<h3 class=\\\"modal-title\\\"><clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon> Delete Concentration Type</h3>\\r\\n\\t<div class=\\\"modal-body\\\">\\r\\n\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t<div class=\\\"col-lg-12\\\">\\r\\n\\t\\t\\t\\t<clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showCTDeleteError\\\">\\r\\n\\t\\t\\t\\t\\t<div clr-alert-item class=\\\"alert-item\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\\\"alert-text\\\">Submission error. Concentration Type not deleted.</span>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"alert-actions\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<a class=\\\"alert-action\\\" (click)=\\\"submitDelete()\\\">Try again</a>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</clr-alert>\\r\\n\\r\\n\\t\\t\\t\\t<clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showCTDeleteSuccess\\\">\\r\\n\\t\\t\\t\\t\\t<div clr-alert-item class=\\\"alert-item\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\\\"alert-text\\\">Concentration Type successfully deleted.</span>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</clr-alert>\\r\\n\\r\\n\\t\\t\\t\\t<div *ngIf=\\\"!showCTDeleteSuccess\\\">\\r\\n\\t\\t\\t\\t\\t<p>Are you sure you want to delete concentration type<b> {{selectedCTName}}</b> ?</p>\\r\\n\\r\\n\\t\\t\\t\\t\\t<button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)=\\\"submitDelete()\\\" [clrLoading]=\\\"submitLoading\\\">Delete</button>\\r\\n\\t\\t\\t\\t\\t<button class=\\\"btn btn-info\\\" (click)=\\\"showHideDelete = !showHideDelete\\\">Close</button>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</clr-modal>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/concentration-types/concentration-types.component.html\n// module id = ./src/app/admin/concentration-types/concentration-types.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/concentration-types/concentration-types.component.scss\n// module id = ./src/app/admin/concentration-types/concentration-types.component.scss\n// module chunks = main","import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { IConcentrationType } from '../../concentration-types/concentration-type';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { ConcentrationTypeService } from '../../concentration-types/concentration-types.service';\r\n\r\n@Component({\r\n  selector: 'concentrationtypes',\r\n  templateUrl: './concentration-types.component.html',\r\n  styleUrls: ['./concentration-types.component.scss']\r\n})\r\nexport class ConcentrationTypesComponent implements OnInit {\r\n  @Input() ConcentrationTypes: Array<IConcentrationType>;\r\n  public showHideAdd: boolean;\r\n  public showHideEdit: boolean;\r\n  public showHideDelete: boolean;\r\n  public selectedConcentration: IConcentrationType;\r\n  public selectedCTName: string;\r\n  public selectedCTId: number;\r\n  public showCTCreateError: boolean;\r\n  public showCTEditError: boolean;\r\n  public showCTDeleteError: boolean;\r\n  public submitLoading: boolean;\r\n  public showCTDeleteSuccess: boolean;\r\n  public showCTEditSuccess: boolean;\r\n  public showCTCreateSuccess: boolean;\r\n  public errorMessage: string;\r\n\r\n  // add concentration form - declare a reactive form with appropriate concentration fields\r\n  addCTForm = new FormGroup({\r\n    name: new FormControl('', Validators.required)\r\n  });\r\n  // edit concentration form - declare a reactive form\r\n  editCTForm = new FormGroup({\r\n    id: new FormControl(''),\r\n    name: new FormControl('', Validators.required)\r\n  });\r\n\r\n  constructor(private _route: ActivatedRoute, private _concentrationService: ConcentrationTypeService, private _cdr: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n    this.showHideAdd = false; this.showHideEdit = false; this.showHideDelete = false;\r\n    this.showCTCreateError = false; this.showCTEditError = false; this.showCTDeleteError = false;\r\n    this.showCTCreateSuccess = false; this.showCTEditSuccess = false; this.showCTDeleteSuccess = false;\r\n    this.submitLoading = false;\r\n  }\r\n\r\n  public showAddModal() {\r\n    this.showHideAdd = !this.showHideAdd;\r\n    //reset these to false in case Add Concentration is clicked more than once\r\n    this.showCTCreateError = false;\r\n    this.showCTCreateSuccess = false;\r\n  }\r\n\r\n  public editCT(selectedConcentration) {\r\n    this.editCTForm.reset(); //reset here to ensure states are clean (instead of after update complete)\r\n    this.showCTEditSuccess = false; //reset this \r\n    this.showCTEditError = false;//reset this \r\n    this.selectedCTName = selectedConcentration.name;\r\n    this.selectedCTId = selectedConcentration.id;\r\n\r\n    this.editCTForm.setValue({\r\n      id: this.selectedCTId,\r\n      name: this.selectedCTName\r\n    });\r\n\r\n    // show the edit concentration form if not showing already\r\n    if (this.showHideEdit === false) {\r\n      this.showHideEdit = true;\r\n    }\r\n  }\r\n\r\n  private updateCTArray(newItem) {\r\n    let updateItem = this.ConcentrationTypes.find(this.findIndexToUpdate, newItem.id);\r\n    let index = this.ConcentrationTypes.indexOf(updateItem);\r\n    this.ConcentrationTypes[index] = newItem;\r\n  }\r\n\r\n  private findIndexToUpdate(newItem) {\r\n    return newItem.id === this;\r\n  }\r\n\r\n  // create or edit concentration type submit\r\n  public onSubmitCT(formId, formValue) {\r\n    this.showCTCreateError = false;\r\n    this.showCTEditError = false;\r\n    this.submitLoading = true;\r\n    switch (formId) {\r\n      case 'edit':\r\n        // update a record\r\n        this._concentrationService.update(formValue)\r\n          .subscribe(\r\n            (updatedConcentrationT) => {\r\n              this.selectedCTName = updatedConcentrationT.name;\r\n              this.updateCTArray(formValue);\r\n              this.selectedConcentration = undefined; // the radio button becomes unselected upon save, but Edit this One is still enabled. This disables the edit button\r\n              //this.editCTForm.reset(); // don't want to reset it. keep the content they just saved in the inputs rather than empty inputs\r\n              this.submitLoading = false;\r\n              this.showCTEditSuccess = true;\r\n              this._cdr.detectChanges(); //fix for ExpressionChangedAfterItHasBeenCheckedError (see https://github.com/angular/angular/issues/17572 )\r\n            },\r\n            error => {\r\n              this.errorMessage = <any>error;\r\n              this.submitLoading = false;\r\n              this.showCTEditError = true;\r\n            });\r\n        break;\r\n      case 'add':\r\n        // add a record\r\n        this._concentrationService.create(formValue)\r\n          .subscribe(\r\n            (newConcentration) => {\r\n              this.ConcentrationTypes.push(newConcentration);\r\n              this.addCTForm.reset();\r\n              this.submitLoading = false;\r\n              this.showCTCreateSuccess = true;\r\n            },\r\n            error => {\r\n              this.errorMessage = <any>error;\r\n              this.submitLoading = false;\r\n              this.showCTCreateError = true;\r\n            }\r\n          );\r\n        break;\r\n      default:\r\n      // do something defaulty\r\n    }\r\n  }\r\n\r\n  // show delete concentration type modal\r\n  public deleteCT(selectedConcentration) {\r\n    this.showCTDeleteSuccess = false; //reset this\r\n    this.showCTDeleteError = false; //reset this too\r\n    this.selectedCTName = selectedConcentration.name;\r\n    this.selectedCTId = selectedConcentration.id;\r\n    // show the delete concentration form if not showing already\r\n    if (this.showHideDelete === false) {\r\n      this.showHideDelete = true;\r\n    }\r\n  }\r\n\r\n  public submitDelete() {\r\n    //get the index to be deleted by the id\r\n    let ind: number;\r\n    this.ConcentrationTypes.some((pdh, index, _ary) => {\r\n      if (pdh.id === this.selectedCTId) ind = index;\r\n      return pdh.id === this.selectedCTId;\r\n    });\r\n    this._concentrationService.delete(this.selectedCTId)\r\n      .subscribe(\r\n        () => {\r\n          this.selectedCTName = \"\";\r\n          this.ConcentrationTypes.splice(ind, 1);\r\n          this.selectedConcentration = undefined; // the radio button becomes unselected upon save, but Edit this One is still enabled. This disables the edit button\r\n          //this.editCTForm.reset(); // don't want to reset it. keep the content they just saved in the inputs rather than empty inputs\r\n          this.submitLoading = false;\r\n          this.showCTDeleteSuccess = true;\r\n          this._cdr.detectChanges();\r\n        },\r\n        error => {\r\n          this.errorMessage = <any>error;\r\n          this.submitLoading = false;\r\n          this.showCTDeleteError = true;\r\n        }\r\n      );\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/admin/concentration-types/concentration-types.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <!-- extraction method table -->\\r\\n  <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n    <div class=\\\"card\\\">\\r\\n      <div class=\\\"card-block\\\">\\r\\n        <div class=\\\"card-title\\\">Extraction Methods</div>\\r\\n        <div class=\\\"card-text\\\">\\r\\n    \\r\\n          <clr-datagrid [(clrDgSingleSelected)]=\\\"selectedExtractionMethod\\\">\\r\\n            <!-- add, edit and delete Extraction buttons -->\\r\\n            <clr-dg-action-bar>\\r\\n              <div class=\\\"btn-group\\\">\\r\\n                <button class=\\\"btn btn-sm\\\" (click)=\\\"showAddModal()\\\">\\r\\n                  <clr-icon shape=\\\"plus\\\"></clr-icon> Add</button>\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedExtractionMethod\\\" (click)=\\\"editEM(selectedExtractionMethod)\\\">\\r\\n                  <clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit</button>\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedExtractionMethod\\\" (click)=\\\"deleteEM(selectedExtractionMethod)\\\">\\r\\n                  <clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon> Delete</button>\\r\\n              </div>\\r\\n            </clr-dg-action-bar>\\r\\n\\r\\n            <!-- table of all Extraction methods-->\\r\\n            <clr-dg-column [clrDgField]=\\\"'id'\\\">\\r\\n              <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                Extraction Method ID\\r\\n              </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'name'\\\">\\r\\n              <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                Extraction Method Name\\r\\n              </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-row *clrDgItems=\\\"let em of ExtractionMethods\\\" [clrDgItem]=\\\"em\\\">\\r\\n              <clr-dg-cell>{{em.id}}</clr-dg-cell>\\r\\n              <clr-dg-cell>{{em.name}}</clr-dg-cell>\\r\\n            </clr-dg-row>\\r\\n          </clr-datagrid>\\r\\n        </div>\\r\\n        <!-- end main extraction method card text -->\\r\\n      </div>\\r\\n      <!-- end main extraction method card block -->\\r\\n    </div>\\r\\n    <!-- end main extraction method card -->\\r\\n  </div>\\r\\n\\r\\n  <!-- add extraction method Modal -->\\r\\n  <clr-modal [(clrModalOpen)]=\\\"showHideAdd\\\">\\r\\n    <h3 class=\\\"modal-title\\\">Add Extraction Method</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12\\\">\\r\\n          <form id=\\\"addEMForm\\\" class=\\\"compact\\\" [formGroup]=\\\"addEMForm\\\" (ngSubmit)=\\\"onSubmitEM('add', addEMForm.value)\\\">\\r\\n\\r\\n            <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showEMCreateError\\\">\\r\\n              <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">Submission error. Extraction Method not submitted. {{errorMessage}}</span>\\r\\n                <div class=\\\"alert-actions\\\">\\r\\n                  <a class=\\\"alert-action\\\" (click)=\\\"onSubmitEM('add', addEMForm.value)\\\">Try again</a>\\r\\n                </div>\\r\\n              </div>\\r\\n            </clr-alert>\\r\\n\\r\\n            <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showEMCreateSuccess\\\">\\r\\n              <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">Extraction Method successfully submitted</span>\\r\\n                <div class=\\\"alert-actions\\\">\\r\\n                  <a class=\\\"alert-action\\\" (click)=\\\"showHideAdd = false; showEMCreateSuccess = false\\\">Close</a>\\r\\n                </div>\\r\\n              </div>\\r\\n            </clr-alert>\\r\\n\\r\\n            <section class=\\\"form-block\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label class=\\\"required\\\">Name</label>\\r\\n                <label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"addEMForm.get('name').invalid && (addEMForm.get('name').dirty || addEMForm.get('name').touched)\\\">\\r\\n                  <input id=\\\"name\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" size=\\\"30\\\">\\r\\n                  <span class=\\\"tooltip-content\\\">Name is required.</span>\\r\\n                </label>\\r\\n              </div>\\r\\n            </section>\\r\\n            <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"addEMForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Submit</button>\\r\\n            <button class=\\\"btn btn-info\\\" (click)=\\\"showHideAdd = !showHideAdd\\\">Close</button>\\r\\n\\r\\n          </form>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </clr-modal>\\r\\n\\r\\n  <!-- edit extraction Type Modal -->\\r\\n  <clr-modal [(clrModalOpen)]=\\\"showHideEdit\\\">\\r\\n    <h3 class=\\\"modal-title\\\"><clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit Extraction Method</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12\\\">\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showEMEditError\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Submission error. Extraction Method not edited.</span>\\r\\n              <div class=\\\"alert-actions\\\">\\r\\n                <a class=\\\"alert-action\\\" (click)=\\\"onSubmitEM('edit', editEMForm.value)\\\">Try again</a>\\r\\n              </div>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showEMEditSuccess\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Extraction Method successfully edited</span>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <form id=\\\"editEMForm\\\" class=\\\"compact\\\" [formGroup]=\\\"editEMForm\\\" (ngSubmit)=\\\"onSubmitEM('edit', editEMForm.value)\\\">\\r\\n            <section class=\\\"form-block\\\">\\r\\n              <label>Selected Extraction Method: {{selectedEMName}}</label>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"EMId\\\">Extraction Method ID</label>\\r\\n                <input type=\\\"text\\\" id=\\\"EMId\\\" size=\\\"35\\\" formControlName=\\\"id\\\" readonly>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label class=\\\"required\\\">Name</label>\\r\\n                <label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"editEMForm.get('name').invalid && (editEMForm.get('name').dirty || editEMForm.get('name').touched)\\\">\\r\\n                  <input id=\\\"name\\\" type=\\\"text\\\" formControlName=\\\"name\\\" size=\\\"40\\\">\\r\\n                  <span class=\\\"tooltip-content\\\">Name is required.</span>\\r\\n                </label>\\r\\n              </div>\\r\\n              <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"editEMForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Save Edits</button>\\r\\n              <button class=\\\"btn btn-info\\\" (click)=\\\"showHideEdit = !showHideEdit\\\">Close</button>\\r\\n\\r\\n            </section>\\r\\n          </form>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </clr-modal>\\r\\n\\r\\n  <!-- delete concentration type Modal -->\\r\\n  <clr-modal [(clrModalOpen)]=\\\"showHideDelete\\\">\\r\\n    <h3 class=\\\"modal-title\\\"><clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon> Delete Extraction Method</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12\\\">\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showEMDeleteError\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Submission error. Extraction Method not deleted.</span>\\r\\n              <div class=\\\"alert-actions\\\">\\r\\n                <a class=\\\"alert-action\\\" (click)=\\\"submitDelete()\\\">Try again</a>\\r\\n              </div>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showEMDeleteSuccess\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Extraction Method successfully deleted.</span>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <div *ngIf=\\\"!showEMDeleteSuccess\\\">\\r\\n            <p>Are you sure you want to delete the extraction method <b>{{selectedEMName}}</b> ?</p>\\r\\n\\r\\n            <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)=\\\"submitDelete()\\\" [clrLoading]=\\\"submitLoading\\\">Delete</button>\\r\\n            <button class=\\\"btn btn-info\\\" (click)=\\\"showHideDelete = !showHideDelete\\\">Close</button>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </clr-modal>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/extraction-methods/extraction-methods.component.html\n// module id = ./src/app/admin/extraction-methods/extraction-methods.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/extraction-methods/extraction-methods.component.scss\n// module id = ./src/app/admin/extraction-methods/extraction-methods.component.scss\n// module chunks = main","import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';\r\nimport { IExtractionMethod } from 'app/extraction-batches/extraction-method';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ExtractionMethodService } from '../../extraction-batches/extraction-method.service';\r\n\r\n@Component({\r\n  selector: 'extractionmethods',\r\n  templateUrl: './extraction-methods.component.html',\r\n  styleUrls: ['./extraction-methods.component.scss']\r\n})\r\nexport class ExtractionMethodsComponent implements OnInit {\r\n  @Input() ExtractionMethods: Array<IExtractionMethod>;\r\n  public showHideAdd: boolean;\r\n  public showHideEdit: boolean;\r\n  public showHideDelete: boolean;\r\n  public selectedExtractionMethod: IExtractionMethod;\r\n  public selectedEMName: string;\r\n  public selectedEMId: number;\r\n  public showEMCreateError: boolean;\r\n  public showEMEditError: boolean;\r\n  public showEMDeleteError: boolean;\r\n  public submitLoading: boolean;\r\n  public showEMDeleteSuccess: boolean;\r\n  public showEMEditSuccess: boolean;\r\n  public showEMCreateSuccess: boolean;\r\n  public errorMessage: string;\r\n\r\n  // add Extraction form - declare a reactive form with appropriate Extraction fields\r\n  addEMForm = new FormGroup({\r\n    name: new FormControl('', Validators.required)\r\n  });\r\n  // edit Extraction form - declare a reactive form\r\n  editEMForm = new FormGroup({\r\n    id: new FormControl(''),\r\n    name: new FormControl('', Validators.required)\r\n  });\r\n\r\n  constructor(private _route: ActivatedRoute,\r\n    private _extractionMethodService: ExtractionMethodService,\r\n    private _cdr: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n    this.showHideAdd = false; this.showHideEdit = false; this.showHideDelete = false;\r\n    this.showEMCreateError = false; this.showEMEditError = false; this.showEMDeleteError = false;\r\n    this.showEMCreateSuccess = false; this.showEMEditSuccess = false; this.showEMDeleteSuccess = false;\r\n    this.submitLoading = false;\r\n  }\r\n\r\n  public showAddModal() {\r\n    this.showHideAdd = !this.showHideAdd;\r\n    // reset these to false in case Add Extraction is clicked more than once\r\n    this.showEMCreateError = false;\r\n    this.showEMCreateSuccess = false;\r\n  }\r\n\r\n  public editEM(selectedExtractionMethod) {\r\n    this.editEMForm.reset(); // reset here to ensure states are clean (instead of after update complete)\r\n    this.showEMEditSuccess = false; // reset this\r\n    this.showEMEditError = false; // reset this\r\n    this.selectedEMName = selectedExtractionMethod.name;\r\n    this.selectedEMId = selectedExtractionMethod.id;\r\n\r\n    this.editEMForm.setValue({\r\n      id: this.selectedEMId,\r\n      name: this.selectedEMName\r\n    });\r\n\r\n    // show the edit Extraction form if not showing already\r\n    if (this.showHideEdit === false) {\r\n      this.showHideEdit = true;\r\n    }\r\n  }\r\n\r\n  private updateEMArray(newItem) {\r\n    let updateItem = this.ExtractionMethods.find(this.findIndexToUpdate, newItem.id);\r\n    let index = this.ExtractionMethods.indexOf(updateItem);\r\n    this.ExtractionMethods[index] = newItem;\r\n  }\r\n\r\n  private findIndexToUpdate(newItem) {\r\n    return newItem.id === this;\r\n  }\r\n\r\n  // create or edit Extraction type submit\r\n  public onSubmitEM(formId, formValue) {\r\n    this.showEMCreateError = false;\r\n    this.showEMEditError = false;\r\n    this.submitLoading = true;\r\n    switch (formId) {\r\n      case 'edit':\r\n        // update a record\r\n        this._extractionMethodService.update(formValue)\r\n          .subscribe(\r\n            (updatedExtraction) => {\r\n              this.selectedEMName = updatedExtraction.name;\r\n              this.updateEMArray(formValue);\r\n              this.selectedExtractionMethod = undefined;\r\n              this.submitLoading = false;\r\n              this.showEMEditSuccess = true;\r\n              this._cdr.detectChanges();\r\n            },\r\n            error => {\r\n              this.errorMessage = <any>error;\r\n              this.submitLoading = false;\r\n              this.showEMEditError = true;\r\n            });\r\n        break;\r\n      case 'add':\r\n        // add a record\r\n        this._extractionMethodService.create(formValue)\r\n          .subscribe(\r\n            (newExtraction) => {\r\n              this.ExtractionMethods.push(newExtraction);\r\n              this.addEMForm.reset();\r\n              this.submitLoading = false;\r\n              this.showEMCreateSuccess = true;\r\n            },\r\n            error => {\r\n              this.errorMessage = <any>error;\r\n              this.submitLoading = false;\r\n              this.showEMCreateError = true;\r\n            }\r\n          );\r\n        break;\r\n      default:\r\n      // do something defaulty\r\n    }\r\n  }\r\n\r\n  // show delete concentration type modal\r\n  public deleteEM(selectedConcentration) {\r\n    this.showEMDeleteSuccess = false; // reset this\r\n    this.showEMDeleteError = false; // reset this too\r\n    this.selectedEMName = selectedConcentration.name;\r\n    this.selectedEMId = selectedConcentration.id;\r\n    // show the delete concentration form if not showing already\r\n    if (this.showHideDelete === false) {\r\n      this.showHideDelete = true;\r\n    }\r\n  }\r\n\r\n  public submitDelete() {\r\n    // get the index to be deleted by the id\r\n    let ind: number;\r\n    this.ExtractionMethods.some((pdh, index, _ary) => {\r\n      if (pdh.id === this.selectedEMId) { ind = index; }\r\n      return pdh.id === this.selectedEMId;\r\n    });\r\n    this._extractionMethodService.delete(this.selectedEMId)\r\n      .subscribe(\r\n        () => {\r\n          this.selectedEMName = \"\";\r\n          this.ExtractionMethods.splice(ind, 1);\r\n          this._extractionMethodService = undefined;\r\n          this.submitLoading = false;\r\n          this.showEMDeleteSuccess = true;\r\n          this._cdr.detectChanges();\r\n        },\r\n        error => {\r\n          this.errorMessage = <any>error;\r\n          this.submitLoading = false;\r\n          this.showEMDeleteError = true;\r\n        }\r\n      );\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/admin/extraction-methods/extraction-methods.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <!-- Filter table -->\\r\\n  <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n    <div class=\\\"card\\\">\\r\\n      <div class=\\\"card-block\\\">\\r\\n        <div class=\\\"card-title\\\">Filter Types</div>\\r\\n        <div class=\\\"card-text\\\">\\r\\n\\r\\n          <clr-datagrid [(clrDgSingleSelected)]=\\\"selectedFilter\\\">\\r\\n            <!-- edit and delete Filter buttons -->\\r\\n            <clr-dg-action-bar>\\r\\n              <div class=\\\"btn-group\\\">\\r\\n                <button class=\\\"btn btn-sm\\\" (click)=\\\"showAddModal()\\\">\\r\\n                  <clr-icon shape=\\\"plus\\\"></clr-icon> Add </button>\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedFilter\\\" (click)=\\\"editFilter(selectedFilter)\\\">\\r\\n                  <clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit</button>\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedFilter\\\" (click)=\\\"deleteFilter(selectedFilter)\\\">\\r\\n                  <clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon> Delete </button>\\r\\n              </div>\\r\\n            </clr-dg-action-bar>\\r\\n\\r\\n            <!-- table of all Filters -->\\r\\n            <clr-dg-column [clrDgField]=\\\"'id'\\\">\\r\\n              <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                Filter Type ID\\r\\n              </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'name'\\\">\\r\\n              <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                Filter Type Name\\r\\n              </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <!-- filter column header for matrix type-->\\r\\n            <clr-dg-column [clrDgField]=\\\"'matrix'\\\">\\r\\n              Filter Type Matrix\\r\\n              <clr-dg-filter [clrDgFilter]=\\\"matrixTypeFilter\\\">\\r\\n                <matrix-type-filter #matrixTypeFilter></matrix-type-filter>\\r\\n              </clr-dg-filter>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-row *clrDgItems=\\\"let ft of FilterTypes\\\" [clrDgItem]=\\\"ft\\\">\\r\\n              <clr-dg-cell>{{ft.id}}</clr-dg-cell>\\r\\n              <clr-dg-cell>{{ft.name}}</clr-dg-cell>\\r\\n              <clr-dg-cell>{{ft.matrix | displayValue:'name': Matrices}}</clr-dg-cell>\\r\\n            </clr-dg-row>\\r\\n            \\r\\n          </clr-datagrid>\\r\\n        </div>\\r\\n        <!-- end main FilterTypes card text -->\\r\\n      </div>\\r\\n      <!-- end main FilterTypes card block -->\\r\\n    </div>\\r\\n    <!-- end main FilterTypes card -->\\r\\n  </div>\\r\\n\\r\\n  <!-- add FilterTypes Modal -->\\r\\n  <clr-modal [(clrModalOpen)]=\\\"showHideAdd\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n      <clr-icon shape=\\\"plus\\\"></clr-icon> Add Filter Type</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12\\\">\\r\\n          <form id=\\\"addFilterForm\\\" class=\\\"compact\\\" [formGroup]=\\\"addFilterForm\\\" (ngSubmit)=\\\"onSubmitFilter('add', addFilterForm.value)\\\">\\r\\n\\r\\n            <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showFilterCreateError\\\">\\r\\n              <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">Submission error. Filter Type not submitted. {{errorMessage}}</span>\\r\\n                <div class=\\\"alert-actions\\\">\\r\\n                  <a class=\\\"alert-action\\\" (click)=\\\"onSubmitFilter('add', addFilterForm.value)\\\">Try again</a>\\r\\n                </div>\\r\\n              </div>\\r\\n            </clr-alert>\\r\\n\\r\\n            <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showFilterCreateSuccess\\\">\\r\\n              <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">Filter Type successfully submitted</span>\\r\\n                <div class=\\\"alert-actions\\\">\\r\\n                  <a class=\\\"alert-action\\\" (click)=\\\"showHideAdd = false; showFilterCreateSuccess = false\\\">Close</a>\\r\\n                </div>\\r\\n              </div>\\r\\n            </clr-alert>\\r\\n\\r\\n            <section class=\\\"form-block\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label class=\\\"required\\\">Name</label>\\r\\n                <label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"addFilterForm.get('name').invalid && (addFilterForm.get('name').dirty || addFilterForm.get('name').touched)\\\">\\r\\n                  <input id=\\\"name\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" size=\\\"30\\\">\\r\\n                  <span class=\\\"tooltip-content\\\">Name is required.</span>\\r\\n                </label>\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label class=\\\"required\\\">Matrix</label>\\r\\n                <label for=\\\"matrix\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"addFilterForm.get('matrix').invalid && (addFilterForm.get('matrix').dirty || addFilterForm.get('matrix').touched)\\\">\\r\\n                  <select class=\\\"form-control\\\" id=\\\"matrix\\\" formControlName=\\\"matrix\\\">\\r\\n                    <option value=\\\"\\\"></option>\\r\\n                    <option *ngFor=\\\"let m of Matrices\\\" [ngValue]=\\\"m.id\\\">{{m.name}}</option>\\r\\n                  </select>\\r\\n                  <span class=\\\"tooltip-content\\\">Matrix is required.</span>\\r\\n                </label>\\r\\n              </div>\\r\\n            </section>\\r\\n            <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"addFilterForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Submit</button>\\r\\n            <button class=\\\"btn btn-info\\\" (click)=\\\"showHideAdd = !showHideAdd\\\">Close</button>\\r\\n\\r\\n          </form>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </clr-modal>\\r\\n\\r\\n  <!-- edit FilterTypes Modal -->\\r\\n  <clr-modal [(clrModalOpen)]=\\\"showHideEdit\\\">\\r\\n    <h3 class=\\\"modal-title\\\"><clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit Filter Type</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12\\\">\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showFilterEditError\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Submission error. Filter Type not edited.</span>\\r\\n              <div class=\\\"alert-actions\\\">\\r\\n                <a class=\\\"alert-action\\\" (click)=\\\"onSubmitFilter('edit', editFilterForm.value)\\\">Try again</a>\\r\\n              </div>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showFilterEditSuccess\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Filter Type successfully edited</span>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <form id=\\\"editFilterForm\\\" class=\\\"compact\\\" [formGroup]=\\\"editFilterForm\\\" (ngSubmit)=\\\"onSubmitFilter('edit', editFilterForm.value)\\\">\\r\\n            <section class=\\\"form-block\\\">\\r\\n              <label>Selected Filter Type: {{selectedFilterName}}</label>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"FilterId\\\">Filter Type ID</label>\\r\\n                <input type=\\\"text\\\" id=\\\"FilterId\\\" size=\\\"35\\\" formControlName=\\\"id\\\" readonly>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label class=\\\"required\\\">Name</label>\\r\\n                <label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"editFilterForm.get('name').invalid && (editFilterForm.get('name').dirty || editFilterForm.get('name').touched)\\\">\\r\\n                  <input id=\\\"name\\\" type=\\\"text\\\" formControlName=\\\"name\\\" size=\\\"40\\\">\\r\\n                  <span class=\\\"tooltip-content\\\">Name is required.</span>\\r\\n                </label>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label class=\\\"required\\\">Matrix</label>\\r\\n                <label for=\\\"matrix\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"editFilterForm.get('matrix').invalid && (editFilterForm.get('matrix').dirty || editFilterForm.get('matrix').touched)\\\">\\r\\n                  <select id=\\\"matrixSelect\\\" name=\\\"matrix\\\" formControlName=\\\"matrix\\\">\\r\\n                    <option *ngFor=\\\"let m of Matrices\\\" [ngValue]=\\\"m.id\\\">{{m.name}}</option>\\r\\n                  </select>\\r\\n                </label>\\r\\n              </div>\\r\\n\\r\\n              <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"editFilterForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Save Edits</button>\\r\\n              <button class=\\\"btn btn-info\\\" (click)=\\\"showHideEdit = !showHideEdit\\\">Close</button>\\r\\n\\r\\n            </section>\\r\\n          </form>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </clr-modal>\\r\\n\\r\\n  <!-- delete Filter type Modal -->\\r\\n  <clr-modal [(clrModalOpen)]=\\\"showHideDelete\\\">\\r\\n    <h3 class=\\\"modal-title\\\"><clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon> Delete Filter Type</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12\\\">\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showFilterDeleteError\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Submission error. Filter Type not deleted.</span>\\r\\n              <div class=\\\"alert-actions\\\">\\r\\n                <a class=\\\"alert-action\\\" (click)=\\\"submitDelete()\\\">Try again</a>\\r\\n              </div>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showFilterDeleteSuccess\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Filter Type successfully deleted.</span>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <div *ngIf=\\\"!showFilterDeleteSuccess\\\">\\r\\n            <p>Are you sure you want to delete the filter type <b>{{selectedFilterName}}</b> ?</p>\\r\\n\\r\\n            <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)=\\\"submitDelete()\\\" [clrLoading]=\\\"submitLoading\\\">Delete</button>\\r\\n            <button class=\\\"btn btn-info\\\" (click)=\\\"showHideDelete = !showHideDelete\\\">Close</button>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </clr-modal>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/filter-types/filter-types.component.html\n// module id = ./src/app/admin/filter-types/filter-types.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/filter-types/filter-types.component.scss\n// module id = ./src/app/admin/filter-types/filter-types.component.scss\n// module chunks = main","import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';\r\nimport { IFilterType } from '../../SHARED/filter-type';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FilterTypeService } from '../../SHARED/filter-type.service';\r\nimport { IMatrix } from 'app/SHARED/matrix';\r\n\r\n@Component({\r\n  selector: 'filtertypes',\r\n  templateUrl: './filter-types.component.html',\r\n  styleUrls: ['./filter-types.component.scss']\r\n})\r\nexport class FilterTypesComponent implements OnInit {\r\n  @Input() FilterTypes: Array<IFilterType>;\r\n  @Input() Matrices: Array<IMatrix>;\r\n  public showHideAdd: boolean;\r\n  public showHideEdit: boolean;\r\n  public showHideDelete: boolean;\r\n  public selectedFilter: IFilterType;\r\n  public selectedFilterMatrix: number;\r\n  public selectedFilterName: string;\r\n  public selectedFilterId: number;\r\n  public showFilterCreateError: boolean;\r\n  public showFilterEditError: boolean;\r\n  public showFilterDeleteError: boolean;\r\n  public submitLoading: boolean;\r\n  public showFilterDeleteSuccess: boolean;\r\n  public showFilterEditSuccess: boolean;\r\n  public showFilterCreateSuccess: boolean;\r\n  public errorMessage: string;\r\n\r\n  // add Filter form - declare a reactive form with appropriate Filter fields\r\n  addFilterForm = new FormGroup({\r\n    name: new FormControl('', Validators.required),\r\n    matrix: new FormControl('', Validators.required)\r\n  });\r\n  // edit Filter form - declare a reactive form\r\n  editFilterForm = new FormGroup({\r\n    id: new FormControl(''),\r\n    name: new FormControl('', Validators.required),\r\n    matrix: new FormControl('', Validators.required) // add validator for number only here\r\n  });\r\n\r\n  constructor(private _route: ActivatedRoute, private _filterService: FilterTypeService, private _cdr: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n    this.showHideAdd = false; this.showHideEdit = false; this.showHideDelete = false;\r\n    this.showFilterCreateError = false; this.showFilterEditError = false; this.showFilterDeleteError = false;\r\n    this.showFilterCreateSuccess = false; this.showFilterEditSuccess = false; this.showFilterDeleteSuccess = false;\r\n    this.submitLoading = false;    \r\n  }\r\n\r\n  public showAddModal(){\r\n    this.showHideAdd = !this.showHideAdd;\r\n    //reset these to false in case Add Filter is clicked more than once\r\n    \r\n    this.showFilterCreateError = false;\r\n    this.showFilterCreateSuccess = false;\r\n  }\r\n\r\n  public editFilter(selectedFilter) {\r\n    this.editFilterForm.reset(); //reset here to ensure states are clean (instead of after update complete)\r\n    this.showFilterEditSuccess = false; //reset this \r\n    this.showFilterEditError = false;//reset this \r\n    this.selectedFilterMatrix = selectedFilter.matrix;\r\n    this.selectedFilterName = selectedFilter.name;\r\n    this.selectedFilterId = selectedFilter.id;\r\n\r\n    this.editFilterForm.setValue({\r\n      id: this.selectedFilterId,\r\n      name: this.selectedFilterName,\r\n      matrix: this.selectedFilterMatrix\r\n    });\r\n\r\n    // show the edit Filter form if not showing already\r\n    if (this.showHideEdit === false) {\r\n      this.showHideEdit = true;\r\n    }\r\n  }\r\n\r\n  private updateFilterArray(newItem) {\r\n    let updateItem = this.FilterTypes.find(this.findIndexToUpdate, newItem.id);\r\n    let index = this.FilterTypes.indexOf(updateItem);\r\n    this.FilterTypes[index] = newItem;\r\n  }\r\n\r\n  private findIndexToUpdate(newItem) {\r\n    return newItem.id === this;\r\n  }\r\n\r\n  // create or edit Filter submit\r\n  public onSubmitFilter(formId, formValue) {\r\n    this.showFilterCreateError = false;\r\n    this.showFilterEditError = false;\r\n    this.submitLoading = true;\r\n    switch (formId) {\r\n      case 'edit':\r\n        // update a record\r\n        this._filterService.update(formValue)\r\n          .subscribe(\r\n          (updatedFilter) => {\r\n            this.selectedFilterName = updatedFilter.name;\r\n            this.selectedFilterMatrix = updatedFilter.matrix;\r\n            this.updateFilterArray(formValue);\r\n            this.selectedFilter = undefined; \r\n            this.submitLoading = false;\r\n            this.showFilterEditSuccess = true;\r\n            this._cdr.detectChanges();\r\n          },\r\n          error => {\r\n            this.errorMessage = <any>error;\r\n            this.submitLoading = false;\r\n            this.showFilterEditError = true;\r\n          });\r\n        break;\r\n      case 'add':\r\n        // add a record\r\n        this._filterService.create(formValue)\r\n          .subscribe(\r\n          (newFilter) => {\r\n            this.FilterTypes.push(newFilter);\r\n            this.addFilterForm.reset();\r\n            this.submitLoading = false;\r\n            this.showFilterCreateSuccess = true;\r\n          },\r\n          error => {\r\n            this.errorMessage = <any>error;\r\n            this.submitLoading = false;\r\n            this.showFilterCreateError = true;\r\n          }\r\n          );\r\n        break;\r\n      default:\r\n      // do something defaulty\r\n    }\r\n  }\r\n\r\n  // show delete Filter type modal\r\n  public deleteFilter(selectedFilter){\r\n    this.showFilterDeleteSuccess = false; //reset this\r\n    this.showFilterDeleteError = false; //reset this too\r\n    this.selectedFilterName = selectedFilter.name;\r\n    this.selectedFilterId = selectedFilter.id;\r\n    // show the delete Filter form if not showing already\r\n    if (this.showHideDelete === false) {\r\n      this.showHideDelete = true;\r\n    }    \r\n  }\r\n\r\n  public submitDelete(){\r\n    //get the index to be deleted by the id\r\n    let ind: number;\r\n    this.FilterTypes.some((pdh, index, _ary) => {\r\n      if (pdh.id === this.selectedFilterId) ind = index;\r\n      return pdh.id === this.selectedFilterId;\r\n    });\r\n    this._filterService.delete(this.selectedFilterId)\r\n    .subscribe(\r\n      () => {\r\n      this.selectedFilterName = \"\"; \r\n      this.FilterTypes.splice(ind,1);\r\n      this.selectedFilter = undefined;\r\n      this.submitLoading = false;\r\n      this.showFilterDeleteSuccess = true;\r\n      this._cdr.detectChanges();\r\n    },\r\n    error => {\r\n      this.errorMessage = <any>error;\r\n      this.submitLoading = false;\r\n      this.showFilterDeleteError = true;\r\n    }\r\n    );\r\n  }\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/admin/filter-types/filter-types.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <!-- Matrix table -->\\r\\n  <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n    <div class=\\\"card\\\">\\r\\n      <div class=\\\"card-block\\\">\\r\\n        <div class=\\\"card-title\\\">Matrices</div>\\r\\n        <div class=\\\"card-text\\\">\\r\\n\\r\\n          <clr-datagrid [(clrDgSingleSelected)]=\\\"selectedMatrix\\\">\\r\\n            <!-- edit and delete Matrix buttons -->\\r\\n            <clr-dg-action-bar>\\r\\n              <div class=\\\"btn-group\\\">\\r\\n                <button class=\\\"btn btn-sm\\\" (click)=\\\"showAddModal()\\\">\\r\\n                  <clr-icon shape=\\\"plus\\\"></clr-icon> Add</button>\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedMatrix\\\" (click)=\\\"editMatrix(selectedMatrix)\\\">\\r\\n                  <clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit</button>\\r\\n                <!-- <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedMatrix\\\" (click)=\\\"deleteMatrix(selectedMatrix)\\\">\\r\\n                  <clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon> Delete</button> -->\\r\\n              </div>\\r\\n            </clr-dg-action-bar>\\r\\n\\r\\n            <!-- table of all Matrix -->\\r\\n            <clr-dg-column [clrDgField]=\\\"'id'\\\">\\r\\n              <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                Matrix ID\\r\\n              </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'name'\\\">\\r\\n              <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                Matrix Name\\r\\n              </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'code'\\\">\\r\\n              <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                Matrix Code\\r\\n              </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-row *clrDgItems=\\\"let mt of MatrixTypes\\\" [clrDgItem]=\\\"mt\\\">\\r\\n              <clr-dg-cell>{{mt.id}}</clr-dg-cell>\\r\\n              <clr-dg-cell>{{mt.name}}</clr-dg-cell>\\r\\n              <clr-dg-cell>{{mt.code}}</clr-dg-cell>\\r\\n            </clr-dg-row>\\r\\n          </clr-datagrid>\\r\\n        </div>\\r\\n        <!-- end main MatrixTypes card text -->\\r\\n      </div>\\r\\n      <!-- end main MatrixTypes card block -->\\r\\n    </div>\\r\\n    <!-- end main MatrixTypes card -->\\r\\n  </div>\\r\\n\\r\\n  <!-- add MatrixTypes Modal -->\\r\\n  <clr-modal [(clrModalOpen)]=\\\"showHideAdd\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n      <clr-icon shape=\\\"plus\\\"></clr-icon> Add Matrix</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12\\\">\\r\\n          <form id=\\\"addMatrixForm\\\" class=\\\"compact\\\" [formGroup]=\\\"addMatrixForm\\\" (ngSubmit)=\\\"onSubmitMatrix('add', addMatrixForm.value)\\\">\\r\\n            <div class=\\\"card-block\\\">\\r\\n              <div class=\\\"card-title\\\">Add Matrix</div>\\r\\n              <div class=\\\"card-text\\\">\\r\\n                <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showMatrixCreateError\\\">\\r\\n                  <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                    <span class=\\\"alert-text\\\">Submission error. Matrix not submitted. {{errorMessage}}</span>\\r\\n                    <div class=\\\"alert-actions\\\">\\r\\n                      <a class=\\\"alert-action\\\" (click)=\\\"onSubmitMatrix('add', addMatrixForm.value)\\\">Try again</a>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </clr-alert>\\r\\n\\r\\n                <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showMatrixCreateSuccess\\\">\\r\\n                  <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                    <span class=\\\"alert-text\\\">Matrix successfully submitted</span>\\r\\n                    <div class=\\\"alert-actions\\\">\\r\\n                      <a class=\\\"alert-action\\\" (click)=\\\"showHideAdd = false; showMatrixCreateSuccess = false\\\">Close</a>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </clr-alert>\\r\\n\\r\\n\\r\\n                <section class=\\\"form-block\\\">\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"required\\\">Name</label>\\r\\n                    <label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"addMatrixForm.get('name').invalid && (addMatrixForm.get('name').dirty || addMatrixForm.get('name').touched)\\\">\\r\\n                      <input id=\\\"name\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" size=\\\"30\\\">\\r\\n                      <span class=\\\"tooltip-content\\\">Name is required.</span>\\r\\n                    </label>\\r\\n                  </div>\\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"required\\\">Code</label>\\r\\n                    <label for=\\\"code\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"addMatrixForm.get('code').invalid && (addMatrixForm.get('code').dirty || addMatrixForm.get('code').touched)\\\">\\r\\n                      <input id=\\\"code\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"code\\\" size=\\\"30\\\">\\r\\n                      <span class=\\\"tooltip-content\\\">Code is required.</span>\\r\\n                    </label>\\r\\n                  </div>\\r\\n                </section>\\r\\n                <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"addMatrixForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Submit</button>\\r\\n                <button class=\\\"btn btn-info\\\" (click)=\\\"showHideAdd = !showHideAdd\\\">Close</button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </form>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </clr-modal>\\r\\n\\r\\n  <!-- edit MatrixTypes Modal -->\\r\\n  <clr-modal [(clrModalOpen)]=\\\"showHideEdit\\\">\\r\\n    <h3 class=\\\"modal-title\\\"><clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit Matrix</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12\\\">\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showMatrixEditError\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Submission error. Matrix not edited.</span>\\r\\n              <div class=\\\"alert-actions\\\">\\r\\n                <a class=\\\"alert-action\\\" (click)=\\\"onSubmitMatrix('edit', editMatrixForm.value)\\\">Try again</a>\\r\\n              </div>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showMatrixEditSuccess\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Matrix successfully edited</span>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <form id=\\\"editMatrixForm\\\" class=\\\"compact\\\" [formGroup]=\\\"editMatrixForm\\\" (ngSubmit)=\\\"onSubmitMatrix('edit', editMatrixForm.value)\\\">\\r\\n            <section class=\\\"form-block\\\">\\r\\n              <label>Selected Matrix: {{selectedMatrixName}}</label>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"MatrixId\\\">Matrix ID</label>\\r\\n                <input type=\\\"text\\\" id=\\\"MatrixId\\\" size=\\\"35\\\" formControlName=\\\"id\\\" readonly>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label class=\\\"required\\\">Name</label>\\r\\n                <label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"editMatrixForm.get('name').invalid && (editMatrixForm.get('name').dirty || editMatrixForm.get('name').touched)\\\">\\r\\n                  <input id=\\\"name\\\" type=\\\"text\\\" formControlName=\\\"name\\\" size=\\\"40\\\">\\r\\n                  <span class=\\\"tooltip-content\\\">Name is required.</span>\\r\\n                </label>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label class=\\\"required\\\">Code</label>\\r\\n                <label for=\\\"code\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"editMatrixForm.get('code').invalid && (editMatrixForm.get('code').dirty || editMatrixForm.get('code').touched)\\\">\\r\\n                  <input id=\\\"code\\\" type=\\\"text\\\" formControlName=\\\"code\\\" size=\\\"40\\\">\\r\\n                  <span class=\\\"tooltip-content\\\">Code is required.</span>\\r\\n                </label>\\r\\n              </div>\\r\\n\\r\\n              <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"editMatrixForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Save Edits</button>\\r\\n              <button class=\\\"btn btn-info\\\" (click)=\\\"showHideEdit = !showHideEdit\\\">Close</button>\\r\\n\\r\\n            </section>\\r\\n          </form>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </clr-modal>\\r\\n\\r\\n  <!-- delete Matrix Modal -->\\r\\n  <clr-modal [(clrModalOpen)]=\\\"showHideDelete\\\">\\r\\n    <h3 class=\\\"modal-title\\\"><clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon>Delete Matrix</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12\\\">\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showMatrixDeleteError\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Submission error. Matrix not deleted.</span>\\r\\n              <div class=\\\"alert-actions\\\">\\r\\n                <a class=\\\"alert-action\\\" (click)=\\\"submitDelete()\\\">Try again</a>\\r\\n              </div>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showMatrixDeleteSuccess\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Matrix successfully deleted.</span>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <div *ngIf=\\\"!showMatrixDeleteSuccess\\\">\\r\\n            <p>Are you sure you want to delete the matrix <b>{{selectedMatrixName}}</b> ?</p>\\r\\n\\r\\n            <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)=\\\"submitDelete()\\\" [clrLoading]=\\\"submitLoading\\\">Delete</button>\\r\\n            <button class=\\\"btn btn-info\\\" (click)=\\\"showHideDelete = !showHideDelete\\\">Close</button>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </clr-modal>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/matrix-types/matrix-types.component.html\n// module id = ./src/app/admin/matrix-types/matrix-types.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/matrix-types/matrix-types.component.scss\n// module id = ./src/app/admin/matrix-types/matrix-types.component.scss\n// module chunks = main","import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';\r\nimport { IMatrix } from '../../SHARED/matrix';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MatrixService } from 'app/SHARED/matrix.service';\r\n\r\n@Component({\r\n  selector: 'matrices',\r\n  templateUrl: './matrix-types.component.html',\r\n  styleUrls: ['./matrix-types.component.scss']\r\n})\r\nexport class MatrixTypesComponent implements OnInit {\r\n  @Input() MatrixTypes: Array<IMatrix>;\r\n  public showHideAdd: boolean;\r\n  public showHideEdit: boolean;\r\n  public showHideDelete: boolean;\r\n  public selectedMatrix: IMatrix;\r\n  public selectedMatrixCode: string;\r\n  public selectedMatrixName: string;\r\n  public selectedMatrixId: number;\r\n  public showMatrixCreateError: boolean;\r\n  public showMatrixEditError: boolean;\r\n  public showMatrixDeleteError: boolean;\r\n  public submitLoading: boolean;\r\n  public showMatrixDeleteSuccess: boolean;\r\n  public showMatrixEditSuccess: boolean;\r\n  public showMatrixCreateSuccess: boolean;\r\n  public errorMessage: string;\r\n\r\n  // add Matrix form - declare a reactive form with appropriate Matrix fields\r\n  addMatrixForm = new FormGroup({\r\n    name: new FormControl('', Validators.required),\r\n    code: new FormControl('', Validators.required)\r\n  });\r\n  // edit Matrix form - declare a reactive form\r\n  editMatrixForm = new FormGroup({\r\n    id: new FormControl(''),\r\n    name: new FormControl('', Validators.required),\r\n    code: new FormControl('', Validators.required) \r\n  });\r\n\r\n  constructor(private _route: ActivatedRoute, private _matrixService: MatrixService, private _cdr: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n    this.showHideAdd = false; this.showHideEdit = false; this.showHideDelete = false;\r\n    this.showMatrixCreateError = false; this.showMatrixEditError = false; this.showMatrixDeleteError = false;\r\n    this.showMatrixCreateSuccess = false; this.showMatrixEditSuccess = false; this.showMatrixDeleteSuccess = false;\r\n    this.submitLoading = false;    \r\n  }\r\n\r\n  public showAddModal() {\r\n    this.showHideAdd = !this.showHideAdd;\r\n    //reset these to false in case Add Filter is clicked more than once\r\n    this.showMatrixCreateError = false;\r\n    this.showMatrixCreateSuccess = false;\r\n  }\r\n\r\n  public editMatrix(selectedMatrix) {\r\n    this.editMatrixForm.reset(); //reset here to ensure states are clean (instead of after update complete)\r\n    this.showMatrixEditSuccess = false; //reset this \r\n    this.showMatrixEditError = false;//reset this \r\n    this.selectedMatrixCode = selectedMatrix.code;\r\n    this.selectedMatrixName = selectedMatrix.name;\r\n    this.selectedMatrixId = selectedMatrix.id;\r\n\r\n    this.editMatrixForm.setValue({\r\n      id: this.selectedMatrixId,\r\n      name: this.selectedMatrixName,\r\n      code: this.selectedMatrixCode\r\n    });\r\n\r\n    // show the edit Filter form if not showing already\r\n    if (this.showHideEdit === false) {\r\n      this.showHideEdit = true;\r\n    }\r\n  }\r\n\r\n  private updateMatrixArray(newItem) {\r\n    let updateItem = this.MatrixTypes.find(this.findIndexToUpdate, newItem.id);\r\n    let index = this.MatrixTypes.indexOf(updateItem);\r\n    this.MatrixTypes[index] = newItem;\r\n  }\r\n\r\n  private findIndexToUpdate(newItem) {\r\n    return newItem.id === this;\r\n  }\r\n\r\n  // create or edit Filter submit\r\n  public onSubmitMatrix(formId, formValue) {\r\n    this.showMatrixCreateError = false;\r\n    this.showMatrixEditError = false;\r\n    this.submitLoading = true;\r\n    switch (formId) {\r\n      case 'edit':\r\n        // update a record\r\n        this._matrixService.update(formValue)\r\n          .subscribe(\r\n          (updatedMatrix) => {\r\n            this.selectedMatrixName = updatedMatrix.name;\r\n            this.selectedMatrixCode = updatedMatrix.code;\r\n            this.updateMatrixArray(formValue);\r\n            this.selectedMatrix = undefined; \r\n            this.submitLoading = false;\r\n            this.showMatrixEditSuccess = true;\r\n            this._cdr.detectChanges();\r\n          },\r\n          error => {\r\n            this.errorMessage = <any>error;\r\n            this.submitLoading = false;\r\n            this.showMatrixEditError = true;\r\n          });\r\n        break;\r\n      case 'add':\r\n        // add a record\r\n        this._matrixService.create(formValue)\r\n          .subscribe(\r\n          (newMatrix) => {\r\n            this.MatrixTypes.push(newMatrix);\r\n            this.addMatrixForm.reset();\r\n            this.submitLoading = false;\r\n            this.showMatrixCreateSuccess = true;\r\n          },\r\n          error => {\r\n            this.errorMessage = <any>error;\r\n            this.submitLoading = false;\r\n            this.showMatrixCreateError = true;\r\n          }\r\n          );\r\n        break;\r\n      default:\r\n      // do something defaulty\r\n    }\r\n  }\r\n\r\n  // show delete Matrix type modal\r\n  public deleteMatrix(selectedMatrix){\r\n    this.showMatrixDeleteSuccess = false; //reset this\r\n    this.showMatrixDeleteError = false; //reset this too\r\n    this.selectedMatrixName = selectedMatrix.name;\r\n    this.selectedMatrixId = selectedMatrix.id;\r\n    // show the delete Filter form if not showing already\r\n    if (this.showHideDelete === false) {\r\n      this.showHideDelete = true;\r\n    }    \r\n  }\r\n\r\n  public submitDelete(){\r\n    //get the index to be deleted by the id\r\n    let ind: number;\r\n    this.MatrixTypes.some((pdh, index, _ary) => {\r\n      if (pdh.id === this.selectedMatrixId) ind = index;\r\n      return pdh.id === this.selectedMatrixId;\r\n    });\r\n    this._matrixService.delete(this.selectedMatrixId)\r\n    .subscribe(\r\n      () => {\r\n      this.selectedMatrixName = \"\"; \r\n      this.MatrixTypes.splice(ind,1);\r\n      this.selectedMatrix = undefined;\r\n      this.submitLoading = false;\r\n      this.showMatrixDeleteSuccess = true;\r\n      this._cdr.detectChanges();\r\n    },\r\n    error => {\r\n      this.errorMessage = <any>error;\r\n      this.submitLoading = false;\r\n      this.showMatrixDeleteError = true;\r\n    }\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/admin/matrix-types/matrix-types.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <!-- Sample Type table -->\\r\\n  <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n    <div class=\\\"card\\\">\\r\\n      <div class=\\\"card-block\\\">\\r\\n        <div class=\\\"card-title\\\">All Sample Types</div>\\r\\n        <div class=\\\"card-text\\\">\\r\\n\\r\\n          <clr-datagrid [(clrDgSingleSelected)]=\\\"selectedST\\\">\\r\\n            <!-- edit and delete Sample Type buttons -->\\r\\n            <clr-dg-action-bar>\\r\\n              <div class=\\\"btn-group\\\">\\r\\n                <button class=\\\"btn btn-sm\\\" (click)=\\\"showAddModal()\\\">\\r\\n                  <clr-icon shape=\\\"plus\\\"></clr-icon>Add</button>\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedST\\\" (click)=\\\"editST(selectedST)\\\">\\r\\n                  <clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit</button>\\r\\n                <!-- <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedST\\\" (click)=\\\"deleteST(selectedST)\\\">\\r\\n                  <clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon> Delete</button> -->\\r\\n              </div>\\r\\n            </clr-dg-action-bar>\\r\\n\\r\\n            <!-- table of all Sample Types -->\\r\\n            <clr-dg-column [clrDgField]=\\\"'id'\\\">\\r\\n              <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                Sample Type ID\\r\\n              </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'name'\\\">\\r\\n              <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                Sample Type Name\\r\\n              </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'code'\\\">\\r\\n              <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                Sample Type Code\\r\\n              </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-row *clrDgItems=\\\"let st of SampleTypes\\\" [clrDgItem]=\\\"st\\\">\\r\\n              <clr-dg-cell>{{st.id}}</clr-dg-cell>\\r\\n              <clr-dg-cell>{{st.name}}</clr-dg-cell>\\r\\n              <clr-dg-cell>{{st.code}}</clr-dg-cell>\\r\\n            </clr-dg-row>\\r\\n          </clr-datagrid>\\r\\n        </div>\\r\\n        <!-- end main SampleTypes card text -->\\r\\n      </div>\\r\\n      <!-- end main SampleTypes card block -->\\r\\n    </div>\\r\\n    <!-- end main SampleTypes card -->\\r\\n  </div>\\r\\n\\r\\n  <!-- add SampleTypes Modal -->\\r\\n  <clr-modal [(clrModalOpen)]=\\\"showHideAdd\\\">\\r\\n    <h3 class=\\\"modal-title\\\"><clr-icon shape=\\\"plus\\\"></clr-icon> Add Sample Type</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12\\\">\\r\\n\\r\\n          <form id=\\\"addSTForm\\\" class=\\\"compact\\\" [formGroup]=\\\"addSTForm\\\" (ngSubmit)=\\\"onSubmitST('add', addSTForm.value)\\\">\\r\\n\\r\\n            <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showSTCreateError\\\">\\r\\n              <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">Submission error. Sample Type not submitted. {{errorMessage}}</span>\\r\\n                <div class=\\\"alert-actions\\\">\\r\\n                  <a class=\\\"alert-action\\\" (click)=\\\"onSubmitST('add', addSTForm.value)\\\">Try again</a>\\r\\n                </div>\\r\\n              </div>\\r\\n            </clr-alert>\\r\\n\\r\\n            <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showSTCreateSuccess\\\">\\r\\n              <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">Sample Type successfully submitted</span>\\r\\n                <div class=\\\"alert-actions\\\">\\r\\n                  <a class=\\\"alert-action\\\" (click)=\\\"showHideAdd = false; showSTCreateSuccess = false\\\">Close</a>\\r\\n                </div>\\r\\n              </div>\\r\\n            </clr-alert>\\r\\n\\r\\n\\r\\n            <section class=\\\"form-block\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label class=\\\"required\\\">Name</label>\\r\\n                <label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"addSTForm.get('name').invalid && (addSTForm.get('name').dirty || addSTForm.get('name').touched)\\\">\\r\\n                  <input id=\\\"name\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" size=\\\"30\\\">\\r\\n                  <span class=\\\"tooltip-content\\\">Name is required.</span>\\r\\n                </label>\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label class=\\\"required\\\">Code</label>\\r\\n                <label for=\\\"code\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"addSTForm.get('code').invalid && (addSTForm.get('code').dirty || addSTForm.get('code').touched)\\\">\\r\\n                  <input id=\\\"code\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"code\\\" size=\\\"30\\\">\\r\\n                  <span class=\\\"tooltip-content\\\">Code is required.</span>\\r\\n                </label>\\r\\n              </div>\\r\\n            </section>\\r\\n            <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"addSTForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Submit</button>\\r\\n            <button class=\\\"btn btn-info\\\" (click)=\\\"showHideAdd = !showHideAdd\\\">Close</button>\\r\\n          </form>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </clr-modal>\\r\\n\\r\\n  <!-- edit SampleTypes Modal -->\\r\\n  <clr-modal [(clrModalOpen)]=\\\"showHideEdit\\\">\\r\\n    <h3 class=\\\"modal-title\\\"><clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit Sample Type</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12\\\">\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showSTEditError\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Submission error. Sample Type not edited.</span>\\r\\n              <div class=\\\"alert-actions\\\">\\r\\n                <a class=\\\"alert-action\\\" (click)=\\\"onSubmitST('edit', editSTForm.value)\\\">Try again</a>\\r\\n              </div>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showSTEditSuccess\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Sample Type successfully edited</span>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <form id=\\\"editSTForm\\\" class=\\\"compact\\\" [formGroup]=\\\"editSTForm\\\" (ngSubmit)=\\\"onSubmitST('edit', editSTForm.value)\\\">\\r\\n            <section class=\\\"form-block\\\">\\r\\n              <label>Selected Sample Type: {{selectedSTName}}</label>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"STId\\\">Sample Type ID</label>\\r\\n                <input type=\\\"text\\\" id=\\\"STId\\\" size=\\\"35\\\" formControlName=\\\"id\\\" readonly>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label class=\\\"required\\\">Name</label>\\r\\n                <label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"editSTForm.get('name').invalid && (editSTForm.get('name').dirty || editSTForm.get('name').touched)\\\">\\r\\n                  <input id=\\\"name\\\" type=\\\"text\\\" formControlName=\\\"name\\\" size=\\\"40\\\">\\r\\n                  <span class=\\\"tooltip-content\\\">Name is required.</span>\\r\\n                </label>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label class=\\\"required\\\">Code</label>\\r\\n                <label for=\\\"code\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"editSTForm.get('code').invalid && (editSTForm.get('code').dirty || editSTForm.get('code').touched)\\\">\\r\\n                  <input id=\\\"code\\\" type=\\\"text\\\" formControlName=\\\"code\\\" size=\\\"40\\\">\\r\\n                  <span class=\\\"tooltip-content\\\">Code is required.</span>\\r\\n                </label>\\r\\n              </div>\\r\\n\\r\\n              <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"editSTForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Save Edits</button>\\r\\n              <button class=\\\"btn btn-info\\\" (click)=\\\"showHideEdit = !showHideEdit\\\">Close</button>\\r\\n\\r\\n            </section>\\r\\n          </form>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </clr-modal>\\r\\n\\r\\n  <!-- delete Sample type Modal -->\\r\\n  <clr-modal [(clrModalOpen)]=\\\"showHideDelete\\\">\\r\\n    <h3 class=\\\"modal-title\\\"><clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon> Delete Sample Type</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12\\\">\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showSTDeleteError\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Submission error. Sample Type not deleted.</span>\\r\\n              <div class=\\\"alert-actions\\\">\\r\\n                <a class=\\\"alert-action\\\" (click)=\\\"submitDelete()\\\">Try again</a>\\r\\n              </div>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showSTDeleteSuccess\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Sample Type successfully deleted.</span>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <div *ngIf=\\\"!showSTDeleteSuccess\\\">\\r\\n            <p>Are you sure you want to delete the sample type <b>{{selectedSTName}}</b> ?</p>\\r\\n\\r\\n            <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)=\\\"submitDelete()\\\" [clrLoading]=\\\"submitLoading\\\">Delete</button>\\r\\n            <button class=\\\"btn btn-info\\\" (click)=\\\"showHideDelete = !showHideDelete\\\">Close</button>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </clr-modal>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/sample-types/sample-types.component.html\n// module id = ./src/app/admin/sample-types/sample-types.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/sample-types/sample-types.component.scss\n// module id = ./src/app/admin/sample-types/sample-types.component.scss\n// module chunks = main","import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';\r\n\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ISampleType } from '../../SHARED/sample-type';\r\nimport { SampleTypeService } from '../../SHARED/sample-type.service';\r\n\r\n@Component({\r\n  selector: 'sampletypes',\r\n  templateUrl: './sample-types.component.html',\r\n  styleUrls: ['./sample-types.component.scss']\r\n})\r\nexport class SampleTypesComponent implements OnInit {\r\n  @Input() SampleTypes: Array<ISampleType>;\r\n  public showHideAdd: boolean;\r\n  public showHideEdit: boolean;\r\n  public showHideDelete: boolean;\r\n  public selectedST: ISampleType;\r\n  public selectedSTCode: string;\r\n  public selectedSTName: string;\r\n  public selectedSTId: number;\r\n  public showSTCreateError: boolean;\r\n  public showSTEditError: boolean;\r\n  public showSTDeleteError: boolean;\r\n  public submitLoading: boolean;\r\n  public showSTDeleteSuccess: boolean;\r\n  public showSTEditSuccess: boolean;\r\n  public showSTCreateSuccess: boolean;\r\n  public errorMessage: string;\r\n\r\n  // add Sample form - declare a reactive form with appropriate Sample fields\r\n  addSTForm = new FormGroup({\r\n    name: new FormControl('', Validators.required),\r\n    code: new FormControl('', Validators.required)\r\n  });\r\n  // edit Sample form - declare a reactive form\r\n  editSTForm = new FormGroup({\r\n    id: new FormControl(''),\r\n    name: new FormControl('', Validators.required),\r\n    code: new FormControl('', Validators.required) \r\n  });\r\n\r\n  constructor(private _route: ActivatedRoute, private _stService: SampleTypeService, private _cdr: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n    this.showHideAdd = false; this.showHideEdit = false; this.showHideDelete = false;\r\n    this.showSTCreateError = false; this.showSTEditError = false; this.showSTDeleteError = false;\r\n    this.showSTCreateSuccess = false; this.showSTEditSuccess = false; this.showSTDeleteSuccess = false;\r\n    this.submitLoading = false;    \r\n  }\r\n\r\n  public showAddModal() {\r\n    this.showHideAdd = !this.showHideAdd;\r\n    //reset these to false in case Add Sample Type is clicked more than once\r\n    this.showSTCreateError = false;\r\n    this.showSTCreateSuccess = false;\r\n  }\r\n\r\n  public editST(selectedST) {\r\n    this.editSTForm.reset(); //reset here to ensure states are clean (instead of after update complete)\r\n    this.showSTEditSuccess = false; //reset this \r\n    this.showSTEditError = false;//reset this \r\n    this.selectedSTCode = selectedST.code;\r\n    this.selectedSTName = selectedST.name;\r\n    this.selectedSTId = selectedST.id;\r\n\r\n    this.editSTForm.setValue({\r\n      id: this.selectedSTId,\r\n      name: this.selectedSTName,\r\n      code: this.selectedSTCode\r\n    });\r\n\r\n    // show the edit Sample Type form if not showing already\r\n    if (this.showHideEdit === false) {\r\n      this.showHideEdit = true;\r\n    }\r\n  }\r\n\r\n  private updateSTArray(newItem) {\r\n    let updateItem = this.SampleTypes.find(this.findIndexToUpdate, newItem.id);\r\n    let index = this.SampleTypes.indexOf(updateItem);\r\n    this.SampleTypes[index] = newItem;\r\n  }\r\n\r\n  private findIndexToUpdate(newItem) {\r\n    return newItem.id === this;\r\n  }\r\n\r\n  // create or edit Filter submit\r\n  public onSubmitST(formId, formValue) {\r\n    this.showSTCreateError = false;\r\n    this.showSTEditError = false;\r\n    this.submitLoading = true;\r\n    switch (formId) {\r\n      case 'edit':\r\n        // update a record\r\n        this._stService.update(formValue)\r\n          .subscribe(\r\n          (updatedST) => {\r\n            this.selectedSTName = updatedST.name;\r\n            this.selectedSTCode = updatedST.code;\r\n            this.updateSTArray(formValue);\r\n            this.selectedST = undefined; \r\n            this.submitLoading = false;\r\n            this.showSTEditSuccess = true;\r\n            this._cdr.detectChanges();\r\n          },\r\n          error => {\r\n            this.errorMessage = <any>error;\r\n            this.submitLoading = false;\r\n            this.showSTEditError = true;\r\n          });\r\n        break;\r\n      case 'add':\r\n        // add a record\r\n        this._stService.create(formValue)\r\n          .subscribe(\r\n          (newST) => {\r\n            this.SampleTypes.push(newST);\r\n            this.addSTForm.reset();\r\n            this.submitLoading = false;\r\n            this.showSTCreateSuccess = true;\r\n          },\r\n          error => {\r\n            this.errorMessage = <any>error;\r\n            this.submitLoading = false;\r\n            this.showSTCreateError = true;\r\n          }\r\n          );\r\n        break;\r\n      default:\r\n      // do something defaulty\r\n    }\r\n  }\r\n\r\n  // show delete sample type modal\r\n  public deleteST(selectedST){\r\n    this.showSTDeleteSuccess = false; //reset this\r\n    this.showSTDeleteError = false; //reset this too\r\n    this.selectedSTName = selectedST.name;\r\n    this.selectedSTId = selectedST.id;\r\n    // show the delete Filter form if not showing already\r\n    if (this.showHideDelete === false) {\r\n      this.showHideDelete = true;\r\n    }    \r\n  }\r\n\r\n  public submitDelete(){\r\n    //get the index to be deleted by the id\r\n    let ind: number;\r\n    this.SampleTypes.some((pdh, index, _ary) => {\r\n      if (pdh.id === this.selectedSTId) ind = index;\r\n      return pdh.id === this.selectedSTId;\r\n    });\r\n    this._stService.delete(this.selectedSTId)\r\n    .subscribe(\r\n      () => {\r\n      this.selectedSTName = \"\"; \r\n      this.SampleTypes.splice(ind,1);\r\n      this.selectedST = undefined;\r\n      this.submitLoading = false;\r\n      this.showSTDeleteSuccess = true;\r\n      this._cdr.detectChanges();\r\n    },\r\n    error => {\r\n      this.errorMessage = <any>error;\r\n      this.submitLoading = false;\r\n      this.showSTDeleteError = true;\r\n    }\r\n    );\r\n  }\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/admin/sample-types/sample-types.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n    <div class=\\\"card\\\">\\r\\n      <div class=\\\"card-block\\\">\\r\\n        <div class=\\\"card-title\\\">All Targets</div>\\r\\n        <div class=\\\"card-text\\\">\\r\\n          <clr-datagrid [(clrDgSingleSelected)]=\\\"selectedTarget\\\">\\r\\n            <!-- add, edit and delete Target buttons -->\\r\\n            <clr-dg-action-bar>\\r\\n              <div class=\\\"btn-group\\\">\\r\\n                <button class=\\\"btn btn-sm\\\" (click)=\\\"showAddModal()\\\">\\r\\n                  <clr-icon shape=\\\"plus\\\"></clr-icon> Add</button>\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedTarget\\\" (click)=\\\"editTarget(selectedTarget)\\\">\\r\\n                  <clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit</button>\\r\\n                <!-- <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedTarget\\\" (click)=\\\"deleteTarget(selectedTarget)\\\">\\r\\n                  <clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon> Delete </button> -->\\r\\n              </div>\\r\\n            </clr-dg-action-bar>\\r\\n\\r\\n            <!-- table of all targets -->\\r\\n            <clr-dg-column [clrDgField]=\\\"'id'\\\">\\r\\n              <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                Target ID\\r\\n              </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'name'\\\">\\r\\n              <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                Target Name\\r\\n              </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'description'\\\">\\r\\n              <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                Target Code\\r\\n              </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'description'\\\">\\r\\n              <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                Target Nucleic Acid Type\\r\\n              </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'description'\\\">\\r\\n              <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                Target Notes\\r\\n              </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-row *clrDgItems=\\\"let target of Targets\\\" [clrDgItem]=\\\"target\\\">\\r\\n              <clr-dg-cell>{{target.id}}</clr-dg-cell>\\r\\n              <clr-dg-cell>{{target.name}}</clr-dg-cell>\\r\\n              <clr-dg-cell>{{target.code}}</clr-dg-cell>\\r\\n              <clr-dg-cell>{{target.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes}}</clr-dg-cell>\\r\\n              <clr-dg-cell>{{target.notes}}</clr-dg-cell>\\r\\n            </clr-dg-row>\\r\\n          </clr-datagrid>\\r\\n        </div>\\r\\n        <!-- end main target card text -->\\r\\n      </div>\\r\\n      <!-- end main target card block -->\\r\\n    </div>\\r\\n    <!-- end main target card -->\\r\\n  </div>\\r\\n\\r\\n  <!-- add target Modal -->\\r\\n  <clr-modal [(clrModalOpen)]=\\\"showHideAdd\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n      <clr-icon shape=\\\"plus\\\"></clr-icon> Add Target</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12\\\">\\r\\n          <form id=\\\"addTargetForm\\\" class=\\\"compact\\\" [formGroup]=\\\"addTargetForm\\\" (ngSubmit)=\\\"onSubmitTarget('add', addTargetForm.value)\\\">\\r\\n\\r\\n            <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showTargetCreateError\\\">\\r\\n              <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">Submission error. Target not submitted. {{errorMessage}}</span>\\r\\n                <div class=\\\"alert-actions\\\">\\r\\n                  <a class=\\\"alert-action\\\" (click)=\\\"onSubmitTarget('add', addTargetForm.value)\\\">Try again</a>\\r\\n                </div>\\r\\n              </div>\\r\\n            </clr-alert>\\r\\n\\r\\n            <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"duplicateCodeFlag\\\" [clrAlertClosable]=\\\"false\\\">\\r\\n              <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">You have entered a target code that already exists. Please change your submission to a unique code.</span>\\r\\n                <div class=\\\"alert-actions\\\">\\r\\n                  <a class=\\\"alert-action\\\" (click)=\\\"duplicateCodeFlag = false\\\">Close</a>\\r\\n                </div>\\r\\n              </div>\\r\\n            </clr-alert>\\r\\n\\r\\n            <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showTargetCreateSuccess\\\">\\r\\n              <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">Target successfully submitted</span>\\r\\n                <div class=\\\"alert-actions\\\">\\r\\n                  <a class=\\\"alert-action\\\" (click)=\\\"showHideAdd = false; showTargetCreateSuccess = false\\\">Close</a>\\r\\n                </div>\\r\\n              </div>\\r\\n            </clr-alert>\\r\\n\\r\\n            <section class=\\\"form-block\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label class=\\\"required\\\">Name</label>\\r\\n                <label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"addTargetForm.get('name').invalid && (addTargetForm.get('name').dirty || addTargetForm.get('name').touched)\\\">\\r\\n                  <input id=\\\"name\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" size=\\\"30\\\">\\r\\n                  <span class=\\\"tooltip-content\\\">Name is required.</span>\\r\\n                </label>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Code</label>\\r\\n                <label for=\\\"code\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-sm\\\">\\r\\n                  <input id=\\\"code\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"code\\\" size=\\\"30\\\">\\r\\n                </label>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label class=\\\"required\\\">Nucleic Acid Type</label>\\r\\n                <label for=\\\"nucleic_acid_type\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"addTargetForm.get('nucleic_acid_type').invalid && (addTargetForm.get('nucleic_acid_type').dirty || addTargetForm.get('nucleic_acid_type').touched)\\\">\\r\\n                  <select class=\\\"form-control\\\" id=\\\"nucleic_acid_type\\\" formControlName=\\\"nucleic_acid_type\\\">\\r\\n                    <option *ngFor=\\\"let type of nucleicAcidTypes\\\" [value]=\\\"type.id\\\">{{type.name}}</option>\\r\\n                  </select>\\r\\n                  <span class=\\\"tooltip-content\\\">Nucleic Acid Type is required.</span>\\r\\n                </label>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Notes</label>\\r\\n                <label for=\\\"notes\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-sm\\\">\\r\\n                  <textarea id=\\\"notes\\\" type=\\\"text\\\" formControlName=\\\"notes\\\" rows=\\\"2\\\" style=\\\"max-width:25em\\\"></textarea>\\r\\n                </label>\\r\\n              </div>\\r\\n\\r\\n            </section>\\r\\n            <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"addTargetForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Submit</button>\\r\\n            <button class=\\\"btn btn-info\\\" (click)=\\\"showHideAdd = !showHideAdd\\\">Close</button>\\r\\n\\r\\n          </form>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </clr-modal>\\r\\n\\r\\n  <!-- edit target Modal -->\\r\\n  <clr-modal [(clrModalOpen)]=\\\"showHideEdit\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n      <clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit Target</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12\\\">\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showTargetEditError\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Submission error. Target not edited.</span>\\r\\n              <div class=\\\"alert-actions\\\">\\r\\n                <a class=\\\"alert-action\\\" (click)=\\\"onSubmitTarget('edit', editTargetForm.value)\\\">Try again</a>\\r\\n              </div>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showTargetEditSuccess\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Target successfully edited</span>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <form id=\\\"editTargetForm\\\" class=\\\"compact\\\" [formGroup]=\\\"editTargetForm\\\" (ngSubmit)=\\\"onSubmitTarget('edit', editTargetForm.value)\\\">\\r\\n            <section class=\\\"form-block\\\">\\r\\n              <label>Selected Target: {{selectedTargetName}}</label>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"TargetId\\\">Target ID</label>\\r\\n                <input type=\\\"text\\\" id=\\\"TargetId\\\" size=\\\"35\\\" formControlName=\\\"id\\\" readonly>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label class=\\\"required\\\">Name</label>\\r\\n                <label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"editTargetForm.get('name').invalid && (editTargetForm.get('name').dirty || editTargetForm.get('name').touched)\\\">\\r\\n                  <input id=\\\"name\\\" type=\\\"text\\\" formControlName=\\\"name\\\" size=\\\"40\\\">\\r\\n                  <span class=\\\"tooltip-content\\\">Name is required.</span>\\r\\n                </label>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Code</label>\\r\\n                <label for=\\\"code\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-sm\\\">\\r\\n                  <input id=\\\"code\\\" type=\\\"text\\\" formControlName=\\\"code\\\" size=\\\"40\\\" readonly>\\r\\n                </label>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label class=\\\"required\\\">Nucleic Acid Type</label>\\r\\n                <label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"editTargetForm.get('name').invalid && (editTargetForm.get('name').dirty || editTargetForm.get('name').touched)\\\">\\r\\n                  <select class=\\\"form-control\\\" id=\\\"nucleic_acid_type\\\" formControlName=\\\"nucleic_acid_type\\\">\\r\\n                    <option value=\\\"DNA\\\">DNA</option>\\r\\n                    <option value=\\\"RNA\\\">RNA</option>\\r\\n                  </select>\\r\\n                  <span class=\\\"tooltip-content\\\">Nucleic Acid Type is required.</span>\\r\\n                </label>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Notes</label>\\r\\n                <label for=\\\"notes\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-sm\\\">\\r\\n                  <textarea id=\\\"notes\\\" type=\\\"text\\\" formControlName=\\\"notes\\\" rows=\\\"2\\\" style=\\\"max-width:25em\\\"></textarea>\\r\\n                </label>\\r\\n              </div>\\r\\n\\r\\n              <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"editTargetForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Save Edits</button>\\r\\n              <button class=\\\"btn btn-info\\\" (click)=\\\"showHideEdit = !showHideEdit\\\">Close</button>\\r\\n\\r\\n            </section>\\r\\n          </form>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </clr-modal>\\r\\n\\r\\n  <!-- delete target Modal -->\\r\\n  <clr-modal [(clrModalOpen)]=\\\"showHideDelete\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n      <clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon> Delete Target</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12\\\">\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showTargetDeleteError\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Submission error. Target not deleted.</span>\\r\\n              <div class=\\\"alert-actions\\\">\\r\\n                <a class=\\\"alert-action\\\" (click)=\\\"submitDelete()\\\">Try again</a>\\r\\n              </div>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showTargetDeleteSuccess\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Target successfully deleted.</span>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <div *ngIf=\\\"!showTargetDeleteSuccess\\\">\\r\\n            <p>Are you sure you want to delete the target\\r\\n              <b>{{selectedTargetName}}</b> ?</p>\\r\\n\\r\\n            <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)=\\\"submitDelete()\\\" [clrLoading]=\\\"submitLoading\\\">Delete</button>\\r\\n            <button class=\\\"btn btn-info\\\" (click)=\\\"showHideDelete = !showHideDelete\\\">Close</button>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </clr-modal>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/targets/targets.component.html\n// module id = ./src/app/admin/targets/targets.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/targets/targets.component.scss\n// module id = ./src/app/admin/targets/targets.component.scss\n// module chunks = main","import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';\r\nimport { ITarget } from '../../targets/target';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { TargetService } from '../../targets/target.service';\r\nimport { FormArray } from '@angular/forms/src/model';\r\n\r\nimport { APP_SETTINGS } from '../../app.settings';\r\n\r\n@Component({\r\n  selector: 'targets',\r\n  templateUrl: './targets.component.html',\r\n  styleUrls: ['./targets.component.scss']\r\n})\r\nexport class TargetsComponent implements OnInit {\r\n  @Input() Targets: Array<ITarget>;\r\n  public showHideAdd: boolean;\r\n  public showHideEdit: boolean;\r\n  public showHideDelete: boolean;\r\n  public selectedTarget: ITarget;\r\n  public selectedTargetNote: string;\r\n  public selectedTargetType: string;\r\n  public selectedTargetCode: string;\r\n  public selectedTargetName: string;\r\n  public selectedTargetId: number;\r\n  public showTargetCreateError: boolean;\r\n  public showTargetEditError: boolean;\r\n  public showTargetDeleteError: boolean;\r\n  public submitLoading: boolean;\r\n  public showTargetDeleteSuccess: boolean;\r\n  public showTargetEditSuccess: boolean;\r\n  public showTargetCreateSuccess: boolean;\r\n  public errorMessage: string;\r\n  public nucleicAcidTypes;\r\n  public duplicateCodeFlag: boolean = false;\r\n\r\n  // add Sample form - declare a reactive form with appropriate Sample fields\r\n  addTargetForm = new FormGroup({\r\n    name: new FormControl('', Validators.required),\r\n    code: new FormControl(''),\r\n    nucleic_acid_type: new FormControl('', Validators.required),\r\n    notes: new FormControl('')\r\n  });\r\n  // edit Sample form - declare a reactive form\r\n  editTargetForm = new FormGroup({\r\n    id: new FormControl(''),\r\n    name: new FormControl('', Validators.required),\r\n    code: new FormControl(''),\r\n    nucleic_acid_type: new FormControl('', Validators.required),\r\n    notes: new FormControl('')\r\n  });\r\n\r\n  constructor(private _route: ActivatedRoute, private _targetService: TargetService, private _cdr: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n    this.nucleicAcidTypes = APP_SETTINGS.NUCLEIC_ACID_TYPES;\r\n    this.showHideAdd = false; this.showHideEdit = false; this.showHideDelete = false;\r\n    this.showTargetCreateError = false; this.showTargetEditError = false; this.showTargetDeleteError = false;\r\n    this.showTargetCreateSuccess = false; this.showTargetEditSuccess = false; this.showTargetDeleteSuccess = false;\r\n    this.submitLoading = false;\r\n  }\r\n\r\n  public showAddModal() {\r\n    this.showHideAdd = !this.showHideAdd;\r\n    // reset these to false in case Add Sample Type is clicked more than once\r\n    this.showTargetCreateError = false;\r\n    this.showTargetCreateSuccess = false;\r\n  }\r\n\r\n  public editTarget(selectedTarget) {\r\n    this.editTargetForm.reset(); // reset here to ensure states are clean (instead of after update complete)\r\n    this.showTargetEditSuccess = false; // reset this\r\n    this.showTargetEditError = false; // reset this\r\n    this.selectedTargetNote = selectedTarget.notes;\r\n    this.selectedTargetType = selectedTarget.nucleic_acid_type;\r\n    this.selectedTargetCode = selectedTarget.code;\r\n    this.selectedTargetName = selectedTarget.name;\r\n    this.selectedTargetId = selectedTarget.id;\r\n\r\n    this.editTargetForm.setValue({\r\n      id: this.selectedTargetId,\r\n      name: this.selectedTargetName,\r\n      code: this.selectedTargetCode,\r\n      nucleic_acid_type: this.selectedTargetType,\r\n      notes: this.selectedTargetNote\r\n    });\r\n\r\n    // show the edit Sample Type form if not showing already\r\n    if (this.showHideEdit === false) {\r\n      this.showHideEdit = true;\r\n    }\r\n  }\r\n\r\n  private updateTargetArray(newItem) {\r\n    let updateItem = this.Targets.find(this.findIndexToUpdate, newItem.id);\r\n    let index = this.Targets.indexOf(updateItem);\r\n    this.Targets[index] = newItem;\r\n  }\r\n\r\n  private findIndexToUpdate(newItem) {\r\n    return newItem.id === this;\r\n  }\r\n\r\n  // create or edit Filter submit\r\n  public onSubmitTarget(formId, formValue) {\r\n    this.duplicateCodeFlag = false;\r\n    this.showTargetCreateError = false;\r\n    this.showTargetEditError = false;\r\n    this.submitLoading = true;\r\n\r\n\r\n    switch (formId) {\r\n      case 'edit':\r\n        // update a record\r\n        this._targetService.update(formValue)\r\n          .subscribe(\r\n            (updatedTarget) => {\r\n              this.selectedTargetName = updatedTarget.name;\r\n              this.selectedTargetCode = updatedTarget.code;\r\n              this.selectedTargetType = updatedTarget.nucleic_acid_type;\r\n              this.selectedTargetNote = updatedTarget.notes;\r\n              this.updateTargetArray(formValue);\r\n              this.selectedTarget = undefined;\r\n              this.submitLoading = false;\r\n              this.showTargetEditSuccess = true;\r\n              this._cdr.detectChanges();\r\n            },\r\n            error => {\r\n              this.errorMessage = <any>error;\r\n              this.submitLoading = false;\r\n              this.showTargetEditError = true;\r\n            });\r\n        break;\r\n      case 'add':\r\n\r\n        // check if code exists already\r\n        for (let target of this.Targets) {\r\n          if (target.code === formValue.code) {\r\n            this.duplicateCodeFlag = true;\r\n            this.submitLoading = false;\r\n            return;\r\n          }\r\n        }\r\n        // add a record\r\n        this._targetService.create(formValue)\r\n          .subscribe(\r\n            (newTarget) => {\r\n              this.Targets.push(newTarget);\r\n              this.addTargetForm.reset({\r\n                name: '',\r\n                code: '',\r\n                nucleic_acid_type: '',\r\n                notes: ''\r\n              });\r\n              this.submitLoading = false;\r\n              this.showTargetCreateSuccess = true;\r\n            },\r\n            error => {\r\n              this.errorMessage = <any>error;\r\n              this.submitLoading = false;\r\n              this.showTargetCreateError = true;\r\n            }\r\n          );\r\n        break;\r\n      default:\r\n      // do something defaulty\r\n    }\r\n  }\r\n\r\n  // show delete sample type modal\r\n  public deleteTarget(selectedST) {\r\n    this.showTargetDeleteSuccess = false; // reset this\r\n    this.showTargetDeleteError = false; // reset this too\r\n    this.selectedTargetName = selectedST.name;\r\n    this.selectedTargetId = selectedST.id;\r\n    // show the delete Filter form if not showing already\r\n    if (this.showHideDelete === false) {\r\n      this.showHideDelete = true;\r\n    }\r\n  }\r\n\r\n  public submitDelete() {\r\n    // get the index to be deleted by the id\r\n    let ind: number;\r\n    this.Targets.some((pdh, index, _ary) => {\r\n      if (pdh.id === this.selectedTargetId) { ind = index };\r\n      return pdh.id === this.selectedTargetId;\r\n    });\r\n    this._targetService.delete(this.selectedTargetId)\r\n      .subscribe(\r\n        () => {\r\n          this.selectedTargetName = \"\";\r\n          this.Targets.splice(ind, 1);\r\n          this.selectedTarget = undefined;\r\n          this.submitLoading = false;\r\n          this.showTargetDeleteSuccess = true;\r\n          this._cdr.detectChanges();\r\n        },\r\n        error => {\r\n          this.errorMessage = <any>error;\r\n          this.submitLoading = false;\r\n          this.showTargetDeleteError = true;\r\n        }\r\n      );\r\n  }\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/admin/targets/targets.component.ts","module.exports = \"<!--<div class=\\\"row\\\">-->\\r\\n<!-- Units table -->\\r\\n<div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n\\t<div class=\\\"card\\\">\\r\\n\\t\\t<div class=\\\"card-block\\\">\\r\\n\\t\\t\\t<div class=\\\"card-title\\\">Units</div>\\r\\n\\t\\t\\t<div class=\\\"card-text\\\">\\r\\n\\t\\t\\t\\t<clr-datagrid [(clrDgSingleSelected)]=\\\"selectedUnit\\\">\\r\\n\\t\\t\\t\\t\\t<!-- edit and delete Unit buttons -->\\r\\n\\t\\t\\t\\t\\t<clr-dg-action-bar>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"btn-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<button class=\\\"btn btn-sm\\\" (click)=\\\"showAddModal()\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<clr-icon shape=\\\"plus\\\"></clr-icon> Add </button>\\r\\n\\t\\t\\t\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedUnit\\\" (click)=\\\"editUnit(selectedUnit)\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit</button>\\r\\n\\t\\t\\t\\t\\t\\t\\t<!-- <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedUnit\\\" (click)=\\\"deleteUnit(selectedUnit)\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon> Delete</button> -->\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</clr-dg-action-bar>\\r\\n\\r\\n\\t\\t\\t\\t\\t<!-- table of all units -->\\r\\n\\t\\t\\t\\t\\t<clr-dg-column [clrDgField]=\\\"'id'\\\">\\r\\n\\t\\t\\t\\t\\t\\t<ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tUnit ID\\r\\n\\t\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t</clr-dg-column>\\r\\n\\r\\n\\t\\t\\t\\t\\t<clr-dg-column [clrDgField]=\\\"'name'\\\">\\r\\n\\t\\t\\t\\t\\t\\t<ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tUnit Name\\r\\n\\t\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t</clr-dg-column>\\r\\n\\r\\n\\t\\t\\t\\t\\t<clr-dg-column [clrDgField]=\\\"'description'\\\">\\r\\n\\t\\t\\t\\t\\t\\t<ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\tUnit Description\\r\\n\\t\\t\\t\\t\\t\\t</ng-container>\\r\\n\\t\\t\\t\\t\\t</clr-dg-column>\\r\\n\\r\\n\\t\\t\\t\\t\\t<clr-dg-row *clrDgItems=\\\"let u of Units\\\" [clrDgItem]=\\\"u\\\">\\r\\n\\t\\t\\t\\t\\t\\t<clr-dg-cell>{{u.id}}</clr-dg-cell>\\r\\n\\t\\t\\t\\t\\t\\t<clr-dg-cell>{{u.name}}</clr-dg-cell>\\r\\n\\t\\t\\t\\t\\t\\t<clr-dg-cell>{{u.description}}</clr-dg-cell>\\r\\n\\t\\t\\t\\t\\t</clr-dg-row>\\r\\n\\t\\t\\t\\t</clr-datagrid>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<!-- end main Unit card text -->\\r\\n\\t\\t</div>\\r\\n\\t\\t<!-- end main Unit card block -->\\r\\n\\t</div>\\r\\n\\t<!-- end main Unit card -->\\r\\n</div>\\r\\n\\r\\n<!-- add Unit Modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideAdd\\\">\\r\\n\\t<h3 class=\\\"modal-title\\\">\\r\\n\\t\\t<clr-icon shape=\\\"plus\\\"></clr-icon> Add Unit</h3>\\r\\n\\t<div class=\\\"modal-body\\\">\\r\\n\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t<div class=\\\"col-lg-12\\\">\\r\\n\\t\\t\\t\\t<form id=\\\"addUnitForm\\\" class=\\\"compact\\\" [formGroup]=\\\"addUnitForm\\\" (ngSubmit)=\\\"onSubmitUnit('add', addUnitForm.value)\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"card-block\\\">\\r\\n\\t\\t\\t\\t\\t\\t<clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showUnitCreateError\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div clr-alert-item class=\\\"alert-item\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\\"alert-text\\\">Submission error. Unit not submitted. {{errorMessage}}</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"alert-actions\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<a class=\\\"alert-action\\\" (click)=\\\"onSubmitUnit('add', addUnitForm.value)\\\">Try again</a>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</clr-alert>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showUnitCreateSuccess\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div clr-alert-item class=\\\"alert-item\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\\"alert-text\\\">Unit successfully submitted</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<div class=\\\"alert-actions\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<a class=\\\"alert-action\\\" (click)=\\\"showHideAdd = false; showUnitCreateSuccess = false\\\">Close</a>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</clr-alert>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<section class=\\\"form-block\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"form-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<label class=\\\"required\\\">Name</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"addUnitForm.get('name').invalid && (addUnitForm.get('name').dirty || addUnitForm.get('name').touched)\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<input id=\\\"name\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" size=\\\"30\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\\"tooltip-content\\\">Name is required.</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t\\t<div class=\\\"form-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<label>Description</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<label for=\\\"description\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-sm\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<textarea id=\\\"description\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"description\\\" rows=\\\"2\\\" cols=\\\"30\\\" style=\\\"max-width:25em\\\"></textarea>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t\\t</section>\\r\\n\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"card-footer\\\">\\r\\n\\t\\t\\t\\t\\t\\t<button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"addUnitForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Submit</button>\\r\\n\\t\\t\\t\\t\\t\\t<button class=\\\"btn btn-info\\\" (click)=\\\"showHideAdd = !showHideAdd\\\">Close</button>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</form>\\r\\n\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</clr-modal>\\r\\n\\r\\n<!-- edit Unit Modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideEdit\\\">\\r\\n\\t<h3 class=\\\"modal-title\\\">\\r\\n\\t\\t<clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit Unit</h3>\\r\\n\\t<div class=\\\"modal-body\\\">\\r\\n\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t<div class=\\\"col-lg-12\\\">\\r\\n\\t\\t\\t\\t<clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showUnitEditError\\\">\\r\\n\\t\\t\\t\\t\\t<div clr-alert-item class=\\\"alert-item\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\\\"alert-text\\\">Submission error. Unit not edited.</span>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"alert-actions\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<a class=\\\"alert-action\\\" (click)=\\\"onSubmitUnit('edit', editUnitForm.value)\\\">Try again</a>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</clr-alert>\\r\\n\\r\\n\\t\\t\\t\\t<clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showUnitEditSuccess\\\">\\r\\n\\t\\t\\t\\t\\t<div clr-alert-item class=\\\"alert-item\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\\\"alert-text\\\">Unit successfully edited</span>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</clr-alert>\\r\\n\\r\\n\\t\\t\\t\\t<form id=\\\"editUnitForm\\\" class=\\\"compact\\\" [formGroup]=\\\"editUnitForm\\\" (ngSubmit)=\\\"onSubmitUnit('edit', editUnitForm.value)\\\">\\r\\n\\t\\t\\t\\t\\t<section class=\\\"form-block\\\">\\r\\n\\t\\t\\t\\t\\t\\t<label>Selected Unit: {{selectedUnitName}}</label>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label for=\\\"UnitId\\\">Unit ID</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<input type=\\\"text\\\" id=\\\"UnitId\\\" size=\\\"35\\\" formControlName=\\\"id\\\" readonly>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label class=\\\"required\\\">Name</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"editUnitForm.get('name').invalid && (editUnitForm.get('name').dirty || editUnitForm.get('name').touched)\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<input id=\\\"name\\\" type=\\\"text\\\" formControlName=\\\"name\\\" size=\\\"40\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span class=\\\"tooltip-content\\\">Name is required.</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t</label>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"form-group\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<label>Description</label>\\r\\n\\t\\t\\t\\t\\t\\t\\t<label for=\\\"description\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-sm\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<textarea id=\\\"description\\\" type=\\\"text\\\" formControlName=\\\"description\\\" rows=\\\"2\\\" style=\\\"max-width:25em\\\"></textarea>\\r\\n\\t\\t\\t\\t\\t\\t\\t</label>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\r\\n\\t\\t\\t\\t\\t\\t<button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"editUnitForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Save Edits</button>\\r\\n\\t\\t\\t\\t\\t\\t<button class=\\\"btn btn-info\\\" (click)=\\\"showHideEdit = !showHideEdit\\\">Close</button>\\r\\n\\r\\n\\t\\t\\t\\t\\t</section>\\r\\n\\t\\t\\t\\t</form>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</clr-modal>\\r\\n\\r\\n<!-- delete Unit type Modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideDelete\\\">\\r\\n\\t<h3 class=\\\"modal-title\\\">\\r\\n\\t\\t<clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon> Delete Unit</h3>\\r\\n\\t<div class=\\\"modal-body\\\">\\r\\n\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t<div class=\\\"col-lg-12\\\">\\r\\n\\t\\t\\t\\t<clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showUnitDeleteError\\\">\\r\\n\\t\\t\\t\\t\\t<div clr-alert-item class=\\\"alert-item\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\\\"alert-text\\\">Submission error. Unit not deleted.</span>\\r\\n\\t\\t\\t\\t\\t\\t<div class=\\\"alert-actions\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<a class=\\\"alert-action\\\" (click)=\\\"submitDelete()\\\">Try again</a>\\r\\n\\t\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</clr-alert>\\r\\n\\r\\n\\t\\t\\t\\t<clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showUnitDeleteSuccess\\\">\\r\\n\\t\\t\\t\\t\\t<div clr-alert-item class=\\\"alert-item\\\">\\r\\n\\t\\t\\t\\t\\t\\t<span class=\\\"alert-text\\\">Unit successfully deleted.</span>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</clr-alert>\\r\\n\\r\\n\\t\\t\\t\\t<div *ngIf=\\\"!showUnitDeleteSuccess\\\">\\r\\n\\t\\t\\t\\t\\t<p>Are you sure you want to delete the unit\\r\\n\\t\\t\\t\\t\\t\\t<b>{{selectedUnitName}}</b> ?</p>\\r\\n\\r\\n\\t\\t\\t\\t\\t<button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)=\\\"submitDelete()\\\" [clrLoading]=\\\"submitLoading\\\">Delete</button>\\r\\n\\t\\t\\t\\t\\t<button class=\\\"btn btn-info\\\" (click)=\\\"showHideDelete = !showHideDelete\\\">Close</button>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</clr-modal>\\r\\n<!--</div>-->\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/units/units.component.html\n// module id = ./src/app/admin/units/units.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/units/units.component.scss\n// module id = ./src/app/admin/units/units.component.scss\n// module chunks = main","import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';\r\nimport { IUnit } from '../../units/unit';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { UnitService } from '../../units/unit.service';\r\n\r\n@Component({\r\n  selector: 'units',\r\n  templateUrl: './units.component.html',\r\n  styleUrls: ['./units.component.scss']\r\n})\r\nexport class UnitsComponent implements OnInit {\r\n  @Input() Units: Array<IUnit>;\r\n  public showHideAdd: boolean;\r\n  public showHideEdit: boolean;\r\n  public showHideDelete: boolean;\r\n  public selectedUnit: IUnit;\r\n  public selectedUnitDesc: string;\r\n  public selectedUnitName: string;\r\n  public selectedUnitId: number;\r\n  public showUnitCreateError: boolean;\r\n  public showUnitEditError: boolean;\r\n  public showUnitDeleteError: boolean;\r\n  public submitLoading: boolean;\r\n  public showUnitDeleteSuccess: boolean;\r\n  public showUnitEditSuccess: boolean;\r\n  public showUnitCreateSuccess: boolean;\r\n  public errorMessage: string;\r\n\r\n  // add Unit form - declare a reactive form with appropriate Unit fields\r\n  addUnitForm = new FormGroup({\r\n    name: new FormControl('', Validators.required),\r\n    description: new FormControl('')\r\n  });\r\n  // edit Unit form - declare a reactive form\r\n  editUnitForm = new FormGroup({\r\n    id: new FormControl(''),\r\n    name: new FormControl('', Validators.required),\r\n    description: new FormControl('')\r\n  });\r\n\r\n  constructor(private _route: ActivatedRoute, private _unitService: UnitService, private _cdr: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n    this.showHideAdd = false; this.showHideEdit = false; this.showHideDelete = false;\r\n    this.showUnitCreateError = false; this.showUnitEditError = false; this.showUnitDeleteError = false;\r\n    this.showUnitCreateSuccess = false; this.showUnitEditSuccess = false; this.showUnitDeleteSuccess = false;\r\n    this.submitLoading = false;\r\n  }\r\n\r\n  public showAddModal() {\r\n    this.showHideAdd = !this.showHideAdd;\r\n    // reset these to false in case Add Unit is clicked more than once\r\n    this.showUnitCreateError = false;\r\n    this.showUnitCreateSuccess = false;\r\n  }\r\n\r\n  public editUnit(selectedUnit) {\r\n    this.editUnitForm.reset(); // reset here to ensure states are clean (instead of after update complete)\r\n    this.showUnitEditSuccess = false; // reset this \r\n    this.showUnitEditError = false;// reset this \r\n    this.selectedUnitDesc = selectedUnit.description;\r\n    this.selectedUnitName = selectedUnit.name;\r\n    this.selectedUnitId = selectedUnit.id;\r\n\r\n    this.editUnitForm.setValue({\r\n      id: this.selectedUnitId,\r\n      name: this.selectedUnitName,\r\n      description: this.selectedUnitDesc\r\n    });\r\n\r\n    // show the edit Unit form if not showing already\r\n    if (this.showHideEdit === false) {\r\n      this.showHideEdit = true;\r\n    }\r\n  }\r\n\r\n  private updateUnitArray(newItem) {\r\n    let updateItem = this.Units.find(this.findIndexToUpdate, newItem.id);\r\n    let index = this.Units.indexOf(updateItem);\r\n    this.Units[index] = newItem;\r\n  }\r\n\r\n  private findIndexToUpdate(newItem) {\r\n    return newItem.id === this;\r\n  }\r\n\r\n  // create or edit Unit submit\r\n  public onSubmitUnit(formId, formValue) {\r\n    this.showUnitCreateError = false;\r\n    this.showUnitEditError = false;\r\n    this.submitLoading = true;\r\n    switch (formId) {\r\n      case 'edit':\r\n        // update a record\r\n        this._unitService.update(formValue)\r\n          .subscribe(\r\n            (updatedUnit) => {\r\n              this.selectedUnitName = updatedUnit.name;\r\n              this.selectedUnitDesc = updatedUnit.description;\r\n              this.updateUnitArray(formValue);\r\n              this.selectedUnit = undefined;\r\n              this.submitLoading = false;\r\n              this.showUnitEditSuccess = true;\r\n              this._cdr.detectChanges();\r\n            },\r\n            error => {\r\n              this.errorMessage = <any>error;\r\n              this.submitLoading = false;\r\n              this.showUnitEditError = true;\r\n            });\r\n        break;\r\n      case 'add':\r\n        // add a record\r\n        this._unitService.create(formValue)\r\n          .subscribe(\r\n            (newUnit) => {\r\n              this.Units.push(newUnit);\r\n              this.addUnitForm.reset();\r\n              this.submitLoading = false;\r\n              this.showUnitCreateSuccess = true;\r\n            },\r\n            error => {\r\n              this.errorMessage = <any>error;\r\n              this.submitLoading = false;\r\n              this.showUnitCreateError = true;\r\n            }\r\n          );\r\n        break;\r\n      default:\r\n      // do something defaulty\r\n    }\r\n  }\r\n\r\n  // show delete Unit type modal\r\n  public deleteUnit(selectedUnit) {\r\n    this.showUnitDeleteSuccess = false; //reset this\r\n    this.showUnitDeleteError = false; //reset this too\r\n    this.selectedUnitName = selectedUnit.name;\r\n    this.selectedUnitId = selectedUnit.id;\r\n    // show the delete Unit form if not showing already\r\n    if (this.showHideDelete === false) {\r\n      this.showHideDelete = true;\r\n    }\r\n  }\r\n\r\n  public submitDelete() {\r\n    //get the index to be deleted by the id\r\n    let ind: number;\r\n    this.Units.some((pdh, index, _ary) => {\r\n      if (pdh.id === this.selectedUnitId) ind = index;\r\n      return pdh.id === this.selectedUnitId;\r\n    });\r\n    this._unitService.delete(this.selectedUnitId)\r\n      .subscribe(\r\n        () => {\r\n          this.selectedUnitName = \"\";\r\n          this.Units.splice(ind, 1);\r\n          this.selectedUnit = undefined;\r\n          this.submitLoading = false;\r\n          this.showUnitDeleteSuccess = true;\r\n          this._cdr.detectChanges();\r\n        },\r\n        error => {\r\n          this.errorMessage = <any>error;\r\n          this.submitLoading = false;\r\n          this.showUnitDeleteError = true;\r\n        }\r\n      );\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/admin/units/units.component.ts","module.exports = \"<div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n  <div class=\\\"card\\\">\\r\\n    <div class=\\\"card-block\\\">\\r\\n      <div class=\\\"card-title\\\">Users</div>\\r\\n      <div class=\\\"card-text\\\">\\r\\n\\r\\n        <clr-datagrid [(clrDgSingleSelected)]=\\\"selectedUser\\\">\\r\\n          <!-- edit and delete CT buttons -->\\r\\n          <clr-dg-action-bar>\\r\\n            <div class=\\\"btn-group\\\">\\r\\n              <button class=\\\"btn btn-sm\\\" (click)=\\\"showAddModal()\\\">\\r\\n                <clr-icon shape=\\\"plus\\\"></clr-icon> Add</button>\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedUser\\\" (click)=\\\"editUser(selectedUser)\\\">\\r\\n                <clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit</button>\\r\\n              <!-- <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedUser\\\" (click)=\\\"deleteUser(selectedUser)\\\">\\r\\n                <clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon> Delete</button> -->\\r\\n            </div>\\r\\n          </clr-dg-action-bar>\\r\\n\\r\\n          <!-- table of all users -->\\r\\n          <clr-dg-column [clrDgField]=\\\"'id'\\\">\\r\\n            <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n              User ID\\r\\n            </ng-container>\\r\\n          </clr-dg-column>\\r\\n\\r\\n          <clr-dg-column [clrDgField]=\\\"'name'\\\">\\r\\n            <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n              User First Name\\r\\n            </ng-container>\\r\\n          </clr-dg-column>\\r\\n\\r\\n          <clr-dg-column [clrDgField]=\\\"'description'\\\">\\r\\n            <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n              User Last Name\\r\\n            </ng-container>\\r\\n          </clr-dg-column>\\r\\n\\r\\n          <clr-dg-column [clrDgField]=\\\"'description'\\\">\\r\\n            <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n              User Username\\r\\n            </ng-container>\\r\\n          </clr-dg-column>\\r\\n\\r\\n          <clr-dg-column [clrDgField]=\\\"'description'\\\">\\r\\n            <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n              User Email\\r\\n            </ng-container>\\r\\n          </clr-dg-column>\\r\\n\\r\\n          <clr-dg-row *clrDgItems=\\\"let user of Users\\\" [clrDgItem]=\\\"user\\\">\\r\\n            <clr-dg-cell>{{user.id}}</clr-dg-cell>\\r\\n            <clr-dg-cell>{{user.first_name}}</clr-dg-cell>\\r\\n            <clr-dg-cell>{{user.last_name}}</clr-dg-cell>\\r\\n            <clr-dg-cell>{{user.username}}</clr-dg-cell>\\r\\n            <clr-dg-cell>{{user.email}}</clr-dg-cell>\\r\\n          </clr-dg-row>\\r\\n\\r\\n        </clr-datagrid>\\r\\n      </div>\\r\\n      <!-- end main user card text -->\\r\\n    </div>\\r\\n    <!-- end main user card block -->\\r\\n  </div>\\r\\n  <!-- end main user card -->\\r\\n</div>\\r\\n\\r\\n<!-- add user Modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideAdd\\\">\\r\\n  <h3 class=\\\"modal-title\\\">\\r\\n    <clr-icon shape=\\\"plus\\\"></clr-icon> Add User</h3>\\r\\n  <div class=\\\"modal-body\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-lg-12\\\">\\r\\n        <form id=\\\"addUserForm\\\" class=\\\"compact\\\" [formGroup]=\\\"addUserForm\\\" (ngSubmit)=\\\"onSubmitUser('add', addUserForm.value)\\\">\\r\\n\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showUserCreateError\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Submission error. User not submitted. {{errorMessage}}</span>\\r\\n              <div class=\\\"alert-actions\\\">\\r\\n                <a class=\\\"alert-action\\\" (click)=\\\"onSubmitUser('add', addUserForm.value)\\\">Try again</a>\\r\\n              </div>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showUserCreateSuccess\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">User successfully submitted</span>\\r\\n              <div class=\\\"alert-actions\\\">\\r\\n                <a class=\\\"alert-action\\\" (click)=\\\"showHideAdd = false; showUserCreateSuccess = false\\\">Close</a>\\r\\n              </div>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n\\r\\n          <section class=\\\"form-block\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label>First Name</label>\\r\\n              <label for=\\\"first_name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"addUserForm.get('first_name').invalid && (addUserForm.get('first_name').dirty || addUserForm.get('first_name').touched)\\\">\\r\\n                <input id=\\\"first_name\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"first_name\\\" size=\\\"30\\\">\\r\\n                <span class=\\\"tooltip-content\\\">First Name is required.</span>\\r\\n              </label>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label>Last Name</label>\\r\\n              <label for=\\\"last_name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"addUserForm.get('last_name').invalid && (addUserForm.get('last_name').dirty || addUserForm.get('last_name').touched)\\\">\\r\\n                <input id=\\\"last_name\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"last_name\\\" size=\\\"30\\\">\\r\\n                <span class=\\\"tooltip-content\\\">Last Name is required.</span>\\r\\n              </label>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label>User Name</label>\\r\\n              <label for=\\\"username\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"addUserForm.get('username').invalid && (addUserForm.get('username').dirty || addUserForm.get('username').touched)\\\">\\r\\n                <input id=\\\"username\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"username\\\" size=\\\"30\\\">\\r\\n                <span class=\\\"tooltip-content\\\">User Name is required.</span>\\r\\n              </label>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label>Email</label>\\r\\n              <label for=\\\"email\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"addUserForm.get('email').invalid && (addUserForm.get('email').dirty || addUserForm.get('email').touched)\\\">\\r\\n                <input id=\\\"email\\\" type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" size=\\\"30\\\">\\r\\n                <span class=\\\"tooltip-content\\\">Email is required.</span>\\r\\n              </label>\\r\\n            </div>\\r\\n          </section>\\r\\n          <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"addUserForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Submit</button>\\r\\n          <button class=\\\"btn btn-info\\\" (click)=\\\"showHideAdd = !showHideAdd\\\">Close</button>\\r\\n\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</clr-modal>\\r\\n\\r\\n<!-- edit user Modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideEdit\\\">\\r\\n  <h3 class=\\\"modal-title\\\">\\r\\n    <clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit User</h3>\\r\\n  <div class=\\\"modal-body\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-lg-12\\\">\\r\\n        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showUserEditError\\\">\\r\\n          <div clr-alert-item class=\\\"alert-item\\\">\\r\\n            <span class=\\\"alert-text\\\">Submission error. User not edited.</span>\\r\\n            <div class=\\\"alert-actions\\\">\\r\\n              <a class=\\\"alert-action\\\" (click)=\\\"onSubmitUser('edit', editUserForm.value)\\\">Try again</a>\\r\\n            </div>\\r\\n          </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showUserEditSuccess\\\">\\r\\n          <div clr-alert-item class=\\\"alert-item\\\">\\r\\n            <span class=\\\"alert-text\\\">User successfully edited</span>\\r\\n          </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <form id=\\\"editCTForm\\\" class=\\\"compact\\\" [formGroup]=\\\"editUserForm\\\" (ngSubmit)=\\\"onSubmitUser('edit', editUserForm.value)\\\">\\r\\n          <section class=\\\"form-block\\\">\\r\\n            <label>Selected User: {{selectedUserFirstName}}</label>\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"UserId\\\">User ID</label>\\r\\n              <input type=\\\"text\\\" id=\\\"UserId\\\" size=\\\"35\\\" formControlName=\\\"id\\\" readonly>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label>First Name</label>\\r\\n              <label for=\\\"first_name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"editUserForm.get('first_name').invalid && (editUserForm.get('first_name').dirty || editUserForm.get('first_name').touched)\\\">\\r\\n                <input id=\\\"first_name\\\" type=\\\"text\\\" formControlName=\\\"first_name\\\" size=\\\"40\\\">\\r\\n                <span class=\\\"tooltip-content\\\">First Name is required.</span>\\r\\n              </label>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label>Last Name</label>\\r\\n              <label for=\\\"last_name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"editUserForm.get('last_name').invalid && (editUserForm.get('last_name').dirty || editUserForm.get('last_name').touched)\\\">\\r\\n                <input id=\\\"last_name\\\" type=\\\"text\\\" formControlName=\\\"last_name\\\" size=\\\"40\\\">\\r\\n                <span class=\\\"tooltip-content\\\">First Name is required.</span>\\r\\n              </label>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label>User Name</label>\\r\\n              <label for=\\\"username\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"editUserForm.get('username').invalid && (editUserForm.get('username').dirty || editUserForm.get('username').touched)\\\">\\r\\n                <input id=\\\"username\\\" type=\\\"text\\\" formControlName=\\\"username\\\" size=\\\"40\\\">\\r\\n                <span class=\\\"tooltip-content\\\">User Name is required.</span>\\r\\n              </label>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label>Email</label>\\r\\n              <label for=\\\"email\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"editUserForm.get('email').invalid && (editUserForm.get('email').dirty || editUserForm.get('email').touched)\\\">\\r\\n                <input id=\\\"email\\\" type=\\\"email\\\" formControlName=\\\"email\\\" size=\\\"40\\\">\\r\\n                <span class=\\\"tooltip-content\\\">Email is required with proper formatting.</span>\\r\\n              </label>\\r\\n            </div>\\r\\n\\r\\n            <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"editUserForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Save Edits</button>\\r\\n            <button class=\\\"btn btn-info\\\" (click)=\\\"showHideEdit = !showHideEdit\\\">Close</button>\\r\\n\\r\\n          </section>\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</clr-modal>\\r\\n\\r\\n<!-- delete User Modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideDelete\\\">\\r\\n  <h3 class=\\\"modal-title\\\">\\r\\n    <clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Delete User</h3>\\r\\n  <div class=\\\"modal-body\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-lg-12\\\">\\r\\n        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showUserDeleteError\\\">\\r\\n          <div clr-alert-item class=\\\"alert-item\\\">\\r\\n            <span class=\\\"alert-text\\\">Submission error. User not deleted.</span>\\r\\n            <div class=\\\"alert-actions\\\">\\r\\n              <a class=\\\"alert-action\\\" (click)=\\\"submitDelete()\\\">Try again</a>\\r\\n            </div>\\r\\n          </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showUserDeleteSuccess\\\">\\r\\n          <div clr-alert-item class=\\\"alert-item\\\">\\r\\n            <span class=\\\"alert-text\\\">User successfully deleted.</span>\\r\\n          </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <div *ngIf=\\\"!showUserDeleteSuccess\\\">\\r\\n          <p>Are you sure you want to delete the user\\r\\n            <b>{{selectedUserFirstName}}</b> ?</p>\\r\\n\\r\\n          <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)=\\\"submitDelete()\\\" [clrLoading]=\\\"submitLoading\\\">Delete</button>\\r\\n          <button class=\\\"btn btn-info\\\" (click)=\\\"showHideDelete = !showHideDelete\\\">Close</button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</clr-modal>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/users/users.component.html\n// module id = ./src/app/admin/users/users.component.html\n// module chunks = main","module.exports = \"\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/admin/users/users.component.scss\n// module id = ./src/app/admin/users/users.component.scss\n// module chunks = main","import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';\r\nimport { IUser } from '../../SHARED/user';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { UserService } from 'app/SHARED/user.service';\r\n\r\n@Component({\r\n  selector: 'users',\r\n  templateUrl: './users.component.html',\r\n  styleUrls: ['./users.component.scss']\r\n})\r\nexport class UsersComponent implements OnInit {\r\n  @Input() Users: Array<IUser>;\r\n  public showHideAdd: boolean;\r\n  public showHideEdit: boolean;\r\n  public showHideDelete: boolean;\r\n\r\n  public selectedUser: IUser;\r\n  public selectedUserEmail: string;\r\n  public selectedUserUsername: string;\r\n  public selectedUserLastName: string;\r\n  public selectedUserFirstName: string;\r\n  public selectedUserId: number;\r\n\r\n  public showUserCreateError: boolean;\r\n  public showUserEditError: boolean;\r\n  public showUserDeleteError: boolean;\r\n  public submitLoading: boolean;\r\n  public showUserDeleteSuccess: boolean;\r\n  public showUserEditSuccess: boolean;\r\n  public showUserCreateSuccess: boolean;\r\n  public errorMessage: string;\r\n\r\n  // add Sample form - declare a reactive form with appropriate Sample fields\r\n  addUserForm = new FormGroup({\r\n    first_name: new FormControl('', Validators.required),\r\n    last_name: new FormControl('', Validators.required),\r\n    email: new FormControl('', [Validators.required, Validators.email]),\r\n    username: new FormControl('', Validators.required)\r\n  });\r\n  // edit Sample form - declare a reactive form\r\n  editUserForm = new FormGroup({\r\n    id: new FormControl(''),\r\n    first_name: new FormControl('', Validators.required),\r\n    last_name: new FormControl('', Validators.required),\r\n    email: new FormControl('', [Validators.required, Validators.email]),\r\n    username: new FormControl('', Validators.required)\r\n  });\r\n\r\n  constructor(private _route: ActivatedRoute, private _userService: UserService, private _cdr: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n    this.showHideAdd = false; this.showHideEdit = false; this.showHideDelete = false;\r\n    this.showUserCreateError = false; this.showUserEditError = false; this.showUserDeleteError = false;\r\n    this.showUserCreateSuccess = false; this.showUserEditSuccess = false; this.showUserDeleteSuccess = false;\r\n    this.submitLoading = false;\r\n  }\r\n\r\n  public showAddModal() {\r\n    this.showHideAdd = !this.showHideAdd;\r\n    // reset these to false in case Add Sample Type is clicked more than once\r\n    this.showUserCreateError = false;\r\n    this.showUserCreateSuccess = false;\r\n  }\r\n\r\n  public editUser(selectedUser) {\r\n    this.editUserForm.reset(); // reset here to ensure states are clean (instead of after update complete)\r\n    this.showUserEditSuccess = false; // reset this\r\n    this.showUserEditError = false; // reset this\r\n    this.selectedUserEmail = selectedUser.email;\r\n    this.selectedUserUsername = selectedUser.username;\r\n    this.selectedUserLastName = selectedUser.last_name;\r\n    this.selectedUserFirstName = selectedUser.first_name;\r\n    this.selectedUserId = selectedUser.id;\r\n\r\n    this.editUserForm.setValue({\r\n      id: this.selectedUserId,\r\n      first_name: this.selectedUserFirstName,\r\n      last_name: this.selectedUserLastName,\r\n      email: this.selectedUserEmail,\r\n      username: this.selectedUserUsername\r\n    });\r\n\r\n    // show the edit Sample Type form if not showing already\r\n    if (this.showHideEdit === false) {\r\n      this.showHideEdit = true;\r\n    }\r\n  }\r\n\r\n  private updateUserArray(newItem) {\r\n    let updateItem = this.Users.find(this.findIndexToUpdate, newItem.id);\r\n    let index = this.Users.indexOf(updateItem);\r\n    this.Users[index] = newItem;\r\n  }\r\n\r\n  private findIndexToUpdate(newItem) {\r\n    return newItem.id === this;\r\n  }\r\n\r\n  // create or edit Filter submit\r\n  public onSubmitUser(formId, formValue) {\r\n    this.showUserCreateError = false;\r\n    this.showUserEditError = false;\r\n    this.submitLoading = true;\r\n    switch (formId) {\r\n      case 'edit':\r\n        // update a record\r\n        this._userService.update(formValue)\r\n          .subscribe(\r\n          (updatedUser) => {\r\n            this.selectedUserFirstName = updatedUser.first_name;\r\n            this.selectedUserLastName = updatedUser.last_name;\r\n            this.selectedUserUsername = updatedUser.username;\r\n            this.selectedUserEmail = updatedUser.email;            \r\n            this.updateUserArray(formValue);\r\n            this.selectedUser = undefined; \r\n            this.submitLoading = false;\r\n            this.showUserEditSuccess = true;\r\n            this._cdr.detectChanges();\r\n          },\r\n          error => {\r\n            this.errorMessage = <any>error;\r\n            this.submitLoading = false;\r\n            this.showUserEditError = true;\r\n          });\r\n        break;\r\n      case 'add':\r\n        // add a record\r\n        this._userService.create(formValue)\r\n          .subscribe(\r\n          (newST) => {\r\n            this.Users.push(newST);\r\n            this.addUserForm.reset();\r\n            this.submitLoading = false;\r\n            this.showUserCreateSuccess = true;\r\n          },\r\n          error => {\r\n            this.errorMessage = <any>error;\r\n            this.submitLoading = false;\r\n            this.showUserCreateError = true;\r\n          }\r\n          );\r\n        break;\r\n      default:\r\n      // do something defaulty\r\n    }\r\n  }\r\n\r\n  // show delete sample type modal\r\n  public deleteST(selectedUser){\r\n    this.showUserDeleteSuccess = false; //reset this\r\n    this.showUserDeleteError = false; //reset this too\r\n    this.selectedUserLastName = selectedUser.last_name;\r\n    this.selectedUserFirstName = selectedUser.first_name;\r\n    this.selectedUserId = selectedUser.id;\r\n    // show the delete Filter form if not showing already\r\n    if (this.showHideDelete === false) {\r\n      this.showHideDelete = true;\r\n    }    \r\n  }\r\n\r\n  public submitDelete(){\r\n    //get the index to be deleted by the id\r\n    let ind: number;\r\n    this.Users.some((pdh, index, _ary) => {\r\n      if (pdh.id === this.selectedUserId) ind = index;\r\n      return pdh.id === this.selectedUserId;\r\n    });\r\n    this._userService.delete(this.selectedUserId)\r\n    .subscribe(\r\n      () => {\r\n      this.selectedUserFirstName = \"\"; \r\n      this.selectedUserLastName = \"\";\r\n      this.Users.splice(ind,1);\r\n      this.selectedUser = undefined;\r\n      this.submitLoading = false;\r\n      this.showUserDeleteSuccess = true;\r\n      this._cdr.detectChanges();\r\n    },\r\n    error => {\r\n      this.errorMessage = <any>error;\r\n      this.submitLoading = false;\r\n      this.showUserDeleteError = true;\r\n    }\r\n    );\r\n  }\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/admin/users/users.component.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\nimport { Subject } from \"rxjs/Subject\";\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\nimport { IAliquot } from './aliquot';\r\n\r\n@Injectable()\r\nexport class AliquotService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  public create(submissionArray): Observable<any> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    // JSON object submission (formValue) need to be within an array\r\n    return this._http.post(APP_SETTINGS.ALIQUOTS_URL, submissionArray, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError)\r\n\r\n  }\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/aliquots/aliquot.service.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\nimport { Subject } from \"rxjs/Subject\";\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\n@Injectable()\r\nexport class FreezerLocationsService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  public getLastOccupiedSpot() {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.FREEZER_LOCATIONS_URL + '?last_occupied=true', options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError)\r\n\r\n  }\r\n\r\n  public getNextAvailable(studyID) {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.FREEZER_LOCATIONS_URL + 'get_next_available/?study=' + studyID , options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError)\r\n\r\n  }\r\n\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/aliquots/freezer-locations.service.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\nimport { Subject } from \"rxjs/Subject\";\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\nimport { IFreezer } from './freezer';\r\n\r\n@Injectable()\r\nexport class FreezerService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  public getFreezers(): Observable<IFreezer[]> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.AUTH_JSON_HEADERS });\r\n\r\n    return this._http.get(APP_SETTINGS.FREEZERS_URL, options)\r\n      .map((response: Response) => <IFreezer[]>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  private handleError (error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/aliquots/freezer.service.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-xs-12\\\">\\r\\n    <div class=\\\"card ab-detail-card\\\">\\r\\n      <div class=\\\"card-block\\\">\\r\\n        <h3 class=\\\"card-title\\\">Extractions</h3>\\r\\n        <p class=\\\"card-text\\\">\\r\\n          <div class=\\\"row extraction-row\\\">\\r\\n            <span class=\\\"spinner spinner-lg\\\" *ngIf=\\\"ABDetailsLoading\\\">\\r\\n              Loading...\\r\\n            </span>\\r\\n            <span *ngIf=\\\"noExtractionsFlag\\\">\\r\\n              <clr-icon shape=\\\"neutral-face\\\"></clr-icon> There are no Extractions from this Analysis Batch.\\r\\n            </span>\\r\\n\\r\\n            <clr-tree-node *ngFor=\\\"let extractionbatch of extractionBatchArray\\\">\\r\\n              <span>Extraction {{extractionbatch.extraction_number}}&nbsp;&nbsp;&nbsp;&nbsp;{{extractionbatch.extraction_date |\\r\\n                date:'shortDate'}}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\r\\n              </span>\\r\\n\\r\\n              <button class=\\\"stack-action btn btn-sm btn-link \\\" (click)=\\\"editExtractionBatch(extractionbatch)\\\"\\r\\n                type=\\\"button\\\">Edit</button>\\r\\n              <ng-template [clrIfExpanded]=\\\"false\\\">\\r\\n                <clr-tree-node>\\r\\n                  <div class=\\\"extraction-row\\\">\\r\\n\\r\\n                    <button class=\\\"btn btn-sm btn-outline\\\" type=\\\"button\\\"\\r\\n                      (click)=\\\"openBulkSubmitNegResults(extractionbatch)\\\">Bulk\\r\\n                      Submit Negative Results</button>\\r\\n\\r\\n                    <div>\\r\\n                      <table class=\\\"table table-vertical table-compact \\\">\\r\\n                        <tbody>\\r\\n                          <tr>\\r\\n                            <th>Volume Extracted</th>\\r\\n                            <td>{{extractionbatch.extraction_volume}} µL</td>\\r\\n                          </tr>\\r\\n                          <tr>\\r\\n                            <th>Volume Eluted</th>\\r\\n                            <td>{{extractionbatch.elution_volume}} µL</td>\\r\\n                          </tr>\\r\\n                          <tr>\\r\\n                            <th>Extraction Method</th>\\r\\n                            <td>{{extractionbatch.extraction_method.name}}</td>\\r\\n                          </tr>\\r\\n                          <tr>\\r\\n                            <th>Extraction Positive Cq Value</th>\\r\\n                            <td>{{extractionbatch.ext_pos_dna_cq_value}}</td>\\r\\n                          </tr>\\r\\n                          <!-- <tr>\\r\\n                            <th>Extraction Positive GC/Reaction</th>\\r\\n                            <td>{{extractionbatch.ext_pos_dna_cq_value}}</td>\\r\\n                          </tr> -->\\r\\n                          <tr>\\r\\n                            <th>Extraction Positive Validity</th>\\r\\n                            <td>{{ext_pos_dna_invalid ? \\\"Invalid\\\" : \\\"Valid\\\"}}</td>\\r\\n                          </tr>\\r\\n                        </tbody>\\r\\n                      </table>\\r\\n                    </div>\\r\\n\\r\\n                    <div *ngFor=\\\"let rt of extractionbatch.reverse_transcriptions\\\">\\r\\n                      <label>\\r\\n                        <span>Reverse\\r\\n                          Transcription&nbsp;&nbsp;&nbsp;&nbsp;{{rt.rt_date | date:'shortDate'}}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\\r\\n                        <button class=\\\"stack-action btn btn-sm btn-link \\\" (click)=\\\"editRT(rt)\\\"\\r\\n                          type=\\\"button\\\">Edit</button>\\r\\n                      </label>\\r\\n                      <table class=\\\"table table-vertical table-compact\\\">\\r\\n                        <tbody>\\r\\n                          <tr>\\r\\n                            <th>Template Volume</th>\\r\\n                            <td>{{rt.template_volume}} µL</td>\\r\\n                          </tr>\\r\\n                          <tr>\\r\\n                            <th>Reaction Volume</th>\\r\\n                            <td>{{rt.reaction_volume}} µL</td>\\r\\n                          </tr>\\r\\n                        </tbody>\\r\\n                      </table>\\r\\n                    </div>\\r\\n\\r\\n                    <div>\\r\\n                      <label>Targets </label>\\r\\n                      <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\\r\\n                      <table class=\\\"table table-vertical table-compact \\\">\\r\\n                        <tbody>\\r\\n                          <tr *ngFor=\\\"let target of extractionbatch.targets\\\">\\r\\n                            <th>\\r\\n                              {{target.id | displayValue:'name':this.allTargets}}&nbsp;({{target.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes}})\\r\\n                            </th>\\r\\n                            <td>{{target.replicates}}&nbsp;replicate<span *ngIf=\\\"target.replicates > 1\\\">s</span></td>\\r\\n                          </tr>\\r\\n                        </tbody>\\r\\n                      </table>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </clr-tree-node>\\r\\n              </ng-template>\\r\\n            </clr-tree-node>\\r\\n          </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-xs-12\\\">\\r\\n    <div class=\\\"card ab-detail-card\\\">\\r\\n      <div class=\\\"card-block\\\">\\r\\n        <h3 class=\\\"card-title\\\">Samples</h3>\\r\\n        <p class=\\\"card-text\\\">\\r\\n          <div class=\\\"row extraction-row\\\">\\r\\n            <span class=\\\"spinner spinner-lg\\\" *ngIf=\\\"ABDetailsLoading\\\">\\r\\n              Loading...\\r\\n            </span>\\r\\n            <!-- <span *ngIf=\\\"noSamplesFlag\\\">\\r\\n              <clr-icon shape=\\\"neutral-face\\\"></clr-icon> There are no Samples in this Analysis Batch.\\r\\n            </span> -->\\r\\n\\r\\n            <clr-tree-node *ngFor=\\\"let sample of samplesArray\\\">\\r\\n              Sample {{sample.id}}\\r\\n              <ng-template clrIfExpanded>\\r\\n                <clr-tree-node>\\r\\n\\r\\n                  <div class=\\\"extraction-row\\\">\\r\\n\\r\\n                    <table class=\\\"table table-vertical table-compact\\\">\\r\\n                      <tbody>\\r\\n                        <tr>\\r\\n                          <th>Collaborator Sample ID</th>\\r\\n                          <td>{{sample.collaborator_sample_id}}</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                          <th>Sample Type</th>\\r\\n                          <td>{{sample.sample_type.name}}</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                          <th>Matrix</th>\\r\\n                          <td>{{sample.matrix.name}}</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                          <th>Study</th>\\r\\n                          <td>{{sample.study.id}}</td>\\r\\n                        </tr>\\r\\n                      </tbody>\\r\\n                    </table>\\r\\n\\r\\n                    <clr-tree-node>\\r\\n                      Inhibitions\\r\\n                      <ng-template clrIfExpanded>\\r\\n                        <div *ngFor=\\\"let inhibition of sample.inhibitions; let i = index\\\">\\r\\n                          <label>Inhibition {{i+1}}</label>\\r\\n                          <table class=\\\"table table-vertical table-compact\\\">\\r\\n                            <tbody>\\r\\n                              <tr>\\r\\n                                <th>Inhibition Date</th>\\r\\n                                <td>{{inhibition.inhibition_date | date:'shortDate' }}</td>\\r\\n                              </tr>\\r\\n                              <tr>\\r\\n                                <th>Dilution Factor</th>\\r\\n                                <td>\\r\\n                                  {{inhibition.dilution_factor == null ? \\\"Not Calculated\\\": inhibition.dilution_factor}}\\r\\n                                </td>\\r\\n                              </tr>\\r\\n                              <tr>\\r\\n                                <th>Inhibition Type</th>\\r\\n                                <td>{{inhibition.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes}}</td>\\r\\n                              </tr>\\r\\n                            </tbody>\\r\\n                          </table>\\r\\n                        </div>\\r\\n\\r\\n                      </ng-template>\\r\\n                    </clr-tree-node>\\r\\n                  </div>\\r\\n                </clr-tree-node>\\r\\n              </ng-template>\\r\\n            </clr-tree-node>\\r\\n          </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<clr-modal class=\\\"modal-sm\\\" [(clrModalOpen)]=\\\"showHideEditExtractionDetail\\\" [clrModalClosable]=\\\"false\\\">\\r\\n  <h3 class=\\\"modal-title\\\">Edit Extraction</h3>\\r\\n  <div class=\\\"modal-body\\\">\\r\\n    <span>Analysis Batch {{selectedABID}}</span>\\r\\n    <form id=\\\"editExtractionBatchForm\\\" class=\\\"compact\\\" [formGroup]=\\\"editExtractionBatchForm\\\"\\r\\n      (ngSubmit)=\\\"onSubmit('editEB', editExtractionBatchForm.value)\\\">\\r\\n      <section class=\\\"form-block\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"extractionNo\\\">Extraction No.</label>\\r\\n          <input type=\\\"text\\\" id=\\\"extractionNo\\\" size=\\\"10\\\" formControlName=\\\"extraction_number\\\" readonly>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"extractionVol\\\">Extraction Volume</label>\\r\\n          <input type=\\\"text\\\" id=\\\"extractionVol\\\" size=\\\"10\\\" formControlName=\\\"extraction_volume\\\">\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"extractionVol\\\">Elution Volume</label>\\r\\n          <input type=\\\"text\\\" id=\\\"elutionVol\\\" size=\\\"10\\\" formControlName=\\\"elution_volume\\\">\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"elutionVol\\\">Extraction Method</label>\\r\\n          <div class=\\\"select\\\">\\r\\n            <select id=\\\"extractionMethodSelect\\\" name=\\\"extraction_method\\\" formControlName=\\\"extraction_method\\\">\\r\\n              <option *ngFor=\\\"let method of allExtractionMethods\\\" [value]=\\\"method.id\\\">{{method.name}}</option>\\r\\n            </select>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"extractionDateInput\\\">Extraction Date</label>\\r\\n          <input type=\\\"date\\\" id=\\\"extractionDateInput\\\" formControlName=\\\"extraction_date\\\">\\r\\n        </div>\\r\\n\\r\\n        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"extractionEditErrorFlag\\\">\\r\\n          <div clr-alert-item class=\\\"alert-item\\\">\\r\\n            <span class=\\\"alert-text\\\">Submission error. Extraction data not updated.</span>\\r\\n            <div class=\\\"alert-actions\\\">\\r\\n              <a class=\\\"alert-action\\\" (click)=\\\"onSubmit('editEB', editExtractionBatchForm.value)\\\">Try again</a>\\r\\n            </div>\\r\\n          </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"extractionEditSuccessFlag\\\">\\r\\n          <div clr-alert-item class=\\\"alert-item\\\">\\r\\n            <span class=\\\"alert-text\\\">Extraction data successfully updated</span>\\r\\n            <div class=\\\"alert-actions\\\">\\r\\n              <a class=\\\"alert-action\\\"\\r\\n                (click)=\\\"showHideEditExtractionDetail = false; extractionEditSuccessFlag = false; extractionEditErrorFlag = false;\\\">Close</a>\\r\\n            </div>\\r\\n          </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <button class=\\\"btn btn-warning\\\"\\r\\n          (click)=\\\"showHideEditExtractionDetail = false; showHideEBDeleteConfirm = true\\\">Delete Extraction</button>\\r\\n        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"editExtractionBatchForm.invalid\\\"\\r\\n          [clrLoading]=\\\"submitLoading\\\">Save Edits</button>\\r\\n        <button class=\\\"btn btn-info\\\"\\r\\n          (click)=\\\"showHideEditExtractionDetail = !showHideEditExtractionDetail\\\">Close</button>\\r\\n      </section>\\r\\n    </form>\\r\\n  </div>\\r\\n</clr-modal>\\r\\n\\r\\n<clr-modal class=\\\"modal-sm\\\" *ngIf=\\\"selectedABDetail\\\" [(clrModalOpen)]=\\\"showHideEditRTDetail\\\" [clrModalClosable]=\\\"false\\\">\\r\\n  <h3 class=\\\"modal-title\\\">Edit RT Details</h3>\\r\\n  <div class=\\\"modal-body\\\">\\r\\n    <span>Analysis Batch {{selectedABID}}</span>\\r\\n\\r\\n    <form id=\\\"editRTForm\\\" class=\\\"compact\\\" [formGroup]=\\\"editRTForm\\\" (ngSubmit)=\\\"onSubmit('editRT', editRTForm.value)\\\">\\r\\n      <section class=\\\"form-block\\\">\\r\\n\\r\\n        <!-- <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"rtNo\\\">RT No. </label>\\r\\n          <input type=\\\"text\\\" id=\\\"rtNo\\\" size=\\\"10\\\" formControlName=\\\"rt_number\\\" readonly>\\r\\n        </div> -->\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"templateVol\\\">Template Volume</label>\\r\\n          <input id=\\\"templateVol\\\" type=\\\"text\\\" size=\\\"10\\\" formControlName=\\\"template_volume\\\">\\r\\n          <span>µL</span>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"reactionVol\\\">Reaction Volume</label>\\r\\n          <input id=\\\"reactionVol\\\" type=\\\"text\\\" size=\\\"10\\\" formControlName=\\\"reaction_volume\\\">\\r\\n          <span>µL</span>\\r\\n          <!-- <div class=\\\"select\\\">\\r\\n            <select id=\\\"rtReactionVolUnits\\\" formControlName=\\\"reaction_volume_units\\\">\\r\\n              <option *ngFor=\\\"let unit of units\\\" [value]=\\\"unit.id\\\">{{unit.symbol}}</option>\\r\\n            </select>\\r\\n          </div> -->\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"rtDateInput\\\">RT Date</label>\\r\\n          <input type=\\\"date\\\" id=\\\"rtDateInput\\\" formControlName=\\\"rt_date\\\">\\r\\n        </div>\\r\\n\\r\\n        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"rtEditErrorFlag\\\">\\r\\n          <div clr-alert-item class=\\\"alert-item\\\">\\r\\n            <span class=\\\"alert-text\\\">Submission error. RT data not updated.</span>\\r\\n            <div class=\\\"alert-actions\\\">\\r\\n              <a class=\\\"alert-action\\\" (click)=\\\"onSubmit('editRT', editRTForm.value)\\\">Try again</a>\\r\\n            </div>\\r\\n          </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"rtEditSuccessFlag\\\">\\r\\n          <div clr-alert-item class=\\\"alert-item\\\">\\r\\n            <span class=\\\"alert-text\\\">RT data successfully updated</span>\\r\\n            <div class=\\\"alert-actions\\\">\\r\\n              <a class=\\\"alert-action\\\"\\r\\n                (click)=\\\"showHideEditRTDetail = false; rtEditSuccessFlag = false; rtEditErrorFlag = false;\\\">Close</a>\\r\\n            </div>\\r\\n          </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"editRTForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Save\\r\\n          Edits</button>\\r\\n        <button class=\\\"btn btn-info\\\"\\r\\n          (click)=\\\"showHideEditRTDetail= !showHideEditRTDetail; rtEditSuccessFlag = false; rtEditErrorFlag = false;\\\">Close</button>\\r\\n\\r\\n      </section>\\r\\n    </form>\\r\\n  </div>\\r\\n</clr-modal>\\r\\n\\r\\n<!-- edit target list modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideEditTargetList\\\" [clrModalSize]=\\\"'xl'\\\">\\r\\n  <h3 class=\\\"modal-title\\\">Edit Target List for Extraction # {{currentExtractionNo}} </h3>\\r\\n  <div class=\\\"modal-body\\\">\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-lg-12\\\">\\r\\n\\r\\n        <!-- <clr-alert [clrAlertClosable]=\\\"false\\\" *ngIf=\\\"targetListEditLocked\\\">\\r\\n          <div clr-alert-item class=\\\"alert-item\\\">\\r\\n            <span class=\\\"alert-text\\\">\\r\\n            This Analysis Batch has been extracted. Editing of the target list is locked. \\r\\n            </span>\\r\\n          </div>\\r\\n        </clr-alert> -->\\r\\n\\r\\n        <form *ngIf=\\\"!targetListEditLocked\\\">\\r\\n          <section class=\\\"form-block\\\">\\r\\n\\r\\n            <clr-datagrid class=\\\"target-select-datagrid\\\" [(clrDgSelected)]=\\\"selected\\\" [clDgRowSelection]=\\\"true\\\">\\r\\n              <clr-dg-action-bar>\\r\\n                <div class=\\\"btn-group\\\">\\r\\n                  <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"deselectAll()\\\">\\r\\n                    <clr-icon shape=\\\"window-close\\\" size=\\\"16\\\"></clr-icon> Deselect All\\r\\n                  </button>\\r\\n                </div>\\r\\n              </clr-dg-action-bar>\\r\\n\\r\\n              <clr-dg-column [clrDgField]=\\\"'name'\\\">Name</clr-dg-column>\\r\\n              <clr-dg-column [clrDgField]=\\\"'code'\\\">Code</clr-dg-column>\\r\\n              <clr-dg-column [clrDgField]=\\\"'type'\\\">Type</clr-dg-column>\\r\\n              <!-- <clr-dg-column [clrDgField]=\\\"'type'\\\">Replicates</clr-dg-column> -->\\r\\n\\r\\n              <clr-dg-row *clrDgItems=\\\"let target of allTargets\\\" [clrDgItem]=\\\"target\\\">\\r\\n                <clr-dg-cell>{{target.name}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{target.code}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{target.nucleic_acid_type}}</clr-dg-cell>\\r\\n                <!-- <clr-dg-cell>{{target.replicates}}</clr-dg-cell> -->\\r\\n              </clr-dg-row>\\r\\n\\r\\n              <clr-dg-footer>{{allTargets.length}} targets</clr-dg-footer>\\r\\n            </clr-datagrid>\\r\\n\\r\\n          </section>\\r\\n        </form>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-lg-12\\\">\\r\\n        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" (click)=\\\"updateABTargetList()\\\">Save Edits</button>\\r\\n        <button class=\\\"btn btn-info\\\" (click)=\\\"showHideEditTargetList= !showHideEditTargetList\\\">Close</button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</clr-modal>\\r\\n\\r\\n<!-- delete Extraction confirm Modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideEBDeleteConfirm\\\">\\r\\n  <h3 class=\\\"modal-title\\\">\\r\\n    <clr-icon shape=\\\"times\\\" size=\\\"16\\\"></clr-icon> Delete Extraction Batch\\r\\n  </h3>\\r\\n  <div class=\\\"modal-body\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-lg-12\\\">\\r\\n        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showEBDeleteError\\\">\\r\\n          <div clr-alert-item class=\\\"alert-item\\\">\\r\\n            <span class=\\\"alert-text\\\">Submission error. Extraction not deleted.</span>\\r\\n            <div class=\\\"alert-actions\\\">\\r\\n              <a class=\\\"alert-action\\\" (click)=\\\"deleteExtractionBatch(editExtractionBatchForm.get('id').value)\\\">Try\\r\\n                again</a>\\r\\n            </div>\\r\\n          </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showEBDeleteSuccess\\\">\\r\\n          <div clr-alert-item class=\\\"alert-item\\\">\\r\\n            <span class=\\\"alert-text\\\">Extraction successfully deleted.</span>\\r\\n          </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <div>\\r\\n          <p>Are you sure you want to delete the Extraction Batch\\r\\n            <b>{{editExtractionBatchForm.get('analysis_batch').value}} - {{editExtractionBatchForm.get('extraction_number').value}}</b> ?</p>\\r\\n\\r\\n          <button class=\\\"btn btn-primary\\\" type=\\\"button\\\"\\r\\n            (click)=\\\"deleteExtractionBatch(editExtractionBatchForm.get('id').value)\\\"\\r\\n            [clrLoading]=\\\"submitLoading\\\">Delete</button>\\r\\n          <button class=\\\"btn btn-info\\\" (click)=\\\"showHideEBDeleteConfirm = !showHideEBDeleteConfirm\\\">Close</button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</clr-modal>\\r\\n\\r\\n\\r\\n<!-- bulk submit negative results modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showBulkSubmitNegResults\\\" [clrModalSize]=\\\"'lg'\\\">\\r\\n  <h3 class=\\\"modal-title\\\">Bulk Submit Negative Results for Extraction {{currentExtractionNo}} </h3>\\r\\n  <div class=\\\"modal-body\\\">\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-lg-12\\\">\\r\\n        Each target replicate for this Extraction is listed below. Check \\\"Negative Results\\\" box to submit negative qPCR\\r\\n        results for the specific target replicate and provide the PCR Positive Cq value. Target replicates not checked\\r\\n        will not be updated. Target replicates that already have a PCR Positive Cq value recorded show that value\\r\\n        and are not editable in this form.\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"col-lg-12\\\" *ngIf=\\\"pcrreplicatebatch_array.controls.length === 0\\\">\\r\\n        <h3>There are no targets or replicates created for this Extraction.</h3>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"col-lg-12\\\" *ngIf=\\\"pcrreplicatebatch_array.controls.length > 0\\\">\\r\\n\\r\\n        <form class=\\\"compact\\\" [formGroup]=\\\"bulkSubmitNegResultsForm\\\"\\r\\n          (ngSubmit)=\\\"onSubmit('bulkSubmitNegResults', bulkSubmitNegResultsForm.value)\\\">\\r\\n          <section class=\\\"form-block\\\">\\r\\n            <div formArrayName=\\\"pcr_batches\\\">\\r\\n\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-4 col-md-4 col-sm-6 col-xs-6\\\">\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-3 col-md-3 col-sm-4 col-xs-4\\\">\\r\\n                  <label class=\\\"text-bold required\\\">PCR Pos Cq Value</label>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-2 col-md-2 col-sm-2 col-xs-2\\\">\\r\\n                  <label class=\\\"text-bold required\\\">Negative Results</label>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-3 col-md-3 col-sm-0 col-xs-0\\\">\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"form-group row\\\" *ngFor=\\\"let target of pcrreplicatebatch_array.controls; let i = index\\\"\\r\\n                [formGroupName]=\\\"i\\\">\\r\\n                <div class=\\\"col-lg-4 col-md-4 col-sm-6 col-xs-6\\\">\\r\\n                  <label><span\\r\\n                      class=\\\"text-bold\\\">{{target.controls.target.value | displayValue:'name':this.allTargets}}</span>\\r\\n                    Rep {{target.controls.replicate_number.value}} </label>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-3 col-md-3 col-sm-4 col-xs-4\\\">\\r\\n                  <input class=\\\"form-control\\\" type=\\\"number\\\" placeholder=\\\"Enter PCR Pos Cq\\\" size=\\\"10\\\"\\r\\n                    formControlName=\\\"pcr_pos_cq_value\\\">\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-2 col-md-2 col-sm-2 col-xs-2\\\">\\r\\n                  <input type=\\\"checkbox\\\" formControlName=\\\"include\\\">\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-3 col-md-3 col-sm-0 col-xs-0\\\">\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"batchSubmitNegResultsErrorFlag\\\">\\r\\n              <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">Submission error. Negative results not submitted.</span>\\r\\n                <div class=\\\"alert-actions\\\">\\r\\n                  <a class=\\\"alert-action\\\" (click)=\\\"onSubmit('editRT', editRTForm.value)\\\">Try again</a>\\r\\n                </div>\\r\\n              </div>\\r\\n            </clr-alert>\\r\\n\\r\\n            <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"batchSubmitNegResultsSuccessFlag \\\">\\r\\n              <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">Negative results successfully submitted</span>\\r\\n                <div class=\\\"alert-actions\\\">\\r\\n                  <a class=\\\"alert-action\\\"\\r\\n                    (click)=\\\"showBulkSubmitNegResults = false; batchSubmitNegResultsSuccessFlag = false; batchSubmitNegResultsErrorFlag = false;\\\">Close</a>\\r\\n                </div>\\r\\n              </div>\\r\\n            </clr-alert>\\r\\n            <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [clrLoading]=\\\"submitLoading\\\">Submit</button>\\r\\n            <button class=\\\"btn btn-info\\\"\\r\\n              (click)=\\\"showBulkSubmitNegResults= !showBulkSubmitNegResults; batchSubmitNegResultsSuccessFlag = false; batchSubmitNegResultsErrorFlag = false;\\\">Close</button>\\r\\n\\r\\n          </section>\\r\\n        </form>\\r\\n\\r\\n      </div>\\r\\n    </div>\\r\\n    <!-- <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-lg-12\\\">\\r\\n        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" (click)=\\\"updateABTargetList()\\\">Submit</button>\\r\\n        <button class=\\\"btn btn-info\\\" (click)=\\\"showBulkSubmitNegResults= !showBulkSubmitNegResults\\\">Close</button>\\r\\n      </div>\\r\\n    </div> -->\\r\\n  </div>\\r\\n</clr-modal>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/analysis-batches/analysis-batch-detail/analysis-batch-detail.component.html\n// module id = ./src/app/analysis-batches/analysis-batch-detail/analysis-batch-detail.component.html\n// module chunks = main","module.exports = \".ab-detail-card {\\n  min-height: 15em;\\n  margin: 1em; }\\n\\n.ab-detail-header {\\n  margin-left: 1em;\\n  margin-right: 1em; }\\n\\n.btn-ab-detail-edit {\\n  float: right; }\\n\\n.target-select-datagrid {\\n  max-height: 24em; }\\n\\n.table {\\n  margin-top: 0px !important; }\\n\\n.extract-detail-header {\\n  font-weight: bolder; }\\n\\n.extraction-row {\\n  display: inline-block; }\\n\\n.text-bold {\\n  font-weight: bold; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/analysis-batches/analysis-batch-detail/analysis-batch-detail.component.scss\n// module id = ./src/app/analysis-batches/analysis-batch-detail/analysis-batch-detail.component.scss\n// module chunks = main","import { Component, OnInit, Input } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, FormArray, Validators, PatternValidator } from \"@angular/forms/\";\r\n\r\nimport { IAnalysisBatchSummary } from '../analysis-batch-summary';\r\nimport { IAnalysisBatchDetail } from '../analysis-batch-detail';\r\nimport { IAnalysisBatch } from '../analysis-batch';\r\nimport { ISampleExtraction } from '../../sample-extractions/sample-extraction';\r\nimport { IExtractionBatch } from '../../extraction-batches/extraction-batch';\r\nimport { IInhibition } from '../../inhibitions/inhibition';\r\nimport { IReverseTranscription } from '../../reverse-transcriptions/reverse-transcription';\r\nimport { IExtractionMethod } from '../../extraction-batches/extraction-method';\r\nimport { ITarget } from '../../targets/target';\r\nimport { IUnit } from '../../units/unit';\r\n\r\nimport { APP_SETTINGS } from '../../app.settings';\r\n\r\nimport { ISampleSummary } from '../../samples/sample-summary';\r\n\r\nimport { AnalysisBatchService } from '../analysis-batch.service';\r\nimport { ExtractionMethodService } from '../../extraction-batches/extraction-method.service';\r\nimport { TargetService } from '../../targets/target.service';\r\nimport { UnitService } from '../../units/unit.service';\r\nimport { ExtractionBatchService } from 'app/extraction-batches/extraction-batch.service';\r\nimport { ReverseTranscriptionService } from 'app/SHARED/reverse-transcription.service';\r\nimport { PcrReplicateBatchService } from '../../pcr-replicates/pcr-replicate-batch.service';\r\n\r\n@Component({\r\n  selector: 'analysis-batch-detail',\r\n  templateUrl: './analysis-batch-detail.component.html',\r\n  styleUrls: ['./analysis-batch-detail.component.scss']\r\n})\r\nexport class AnalysisBatchDetailComponent implements OnInit {\r\n  @Input() selectedABSummary: IAnalysisBatchSummary;\r\n\r\n  ABDetailsLoading: boolean = false;\r\n  noExtractionsFlag: boolean = false;\r\n  showHideEditExtractionDetail: boolean = false;\r\n  showHideEditRTDetail: boolean = false;\r\n  selectedABDetail: IAnalysisBatchDetail;\r\n\r\n  allExtractionMethods: IExtractionMethod[];\r\n\r\n  extractionDetailArray: ISampleExtraction[] = [];\r\n  inhibitionDetailArray: IInhibition[] = [];\r\n  rtDetailArray: IReverseTranscription[] = [];\r\n\r\n  extractionBatchArray: IExtractionBatch[];\r\n\r\n  units: IUnit[];\r\n  allTargets: ITarget[] = [];\r\n  errorMessage: string;\r\n\r\n  extractionTargetArray: ITarget[] = [];\r\n  samplesArray: ISampleSummary[] = [];\r\n\r\n  selectedABID: number;\r\n\r\n  showHideEditTargetList: boolean = false;\r\n  showHideEBDeleteConfirm: boolean = false;\r\n\r\n  showEBDeleteSuccess: boolean = false;\r\n  showEBDeleteError: boolean = false;\r\n\r\n  showBulkSubmitNegResults: boolean = false;\r\n\r\n  targetListEditLocked: boolean = false;\r\n\r\n  currentExtractionNo: number;\r\n  expanded: boolean = false;\r\n\r\n  submitLoading: boolean = false;\r\n  extractionEditErrorFlag: boolean = false;\r\n  extractionEditSuccessFlag: boolean = false;\r\n  batchSubmitNegResultsErrorFlag: boolean = false;\r\n  batchSubmitNegResultsSuccessFlag: boolean = false;\r\n\r\n  rtEditErrorFlag: boolean = false;\r\n  rtEditSuccessFlag: boolean = false;\r\n\r\n  bulkSubmitNegResultsForm: FormGroup;\r\n  pcrreplicatebatch_array: FormArray;\r\n\r\n  replicateColumnCount;\r\n\r\n  submitted;\r\n\r\n  selected = [];\r\n  nucleicAcidTypes = [];\r\n\r\n\r\n\r\n  editExtractionBatchForm = new FormGroup({\r\n    id: new FormControl(''),\r\n    analysis_batch: new FormControl(''),\r\n    extraction_method: new FormControl(''),\r\n    extraction_number: new FormControl(''),\r\n    extraction_volume: new FormControl(''),\r\n    extraction_date: new FormControl(''),\r\n    elution_volume: new FormControl(''),\r\n    re_extraction: new FormControl(null),\r\n    sample_dilution_factor: new FormControl(null)\r\n  });\r\n\r\n  // editInhibitionForm = new FormGroup({\r\n  //   id: new FormControl(''),\r\n  //   inhibition_no: new FormControl(''),\r\n  //   dilution_factor:new FormControl(''),\r\n  //   type: new FormControl(''),\r\n  //   inhibition_date: new FormControl('')\r\n  // });\r\n\r\n  editRTForm = new FormGroup({\r\n    id: new FormControl(''),\r\n    // rt_number: new FormControl(''),\r\n    template_volume: new FormControl(''),\r\n    reaction_volume: new FormControl(''),\r\n    rt_date: new FormControl('')\r\n  })\r\n\r\n  buildBulkSubmitNegResultsForm() {\r\n    this.bulkSubmitNegResultsForm = this.formBuilder.group({\r\n      pcr_batches: this.formBuilder.array([\r\n        this.formBuilder.group({\r\n          extraction_batch: null,\r\n          target: null,\r\n          replicate_number: null,\r\n          pcr_pos_cq_value: null,\r\n          include: false\r\n        })\r\n      ])\r\n    })\r\n    this.pcrreplicatebatch_array = this.bulkSubmitNegResultsForm.get(\"pcr_batches\") as FormArray;\r\n  }\r\n\r\n  constructor(\r\n    private _analysisBatchService: AnalysisBatchService,\r\n    private _extractionMethodService: ExtractionMethodService,\r\n    private _extractionBatchService: ExtractionBatchService,\r\n    private _reverseTranscriptionService: ReverseTranscriptionService,\r\n    private _targetService: TargetService,\r\n    private _unitService: UnitService,\r\n    private pcrReplicateBatchService: PcrReplicateBatchService,\r\n    private formBuilder: FormBuilder,\r\n  ) {\r\n    this.buildBulkSubmitNegResultsForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    // this.ABDetailsLoading = true;\r\n    this.nucleicAcidTypes = APP_SETTINGS.NUCLEIC_ACID_TYPES;\r\n    this.retrieveABData();\r\n\r\n    // call the getAnalysisBatchDetail function of the AnalyisBatchService, set results to selectedABDetail var\r\n    // this._analysisBatchService.getAnalysisBatchDetail(this.selectedABSummary.id)\r\n    //   .subscribe(\r\n    //     (analysisBatchDetail) => {\r\n    //       this.selectedABDetail = analysisBatchDetail;\r\n    //       this.extractionBatchArray = analysisBatchDetail.extractionbatches\r\n    //       this.samplesArray = analysisBatchDetail.samples;\r\n    //       this.selectedABID = analysisBatchDetail.id;\r\n    //       // this.extractionDetailArray = this.buildABExtractionArray(analysisBatchDetail.extractionbatches);\r\n    //       this.ABDetailsLoading = false;\r\n    //       if (analysisBatchDetail.extractionbatches.length < 1) {\r\n    //         this.noExtractionsFlag = true;\r\n    //       }\r\n    //     },\r\n    //     error => {\r\n    //       this.ABDetailsLoading = false;\r\n    //       this.errorMessage = <any>error\r\n    //     }\r\n    //   );\r\n\r\n    // on init, call getExtractionMethods function of the EXtractionMethodService, set results to allExtractionMethods var\r\n    this._extractionMethodService.getExtractionMethods()\r\n      .subscribe(extractionMethods => this.allExtractionMethods = extractionMethods,\r\n        error => this.errorMessage = <any>error);\r\n\r\n    // on init, call getTargets function of the TargetService, set results to allTargets var\r\n    this._targetService.getTargets()\r\n      .subscribe(\r\n        (targets) => {\r\n          this.allTargets = targets;\r\n          this.allTargets.sort(function (a, b) {\r\n            if (a.name < b.name) { return -1 };\r\n            if (a.name > b.name) { return 1 };\r\n            return 0;\r\n          });\r\n        },\r\n        error => { this.errorMessage = <any>error });\r\n\r\n    // on init, call getUnits function of the UnitService, set results to the units var\r\n    this._unitService.getUnits()\r\n      .subscribe(units => this.units = units,\r\n        error => this.errorMessage = <any>error);\r\n\r\n    // build the inhibition list by looping through the AB data and adding all inhibitions to a local array\r\n    // for (let extraction of this.extractionDetailArray) {\r\n    //   for (let inhibition of extraction.inhibitions) {\r\n    //     this.inhibitionDetailArray.push(inhibition)\r\n    //   }\r\n    // }\r\n\r\n    // build the rt list by looping through the AB data and adding all rts to a local array\r\n    //  for (let extraction of this.extractionDetailArray) {\r\n    //   for (let rt of extraction.reverse_transcriptions) {\r\n    //     this.rtDetailArray.push(rt)\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  retrieveABData() {\r\n    this.ABDetailsLoading = true;\r\n\r\n    // call the getAnalysisBatchDetail function of the AnalyisBatchService, set results to selectedABDetail var\r\n    this._analysisBatchService.getAnalysisBatchDetail(this.selectedABSummary.id)\r\n      .subscribe(\r\n        (analysisBatchDetail) => {\r\n          this.selectedABDetail = analysisBatchDetail;\r\n          this.extractionBatchArray = analysisBatchDetail.extractionbatches\r\n          this.samplesArray = analysisBatchDetail.samples;\r\n          this.selectedABID = analysisBatchDetail.id;\r\n          // this.extractionDetailArray = this.buildABExtractionArray(analysisBatchDetail.extractionbatches);\r\n          this.ABDetailsLoading = false;\r\n          if (analysisBatchDetail.extractionbatches.length < 1) {\r\n            this.noExtractionsFlag = true;\r\n          }\r\n        },\r\n        error => {\r\n          this.ABDetailsLoading = false;\r\n          this.errorMessage = <any>error\r\n        }\r\n      );\r\n\r\n\r\n  }\r\n\r\n  deselectAll() {\r\n    this.selected = [];\r\n  }\r\n\r\n  public deleteExtractionBatch(extractionBatchID) {\r\n\r\n    this.showEBDeleteSuccess = false;\r\n    this.showEBDeleteError = false;\r\n\r\n    this._extractionBatchService.delete(extractionBatchID)\r\n      .subscribe(\r\n        () => {\r\n          this.showEBDeleteSuccess = true;\r\n          this.retrieveABData();\r\n        },\r\n        error => {\r\n          this.showEBDeleteError = true;\r\n          this.errorMessage = <any>error;\r\n        });\r\n\r\n  }\r\n\r\n  public buildABExtractionArray(extractionBatchArray) {\r\n    let abExtractionArray: ISampleExtraction[] = [];\r\n    for (let extractionbatch of extractionBatchArray) {\r\n      for (let extraction of extractionbatch.extractions) {\r\n        abExtractionArray.push(extraction);\r\n      }\r\n    }\r\n    console.log(abExtractionArray);\r\n    return abExtractionArray;\r\n  }\r\n\r\n  editExtractionBatch(extractionbatch) {\r\n\r\n    this.editExtractionBatchForm.setValue({\r\n      id: extractionbatch.id,\r\n      analysis_batch: extractionbatch.analysis_batch,\r\n      extraction_method: extractionbatch.extraction_method.id,\r\n      extraction_number: extractionbatch.extraction_number,\r\n      extraction_volume: extractionbatch.extraction_volume,\r\n      extraction_date: extractionbatch.extraction_date,\r\n      elution_volume: extractionbatch.elution_volume,\r\n      sample_dilution_factor: extractionbatch.sample_dilution_factor,\r\n      re_extraction: null\r\n    });\r\n\r\n    // show the edit detail modal if not showing already\r\n    if (this.showHideEditExtractionDetail === false) {\r\n      this.showHideEditExtractionDetail = true;\r\n    }\r\n\r\n\r\n  }\r\n\r\n  openBulkSubmitNegResults(extractionbatch) {\r\n\r\n    this.currentExtractionNo = extractionbatch.extraction_number;\r\n    // reset the pcrreplicate batch form array controls to a blank array\r\n    this.pcrreplicatebatch_array.controls = [];\r\n    // for (let target of extractionbatch.targets) {\r\n\r\n    //   for (let i = 0; i < target.replicates; i++) {\r\n\r\n    //     let pcrRepBatchFormGroup: FormGroup = this.formBuilder.group({\r\n    //       extraction_batch: this.formBuilder.control(extractionbatch.id),\r\n    //       target: this.formBuilder.control(target.id),\r\n    //       replicate_number: this.formBuilder.control(i + 1),\r\n    //       pcr_pos_cq_value: this.formBuilder.control(null),\r\n    //     });\r\n    //     this.pcrreplicatebatch_array.push(pcrRepBatchFormGroup);\r\n\r\n    //   }\r\n\r\n\r\n    //   // these lines are for creating a replicate columns, but not used in current design\r\n    //   // instantiate a blank array to store a list of replicate counts for all the targets\r\n    //   // let replicateCountArray = [];\r\n    //   // add the replicate count for each target to the replicateCountArray\r\n    //   // replicateCountArray.push(target.replicates);\r\n    //   //this.replicateColumnCount = Math.max.apply(null, replicateCountArray);\r\n\r\n    // }\r\n\r\n    for (let replicate of extractionbatch.pcrreplicatebatches) {\r\n      let pcrRepBatchFormGroup: FormGroup = this.formBuilder.group({\r\n        extraction_batch: this.formBuilder.control(replicate.extraction_batch),\r\n        target: this.formBuilder.control(replicate.target),\r\n        replicate_number: this.formBuilder.control(replicate.replicate_number),\r\n        pcr_pos_cq_value: this.formBuilder.control({ value: replicate.pcr_pos_cq_value, disabled: replicate.pcr_pos_cq_value === null ? false : true }),\r\n        include: this.formBuilder.control({ value: false, disabled: replicate.pcr_pos_cq_value === null ? false : true })\r\n      });\r\n      this.pcrreplicatebatch_array.push(pcrRepBatchFormGroup);\r\n    }\r\n\r\n    // show the bulk submit neg results modal if not showing already\r\n    if (this.showBulkSubmitNegResults === false) {\r\n      this.showBulkSubmitNegResults = true;\r\n    }\r\n\r\n  }\r\n\r\n  resetAB() {\r\n    this.selected = [];\r\n    this.extractionTargetArray = [];\r\n  }\r\n\r\n  editRT(rt) {\r\n\r\n    this.editRTForm.setValue({\r\n      id: rt.id,\r\n      // rt_number: rt.rt_number,\r\n      template_volume: rt.template_volume,\r\n      reaction_volume: rt.reaction_volume,\r\n      rt_date: rt.rt_date\r\n    })\r\n    // show the edit rt detail modal if not showing already\r\n    if (this.showHideEditRTDetail === false) {\r\n      this.showHideEditRTDetail = true;\r\n    }\r\n\r\n  }\r\n\r\n  editExtractionTargets(extraction) {\r\n\r\n    this.resetAB();\r\n\r\n    this.currentExtractionNo = extraction.extraction_number;\r\n\r\n    // build the target list by looping through the AB data and adding all targets to a local array\r\n    for (let extTarget of extraction.targets) {\r\n      for (let target of this.allTargets) {\r\n        if (extTarget.id === target.id) {\r\n          this.extractionTargetArray.push(target);\r\n        }\r\n      }\r\n    }\r\n    this.selected = this.extractionTargetArray;\r\n    // show the edit edit target list modal if not showing already\r\n    if (this.showHideEditTargetList === false) {\r\n      this.showHideEditTargetList = true;\r\n    }\r\n\r\n  }\r\n\r\n  updateABTargetList() {\r\n\r\n  }\r\n\r\n  onSubmit(formID, formValue) {\r\n\r\n    this.submitLoading = true;\r\n\r\n    if (formID === \"editEB\") {\r\n      this._extractionBatchService.update(formValue)\r\n        .subscribe(\r\n          (updatedExtractionBatch) => {\r\n            this.extractionEditSuccessFlag = true;\r\n            this.extractionEditErrorFlag = false;\r\n            this.submitLoading = false;\r\n            this.retrieveABData();\r\n          },\r\n          error => {\r\n            this.errorMessage = <any>error\r\n            this.extractionEditSuccessFlag = false;\r\n            this.extractionEditErrorFlag = true;\r\n            this.submitLoading = false;\r\n          }\r\n        );\r\n    } else if (formID === 'editRT') {\r\n      this._reverseTranscriptionService.update(formValue)\r\n        .subscribe(\r\n          (updatedRT) => {\r\n            this.rtEditSuccessFlag = true;\r\n            this.rtEditErrorFlag = false;\r\n            this.submitLoading = false;\r\n            this.retrieveABData();\r\n          },\r\n          error => {\r\n            this.errorMessage = <any>error\r\n            this.rtEditSuccessFlag = false;\r\n            this.rtEditErrorFlag = true;\r\n            this.submitLoading = false;\r\n          }\r\n        );\r\n    } else if (formID === 'bulkSubmitNegResults') {\r\n\r\n      // remove the include = false replicates and then remove the include field\r\n      const pcrBatchArray = [];\r\n      for (let rep of formValue.pcr_batches) {\r\n        if (rep.include) {\r\n          if (rep.include) {\r\n            delete rep.include;\r\n            pcrBatchArray.push(rep);\r\n          }\r\n        }\r\n      }\r\n\r\n      this.pcrReplicateBatchService.postBulkNegativeResults(pcrBatchArray)\r\n        .subscribe(\r\n          (response) => {\r\n            this.batchSubmitNegResultsSuccessFlag = true;\r\n            this.batchSubmitNegResultsErrorFlag = false;\r\n            this.submitLoading = false;\r\n            this.retrieveABData();\r\n          },\r\n          error => {\r\n            this.errorMessage = <any>error\r\n            this.batchSubmitNegResultsSuccessFlag = false;\r\n            this.batchSubmitNegResultsErrorFlag = true;\r\n            this.submitLoading = false;\r\n          }\r\n        );\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/analysis-batches/analysis-batch-detail/analysis-batch-detail.component.ts","module.exports = \"<button class=\\\"btn btn-primary\\\" (click)=\\\"printPDF()\\\">Download worksheet as PDF</button>\\r\\n<div #batchWorksheet id=\\\"batchWorksheet\\\">\\r\\n\\r\\n  <div>\\r\\n    <!-- date title -->\\r\\n    <div id=\\\"row1\\\" class=\\\"row\\\" style=\\\"margin-top: 15px;\\\">\\r\\n      <div class=\\\"col-sm-12\\\">\\r\\n        <!-- <span class=\\\"col-sm-4\\\" style=\\\"padding-top:15px;\\\">{{nowDate | date: 'MM/dd/yyyy'}}</span> -->\\r\\n        <h3 class=\\\"text-center\\\">Analysis Batch Worksheet\\r\\n          <span *ngIf=\\\"abWorksheet?.isReprint\\\">&nbsp;Reprint</span>\\r\\n        </h3>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- top section -->\\r\\n    <div id=\\\"row2\\\" class=\\\"row\\\">\\r\\n      <!-- Top Left Table -->\\r\\n      <div class=\\\"col-md-6 pull-left\\\">\\r\\n        <table id=\\\"topLeftTable\\\" #topLeftTable class=\\\"col-md-8 table\\\">\\r\\n          <tr>\\r\\n            <td>Analysis Batch:</td>\\r\\n            <td>{{abWorksheet?.analysis_batch}}</td>\\r\\n          </tr>\\r\\n          <tr>\\r\\n            <td>Creation Date:</td>\\r\\n            <td>{{abWorksheet?.creation_date | date: 'MM/dd/yyyy'}}</td>\\r\\n          </tr>\\r\\n          <tr>\\r\\n            <td>Studies:</td>\\r\\n            <td>{{abWorksheet?.str_studies}}</td>\\r\\n          </tr>\\r\\n          <tr>\\r\\n            <td>Description:</td>\\r\\n            <td>{{abWorksheet?.description}}</td>\\r\\n          </tr>\\r\\n        </table>\\r\\n      </div>\\r\\n      <!-- Top Right Table -->\\r\\n      <div class=\\\"col-md-6 pull-right\\\">\\r\\n        <table id=\\\"topRightTable\\\" #topRightTable class=\\\"col-md-8 table\\\">\\r\\n          <tr>\\r\\n            <td>Extraction No.:</td>\\r\\n            <td>{{abWorksheet?.extraction_no}}</td>\\r\\n            <td></td>\\r\\n            <td></td>\\r\\n          </tr>\\r\\n          <tr>\\r\\n            <td>Extraction date:</td>\\r\\n            <td>{{abWorksheet?.extraction_date | date: 'MM/dd/yyyy'}}</td>\\r\\n            <td>Extraction sample volume:</td>\\r\\n            <td>{{abWorksheet?.extraction_sample_volume}}</td>\\r\\n          </tr>\\r\\n          <tr>\\r\\n            <td>Extraction method:</td>\\r\\n            <td>{{abWorksheet?.extraction_method?.name}}</td>\\r\\n            <td>Eluted extracted volume:</td>\\r\\n            <td>{{abWorksheet?.eluted_extraction_volume}}</td>\\r\\n          </tr>\\r\\n        </table>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <br clear=\\\"all\\\" />\\r\\n    <!-- middle section -->\\r\\n    <div id=\\\"row3\\\" class=\\\"row\\\">\\r\\n      <!-- sample location table -->\\r\\n\\r\\n      <div class=\\\"col-md-6 pull-left\\\">\\r\\n        <div class=\\\"col-md-11\\\">\\r\\n          <span *ngIf=\\\"abWorksheet?.isReprint\\\">This is a reprint. Aliquot listed is first aliquot of sample.</span>\\r\\n          <table class=\\\"table table-collapse\\\" [class.noTopMargin]=\\\"abWorksheet?.isReprint\\\" id=\\\"sampleTable\\\" #sampleTable>\\r\\n            <thead>\\r\\n              <tr>\\r\\n                <th></th>\\r\\n                <th>Sample</th>\\r\\n                <th>Rack</th>\\r\\n                <th>Box</th>\\r\\n                <th>Row</th>\\r\\n                <th>Spot</th>\\r\\n                <th>DNA Inhibition Dilution Factor</th>\\r\\n                <th>RNA Inhibition Dilution Factor</th>\\r\\n              </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n              <tr *ngFor=\\\"let extraction of abWorksheet?.extraction_submission; let i = index\\\">\\r\\n                <!-- aliquot_string?: string; aliquots?: any; box?: number; rack?: number; row?: number; sample: number; spot?: number;-->\\r\\n                <td>{{i+1}}</td>\\r\\n                <td>{{extraction.aliquot_string}}</td>\\r\\n                <td>{{extraction.rack}}</td>\\r\\n                <td>{{extraction.box}}</td>\\r\\n                <td>{{extraction.row}}</td>\\r\\n                <td>{{extraction.spot}}</td>\\r\\n                <td>{{extraction.dna_dilution_factor}}</td>\\r\\n                <td>{{extraction.rna_dilution_factor}}</td>\\r\\n              </tr>\\r\\n            </tbody>\\r\\n          </table>\\r\\n          <div style=\\\"font-weight:bold;\\\">\\r\\n            <div>Ext Neg:</div>\\r\\n            <div>Ext Pos:</div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <!-- target table -->\\r\\n      <div class=\\\"col-md-6 pull-right\\\">\\r\\n        <div class=\\\"col-md-11\\\">\\r\\n          <table class=\\\"table\\\" id=\\\"targetTable\\\" #targetTable>\\r\\n            <thead>\\r\\n              <tr>\\r\\n                <th>Target</th>\\r\\n                <th>Date</th>\\r\\n                <th>Positive ID</th>\\r\\n                <th>Cq</th>\\r\\n                <th>Detections</th>\\r\\n              </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n              <tr *ngFor=\\\"let target of abWorksheet?.targetNames\\\">\\r\\n                <td class=\\\"text-smaller\\\">{{target}}</td>\\r\\n                <td></td>\\r\\n                <td></td>\\r\\n                <td></td>\\r\\n                <td></td>\\r\\n              </tr>\\r\\n            </tbody>\\r\\n          </table>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <!-- end middle 2 tables -->\\r\\n\\r\\n    <!-- bottom section -->\\r\\n    <div id=\\\"row4\\\" class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-6 pull-left\\\" style=\\\"margin-bottom:15px;\\\">\\r\\n        <table id=\\\"bottomTable\\\" class=\\\"col-md-8 table\\\" *ngIf=\\\"abWorksheet?.rt_reaction_volume > 0\\\">\\r\\n          <tr>\\r\\n            <td>RT No.</td>\\r\\n            <td>{{abWorksheet?.reverse_extraction_no}}</td>\\r\\n            <td colspan=\\\"2\\\"></td>\\r\\n          </tr>\\r\\n          <tr>\\r\\n            <td>RT reaction volume</td>\\r\\n            <td>{{abWorksheet?.rt_reaction_volume}}&nbsp;µL</td>\\r\\n          </tr>\\r\\n          <tr>\\r\\n            <td>RT template volume</td>\\r\\n            <td>{{abWorksheet?.rt_template_volume}}&nbsp;µL</td>\\r\\n          </tr>\\r\\n          <tr>\\r\\n            <td>RT Date</td>\\r\\n            <td>{{abWorksheet?.rt_date | date:'shortDate'}}</td>\\r\\n          </tr>\\r\\n        </table>\\r\\n        <span *ngIf=\\\"abWorksheet?.rt_reaction_volume === 0\\\">No RT for this extraction.</span>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div id=\\\"row5\\\" class=\\\"row col-md-12\\\" id=\\\"notes\\\">\\r\\n      <div class=\\\"col-md-12 line_break\\\">Notes</div>\\r\\n      <br clear=\\\"all\\\" />\\r\\n      <div id=\\\"notesSpace\\\">&nbsp;</div>\\r\\n    </div>\\r\\n\\r\\n  </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component.html\n// module id = ./src/app/analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component.html\n// module chunks = main","module.exports = \"#topLeftTable, #topRightTable, #bottomTable {\\n  border: none; }\\n\\n#topLeftTable tr td:first-child {\\n  padding: 2px;\\n  border: none;\\n  width: 25%;\\n  font-weight: bold;\\n  text-align: right; }\\n\\n#topLeftTable tr td:last-child {\\n  padding: 2px;\\n  padding-left: 5px;\\n  border: none;\\n  text-align: left; }\\n\\n#topRightTable tr td:nth-child(odd) {\\n  padding: 2px;\\n  border: none;\\n  width: 40%;\\n  font-weight: bold;\\n  text-align: right; }\\n\\n#topRightTable tr td:nth-child(even) {\\n  padding: 2px;\\n  padding-left: 5px;\\n  border: none;\\n  text-align: left; }\\n\\n#batchWorksheet {\\n  background: white; }\\n\\n#bottomTable tr td:nth-child(odd) {\\n  padding: 2px;\\n  border: none;\\n  width: 47%;\\n  font-weight: bold;\\n  text-align: right; }\\n\\n#bottomTable tr td:nth-child(even) {\\n  padding: 2px;\\n  padding-left: 5px;\\n  border: none;\\n  text-align: left; }\\n\\n.noTopMargin {\\n  margin-top: 0; }\\n\\ntable {\\n  border-collapse: collapse; }\\n\\ntable thead tr th {\\n  border: black 1.01px solid;\\n  border: black 1.01px solid; }\\n\\ntable tbody tr td {\\n  border: black 1.01px solid;\\n  border: black 1.01px solid; }\\n\\n#targetTable {\\n  border: none;\\n  border-collapse: collapse;\\n  border-bottom: black 1px solid; }\\n\\n.line_break {\\n  width: 100%;\\n  color: black;\\n  background-color: rgba(255, 255, 255, 0.5);\\n  border: none;\\n  border-bottom: 1.1px solid black; }\\n\\n#notesSpace {\\n  min-height: 400px;\\n  height: 400px; }\\n\\n.text-smaller {\\n  font-size: small; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component.scss\n// module id = ./src/app/analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component.scss\n// module chunks = main","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { AnalysisBatchService } from '../../analysis-batches/analysis-batch.service';\r\nimport { IABWorksheet } from '../../analysis-batches/analysis-batch-worksheet/ab-worksheet';\r\n\r\ndeclare let jsPDF: any;\r\n// declare let html2pdf: any;\r\n\r\n// used for right-aligning the text added to pdf\r\nlet splitRegex = /\\r\\n|\\r|\\n/g;\r\njsPDF.API.textEx = function (text: any, x: number, y: number, hAlign?: string, vAlign?: string) {\r\n\tlet fontSize = ((this.internal.getFontSize()) / (this.internal.scaleFactor));\r\n\r\n\t// As defined in jsPDF source code\r\n\tlet lineHeightProportion = 1.15;\r\n\r\n\tlet splittedText: string[];\r\n\tlet lineCount: number = 1;\r\n\tif (vAlign === 'middle' || vAlign === 'bottom' ||\r\n\t\thAlign === 'center' || hAlign === 'right') {\r\n\r\n\t\tsplittedText = typeof text === 'string' ?\r\n\t\t\ttext.split(splitRegex) :\r\n\t\t\ttext;\r\n\r\n\t\tlineCount = splittedText.length || 1;\r\n\t}\r\n\r\n\t// Align the top\r\n\ty += fontSize * (2 - lineHeightProportion);\r\n\r\n\tif (vAlign === 'middle') { y -= (lineCount / 2) * fontSize }\r\n\telse if (vAlign === 'bottom') { y -= lineCount * fontSize };\r\n\r\n\r\n\tif (hAlign === 'center' ||\r\n\t\thAlign === 'right') {\r\n\r\n\t\tlet alignSize = fontSize;\r\n\t\tif (hAlign === 'center') alignSize *= 0.5;\r\n\r\n\t\tif (lineCount > 1) {\r\n\t\t\tfor (let iLine = 0; iLine < splittedText.length; iLine++) {\r\n\t\t\t\tthis.text(splittedText[iLine],\r\n\t\t\t\t\tx - this.getStringUnitWidth(splittedText[iLine]) * alignSize,\r\n\t\t\t\t\ty);\r\n\t\t\t\ty += fontSize;\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tx -= this.getStringUnitWidth(text) * alignSize;\r\n\t}\r\n\r\n\tthis.text(text, x, y);\r\n\treturn this;\r\n};\r\n\r\n@Component({\r\n\tselector: 'analysis-batch-worksheet',\r\n\ttemplateUrl: './analysis-batch-worksheet.component.html',\r\n\tstyleUrls: ['./analysis-batch-worksheet.component.scss']\r\n})\r\nexport class AnalysisBatchWorksheetComponent implements OnInit {\r\n\t@ViewChild('batchWorksheet') pdfWorksheet;\r\n\t@ViewChild('sampleTable') sampleTable: ElementRef;\r\n\t@ViewChild('targetTable') targetTable: ElementRef;\r\n\r\n\tpublic worksheetElement: any;\r\n\tpublic abWorksheet: IABWorksheet;\r\n\tprivate headerStyle: Object;\r\n\tpublic sampleColumns: Object[];\r\n\tpublic sampleRows: any[];\r\n\tpublic targetColumns: Object[];\r\n\tpublic targetRows: any[];\r\n\tprivate sampleEndingY: number; // used to track starting position after dynamic table is added\r\n\tprivate targetEndingY: number; // used to track starting position after dynamic table is added\r\n\r\n\tconstructor(private _batchServices: AnalysisBatchService) { }\r\n\r\n\tngOnInit() {\r\n\t\tthis.worksheetElement = this.pdfWorksheet.nativeElement;\r\n\t\t// header style for the tables in the pdf\r\n\t\tthis.headerStyle = {\r\n\t\t\tfillColor: [211, 211, 211],\r\n\t\t\tfontSize: 8,\r\n\t\t\ttextColor: [0, 0, 0]\r\n\t\t};\r\n\t\t// table header row for samples\r\n\t\tthis.sampleColumns = [{\r\n\t\t\ttitle: \"\",\r\n\t\t\tdataKey: \"index\"\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: \"Sample\",\r\n\t\t\tdataKey: \"Sample\"\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: \"Rack\",\r\n\t\t\tdataKey: \"Rack\"\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: \"Box\",\r\n\t\t\tdataKey: \"Box\"\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: \"Row\",\r\n\t\t\tdataKey: \"Row\"\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: \"Spot\",\r\n\t\t\tdataKey: \"Spot\"\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: \"DNA Inhibition\\nDilution Factor\",\r\n\t\t\tdataKey: \"DNA Inhibition Dilution Factor\"\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: \"RNA Inhibition\\nDilution Factor\",\r\n\t\t\tdataKey: \"RNA Inhibition Dilution Factor\"\r\n\t\t}\r\n\t\t];\r\n\t\tthis.sampleRows = [];\r\n\t\tthis.sampleEndingY = 0;\r\n\t\tthis.targetEndingY = 0;\r\n\t\t// table header row for targets\r\n\t\tthis.targetColumns = [{\r\n\t\t\ttitle: \"Target\",\r\n\t\t\tdataKey: \"Target\"\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: \"Date\",\r\n\t\t\tdataKey: \"Date\"\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: \"Positive\\nID\",\r\n\t\t\tdataKey: \"Positive ID\"\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: \"Cq\",\r\n\t\t\tdataKey: \"Cq\"\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: \"Detections\",\r\n\t\t\tdataKey: \"Detections\"\r\n\t\t}\r\n\t\t];\r\n\t\tthis.targetRows = [];\r\n\r\n\t\tthis._batchServices.WorksheetObject.subscribe((values) => {\r\n\t\t\tthis.abWorksheet = values;\r\n\t\t\tlet studyArray = []\r\n\t\t\tvalues.studies.forEach(study => {\r\n\t\t\t\tstudyArray.push(study.name);\r\n\t\t\t});\r\n\t\t\tthis.abWorksheet.str_studies = studyArray.join(\", \");\r\n\t\t});\r\n\t}\r\n\r\n\tpublic printPDF() {\r\n\t\tlet pdf = new jsPDF('p', 'pt', 'a4', true);\r\n\t\tpdf.setFontSize(8);\r\n\t\tpdf.setFontType(\"normal\");\r\n\t\tpdf.text(10, 20, new Date().toLocaleDateString());\r\n\r\n\t\tpdf.setFontSize(10);\r\n\t\tpdf.setFontType(\"bold\");\r\n\t\tif (this.abWorksheet.isReprint) {\r\n\t\t\tpdf.text(200, 20, 'Analysis Batch Worksheet Reprint');\r\n\t\t} else {\r\n\t\t\tpdf.text(200, 20, 'Analysis Batch Worksheet');\r\n\t\t}\r\n\t\tpdf.setFontSize(8);\r\n\t\tpdf.setFontType(\"bold\");\r\n\r\n\t\t// Top left Table /////////////////////////////\r\n\t\tpdf.textEx('Analysis batch:', 70, 50, 'right', 'middle');\r\n\t\tpdf.setFontType(\"normal\");\r\n\t\tpdf.textEx(this.abWorksheet.analysis_batch.toString(), 75, 50, 'left', 'middle');\r\n\t\tpdf.setFontType(\"bold\");\r\n\t\tpdf.textEx('Creation date:', 70, 60, 'right', 'middle');\r\n\t\tpdf.setFontType(\"normal\");\r\n\t\tpdf.textEx(this.abWorksheet.creation_date, 75, 60, 'left', 'middle');\r\n\r\n\t\t// split the studies comma separated string in case too long.\r\n\t\tlet studySplit = pdf.splitTextToSize(this.abWorksheet.str_studies, 240);\r\n\t\tlet studyRows = studySplit.length;\r\n\t\t// if rows are greater than 5, need to strip off and add '...' at end of 5\r\n\t\tif (studyRows > 5) {\r\n\t\t\tstudySplit = studySplit.slice(0, 5);\r\n\t\t\tstudySplit[4] = studySplit[4].slice(0, -3) + '...';\r\n\t\t\tstudyRows = studySplit.length;\r\n\t\t}\r\n\t\t// how much should the description move down based on the number of rows here\r\n\t\tif (studyRows > 1) {\r\n\t\t\tlet moveDown: number = 0;\r\n\t\t\tswitch (studyRows) {\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tmoveDown = 115;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tmoveDown = 105;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tmoveDown = 97;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tmoveDown = 87;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// multiple rows, bump down more\r\n\t\t\tpdf.setFontType(\"bold\");\r\n\t\t\tpdf.textEx('Studies:', 70, 70, 'right', 'middle');\r\n\t\t\tpdf.setFontType(\"normal\");\r\n\t\t\tpdf.text(75, 72, studySplit);\r\n\r\n\t\t\tpdf.setFontType(\"bold\");\r\n\t\t\tpdf.textEx('Description:', 70, moveDown, 'right', 'middle');\r\n\t\t\tpdf.setFontType(\"normal\");\r\n\t\t\tpdf.textEx(this.abWorksheet.description, 75, moveDown, 'left', 'middle');\r\n\t\t} else {\r\n\t\t\t// only 1 row, proceed as normal\r\n\t\t\tpdf.setFontType(\"bold\");\r\n\t\t\tpdf.textEx('Studies:', 70, 70, 'right', 'middle');\r\n\t\t\tpdf.setFontType(\"normal\");\r\n\t\t\tpdf.textEx(studySplit[0], 75, 70, 'left', 'middle');\r\n\r\n\t\t\tpdf.setFontType(\"bold\");\r\n\t\t\tpdf.textEx('Description:', 70, 80, 'right', 'middle');\r\n\t\t\tpdf.setFontType(\"normal\");\r\n\t\t\tpdf.textEx(this.abWorksheet.description, 75, 80, 'left', 'middle');\r\n\t\t}\r\n\t\t// END Top left Table /////////////////////////////\r\n\r\n\t\t// Top right Table /////////////////////////////\r\n\t\tpdf.setFontType(\"bold\");\r\n\t\tpdf.textEx('Extraction No.:', 405, 50, 'right', 'middle');\r\n\t\tpdf.setFontType(\"normal\");\r\n\t\tpdf.textEx(this.abWorksheet.extraction_no.toString(), 410, 50, 'left', 'middle');\r\n\r\n\t\tpdf.setFontType(\"bold\");\r\n\t\tpdf.textEx('Extraction date:', 405, 60, 'right', 'middle');\r\n\t\tpdf.setFontType(\"normal\");\r\n\t\tpdf.textEx(this.abWorksheet.extraction_date, 410, 60, 'left', 'middle');\r\n\t\tpdf.setFontType(\"bold\");\r\n\t\tpdf.textEx('Extraction sample volume:', 560, 60, 'right', 'middle');\r\n\t\tpdf.setFontType(\"normal\");\r\n\t\tpdf.textEx(this.abWorksheet.extraction_sample_volume.toString(), 565, 60, 'left', 'middle');\r\n\r\n\t\tpdf.setFontType(\"bold\");\r\n\t\tpdf.textEx('Extraction method:', 405, 70, 'right', 'middle');\r\n\t\tpdf.setFontType(\"normal\");\r\n\t\tpdf.textEx(this.abWorksheet.extraction_method[\"name\"], 410, 70, 'left', 'middle');\r\n\t\tpdf.setFontType(\"bold\");\r\n\t\tpdf.textEx('Eluted extracted volume:', 560, 70, 'right', 'middle');\r\n\t\tpdf.setFontType(\"normal\");\r\n\t\tpdf.textEx(this.abWorksheet.eluted_extraction_volume.toString(), 565, 70, 'left', 'middle');\r\n\t\t// END Top right Table /////////////////////////////\r\n\r\n\t\t// Sample middle Table /////////////////////////////\r\n\t\tthis.sampleRows = this.tableToJson(this.sampleTable.nativeElement);\r\n\r\n\t\tthis.sampleRows.forEach((r, i) => {\r\n\t\t\tr['index'] = i + 1;\r\n\t\t});\r\n\t\tif (this.abWorksheet.isReprint) {\r\n\t\t\tpdf.text(\"This is a reprint. Aliquot listed is first aliquot of sample.\", 20, 130);\r\n\t\t}\r\n\t\tpdf.autoTable(this.sampleColumns, this.sampleRows, {\r\n\t\t\tstartY: 135,\r\n\t\t\tmargin: 10,\r\n\t\t\ttheme: 'grid',\r\n\t\t\ttableWidth: 315,\r\n\t\t\theaderStyles: this.headerStyle\r\n\r\n\t\t});\r\n\t\tpdf.text('Ext Neg:', 20, pdf.autoTable.previous.finalY + 10);\r\n\t\tpdf.text('Ext Pos:', 20, pdf.autoTable.previous.finalY + 20);\r\n\t\tthis.sampleEndingY = pdf.autoTable.previous.finalY + 20;\r\n\t\t// END Sample middle Table //////////////////////////////////\r\n\r\n\t\t// Target middle Table /////////////////////////////\r\n\t\tthis.targetRows = this.tableToJson(this.targetTable.nativeElement);\r\n\r\n\t\tpdf.autoTable(this.targetColumns, this.targetRows, {\r\n\t\t\tstartY: 135,\r\n\t\t\tmargin: {\r\n\t\t\t\tleft: 338\r\n\t\t\t},\r\n\t\t\ttheme: 'grid',\r\n\t\t\ttableWidth: 245,\r\n\t\t\theaderStyles: this.headerStyle,\r\n\t\t\tcolumnStyles: {\r\n\t\t\t\tTarget: {\r\n\t\t\t\t\tcolumnWidth: 70\r\n\t\t\t\t},\r\n\t\t\t\tDate: {\r\n\t\t\t\t\tcolumnWidth: 60\r\n\t\t\t\t},\r\n\t\t\t\t'Positive ID': {\r\n\t\t\t\t\tcolumnWidth: 42\r\n\t\t\t\t},\r\n\t\t\t\tCq: {\r\n\t\t\t\t\tcolumnWidth: 24\r\n\t\t\t\t},\r\n\t\t\t\tDetections: {\r\n\t\t\t\t\tcolumnWidth: 51\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.targetEndingY = pdf.autoTable.previous.finalY + 20;\r\n\t\t// END Target middle Table //////////////////////////////////\r\n\r\n\t\t// Lower section //////////////////////////////////////\r\n\t\tlet nextNewStartingY = 0;\r\n\t\t// which table is longer, need this info to go under both middle tables\r\n\t\tif (this.targetEndingY > this.sampleEndingY) {\r\n\t\t\tnextNewStartingY = this.targetEndingY;\r\n\t\t} else {\r\n\t\t\tnextNewStartingY = this.sampleEndingY;\r\n\t\t}\r\n\r\n\t\tpdf.textEx('Reverse transcription No.:', 110, nextNewStartingY + 20, 'right', 'middle');\r\n\t\tpdf.textEx(this.abWorksheet.reverse_extraction_no.toString(), 115, nextNewStartingY + 20, 'left', 'middle');\r\n\r\n\t\tpdf.textEx('RT reaction volume:', 110, nextNewStartingY + 30, 'right', 'middle');\r\n\t\tpdf.textEx(this.abWorksheet.rt_reaction_volume.toString(), 115, nextNewStartingY + 30, 'left', 'middle');\r\n\r\n        /*pdf.textEx('qPCR replicates:', 110, nextNewStartingY + 40, 'right', 'middle');\r\n        pdf.textEx('---', 115, nextNewStartingY + 40, 'left', 'middle');*/\r\n\r\n\t\tpdf.text('Notes:', 20, nextNewStartingY + 70);\r\n\t\tpdf.line(15, nextNewStartingY + 75, 580, nextNewStartingY + 75);\r\n\r\n\t\tpdf.save(\"worksheet.pdf\");\r\n\t}\r\n\r\n\t// convert table element to json for the .autoTable()\r\n\tprivate tableToJson(table) {\r\n\t\tlet data = [];\r\n\r\n\t\t// first row needs to be headers\r\n\t\tlet headers = [];\r\n\t\tfor (let i = 0; i < table.rows[0].cells.length; i++) {\r\n\t\t\theaders[i] = table.rows[0].cells[i].innerHTML;\r\n\t\t}\r\n\r\n\t\t// go through cells\r\n\t\tfor (let i = 1; i < table.rows.length; i++) {\r\n\t\t\tlet tableRow = table.rows[i];\r\n\t\t\tlet rowData = {};\r\n\t\t\tfor (let j = 0; j < tableRow.cells.length; j++) {\r\n\t\t\t\trowData[headers[j]] = tableRow.cells[j].innerHTML;\r\n\t\t\t}\r\n\t\t\tdata.push(rowData);\r\n\t\t}\r\n\t\treturn data;\r\n\t}\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\nimport { Subject } from \"rxjs/Subject\";\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\nimport { IAnalysisBatch } from './analysis-batch';\r\nimport { IAnalysisBatchSummary } from './analysis-batch-summary';\r\nimport { IAnalysisBatchDetail } from './analysis-batch-detail';\r\n\r\n\r\n\r\n@Injectable()\r\nexport class AnalysisBatchService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  private extractData(res: Response) {\r\n    let body = res.json();\r\n    return body.data || {};\r\n  }\r\n  // need for analysis-batches.component to open worksheet in new window\r\n  getNativeWindow() {\r\n    return window;\r\n  }\r\n  // subject, getter,setter for extraction form values\r\n  private _ExtractionWorksheetObj: Subject<any> = new Subject<any>();\r\n  public get WorksheetObject(): Observable<any> { return this._ExtractionWorksheetObj.asObservable(); }\r\n  public setWorksheetObject(worksheetObj: any) {\r\n    this._ExtractionWorksheetObj.next(worksheetObj);\r\n  }\r\n  // get Analysis Batch Detail - for individual AB record retrieval \r\n  public getAnalysisBatchDetail(abID: number): Observable<IAnalysisBatchDetail> {\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.ANALYSIS_BATCH_DETAIL_URL + abID + '/?format=json', options)\r\n      .map((response: Response) => <IAnalysisBatchDetail[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  // get Analysis Batch Summaries - for populating table of ABs\r\n  getAnalysisBatchSummaries(): Observable<IAnalysisBatchSummary[]> {\r\n\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.get(APP_SETTINGS.ANALYSIS_BATCH_SUMMARY_URL, options)\r\n      .map((response: Response) => <IAnalysisBatchSummary[]>response.json())\r\n      // .do(data => console.log('Analysis Batch data: ' + JSON.stringify(data)))\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public queryAnalysisBatchesCount(queryFormValue): Observable<any> {\r\n\r\n    let queryString = '?';\r\n\r\n    if (queryFormValue.from_id !== null && queryFormValue.from_id !== '') {\r\n      queryString = queryString + '&from_id=' + queryFormValue.from_id.toString();\r\n    }\r\n    if (queryFormValue.to_id !== null && queryFormValue.to_id !== '') {\r\n      queryString = queryString + '&to_id=' + queryFormValue.to_id.toString();\r\n    }\r\n    if (queryFormValue.study !== null && queryFormValue.study !== '') {\r\n      queryString = queryString + '&study=' + queryFormValue.study.toString();\r\n    }\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.ANALYSIS_BATCH_SUMMARY_URL + 'get_count/' + queryString, options)\r\n      .map((response: Response) => <IAnalysisBatch[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n\r\n  public queryAnalysisBatches(queryFormValue): Observable<IAnalysisBatchSummary[]> {\r\n\r\n    let queryString = '?';\r\n\r\n    if (queryFormValue.from_id !== null && queryFormValue.from_id !== '') {\r\n      queryString = queryString + '&from_id=' + queryFormValue.from_id.toString();\r\n    }\r\n    if (queryFormValue.to_id !== null && queryFormValue.to_id !== '') {\r\n      queryString = queryString + '&to_id=' + queryFormValue.to_id.toString();\r\n    }\r\n    if (queryFormValue.study !== null && queryFormValue.study !== '') {\r\n      queryString = queryString + '&study=' + queryFormValue.study.toString();\r\n    }\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.ANALYSIS_BATCH_SUMMARY_URL + queryString, options)\r\n      .map((response: Response) => <IAnalysisBatch[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  // get sample-inhibition objects, i.e. inhibitions per sample\r\n  getSampleInhibitions(sampleList: number[]): Observable<any[]> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.SAMPLE_INHIBITIONS_URL + '?id=' + sampleList, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public create(formValue: IAnalysisBatch): Observable<IAnalysisBatch> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.post(APP_SETTINGS.ANALYSIS_BATCH_URL, formValue, options)\r\n      .map((response: Response) => <any>response.json())\r\n      .catch(this.handleError)\r\n\r\n  }\r\n\r\n  public update(formValue: IAnalysisBatch): Observable<IAnalysisBatch> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.put(APP_SETTINGS.ANALYSIS_BATCH_URL + formValue.id + '/', formValue, options)\r\n      .map(this.extractData)\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/analysis-batches/analysis-batch.service.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-xs-12\\\">\\r\\n        <h3>Analysis Batches</h3>\\r\\n    </div>\\r\\n</div>\\r\\n<!-- Extract wizard -->\\r\\n<clr-wizard #wizardExtract [(clrWizardOpen)]=\\\"extractWizardOpen\\\"\\r\\n    (clrWizardOnFinish)=\\\"finishExtractWizard(selectedAnalysisBatchID, extractForm.value, createInhibitionForm.value)\\\"\\r\\n    (clrWizardOnCancel)=\\\"resetExtractWizard()\\\" clrWizardSize=\\\"xl\\\">\\r\\n    <clr-wizard-title>Extract Samples in Analysis Batch {{selectedAnalysisBatchID}}</clr-wizard-title>\\r\\n\\r\\n    <clr-wizard-button [type]=\\\"'cancel'\\\">Cancel</clr-wizard-button>\\r\\n    <clr-wizard-button [type]=\\\"'previous'\\\">Back</clr-wizard-button>\\r\\n    <clr-wizard-button [type]=\\\"'next'\\\">Next</clr-wizard-button>\\r\\n    <!-- <clr-wizard-button [type]=\\\"'finish'\\\">Finish</clr-wizard-button> -->\\r\\n\\r\\n    <!-- Aliquot selection page -->\\r\\n    <clr-wizard-page (clrWizardPageCustomButton)=\\\"doCustomClick($event)\\\">\\r\\n        <ng-template clrPageTitle>Aliquot Selection</ng-template>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-10 col-md-10\\\">\\r\\n                <p>Select an aliquot for each Sample in this Analysis Batch\\r\\n\\r\\n                    <form class=\\\"compact\\\">\\r\\n                        <section class=\\\"form-block\\\">\\r\\n\\r\\n                            <div class=\\\"form-group\\\" *ngFor=\\\"let sample of abSampleList\\\">\\r\\n                                <label for=\\\"\\\">Sample {{sample.id}}</label>\\r\\n\\r\\n                                <span *ngIf=\\\"sample.aliquots.length === 0\\\">No aliquots recorded</span>\\r\\n                                <div class=\\\"select\\\" *ngIf=\\\"sample.aliquots.length > 0\\\">\\r\\n                                    <select name=\\\"aliquot_select\\\"\\r\\n                                        (change)=\\\"onAliquotSelect(sample.id, $event.target.value)\\\">\\r\\n                                        <option [value]=\\\"\\\">Select</option>\\r\\n                                        <option *ngFor=\\\"let aliquot of sample.aliquots\\\" [value]=\\\"aliquot.id\\\">\\r\\n                                            {{aliquot.aliquot_string}}</option>\\r\\n                                    </select>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                        </section>\\r\\n                    </form>\\r\\n\\r\\n                    <!-- alternative method using the embedded aliquots form array -->\\r\\n                    <!-- <form class=\\\"compact\\\" [formGroup]=\\\"extractForm\\\">\\r\\n                        <section class=\\\"form-block\\\">\\r\\n                            <p>Select desired number of PCR replicates for each selected target. To update the targets list,\\r\\n                                return to Target Selection page.\\r\\n                                <div formArrayName=\\\"new_sample_extractions\\\" *ngIf=\\\"extractionArray.controls.length > 0\\\">\\r\\n                                    <div class=\\\"form-group\\\" *ngFor=\\\"let extraction of extractionArray.controls; let i = index\\\" [formGroupName]=\\\"i\\\">\\r\\n                                        <label>Sample {{extraction.controls.sample.value}}</label>\\r\\n                                        <div class=\\\"select\\\" formArrayName=\\\"aliquots\\\">\\r\\n                                            <select formControlName=\\\"selected_aliquot\\\">\\r\\n                                                <option *ngFor=\\\"let aliquot of extraction.controls.aliquots.controls\\\" [value]=\\\"aliquot.controls.aliquot_string.value\\\">{{aliquot.controls.aliquot_string.value}}</option>\\r\\n                                            </select>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                        </section>\\r\\n                    </form> -->\\r\\n\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n\\r\\n        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"aliquotSelectErrorFlag\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">Missing aliquot selection for one or more samples. Please ensure that all\\r\\n                    samples have aliquots recorded\\r\\n                    and that one is selected for this Extraction.</span>\\r\\n            </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <ng-template clrPageButtons>\\r\\n            <clr-wizard-button [type]=\\\"'custom-cancel'\\\">Cancel</clr-wizard-button>\\r\\n            <clr-wizard-button [type]=\\\"'custom-previous'\\\">Back</clr-wizard-button>\\r\\n            <clr-wizard-button [type]=\\\"'custom-next-aliquotPage'\\\">Next</clr-wizard-button>\\r\\n        </ng-template>\\r\\n    </clr-wizard-page>\\r\\n    <!-- end Aliquot selection page -->\\r\\n\\r\\n    <!-- Target selection page -->\\r\\n    <clr-wizard-page (clrWizardPageCustomButton)=\\\"doCustomClick($event)\\\">\\r\\n        <ng-template clrPageTitle>Target Selection</ng-template>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-12 col-md-12 col-sm-12\\\">\\r\\n                Select targets to analyze for this extraction from the table below\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-12 col-md-12 col-sm-12\\\">\\r\\n\\r\\n                <clr-datagrid class=\\\"target-select-datagrid\\\" [(clrDgSelected)]=\\\"selected\\\">\\r\\n\\r\\n                    <clr-dg-column [clrDgField]=\\\"'name'\\\" class=\\\"name-column\\\">Name</clr-dg-column>\\r\\n                    <clr-dg-column [clrDgField]=\\\"'code'\\\">Code</clr-dg-column>\\r\\n                    <clr-dg-column [clrDgField]=\\\"'type'\\\">Type</clr-dg-column>\\r\\n\\r\\n                    <clr-dg-row *clrDgItems=\\\"let target of allTargets\\\" [clrDgItem]=\\\"target\\\">\\r\\n                        <clr-dg-cell>{{target.name}}</clr-dg-cell>\\r\\n                        <clr-dg-cell>{{target.code}}</clr-dg-cell>\\r\\n                        <clr-dg-cell>{{target.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes }}\\r\\n                        </clr-dg-cell>\\r\\n                    </clr-dg-row>\\r\\n\\r\\n                    <clr-dg-footer>{{allTargets.length}} targets</clr-dg-footer>\\r\\n                </clr-datagrid>\\r\\n\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"targetSelectErrorFlag\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">Please select at least one target to continue.</span>\\r\\n            </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <ng-template clrPageButtons>\\r\\n            <clr-wizard-button [type]=\\\"'custom-cancel'\\\">Cancel</clr-wizard-button>\\r\\n            <clr-wizard-button [type]=\\\"'custom-previous'\\\">Back</clr-wizard-button>\\r\\n            <clr-wizard-button [type]=\\\"'custom-next-targetPage'\\\">Next</clr-wizard-button>\\r\\n        </ng-template>\\r\\n\\r\\n    </clr-wizard-page>\\r\\n    <!-- end Target selection page -->\\r\\n\\r\\n    <!-- qPCR details page -->\\r\\n    <clr-wizard-page>\\r\\n        <ng-template clrPageTitle>qPCR Details</ng-template>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-12 col-md-12 col-sm-12\\\">\\r\\n                <form class=\\\"compact\\\" [formGroup]=\\\"extractForm\\\" (ngSubmit)=\\\"onSubmit('add', extractForm.value)\\\">\\r\\n                    <section class=\\\"form-block\\\">\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"required\\\">qPCR Template Volume (µL)</label>\\r\\n                            <label for=\\\"qpcrTemplateVol\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                class=\\\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\\\"\\r\\n                                [class.invalid]=\\\"extractForm.get('qpcr_template_volume').invalid && (extractForm.get('qpcr_template_volume').dirty || extractForm.get('qpcr_template_volume').touched)\\\">\\r\\n                                <input id=\\\"qpcrTemplateVol\\\" type=\\\"text\\\" size=\\\"5\\\" formControlName=\\\"qpcr_template_volume\\\">\\r\\n                                <span class=\\\"tooltip-content\\\">\\r\\n                                    This field cannot be empty!\\r\\n                                </span>\\r\\n                            </label>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"required\\\">qPCR Reaction Volume(µL)</label>\\r\\n                            <label for=\\\"qpcrReactionVol\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                class=\\\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\\\"\\r\\n                                [class.invalid]=\\\"extractForm.get('qpcr_reaction_volume').invalid && (extractForm.get('qpcr_reaction_volume').dirty || extractForm.get('qpcr_reaction_volume').touched)\\\">\\r\\n                                <input id=\\\"qpcrReactionVol\\\" type=\\\"text\\\" size=\\\"5\\\" formControlName=\\\"qpcr_reaction_volume\\\">\\r\\n                                <span class=\\\"tooltip-content\\\">\\r\\n                                    This field cannot be empty!\\r\\n                                </span>\\r\\n                            </label>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"required\\\">qPCR Date</label>\\r\\n                            <label for=\\\"qpcrDateInput\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                class=\\\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\\\"\\r\\n                                [class.invalid]=\\\"extractForm.get('qpcr_reaction_volume').invalid && (extractForm.get('qpcr_reaction_volume').dirty || extractForm.get('qpcr_reaction_volume').touched)\\\">\\r\\n                                <input type=\\\"date\\\" id=\\\"qpcrDateInput\\\" formControlName=\\\"qpcr_date\\\">\\r\\n                                <span class=\\\"tooltip-content\\\">\\r\\n                                    This field cannot be empty!\\r\\n                                </span>\\r\\n\\r\\n                            </label>\\r\\n                        </div>\\r\\n\\r\\n                    </section>\\r\\n\\r\\n                    <section class=\\\"form-block\\\" *ngIf=\\\"x\\\">\\r\\n                        <p>Select desired number of PCR replicates for each selected target. To update the targets list,\\r\\n                            return\\r\\n                            to Target Selection page. Minimum value of 1.\\r\\n                            <div formArrayName=\\\"new_replicates\\\">\\r\\n\\r\\n                                <div class=\\\"form-group\\\" *ngFor=\\\"let target of replicateArray.controls; let i = index\\\"\\r\\n                                    [formGroupName]=\\\"i\\\">\\r\\n\\r\\n                                    <label\\r\\n                                        class=\\\"required\\\">{{target.controls.target.value | displayValue:'name':this.allTargets}}</label>\\r\\n                                    <input formControlName=\\\"count\\\" type=\\\"number\\\" min=\\\"1\\\" class=\\\"target-count-input\\\">\\r\\n\\r\\n                                    <!-- count input with validation feedback. does not seem to work for number inputs. -->\\r\\n                                    <!-- <label for=\\\"count{{i}}\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\\\"\\r\\n                                        [class.invalid]=\\\"extractForm.get('new_replicates').controls[i].get('count').invalid && (extractForm.get('new_replicates').controls[i].get('count').dirty || extractForm.get('new_replicates').controls[i].get('count').touched)\\\">\\r\\n                                        <input id=\\\"count{{i}}\\\" formControlName=\\\"count\\\" type=\\\"text\\\"  class=\\\"target-count-input\\\">\\r\\n                                        <span class=\\\"tooltip-content\\\">\\r\\n                                            This field cannot be empty!\\r\\n                                        </span>\\r\\n                                    </label> -->\\r\\n\\r\\n                                </div>\\r\\n                            </div>\\r\\n                    </section>\\r\\n                </form>\\r\\n            </div>\\r\\n        </div>\\r\\n    </clr-wizard-page>\\r\\n    <!-- end qPCR details page -->\\r\\n\\r\\n    <!-- extraction (batch) details page -->\\r\\n    <clr-wizard-page>\\r\\n        <ng-template clrPageTitle>Extraction Details</ng-template>\\r\\n\\r\\n        <form class=\\\"compact\\\" [formGroup]=\\\"extractForm\\\" (ngSubmit)=\\\"onSubmit('add', extractForm.value)\\\">\\r\\n            <section class=\\\"form-block\\\">\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"required\\\">Extraction Volume (µL)</label>\\r\\n                    <label for=\\\"extractVol\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                        class=\\\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\\\"\\r\\n                        [class.invalid]=\\\"extractForm.get('extraction_volume').invalid && (extractForm.get('extraction_volume').dirty || extractForm.get('extraction_volume').touched)\\\">\\r\\n                        <input id=\\\"extractVol\\\" type=\\\"text\\\" size=\\\"10\\\" formControlName=\\\"extraction_volume\\\">\\r\\n                        <span class=\\\"tooltip-content\\\">\\r\\n                            This field cannot be empty and must be a number!\\r\\n                        </span>\\r\\n                    </label>\\r\\n\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"required\\\">Elution Volume (µL)</label>\\r\\n                    <label for=\\\"elutionVol\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                        class=\\\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\\\"\\r\\n                        [class.invalid]=\\\"extractForm.get('elution_volume').invalid && (extractForm.get('elution_volume').dirty || extractForm.get('elution_volume').touched)\\\">\\r\\n                        <input id=\\\"elutionVol\\\" type=\\\"text\\\" size=\\\"10\\\" formControlName=\\\"elution_volume\\\">\\r\\n                        <span class=\\\"tooltip-content\\\">\\r\\n                            This field cannot be empty and must be a number!\\r\\n                        </span>\\r\\n                    </label>\\r\\n\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"required\\\">Extraction Method</label>\\r\\n                    <label for=\\\"extractionMethodSelect\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                        class=\\\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\\\"\\r\\n                        [class.invalid]=\\\"extractForm.get('extraction_method').invalid && (extractForm.get('extraction_method').dirty || extractForm.get('extraction_method').touched)\\\">\\r\\n                        <div class=\\\"select\\\">\\r\\n                            <select id=\\\"extractionMethodSelect\\\" name=\\\"extraction_method\\\"\\r\\n                                formControlName=\\\"extraction_method\\\">\\r\\n                                <option *ngFor=\\\"let method of allExtractionMethods\\\" [value]=\\\"method.id\\\">{{method.name}}\\r\\n                                </option>\\r\\n                            </select>\\r\\n                        </div>\\r\\n                        <span class=\\\"tooltip-content\\\">\\r\\n                            This field cannot be empty!\\r\\n                        </span>\\r\\n                    </label>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"required\\\">Dilution factor of Sample</label>\\r\\n                    <label for=\\\"sampleDilution\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                        class=\\\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\\\"\\r\\n                        [class.invalid]=\\\"extractForm.get('sample_dilution_factor').invalid && (extractForm.get('sample_dilution_factor').dirty || extractForm.get('sample_dilution_factor').touched)\\\">\\r\\n                        <input id=\\\"sampleDilution\\\" type=\\\"number\\\" size=\\\"10\\\" min=\\\"1\\\"\\r\\n                            formControlName=\\\"sample_dilution_factor\\\">\\r\\n                        <span class=\\\"tooltip-content\\\">\\r\\n                            This field cannot be empty!\\r\\n                        </span>\\r\\n                    </label>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label class=\\\"required\\\">Extraction Date</label>\\r\\n                    <label for=\\\"extractionDateInput\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                        class=\\\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\\\"\\r\\n                        [class.invalid]=\\\"extractForm.get('extraction_date').invalid && (extractForm.get('extraction_date').dirty || extractForm.get('extraction_date').touched)\\\">\\r\\n                        <input type=\\\"date\\\" id=\\\"extractionDateInput\\\" formControlName=\\\"extraction_date\\\">\\r\\n                        <span class=\\\"tooltip-content\\\">\\r\\n                            This field cannot be empty!\\r\\n                        </span>\\r\\n                    </label>\\r\\n                </div>\\r\\n            </section>\\r\\n        </form>\\r\\n    </clr-wizard-page>\\r\\n    <!-- extraction (batch) details page -->\\r\\n\\r\\n    <!-- Reverse Transcription page -->\\r\\n    <clr-wizard-page>\\r\\n        <ng-template clrPageTitle>Reverse Transcription</ng-template>\\r\\n        <clr-alert [clrAlertClosable]=\\\"false\\\" *ngIf=\\\"rnaTargetsSelected\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">\\r\\n                    You have selected RNA targets for this extraction. Please enter RT data below.\\r\\n                </span>\\r\\n            </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <clr-alert [clrAlertClosable]=\\\"false\\\" *ngIf=\\\"!rnaTargetsSelected\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">\\r\\n                    You have not selected any RNA targets for this extraction. No RT record will be created. Please\\r\\n                    click Next to skip to the\\r\\n                    next step.\\r\\n                </span>\\r\\n            </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <form class=\\\"compact\\\" [formGroup]=\\\"extractForm\\\" *ngIf=\\\"rnaTargetsSelected\\\">\\r\\n            <section class=\\\"form-block\\\">\\r\\n\\r\\n                <div formGroupName=\\\"new_rt\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <label class=\\\"required\\\">Template Volume (µL)</label>\\r\\n                        <label for=\\\"rtTemplateVol\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                            class=\\\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\\\"\\r\\n                            [class.invalid]=\\\"extractForm.get('new_rt').get('template_volume').invalid && (extractForm.get('new_rt').get('template_volume').dirty || extractForm.get('new_rt').get('template_volume').touched)\\\">\\r\\n                            <input id=\\\"rTtemplateVol\\\" type=\\\"text\\\" size=\\\"10\\\" formControlName=\\\"template_volume\\\">\\r\\n                            <span class=\\\"tooltip-content\\\">\\r\\n                                This field cannot be empty and must be a number!\\r\\n                            </span>\\r\\n                        </label>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <label class=\\\"required\\\">Reaction Volume (µL)</label>\\r\\n                        <label for=\\\"rtReactionVol\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                            class=\\\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\\\"\\r\\n                            [class.invalid]=\\\"extractForm.get('new_rt').get('reaction_volume').invalid && (extractForm.get('new_rt').get('reaction_volume').dirty || extractForm.get('new_rt').get('reaction_volume').touched)\\\">\\r\\n                            <input id=\\\"rtReactionVol\\\" type=\\\"text\\\" size=\\\"10\\\" formControlName=\\\"reaction_volume\\\">\\r\\n                            <span class=\\\"tooltip-content\\\">\\r\\n                                This field cannot be empty and must be a number!\\r\\n                            </span>\\r\\n                        </label>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <label class=\\\"required\\\">RT Date</label>\\r\\n                        <label for=\\\"rtDateInput\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                            class=\\\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\\\"\\r\\n                            [class.invalid]=\\\"extractForm.get('new_rt').get('rt_date').invalid && (extractForm.get('new_rt').get('rt_date').dirty || extractForm.get('new_rt').get('rt_date').touched)\\\">\\r\\n                            <input type=\\\"date\\\" id=\\\"rtDateInput\\\" formControlName=\\\"rt_date\\\">\\r\\n                            <span class=\\\"tooltip-content\\\">\\r\\n                                This field cannot be empty!\\r\\n                            </span>\\r\\n                        </label>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n            </section>\\r\\n        </form>\\r\\n    </clr-wizard-page>\\r\\n    <!-- end Reverse Transcription page -->\\r\\n\\r\\n    <!-- Inhibition page -->\\r\\n    <clr-wizard-page (clrWizardPageCustomButton)=\\\"doCustomClick($event)\\\">\\r\\n        <ng-template clrPageTitle>Inhibition</ng-template>\\r\\n        <div>\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-10 col-md-10 col-sm-12 col-xs-12\\\">\\r\\n\\r\\n                    <div class=\\\"spinner\\\" *ngIf=\\\"loadingFlag\\\">\\r\\n                        Loading...\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-10 col-md-10 col-sm-12 col-xs-12\\\">\\r\\n                    <clr-alert [clrAlertClosable]=\\\"false\\\" *ngIf=\\\"inhibitionsExist && !loadingFlag\\\">\\r\\n                        <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                            <span class=\\\"alert-text\\\">\\r\\n                                lili has detected existing inhibitions for samples in this Analysis Batch.\\r\\n                            </span>\\r\\n                        </div>\\r\\n                    </clr-alert>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-10 col-md-10 col-sm-12 col-xs-12\\\">\\r\\n                    <div class=\\\"card\\\" *ngIf=\\\"!loadingFlag\\\">\\r\\n                        <div class=\\\"card-block\\\">\\r\\n                            <div class=\\\"card-title\\\">\\r\\n                                Create New Inhibitions\\r\\n                                <clr-signpost>\\r\\n                                    <clr-signpost-content *clrIfOpen>\\r\\n                                        <p>This option allows you to create new inhibitions for all DNA targets in the\\r\\n                                            batch,\\r\\n                                            all RNA targets in the batch, or both.\\r\\n                                        </p>\\r\\n                                    </clr-signpost-content>\\r\\n                                </clr-signpost>\\r\\n                            </div>\\r\\n                            <div class=\\\"card-text\\\">\\r\\n                                <form id=\\\"createInhibitionForm\\\" class=\\\"compact\\\" [formGroup]=\\\"createInhibitionForm\\\"\\r\\n                                    (ngSubmit)=\\\"onSubmit('add', createInhibitionForm.value)\\\">\\r\\n                                    <section class=\\\"form-block\\\">\\r\\n                                        <label>Create new for all samples in this Analysis Batch</label>\\r\\n                                        <div class=\\\"form-group\\\">\\r\\n                                            <label>DNA Inhibitions (DNA targets)</label>\\r\\n                                            <div class=\\\"checkbox\\\">\\r\\n                                                <input type=\\\"checkbox\\\" formControlName=\\\"dna\\\" id=\\\"dnaCheck\\\">\\r\\n                                                <label for=\\\"dnaCheck\\\"></label>\\r\\n                                            </div>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"form-group\\\" *ngIf=\\\"rnaTargetsSelected\\\">\\r\\n                                            <label>RNA Inhibitions (RNA targets)</label>\\r\\n                                            <div class=\\\"checkbox\\\">\\r\\n                                                <input type=\\\"checkbox\\\" formControlName=\\\"rna\\\" id=\\\"rnaCheck\\\">\\r\\n                                                <label for=\\\"rnaCheck\\\"></label>\\r\\n                                            </div>\\r\\n                                        </div>\\r\\n                                        <div *ngIf=\\\"!rnaTargetsSelected\\\">\\r\\n                                            <label>Note: No RNA targets selected.</label>\\r\\n                                        </div>\\r\\n                                    </section>\\r\\n                                    <section class=\\\"form-block\\\">\\r\\n                                        <label>Inhibition date for new inhibitions</label>\\r\\n                                        <div class=\\\"form-group\\\">\\r\\n                                            <label>New DNA Inhibitions Date</label>\\r\\n                                            <input type=\\\"date\\\" id=\\\"inhibitionDateInput\\\"\\r\\n                                                formControlName=\\\"inhibition_date_dna\\\">\\r\\n                                        </div>\\r\\n                                        <div class=\\\"form-group\\\" *ngIf=\\\"rnaTargetsSelected\\\">\\r\\n                                            <label>New RNA Inhibitions Date</label>\\r\\n                                            <input type=\\\"date\\\" id=\\\"inhibitionDateInput\\\"\\r\\n                                                formControlName=\\\"inhibition_date_rna\\\">\\r\\n                                        </div>\\r\\n                                    </section>\\r\\n                                </form>\\r\\n                            </div>\\r\\n\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"card-block\\\" *ngIf=\\\"inhibitionsExist\\\">\\r\\n                            <div\\r\\n                                *ngIf=\\\"createInhibitionForm.value.dna === false || createInhibitionForm.value.rna === false\\\">\\r\\n                                <div class=\\\"card-title\\\">\\r\\n                                    Apply Existing Inhibitions\\r\\n                                    <clr-signpost>\\r\\n                                        <clr-signpost-content *clrIfOpen>\\r\\n                                            <p>Select existing inhibitions to apply to DNA targets and RNA targets for\\r\\n                                                each\\r\\n                                                sample individually.\\r\\n                                                <p>'DF' = Dilution Factor\\r\\n                                        </clr-signpost-content>\\r\\n                                    </clr-signpost>\\r\\n                                </div>\\r\\n                                <div class=\\\"card-text\\\">\\r\\n\\r\\n                                    <form class=\\\"compact\\\" [formGroup]=\\\"extractForm\\\">\\r\\n                                        <section class=\\\"form-block\\\">\\r\\n                                            <div formArrayName=\\\"new_sample_extractions\\\">\\r\\n                                                <div>\\r\\n                                                    <table class=\\\"table table-noborder\\\">\\r\\n                                                        <thead>\\r\\n                                                            <tr>\\r\\n                                                                <th class=\\\"left\\\">Sample</th>\\r\\n                                                                <th class=\\\"left\\\"\\r\\n                                                                    *ngIf=\\\"createInhibitionForm.value.dna === false\\\">\\r\\n                                                                    Inhibition for DNA Targets</th>\\r\\n                                                                <th class=\\\"left\\\"\\r\\n                                                                    *ngIf=\\\"createInhibitionForm.value.rna === false && rnaTargetsSelected\\\">\\r\\n                                                                    Inhibition for RNA Targets</th>\\r\\n                                                            </tr>\\r\\n                                                        </thead>\\r\\n\\r\\n                                                        <tbody>\\r\\n                                                            <tr *ngFor=\\\"let sample of abSampleInhibitions; let i = index\\\"\\r\\n                                                                [formGroupName]=\\\"i\\\">\\r\\n                                                                <td class=\\\"left\\\">\\r\\n                                                                    <label class=\\\"required\\\">Sample {{sample.id}}</label>\\r\\n                                                                </td>\\r\\n                                                                <td *ngIf=\\\"createInhibitionForm.value.dna === false\\\">\\r\\n                                                                    <div class=\\\"select\\\">\\r\\n                                                                        <select name=\\\"dnaInhibition\\\"\\r\\n                                                                            formControlName=\\\"inhibition_dna\\\">\\r\\n                                                                            <option [value]=\\\"'new'\\\">Create New</option>\\r\\n                                                                            <option\\r\\n                                                                                *ngFor=\\\"let inhibition of sample.inhibitions\\\"\\r\\n                                                                                [value]=\\\"inhibition.id\\\"> DF:\\r\\n                                                                                {{inhibition.dilution_factor == null ? \\\"None\\\"\\r\\n                                                                                : inhibition.dilution_factor}}&nbsp;|&nbsp;{{inhibition.nucleic_acid_type\\r\\n                                                                                | displayValue:'name':this.nucleicAcidTypes}}&nbsp;|&nbsp;\\r\\n                                                                                {{inhibition.inhibition_date | date:'shortDate'}}\\r\\n                                                                            </option>\\r\\n                                                                        </select>\\r\\n                                                                    </div>\\r\\n                                                                </td>\\r\\n                                                                <td\\r\\n                                                                    *ngIf=\\\"createInhibitionForm.value.rna === false && rnaTargetsSelected\\\">\\r\\n                                                                    <div class=\\\"select\\\">\\r\\n                                                                        <select name=\\\"rnaInhibition\\\"\\r\\n                                                                            formControlName=\\\"inhibition_rna\\\">\\r\\n                                                                            <option [value]=\\\"'new'\\\">Create New</option>\\r\\n                                                                            <option\\r\\n                                                                                *ngFor=\\\"let inhibition of sample.inhibitions\\\"\\r\\n                                                                                [value]=\\\"inhibition.id\\\"> DF:\\r\\n                                                                                {{inhibition.dilution_factor == null ? \\\"None\\\"\\r\\n                                                                                : inhibition.dilution_factor}}&nbsp;|&nbsp;{{inhibition.nucleic_acid_type\\r\\n                                                                                | displayValue:'name':this.nucleicAcidTypes}}&nbsp;|&nbsp;\\r\\n                                                                                {{inhibition.inhibition_date | date:'shortDate'}}\\r\\n                                                                            </option>\\r\\n                                                                        </select>\\r\\n                                                                    </div>\\r\\n                                                                </td>\\r\\n                                                            </tr>\\r\\n                                                        </tbody>\\r\\n\\r\\n                                                        <!-- <tbody>\\r\\n                                                            <tr *ngFor=\\\"let extraction of extractionArray.controls; let i = index\\\" [formGroupName]=\\\"i\\\">\\r\\n                                                                <td class=\\\"left\\\">\\r\\n                                                                    <label class=\\\"required\\\">Sample {{extraction.controls.sample.value}}</label>\\r\\n                                                                </td>\\r\\n                                                                <td *ngIf=\\\"createInhibitionForm.value.dna === false\\\">\\r\\n                                                                    <div class=\\\"select\\\">\\r\\n                                                                        <select name=\\\"dnaInhibition\\\" formControlName=\\\"inhibition_dna\\\">\\r\\n                                                                            <option [value]=\\\"'new'\\\">Create New</option>\\r\\n                                                                            <option *ngFor=\\\"let inhibition of sampleInhibitions\\\" [value]=\\\"inhibition.id\\\">Inh {{inhibition.id}} ({{inhibition.nucleic_acid_type\\r\\n                                                                                | displayValue:'name':this.nucleicAcidTypes}})\\r\\n                                                                                - Sample {{inhibition.sample}}</option>\\r\\n                                                                        </select>\\r\\n                                                                    </div>\\r\\n                                                                </td>\\r\\n                                                                <td *ngIf=\\\"createInhibitionForm.value.rna === false && rnaTargetsSelected\\\">\\r\\n                                                                    <div class=\\\"select\\\">\\r\\n                                                                        <select name=\\\"rnaInhibition\\\" formControlName=\\\"inhibition_rna\\\">\\r\\n                                                                            <option [value]=\\\"'new'\\\">Create New</option>\\r\\n                                                                            <option *ngFor=\\\"let inhibition of sampleInhibitions\\\" [value]=\\\"inhibition.id\\\">Inh {{inhibition.id}} ({{inhibition.nucleic_acid_type\\r\\n                                                                                | displayValue:'name':this.nucleicAcidTypes}})\\r\\n                                                                                - Sample {{inhibition.sample}}</option>\\r\\n                                                                        </select>\\r\\n                                                                    </div>\\r\\n                                                                </td>\\r\\n                                                            </tr>\\r\\n                                                        </tbody> -->\\r\\n\\r\\n                                                    </table>\\r\\n                                                </div>\\r\\n                                            </div>\\r\\n                                        </section>\\r\\n                                    </form>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div>\\r\\n            <p>\\r\\n                <span>Extract Wizard form status: {{extractForm.status}}.</span>\\r\\n                <span *ngIf=\\\"extractForm.status === 'INVALID'\\\">There are missing or invalid values. </span>\\r\\n        </div>\\r\\n        <div>\\r\\n            <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"inhibitionErrorFlag\\\">\\r\\n                <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                    <span class=\\\"alert-text\\\">{{inhibitionError}}</span>\\r\\n                </div>\\r\\n            </clr-alert>\\r\\n        </div>\\r\\n\\r\\n        <ng-template clrPageButtons>\\r\\n            <clr-wizard-button [type]=\\\"'custom-cancel'\\\">Cancel</clr-wizard-button>\\r\\n            <clr-wizard-button [type]=\\\"'custom-previous'\\\">Back</clr-wizard-button>\\r\\n            <clr-wizard-button [type]=\\\"'custom-next-inhPage'\\\">Next</clr-wizard-button>\\r\\n        </ng-template>\\r\\n    </clr-wizard-page>\\r\\n    <!-- end Inhibition page -->\\r\\n\\r\\n    <!-- Confirmation page -->\\r\\n    <clr-wizard-page (clrWizardPageCustomButton)=\\\"doCustomClick($event)\\\">\\r\\n        <ng-template clrPageTitle>Confirmation</ng-template>\\r\\n\\r\\n        <clr-alert *ngIf=!extractForm.valid [clrAlertType]=\\\"'alert-danger'\\\">\\r\\n            <div class=\\\"alert-item\\\">\\r\\n                There are required values missing. Please return to previous pages and enter all required fields.\\r\\n            </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <div class=\\\"spinner\\\" *ngIf=\\\"loadingFlag\\\">\\r\\n            Loading...\\r\\n        </div>\\r\\n\\r\\n        <clr-alert *ngIf=\\\"extractionErrorFlag\\\" [clrAlertType]=\\\"'alert-danger'\\\">\\r\\n            <div class=\\\"alert-item\\\">\\r\\n                New extraction submission failed. Please try again.\\r\\n            </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <clr-alert *ngIf=\\\"extractionFinished && !extractionErrorFlag\\\" [clrAlertType]=\\\"'alert-success'\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">New extraction successfully created!</span>\\r\\n            </div>\\r\\n        </clr-alert>\\r\\n        <div *ngIf=\\\"extractionFinished && !extractionErrorFlag\\\">\\r\\n            <button class=\\\"btn btn-primary\\\" (click)=\\\"createWorksheet(false, false)\\\">Create Extraction Worksheet</button>\\r\\n        </div>\\r\\n\\r\\n\\r\\n        <div *ngIf=\\\"extractForm.valid && !loadingFlag && !extractionFinished\\\">\\r\\n\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-12 col-md-12 col-sm-12\\\">\\r\\n                    <h4>You are about to extract Analysis Batch\\r\\n                        <b>{{selectedAnalysisBatchID}}</b>. Please confirm the details below.</h4>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-12 col-md-12 col-sm-12\\\">\\r\\n                    <h4>Extraction</h4>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6 col-md-6 col-sm-12\\\">\\r\\n\\r\\n                    <table class=\\\"table table-vertical table-compact\\\">\\r\\n                        <tbody>\\r\\n                            <tr>\\r\\n                                <th>Extraction Volume</th>\\r\\n                                <td>{{extractForm.value.extraction_volume}} µL</td>\\r\\n                            </tr>\\r\\n                            <tr>\\r\\n                                <th>Elution Volume</th>\\r\\n                                <td>{{extractForm.value.elution_volume}} µL</td>\\r\\n                            </tr>\\r\\n                            <tr>\\r\\n                                <th>Extraction Method</th>\\r\\n                                <td>{{extractForm.value.extraction_method | displayValue:'name':this.allExtractionMethods}}\\r\\n                                </td>\\r\\n                            </tr>\\r\\n                            <tr>\\r\\n                                <th>Extraction Date</th>\\r\\n                                <td>{{extractForm.value.extraction_date | date:'shortDate'}}</td>\\r\\n                            </tr>\\r\\n                            <tr>\\r\\n                                <th>Re-Extraction</th>\\r\\n                                <td>{{(extractForm.value.re_extraction) === null ? 'No' : 'Yes'}}</td>\\r\\n                            </tr>\\r\\n                            <tr>\\r\\n                                <th>Sample Dilution Factor</th>\\r\\n                                <td>{{extractForm.value.sample_dilution_factor}}</td>\\r\\n                            </tr>\\r\\n                            <tr>\\r\\n                                <th>qPCR Template Volume</th>\\r\\n                                <td>{{extractForm.value.qpcr_template_volume}} µL</td>\\r\\n                            </tr>\\r\\n                            <tr>\\r\\n                                <th>qPCR Reaction Volume</th>\\r\\n                                <td>{{extractForm.value.qpcr_reaction_volume}} µL</td>\\r\\n                            </tr>\\r\\n                            <tr>\\r\\n                                <th>qPCR Date</th>\\r\\n                                <td>{{extractForm.value.qpcr_date | date:'shortDate'}}</td>\\r\\n                            </tr>\\r\\n                        </tbody>\\r\\n                    </table>\\r\\n\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row\\\" *ngIf=\\\"rnaTargetsSelected\\\">\\r\\n                <div class=\\\"col-lg-12 col-md-12 col-sm-12\\\">\\r\\n                    <h4>Reverse Transcription</h4>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row\\\" *ngIf=\\\"rnaTargetsSelected\\\">\\r\\n                <div class=\\\"col-lg-6 col-md-6 col-sm-12\\\">\\r\\n                    <table class=\\\"table table-vertical table-compact\\\">\\r\\n                        <tbody>\\r\\n                            <tr>\\r\\n                                <th>Template Volume</th>\\r\\n                                <td>{{extractForm.value.new_rt.template_volume}} µL</td>\\r\\n                            </tr>\\r\\n                            <tr>\\r\\n                                <th>Reaction Volume</th>\\r\\n                                <td>{{extractForm.value.new_rt.reaction_volume}} µL</td>\\r\\n                            </tr>\\r\\n                            <tr>\\r\\n                                <th>RT Date</th>\\r\\n                                <td>{{extractForm.value.new_rt.rt_date | date:'shortDate' }}</td>\\r\\n                            </tr>\\r\\n                            <tr>\\r\\n                                <th>Re-RT</th>\\r\\n                                <td>{{ extractForm.value.new_rt.re_rt === null ? 'No' : 'Yes'}}</td>\\r\\n                            </tr>\\r\\n                        </tbody>\\r\\n                    </table>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <label>\\r\\n                <h4>Inhibitions</h4>\\r\\n            </label>\\r\\n            <div *ngIf=\\\"createInhibitionForm.value.dna\\\">Creating new inhibitions for all DNA targets, with inhibition\\r\\n                date {{createInhibitionForm.value.inhibition_date_dna\\r\\n                | date:'shortDate'}}</div>\\r\\n\\r\\n            <div *ngIf=\\\"createInhibitionForm.value.rna\\\">Creating new inhibitions for all RNA targets, with inhibition\\r\\n                date {{createInhibitionForm.value.inhibition_date_rna\\r\\n                | date:'shortDate'}}</div>\\r\\n\\r\\n            <div *ngIf=\\\"!createInhibitionForm.value.dna\\\">Applying existing inhibitions for DNA targets for the following\\r\\n                samples:\\r\\n                <ul>\\r\\n                    <li *ngFor=\\\"let sample of dnaApplyList\\\">{{sample}}</li>\\r\\n                </ul>\\r\\n            </div>\\r\\n\\r\\n            <div *ngIf=\\\"!createInhibitionForm.value.rna\\\">Applying existing inhibitions for RNA targets for the following\\r\\n                samples:\\r\\n                <ul>\\r\\n                    <li *ngFor=\\\"let sample of rnaApplyList\\\">{{sample}}</li>\\r\\n                </ul>\\r\\n            </div>\\r\\n\\r\\n            <div>\\r\\n                <label>\\r\\n                    <h4>Targets</h4>\\r\\n                </label>\\r\\n                <label>This Analysis Batch is being analyzed for the following targets:</label>\\r\\n                <ul>\\r\\n                    <li *ngFor=\\\"let replicate of extractForm.value.new_replicates\\\">{{replicate.count}} replicates\\r\\n                        {{replicate.target | displayValue:'name':this.allTargets}}</li>\\r\\n                </ul>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <ng-template clrPageButtons>\\r\\n            <clr-wizard-button [type]=\\\"'cancel'\\\">Cancel</clr-wizard-button>\\r\\n            <clr-wizard-button [type]=\\\"'previous'\\\">Back</clr-wizard-button>\\r\\n            <clr-wizard-button [type]=\\\"'custom-finish-confirmPage'\\\">\\r\\n                {{ extractionFinished ? \\\"Finish\\\" : \\\"Submit Extraction\\\" }}</clr-wizard-button>\\r\\n        </ng-template>\\r\\n    </clr-wizard-page>\\r\\n    <!-- end Confirmation page -->\\r\\n</clr-wizard>\\r\\n<!-- end Extract Wizard -->\\r\\n\\r\\n<!-- begin print worksheet modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHidePrintModal\\\" [clrModalSize]=\\\"'md'\\\">\\r\\n    <h3 class=\\\"modal-title\\\">Re-print Analysis Batch Worksheet</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-12\\\">\\r\\n\\r\\n                <div *ngIf=\\\"noExtractionsFlag\\\">\\r\\n                    There are no Extractions for this Analysis Batch.\\r\\n                </div>\\r\\n\\r\\n                <div *ngIf=\\\"oneExtractionFlag\\\">\\r\\n                    There is one extraction for this analysis batch.\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedAB\\\"\\r\\n                        (click)=\\\"createWorksheet(true, false)\\\" [clrLoading]=\\\"printSubmitLoading\\\">\\r\\n                        <clr-icon shape=\\\"clipboard\\\"></clr-icon> Create Extraction Worksheet\\r\\n                    </button>\\r\\n                </div>\\r\\n\\r\\n                <div *ngIf=\\\"multipleExtractionsFlag\\\">\\r\\n                    There are multiple Extractions of this Analysis Batch. Please select the extraction data you would\\r\\n                    like to print.\\r\\n                    <form class=\\\"compact\\\" [formGroup]=\\\"extractionBatchSelectForm\\\">\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"required\\\">Selection</label>\\r\\n                            <label for=\\\"extractionBatchSelect\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                class=\\\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\\\"\\r\\n                                [class.invalid]=\\\"extractionBatchSelectForm.get('extraction_batch').invalid && (extractionBatchSelectForm.get('extraction_batch').dirty || extractionBatchSelectForm.get('extraction_batch').touched)\\\">\\r\\n                                <div class=\\\"select\\\">\\r\\n                                    <select id=\\\"extractionBatchSelect\\\" name=\\\"extraction_batch\\\"\\r\\n                                        formControlName=\\\"extraction_batch\\\">\\r\\n                                        <option *ngFor=\\\"let eb of extractionBatchArray\\\" [value]=\\\"eb.id\\\">Extraction\\r\\n                                            {{eb.extraction_number}}</option>\\r\\n                                    </select>\\r\\n                                </div>\\r\\n                                <span class=\\\"tooltip-content\\\">\\r\\n                                    This field cannot be empty!\\r\\n                                </span>\\r\\n                            </label>\\r\\n                        </div>\\r\\n                    </form>\\r\\n                    <div>\\r\\n                        <button class=\\\"btn btn-primary\\\" (click)=\\\"createWorksheet(true, true)\\\"\\r\\n                            [disabled]=\\\"extractionBatchSelectForm.invalid\\\">Create Extraction Worksheet</button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <!--<div class=\\\"modal-footer\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-outline\\\" (click)=\\\"showHideEdit = !showHideEdit\\\">Close</button>\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\"  [disabled]=\\\"editSampleForm.invalid\\\">Save Edits</button>\\r\\n        </div>-->\\r\\n</clr-modal>\\r\\n<!-- end print worksheet modal -->\\r\\n\\r\\n<clr-modal [(clrModalOpen)]=\\\"showWorksheet\\\" [clrModalSize]=\\\"'xl'\\\">\\r\\n    <h3 class=\\\"modal-title\\\">Worksheet Preview</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <analysis-batch-worksheet #batchWorksheet></analysis-batch-worksheet>\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline\\\" (click)=\\\"showWorksheet = !showWorksheet\\\">Close</button>\\r\\n    </div>\\r\\n</clr-modal>\\r\\n\\r\\n<!-- begin edit analysis batch modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideEdit\\\" [clrModalSize]=\\\"'xl'\\\">\\r\\n    <h3 class=\\\"modal-title\\\">Edit Analysis Batch {{editABForm.value.id}}</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-12\\\">\\r\\n                <clr-tabs>\\r\\n                    <clr-tab>\\r\\n                        <button clrTabLink>Details</button>\\r\\n                        <ng-template [(clrIfActive)]=\\\"detailsActive\\\">\\r\\n                            <clr-tab-content>\\r\\n                                <form id=\\\"editABForm\\\" class=\\\"compact\\\" [formGroup]=\\\"editABForm\\\"\\r\\n                                    (ngSubmit)=\\\"onSubmit('editAB', editABForm.value)\\\">\\r\\n                                    <section class=\\\"form-block\\\">\\r\\n                                        <div class=\\\"form-group\\\">\\r\\n                                            <label for=\\\"studyId\\\">Analysis Batch ID</label>\\r\\n                                            <input type=\\\"text\\\" size=\\\"35\\\" formControlName=\\\"id\\\" readonly>\\r\\n                                        </div>\\r\\n\\r\\n                                        <div class=\\\"form-group\\\">\\r\\n                                            <label for=\\\"abDescInput\\\">Analysis Batch Name</label>\\r\\n                                            <input type=\\\"text\\\" formControlName=\\\"name\\\">\\r\\n                                        </div>\\r\\n\\r\\n                                        <div class=\\\"form-group\\\">\\r\\n                                            <label for=\\\"abDescInput\\\">Analysis Batch Description</label>\\r\\n                                            <textarea id=\\\"abDescInput\\\" rows=\\\"2\\\"\\r\\n                                                formControlName=\\\"analysis_batch_description\\\"\\r\\n                                                style=\\\"max-width:25em\\\"></textarea>\\r\\n                                        </div>\\r\\n\\r\\n                                        <div class=\\\"form-group\\\">\\r\\n                                            <label for=\\\"abNotesInput\\\">Analysis Batch Notes</label>\\r\\n                                            <textarea id=\\\"abNotesInput\\\" rows=\\\"2\\\" formControlName=\\\"analysis_batch_notes\\\"\\r\\n                                                style=\\\"max-width:25em\\\"></textarea>\\r\\n                                        </div>\\r\\n\\r\\n                                        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showABEditError\\\">\\r\\n                                            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                                <span class=\\\"alert-text\\\">Submission error. Analysis Batch not\\r\\n                                                    updated. Error: {{errorMessage}}</span>\\r\\n                                                <div class=\\\"alert-actions\\\">\\r\\n                                                    <a class=\\\"alert-action\\\"\\r\\n                                                        (click)=\\\"onSubmitSample('add', editABForm.value)\\\">Try\\r\\n                                                        again</a>\\r\\n                                                </div>\\r\\n                                            </div>\\r\\n                                        </clr-alert>\\r\\n\\r\\n                                        <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showABEditSuccess\\\">\\r\\n                                            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                                <span class=\\\"alert-text\\\">Analysis Batch successfully updated</span>\\r\\n                                                <div class=\\\"alert-actions\\\">\\r\\n                                                    <a class=\\\"alert-action\\\"\\r\\n                                                        (click)=\\\"showHideEdit = false; showABEditSuccess = false\\\">Close</a>\\r\\n                                                </div>\\r\\n                                            </div>\\r\\n                                        </clr-alert>\\r\\n\\r\\n                                        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"editABForm.invalid\\\"\\r\\n                                            [clrLoading]=\\\"submitLoading\\\">Save Edits</button>\\r\\n                                        <button class=\\\"btn btn-info\\\"\\r\\n                                            (click)=\\\"showHideEdit = !showHideEdit\\\">Close</button>\\r\\n\\r\\n                                    </section>\\r\\n                                </form>\\r\\n\\r\\n                            </clr-tab-content>\\r\\n                        </ng-template>\\r\\n                    </clr-tab>\\r\\n\\r\\n                    <clr-tab>\\r\\n                        <button clrTabLink>Sample List</button>\\r\\n                        <ng-template [(clrIfActive)]=\\\"sampleListActive\\\">\\r\\n                            <clr-tab-content>\\r\\n                                <div class=\\\"row\\\">\\r\\n                                    <div class=\\\"col-lg-4\\\" *ngIf=\\\"abSampleListPopulated\\\">\\r\\n                                        <!-- form tags used here strictly for formatting convenience. no actual form contained within. -->\\r\\n                                        <form>\\r\\n                                            <section class=\\\"form-block\\\">\\r\\n                                                <label>Samples in this Analysis Batch\\r\\n                                                    <span class=\\\"badge badge-light-blue\\\">{{abSampleList.length}}</span>\\r\\n                                                </label>\\r\\n                                                <ul class=\\\"list\\\">\\r\\n                                                    <li *ngFor=\\\"let sample of abSampleList\\\">{{sample.id}}\\r\\n                                                        ({{sample.study_string}})\\r\\n                                                        <!-- <button class=\\\"btn btn-sm\\\" (click)=\\\"removeSample(sample)\\\">\\r\\n                                                            <clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon>\\r\\n                                                        </button> -->\\r\\n\\r\\n                                                        <button type=\\\"button\\\" class=\\\"btn btn-icon btn-danger\\\"\\r\\n                                                            (click)=\\\"removeSample(sample)\\\">\\r\\n                                                            <clr-icon shape=\\\"times-circle\\\"></clr-icon>\\r\\n                                                        </button>\\r\\n                                                    </li>\\r\\n                                                </ul>\\r\\n                                            </section>\\r\\n                                        </form>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"col-lg-8\\\">\\r\\n\\r\\n                                        <clr-alert [clrAlertClosable]=\\\"false\\\" *ngIf=\\\"sampleListEditLocked\\\">\\r\\n                                            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                                <span class=\\\"alert-text\\\">\\r\\n                                                    This Analysis Batch has been extracted. Editing of the sample list\\r\\n                                                    is locked.\\r\\n                                                </span>\\r\\n\\r\\n                                            </div>\\r\\n                                        </clr-alert>\\r\\n\\r\\n                                        <!-- <div class=\\\"row\\\">\\r\\n                                            <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\"> -->\\r\\n                                        <!-- <span *ngIf=\\\"samplesLoading\\\" class=\\\"text-italic text-small\\\">Samples\\r\\n                                            loading.</span> <br> -->\\r\\n                                        <!-- </div>\\r\\n                                        </div> -->\\r\\n\\r\\n                                        <form *ngIf=\\\"!sampleListEditLocked\\\">\\r\\n                                            <section class=\\\"form-block\\\">\\r\\n\\r\\n                                                <label>Samples\\r\\n                                                    <a href=\\\"\\\" role=\\\"tooltip\\\" aria-haspopup=\\\"true\\\"\\r\\n                                                        class=\\\"tooltip tooltip-lg\\\">\\r\\n                                                        <clr-icon shape=\\\"info-circle\\\" size=\\\"24\\\"></clr-icon>\\r\\n                                                        <span class=\\\"tooltip-content\\\">Check/uncheck to add/remove Sample\\r\\n                                                            from Analysis Batch</span>\\r\\n                                                        <span *ngIf=\\\"samplesLoading\\\"\\r\\n                                                            class=\\\"text-italic text-small\\\">Samples loading.</span> <br>\\r\\n                                                    </a>\\r\\n                                                </label>\\r\\n                                                <br>\\r\\n\\r\\n                                                <!-- Begin Sample query form -->\\r\\n                                                <div class=\\\"card-text\\\">\\r\\n                                                    <form class=\\\"form compact\\\" [formGroup]=\\\"sampleQueryForm\\\"\\r\\n                                                        (ngSubmit)=\\\"onSubmitSampleQuery(sampleQueryForm.value)\\\">\\r\\n                                                        <section class=\\\"form-block\\\">\\r\\n\\r\\n                                                            <div class=\\\"form-group\\\">\\r\\n                                                                <label>Study</label>\\r\\n                                                                <label for=\\\"studySelect\\\" aria-haspopup=\\\"true\\\"\\r\\n                                                                    role=\\\"tooltip\\\"\\r\\n                                                                    class=\\\"tooltip tooltip-validation tooltip-sm\\\">\\r\\n                                                                    <div class=\\\"select\\\">\\r\\n                                                                        <select id=\\\"studySelect\\\" name=\\\"study\\\"\\r\\n                                                                            formControlName=\\\"study\\\">\\r\\n                                                                            <option value=\\\"\\\">\\r\\n                                                                                <span class=\\\"all\\\">ALL STUDIES</span>\\r\\n                                                                            </option>\\r\\n                                                                            <option *ngFor=\\\"let study of studies\\\"\\r\\n                                                                                [value]=\\\"study.id\\\">{{study.name}}\\r\\n                                                                            </option>\\r\\n                                                                        </select>\\r\\n                                                                    </div>\\r\\n                                                                </label>\\r\\n                                                            </div>\\r\\n\\r\\n                                                            <div class=\\\"form-group\\\">\\r\\n                                                                <label>Sample ID Range</label>\\r\\n                                                                <span>From</span>\\r\\n                                                                <input type=\\\"number\\\" formControlName=\\\"from_id\\\">\\r\\n                                                                <span>To</span>\\r\\n                                                                <input type=\\\"number\\\" formControlName=\\\"to_id\\\">\\r\\n                                                            </div>\\r\\n\\r\\n                                                            <div class=\\\"form-group\\\">\\r\\n                                                                <label>Collection Start Date Range</label>\\r\\n                                                                <span>From</span>\\r\\n                                                                <input type=\\\"date\\\"\\r\\n                                                                    formControlName=\\\"from_collection_start_date\\\">\\r\\n                                                                <span>To</span>\\r\\n                                                                <input type=\\\"date\\\"\\r\\n                                                                    formControlName=\\\"to_collection_start_date\\\">\\r\\n                                                            </div>\\r\\n\\r\\n                                                            <div class=\\\"form-group\\\">\\r\\n                                                                <label>Collaborator Sample ID</label>\\r\\n                                                                <input id=\\\"collabSampleIdInput\\\" type=\\\"text\\\"\\r\\n                                                                    formControlName=\\\"collaborator_sample_id\\\">\\r\\n                                                            </div>\\r\\n\\r\\n                                                            <div class=\\\"form-group\\\">\\r\\n                                                                <label>Matrix</label>\\r\\n                                                                <div class=\\\"select\\\">\\r\\n                                                                    <select id=\\\"matrixSelect\\\" name=\\\"matrix\\\"\\r\\n                                                                        formControlName=\\\"matrix\\\">\\r\\n                                                                        <option value=\\\"\\\">\\r\\n                                                                            <span class=\\\"all\\\">ALL MATRICES</span>\\r\\n                                                                        </option>\\r\\n                                                                        <option *ngFor=\\\"let matrix of matrices\\\"\\r\\n                                                                            [value]=\\\"matrix.id\\\">{{matrix.name}}</option>\\r\\n                                                                    </select>\\r\\n                                                                </div>\\r\\n                                                            </div>\\r\\n\\r\\n                                                            <div class=\\\"form-group\\\">\\r\\n                                                                <label>Sample type</label>\\r\\n                                                                <div class=\\\"select\\\">\\r\\n                                                                    <select id=\\\"sampleTypeSelect\\\" name=\\\"sample_type\\\"\\r\\n                                                                        formControlName=\\\"sample_type\\\">\\r\\n                                                                        <option value=\\\"\\\">\\r\\n                                                                            <span class=\\\"all\\\">ALL SAMPLE TYPES</span>\\r\\n                                                                        </option>\\r\\n                                                                        <option *ngFor=\\\"let sampleType of sampleTypes\\\"\\r\\n                                                                            [value]=\\\"sampleType.id\\\">{{sampleType.name}}\\r\\n                                                                        </option>\\r\\n                                                                    </select>\\r\\n                                                                </div>\\r\\n                                                            </div>\\r\\n\\r\\n                                                            <div class=\\\"form-group\\\">\\r\\n                                                                <label>Peg Neg (returns associated samples)</label>\\r\\n                                                                <input type=\\\"number\\\" formControlName=\\\"peg_neg\\\">\\r\\n                                                            </div>\\r\\n\\r\\n                                                        </section>\\r\\n\\r\\n                                                        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\"\\r\\n                                                            *ngIf=\\\"sampleQuerySizeErrorFlag\\\">\\r\\n                                                            <div class=\\\"alert-item\\\">\\r\\n                                                                <span class=\\\"alert-text\\\">Your query results are too\\r\\n                                                                    large (greater than {{queryCountLimit}}). Please\\r\\n                                                                    narrow\\r\\n                                                                    your search.</span>\\r\\n                                                            </div>\\r\\n                                                        </clr-alert>\\r\\n\\r\\n                                                        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\"\\r\\n                                                            [clrLoading]=\\\"submitLoading\\\">Filter Samples</button>\\r\\n                                                    </form>\\r\\n                                                </div>\\r\\n                                                <!-- End Sample query form -->\\r\\n\\r\\n                                                <span>Remove samples from AB or add new from list below. </span>\\r\\n\\r\\n                                                <clr-datagrid class=\\\"target-select-datagrid\\\"\\r\\n                                                    [(clrDgSelected)]=\\\"samplesSelected\\\">\\r\\n\\r\\n                                                    <clr-dg-action-bar>\\r\\n                                                        <div class=\\\"btn-group\\\">\\r\\n                                                            <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                                (click)=\\\"deselectAll()\\\">\\r\\n                                                                <clr-icon shape=\\\"window-close\\\" size=\\\"16\\\"></clr-icon>\\r\\n                                                                Deselect All\\r\\n                                                            </button>\\r\\n                                                        </div>\\r\\n                                                    </clr-dg-action-bar>\\r\\n\\r\\n                                                    <!-- filter column header for Sample ID -->\\r\\n                                                    <clr-dg-column [clrDgField]=\\\"'id'\\\">\\r\\n                                                        Sample ID\\r\\n                                                        <clr-dg-filter [clrDgFilter]=\\\"rangeFilter\\\">\\r\\n\\r\\n                                                            <range-filter #rangeFilter></range-filter>\\r\\n                                                        </clr-dg-filter>\\r\\n                                                    </clr-dg-column>\\r\\n\\r\\n                                                    <clr-dg-column [clrDgField]=\\\"'collaborator_sample_id'\\\">\\r\\n                                                        <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                            Collaborator Sample ID\\r\\n                                                        </ng-container>\\r\\n                                                    </clr-dg-column>\\r\\n\\r\\n                                                    <!-- filter column header for study -->\\r\\n                                                    <clr-dg-column [clrDgField]=\\\"'study'\\\">\\r\\n                                                        Study\\r\\n                                                        <clr-dg-filter [clrDgFilter]=\\\"studyFilter\\\">\\r\\n                                                            <study-filter #studyFilter></study-filter>\\r\\n                                                        </clr-dg-filter>\\r\\n                                                    </clr-dg-column>\\r\\n\\r\\n                                                    <!-- filter column header for sample type -->\\r\\n                                                    <clr-dg-column [clrDgField]=\\\"'sample_type'\\\">\\r\\n                                                        Sample Type\\r\\n                                                        <clr-dg-filter [clrDgFilter]=\\\"sampleTypeFilter\\\">\\r\\n                                                            <sample-type-filter #sampleTypeFilter></sample-type-filter>\\r\\n                                                        </clr-dg-filter>\\r\\n                                                    </clr-dg-column>\\r\\n\\r\\n                                                    <!-- filter column header for collection start date -->\\r\\n                                                    <clr-dg-column [clrDgField]=\\\"'collection_start_date'\\\">\\r\\n                                                        Collect Start Date\\r\\n                                                        <clr-dg-filter [clrDgFilter]=\\\"CollectionStartDateFilter\\\">\\r\\n                                                            <collection-start-date-filter\\r\\n                                                                [dateField]=\\\"'collection_start_date'\\\"\\r\\n                                                                #CollectionStartDateFilter>\\r\\n                                                            </collection-start-date-filter>\\r\\n                                                        </clr-dg-filter>\\r\\n                                                    </clr-dg-column>\\r\\n\\r\\n                                                    <clr-dg-row *clrDgItems=\\\"let sample of filteredSamples\\\"\\r\\n                                                        [clrDgItem]=\\\"sample\\\">\\r\\n                                                        <clr-dg-cell>{{sample.id}}</clr-dg-cell>\\r\\n                                                        <clr-dg-cell>{{sample.collaborator_sample_id}}</clr-dg-cell>\\r\\n                                                        <clr-dg-cell>{{sample.study_string}}</clr-dg-cell>\\r\\n                                                        <clr-dg-cell>{{sample.sample_type_string}}</clr-dg-cell>\\r\\n                                                        <clr-dg-cell>{{sample.collection_start_date | date:'shortDate'}}\\r\\n                                                        </clr-dg-cell>\\r\\n                                                    </clr-dg-row>\\r\\n\\r\\n                                                    <clr-dg-footer>{{filteredSamples.length}} samples\\r\\n                                                        {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of\\r\\n                                                        {{pagination.totalItems}} samples\\r\\n                                                        <clr-dg-pagination #pagination [clrDgPageSize]=\\\"10\\\">\\r\\n                                                        </clr-dg-pagination>\\r\\n                                                    </clr-dg-footer>\\r\\n                                                </clr-datagrid>\\r\\n                                            </section>\\r\\n                                        </form>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                                <div class=\\\"row\\\">\\r\\n                                    <div class=\\\"col-lg-6\\\">\\r\\n                                        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showABEditError\\\">\\r\\n                                            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                                <span class=\\\"alert-text\\\">Submission error. Analysis Batch not\\r\\n                                                    updated. Error: {{errorMessage}}</span>\\r\\n                                                <div class=\\\"alert-actions\\\">\\r\\n                                                    <a class=\\\"alert-action\\\"\\r\\n                                                        (click)=\\\"updateABSampleList(editABForm.value,samplesSelected)\\\">Try\\r\\n                                                        again</a>\\r\\n                                                </div>\\r\\n                                            </div>\\r\\n                                        </clr-alert>\\r\\n\\r\\n                                        <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showABEditSuccess\\\">\\r\\n                                            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                                <span class=\\\"alert-text\\\">Analysis Batch successfully updated</span>\\r\\n                                                <div class=\\\"alert-actions\\\">\\r\\n                                                    <a class=\\\"alert-action\\\"\\r\\n                                                        (click)=\\\"showHideEdit = false; showABEditSuccess = false\\\">Close</a>\\r\\n                                                </div>\\r\\n                                            </div>\\r\\n                                        </clr-alert>\\r\\n\\r\\n                                        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\"\\r\\n                                            [disabled]=\\\"editABForm.invalid || sampleListEditLocked\\\"\\r\\n                                            (click)=\\\"updateABSampleList(editABForm.value,samplesSelected)\\\"\\r\\n                                            [clrLoading]=\\\"submitLoading\\\">Save Edits</button>\\r\\n                                        <button class=\\\"btn btn-info\\\"\\r\\n                                            (click)=\\\"showHideEdit = !showHideEdit\\\">Close</button>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </clr-tab-content>\\r\\n                        </ng-template>\\r\\n                    </clr-tab>\\r\\n\\r\\n                </clr-tabs>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</clr-modal>\\r\\n<!-- end edit analysis batch modal -->\\r\\n\\r\\n<!-- begin batch submit ext pos modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"batchExtPosModalActive\\\" [clrModalSize]=\\\"'lg'\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n        <clr-icon shape=\\\"view-list\\\"></clr-icon>&nbsp;Batch Submit Extraction Positive Controls\\r\\n        <br>\\r\\n        <span *ngIf=\\\"selectedAB\\\">Analysis Batch {{selectedAB.id}}</span>\\r\\n    </h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-12\\\">\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-lg-12\\\">\\r\\n                        <form class=\\\"compact\\\" [formGroup]=\\\"batchExtPosForm\\\"\\r\\n                            (ngSubmit)=\\\"onSubmitBatchExtPos(batchExtPosForm.value)\\\">\\r\\n                            <section class=\\\"form-block\\\">\\r\\n\\r\\n                                <div formArrayName=\\\"extraction_batches\\\">\\r\\n\\r\\n                                    <div class=\\\"row\\\">\\r\\n                                        <div class=\\\"col-lg-2 col-md-2 col-sm-12 col-xs-12\\\">\\r\\n                                        </div>\\r\\n                                        <div class=\\\"col-lg-3 col-md-3 col-sm-12 col-xs-12\\\">\\r\\n                                            <label class=\\\"text-bold required\\\">Ext Pos DNA</label>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"col-lg-3 col-md-3 col-sm-12 col-xs-12\\\">\\r\\n                                            <label class=\\\"text-bold required\\\">Ext/RT Pos RNA</label>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"col-lg-4 col-md-4 col-sm-12 col-xs-12\\\">\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n\\r\\n                                    <div class=\\\"form-group row\\\" *ngFor=\\\"let EB of EB_array.controls, let i = index\\\"\\r\\n                                        [formGroupName]=\\\"i\\\">\\r\\n                                        <div class=\\\"col-lg-2 col-md-2 col-sm-12 col-xs-12\\\">\\r\\n                                            <label>Extraction {{EB.controls.number.value}}</label>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"col-lg-3 col-md-3 col-sm-12 col-xs-12\\\">\\r\\n                                            <input class=\\\"form-control\\\" type=\\\"number\\\" placeholder=\\\"Ext Pos DNA\\\"\\r\\n                                                size=\\\"10\\\" class=\\\"fcsv-input\\\" formControlName=\\\"ext_pos_dna_cq_value\\\">\\r\\n                                        </div>\\r\\n                                        <div class=\\\"col-lg-3 col-md-3 col-sm-12 col-xs-12\\\">\\r\\n                                            <input class=\\\"form-control\\\" type=\\\"number\\\" placeholder=\\\"Ext/RT Pos RNA\\\"\\r\\n                                                size=\\\"35\\\" formControlName=\\\"ext_pos_rna_rt_cq_value\\\">\\r\\n                                        </div>\\r\\n                                        <div class=\\\"col-lg-4 col-md-4 col-sm-12 col-xs-12\\\">\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n\\r\\n                                <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showBatchExtPosError\\\">\\r\\n                                    <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                        <span class=\\\"alert-text\\\">Submission error. Ext Pos values not submitted.</span>\\r\\n                                        <div class=\\\"alert-actions\\\">\\r\\n                                            <a class=\\\"alert-action\\\"\\r\\n                                                (click)=\\\"onSubmitBatchExtPos(batchExtPosForm.value)\\\">Try again</a>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </clr-alert>\\r\\n\\r\\n                                <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showBatchExtPosSuccess\\\">\\r\\n                                    <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                        <span class=\\\"alert-text\\\">Ext Pos values successfully submitted.</span>\\r\\n                                        <div class=\\\"alert-actions\\\">\\r\\n                                            <a class=\\\"alert-action\\\"\\r\\n                                                (click)=\\\"batchExtPosModalActive = false; showBatchExtPosSuccess = false; resetFlags();\\\">Close</a>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </clr-alert>\\r\\n\\r\\n                                <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"batchExtPosForm.invalid\\\"\\r\\n                                    [clrLoading]=\\\"submitLoading\\\">Submit</button>\\r\\n                                <button class=\\\"btn btn-info\\\"\\r\\n                                    (click)=\\\"batchExtPosModalActive = !batchExtPosModalActive; resetFlags();\\\">Close</button>\\r\\n\\r\\n                            </section>\\r\\n\\r\\n                        </form>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</clr-modal>\\r\\n<!-- end batch submit ext pos modal -->\\r\\n\\r\\n<!-- begin target detail modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideTargetDetailModal\\\" [clrModalSize]=\\\"'sm'\\\">\\r\\n    <h3 class=\\\"modal-title\\\">Targets analyzed in Analysis Batch {{focusAnalysisBatchID}}</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-12\\\">\\r\\n\\r\\n                <table class=\\\"table table-compact\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Target</th>\\r\\n                            <th>Nucleic Acid Type</th>\\r\\n                            <th>Replicates</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr *ngFor=\\\"let target of targetDetailArray\\\">\\r\\n                            <td>{{target.code}}</td>\\r\\n                            <td>{{target.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes}}</td>\\r\\n                            <td>{{target.replicates}}</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</clr-modal>\\r\\n<!-- end target detail modal -->\\r\\n\\r\\n<!-- begin no targets error modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideNoTargetErrorModal\\\" [clrModalSize]=\\\"'md'\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n        <clr-icon shape=\\\"warning-standard\\\" class=\\\"is-error\\\" size=\\\"36\\\"></clr-icon> No targets error\\r\\n    </h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-12\\\">\\r\\n                <p>This Analysis Batch has not been extracted, so no targets have been selected.\\r\\n\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline\\\" (click)=\\\"showHideNoTargetErrorModal = false\\\">Return</button>\\r\\n    </div>\\r\\n</clr-modal>\\r\\n<!-- end no target error modal -->\\r\\n\\r\\n\\r\\n<div class=\\\"card-text\\\">\\r\\n    <!-- begin sample query form -->\\r\\n    <form class=\\\"form compact\\\" [formGroup]=\\\"abQueryForm\\\" (ngSubmit)=\\\"onSubmitABQuery(abQueryForm.value)\\\">\\r\\n        <section class=\\\"form-block\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Study</label>\\r\\n                <div class=\\\"select\\\">\\r\\n                    <select id=\\\"studySelect\\\" name=\\\"study\\\" formControlName=\\\"study\\\">\\r\\n                        <option value=\\\"\\\">\\r\\n                            <span class=\\\"all\\\">ALL STUDIES</span>\\r\\n                        </option>\\r\\n                        <option *ngFor=\\\"let study of studies\\\" [value]=\\\"study.id\\\">{{study.name}}</option>\\r\\n                    </select>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Analysis Batch ID Range</label>\\r\\n                <span>From</span>\\r\\n                <input type=\\\"number\\\" formControlName=\\\"from_id\\\">\\r\\n                <span>To</span>\\r\\n                <input type=\\\"number\\\" formControlName=\\\"to_id\\\">\\r\\n            </div>\\r\\n\\r\\n        </section>\\r\\n\\r\\n        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"abQuerySizeErrorFlag\\\">\\r\\n            <div class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">Your query results are too large (greater than {{queryCountLimit}}). Please\\r\\n                    narrow your search.</span>\\r\\n            </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [clrLoading]=\\\"submitLoading\\\">\\r\\n            <clr-icon shape=\\\"filter\\\"></clr-icon> Filter Analysis Batches\\r\\n        </button>\\r\\n    </form>\\r\\n</div>\\r\\n\\r\\n<div *ngIf=\\\"abQueryComplete\\\">\\r\\n    <h4>Query returned {{abCount}} Analysis Batch records</h4>\\r\\n</div>\\r\\n\\r\\n<!-- begin Analysis batches table -->\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n        <clr-datagrid [(clrDgSingleSelected)]=\\\"selectedAB\\\" [clrDgLoading]=\\\"analysisBatchesLoading\\\">\\r\\n\\r\\n            <clr-dg-action-bar>\\r\\n                <div class=\\\"btn-group\\\">\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedAB\\\"\\r\\n                        (click)=\\\"extractAB(selectedAB)\\\" [clrLoading]=\\\"submitLoading\\\">\\r\\n                        <clr-icon shape=\\\"upload\\\"></clr-icon>&nbsp;Extract\\r\\n                    </button>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedAB\\\"\\r\\n                        (click)=\\\"editAB(selectedAB)\\\" [clrLoading]=\\\"editABLoading\\\">\\r\\n                        <clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon>&nbsp;Edit Analysis Batch\\r\\n                    </button>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedAB\\\"\\r\\n                        (click)=\\\"reprintWorksheet(selectedAB)\\\" [clrLoading]=\\\"printSubmitLoading\\\">\\r\\n                        <clr-icon shape=\\\"clipboard\\\"></clr-icon>&nbsp;Re-Print Worksheet\\r\\n                    </button>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedAB\\\"\\r\\n                        (click)=\\\"openBatchExtPos(selectedAB)\\\" [clrLoading]=\\\"batchExtPosLoading\\\">\\r\\n                        <clr-icon shape=\\\"view-list\\\"></clr-icon>&nbsp;Batch Submit Ext Pos Controls\\r\\n                    </button>\\r\\n                </div>\\r\\n            </clr-dg-action-bar>\\r\\n\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'id'\\\">\\r\\n                Analysis Batch ID\\r\\n                <clr-dg-filter [clrDgFilter]=\\\"rangeFilter\\\">\\r\\n                    <range-filter #rangeFilter></range-filter>\\r\\n                </clr-dg-filter>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'studies'\\\">\\r\\n                Studies\\r\\n                <clr-dg-filter [clrDgFilter]=\\\"multiStudyFilterComponent\\\">\\r\\n                    <multi-study-filter #multiStudyFilterComponent></multi-study-filter>\\r\\n                </clr-dg-filter>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'analysis_batch_description'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Analysis Batch Description\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column>\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Extraction Count\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column>\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Inhibition Count\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column>\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    RT Count\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column>\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Target Count\\r\\n                    <span class=\\\"spinner spinner-inline\\\" *ngIf=\\\"targetDetailLoading\\\"></span>\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column>\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Analysis Batch Notes\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'created_by'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Added by\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <!-- filter column header for date added -->\\r\\n            <clr-dg-column [clrDgField]=\\\"'created_date'\\\">\\r\\n                Date Added\\r\\n                <clr-dg-filter [clrDgFilter]=\\\"dateAddedFilter\\\">\\r\\n                    <date-added-filter [dateField]=\\\"'created_date'\\\" #dateAddedFilter></date-added-filter>\\r\\n                </clr-dg-filter>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'modified_by'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: true}\\\">\\r\\n                    Updated by\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <!-- filter column header for date updated -->\\r\\n            <clr-dg-column [clrDgField]=\\\"'modified_date'\\\">\\r\\n                Date Updated\\r\\n                <clr-dg-filter [clrDgFilter]=\\\"dateUpdatedFilter\\\">\\r\\n                    <date-updated-filter [dateField]=\\\"'modified_date'\\\" #dateUpdatedFilter></date-updated-filter>\\r\\n                </clr-dg-filter>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <!-- begin data table rows -->\\r\\n\\r\\n            <clr-dg-placeholder>No Analysis Batches</clr-dg-placeholder>\\r\\n\\r\\n            <clr-dg-row *clrDgItems=\\\"let ab of allAnalysisBatchSummaries\\\" [clrDgItem]=\\\"ab\\\">\\r\\n\\r\\n                <clr-dg-cell>{{ab.id}}</clr-dg-cell>\\r\\n                <clr-dg-cell>\\r\\n                    <span *ngFor=\\\"let study of ab.studies\\\">&#8226;&nbsp;{{study.name}}\\r\\n                        <br>\\r\\n                    </span>\\r\\n                </clr-dg-cell>\\r\\n                <clr-dg-cell>{{ab.analysis_batch_description}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{ab.summary.extraction_batch_count}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{ab.summary.inhibition_count}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{ab.summary.reverse_transcription_count}}</clr-dg-cell>\\r\\n                <clr-dg-cell>\\r\\n                    <a class=\\\"label label-blue clickable\\\"\\r\\n                        (click)=\\\"openTargetDetails(ab.id)\\\">{{ab.summary.target_count}}</a>\\r\\n                </clr-dg-cell>\\r\\n                <clr-dg-cell>{{ab.analysis_batch_notes}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{ab.created_by}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{ab.created_date | date:'shortDate'}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{ab.modified_by }}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{ab.modified_date | date:'shortDate'}}</clr-dg-cell>\\r\\n\\r\\n                <analysis-batch-detail *clrIfExpanded [selectedABSummary]=\\\"ab\\\" ngProjectAs=\\\"clr-dg-row-detail\\\">\\r\\n                </analysis-batch-detail>\\r\\n\\r\\n            </clr-dg-row>\\r\\n\\r\\n            <clr-dg-footer>\\r\\n                {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{pagination.totalItems}} Analysis Batches\\r\\n                <clr-dg-pagination #pagination [clrDgPageSize]=\\\"20\\\"></clr-dg-pagination>\\r\\n            </clr-dg-footer>\\r\\n        </clr-datagrid>\\r\\n    </div>\\r\\n</div>\\r\\n<!-- end samples table -->\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/analysis-batches/analysis-batches.component.html\n// module id = ./src/app/analysis-batches/analysis-batches.component.html\n// module chunks = main","module.exports = \".modal .stack-view {\\n  display: inline-block !important;\\n  height: 100% !important;\\n  margin-bottom: 0 !important; }\\n\\n.clr-modal .clr-stack-view {\\n  display: inline-block !important;\\n  height: 100% !important;\\n  margin-bottom: 0 !important; }\\n\\n.target-count-input {\\n  width: 5em; }\\n\\n.study-list-select {\\n  height: 24em !important; }\\n\\nselect[multiple], select[size] {\\n  height: 22em !important; }\\n\\n.remove-sample {\\n  margin: 1em; }\\n\\n.datagrid .datagrid-column, .datagrid .datagrid-cell .no-padding {\\n  padding: 0px; }\\n\\nlabel.required:after {\\n  content: \\\"*\\\";\\n  font-size: 1.1em;\\n  color: #c92100;\\n  margin-left: 6px; }\\n\\n.text-italic {\\n  font-style: italic; }\\n\\n.text-small {\\n  font-size: small; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/analysis-batches/analysis-batches.component.scss\n// module id = ./src/app/analysis-batches/analysis-batches.component.scss\n// module chunks = main","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, FormArray, Validators, PatternValidator } from \"@angular/forms/\";\r\nimport { Wizard, WizardPage, BUTTON_GROUP_DIRECTIVES } from \"clarity-angular\";\r\n\r\nimport { IAnalysisBatchSummary } from './analysis-batch-summary';\r\nimport { IAnalysisBatch } from './analysis-batch';\r\nimport { IAnalysisBatchDetail } from './analysis-batch-detail';\r\n\r\nimport { IStudy } from '../studies/study';\r\nimport { ISample } from '../samples/sample';\r\nimport { ISampleExtraction } from '../sample-extractions/sample-extraction';\r\nimport { IExtractionBatch } from '../extraction-batches/extraction-batch';\r\nimport { IInhibition } from '../inhibitions/inhibition';\r\nimport { IReverseTranscription } from '../reverse-transcriptions/reverse-transcription';\r\nimport { ITarget } from '../targets/target';\r\nimport { IExtractionMethod } from '../extraction-batches/extraction-method';\r\nimport { IUnit } from '../units/unit';\r\nimport { IAliquot } from '../aliquots/aliquot';\r\nimport { IFreezerLocation } from '../aliquots/freezer-location';\r\nimport { IExtractionBatchSubmission } from '../extraction-batches/extraction-batch-submission';\r\nimport { IABWorksheet } from '../analysis-batches/analysis-batch-worksheet/ab-worksheet';\r\n\r\nimport { StudyService } from '../studies/study.service';\r\nimport { SampleService } from '../samples/sample.service';\r\nimport { AnalysisBatchService } from './analysis-batch.service';\r\nimport { TargetService } from '../targets/target.service';\r\nimport { InhibitionService } from '../inhibitions/inhibition.service';\r\nimport { ExtractionMethodService } from '../extraction-batches/extraction-method.service';\r\nimport { ExtractionBatchService } from '../extraction-batches/extraction-batch.service';\r\nimport { UnitService } from '../units/unit.service';\r\nimport { APP_UTILITIES } from '../app.utilities';\r\nimport { AnalysisBatchWorksheetComponent } from '../analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component';\r\nimport { APP_SETTINGS } from '../app.settings';\r\nimport { RegExp } from 'core-js/library/web/timers';\r\nimport { ISampleExtractionSubmission } from 'app/sample-extractions/sample-extraction-submission';\r\n\r\n\r\n@Component({\r\n  selector: 'app-analysis-batches',\r\n  templateUrl: './analysis-batches.component.html',\r\n  styleUrls: ['./analysis-batches.component.scss']\r\n})\r\nexport class AnalysisBatchesComponent implements OnInit {\r\n  @ViewChild(\"wizardExtract\") wizardExtract: Wizard;\r\n  public showWorksheet: boolean = false;\r\n  @ViewChild(\"inhibitionPage\") inhibitionPage: WizardPage;\r\n\r\n  // testing\r\n  loadingFlag: boolean = false;\r\n  inhibitionErrorFlag: boolean = false;\r\n  extractionErrorFlag: boolean = false;\r\n  checked = false;\r\n  inhibitionFinished = false;\r\n  extractionFinished = false;\r\n  // testing\r\n\r\n  analysisBatchesLoading: boolean = false;\r\n  samplesLoading: boolean = false;\r\n\r\n  public showWarning = false;\r\n  public nativeWindow: any;\r\n  rnaTargetsSelected: boolean = false;\r\n  sampleListEditLocked: boolean = false;\r\n\r\n  inhibitionsExist: boolean = false;\r\n  submitLoading: boolean = false;\r\n  targetDetailLoading: boolean = false;\r\n\r\n  // for print modal\r\n  printSubmitLoading: boolean = false;\r\n  noExtractionsFlag: boolean = false;\r\n  oneExtractionFlag: boolean = false;\r\n  multipleExtractionsFlag: boolean = false;\r\n\r\n  extractWizardOpen: boolean = false;\r\n  useExistingInhibition: boolean = false;\r\n\r\n  allAnalysisBatchSummaries: IAnalysisBatchSummary[];\r\n  allTargets: ITarget[] = [];\r\n  allExtractionMethods: IExtractionMethod[];\r\n\r\n  studies: IStudy[];\r\n  units: IUnit[];\r\n\r\n  filteredSamples: ISample[] = [];\r\n\r\n  abSampleInhibitions;\r\n\r\n  focusAnalysisBatchID: number;\r\n  focusAnalysisBatchData: IAnalysisBatchDetail;\r\n\r\n  selectedAnalysisBatchID: number;\r\n  selectedAnalysisBatchData: IAnalysisBatchDetail;\r\n\r\n  abSampleList: ISample[] = [];\r\n  abSampleIDList: number[] = [];\r\n\r\n  abSampleListPopulated: boolean = false;\r\n\r\n  showABEditError: boolean = false;\r\n  showABEditSuccess: boolean = false;\r\n\r\n  nucleicAcidTypes = [];\r\n\r\n  extractionBatchArray: IExtractionBatch[];\r\n\r\n  rePrintWorksheetData: IExtractionBatch;\r\n  extractWizWorksheetData: IExtractionBatchSubmission;\r\n\r\n  showHidePrintModal: boolean = false;\r\n\r\n  aliquotSelectErrorFlag: boolean = false;\r\n  targetSelectErrorFlag: boolean = false;\r\n  showHideNoTargetErrorModal: boolean = false;\r\n\r\n  editABLoading = false;\r\n\r\n  // aliquotSelectionArray: IAliquotSelection[] = [];\r\n\r\n  inhibitionsPerSample = [];\r\n  // may not need this abInhibitionCount var, consider removing\r\n  abInhibitionCount = 0;\r\n  abInhibitions: IInhibition[];\r\n  sampleInhibitions: IInhibition[];\r\n\r\n  showHideEdit: boolean = false;\r\n  showHideExtractionDetailModal: boolean = false;\r\n  showHideRTDetailModal: boolean = false;\r\n  showHideInhibitionDetailModal: boolean = false;\r\n  showHideTargetDetailModal: boolean = false;\r\n  extractionDetailArray: ISampleExtraction[] = [];\r\n  inhibitionDetailArray: IInhibition[] = [];\r\n  rtDetailArray: IReverseTranscription[] = [];\r\n  targetDetailArray = [];\r\n\r\n  selected = [];\r\n  selectedSamples = [];\r\n  selectedAB: IAnalysisBatchSummary;\r\n  errorMessage: string;\r\n\r\n  samplesSelected = [];\r\n\r\n  abQueryComplete: boolean = false;\r\n  abQuerySizeErrorFlag: boolean = false;\r\n  abCount;\r\n\r\n  queryCountLimit;\r\n  // booleans for edit AB tabs\r\n  sampleListActive: boolean;\r\n  detailsActive: boolean;\r\n\r\n  extractionBatchSubmission: IExtractionBatchSubmission;\r\n\r\n  extractForm: FormGroup;\r\n  replicateArray: FormArray;\r\n  extractionArray: FormArray;\r\n  aliquotsArray: FormArray;\r\n\r\n  x: boolean = false;\r\n\r\n  rnaApplyList = [];\r\n  dnaApplyList = [];\r\n\r\n  rtValuesExist: boolean = false;\r\n\r\n  inhibitionError: string = \"\";\r\n\r\n  batchExtPosForm: FormGroup;\r\n  EB_array: FormArray;\r\n  batchExtPosModalActive: boolean = false;\r\n  showBatchExtPosError: boolean = false;\r\n  showBatchExtPosSuccess: boolean = false;\r\n  batchExtPosLoading: boolean = false;\r\n  sampleQuerySizeErrorFlag = false;\r\n\r\n  sampleQueryForm: FormGroup;\r\n\r\n  inhibitionErrors = {\r\n    \"dnaInhibitionSelection\": \"Missing one or more inhibition selections. Please make a DNA inhibition selection for each sample.\",\r\n    \"rnaInhibitionSelection\": \"Missing one or more inhibition selections. Please make a RNA inhibition selection for each sample.\",\r\n    \"dnaInhibitionDate\": \"Please select a date for new DNA inhibitions.\",\r\n    \"rnaInhibitionDate\": \"Please select a date for new RNA inhibitions.\"\r\n  }\r\n\r\n  isNumberPattern: RegExp = (/^[0-9]*$/);\r\n\r\n  abQueryForm: FormGroup;\r\n\r\n  // edit AB form\r\n  editABForm = new FormGroup({\r\n    id: new FormControl(''),\r\n    name: new FormControl(''),\r\n    analysis_batch_description: new FormControl(''),\r\n    analysis_batch_notes: new FormControl(''),\r\n    new_samples: new FormControl('')\r\n  });\r\n\r\n  // add inhibition form\r\n  createInhibitionForm = new FormGroup({\r\n    dna: new FormControl(false),\r\n    rna: new FormControl(false),\r\n    inhibition_date_dna: new FormControl(''),\r\n    inhibition_date_rna: new FormControl('')\r\n  })\r\n\r\n  // extractionBatch select form\r\n  extractionBatchSelectForm = new FormGroup({\r\n    extraction_batch: new FormControl('', Validators.required)\r\n  })\r\n\r\n\r\n\r\n  static nonZero(control: AbstractControl): { [key: string]: any; } {\r\n    if (Number(control.value) < 0) {\r\n      return { nonZero: true };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  buildSampleQueryForm() {\r\n    this.sampleQueryForm = this.formBuilder.group({\r\n      study: null,\r\n      from_id: null,\r\n      to_id: null,\r\n      from_collection_start_date: null,\r\n      to_collection_start_date: null,\r\n      collaborator_sample_id: null,\r\n      sample_type: null,\r\n      matrix: null,\r\n      record_type: null,\r\n      peg_neg: null\r\n    })\r\n  }\r\n\r\n  buildABQueryForm() {\r\n    this.abQueryForm = this.formBuilder.group({\r\n      study: null,\r\n      from_id: null,\r\n      to_id: null\r\n    })\r\n  }\r\n\r\n  buildBatchExtPosForm() {\r\n    this.batchExtPosForm = this.formBuilder.group({\r\n      extraction_batches: this.formBuilder.array([\r\n        this.formBuilder.group({\r\n          id: null,\r\n          number: null,\r\n          ext_pos_dna_cq_value: null,\r\n          ext_pos_rna_rt_cq_value: null\r\n        })\r\n      ])\r\n    })\r\n    this.EB_array = this.batchExtPosForm.get(\"extraction_batches\") as FormArray;\r\n  }\r\n\r\n  buildExtractForm() {\r\n    this.extractForm = this.formBuilder.group({\r\n      analysis_batch: '',\r\n      extraction_volume: ['', [Validators.required, Validators.pattern('[-+]?[0-9]*\\.?[0-9]+')]],\r\n      elution_volume: ['', [Validators.required, Validators.pattern('[-+]?[0-9]*\\.?[0-9]+')]],\r\n      extraction_method: ['', Validators.required],\r\n      extraction_date: [null, Validators.required],\r\n      re_extraction: null,\r\n      re_extraction_notes: '',\r\n      sample_dilution_factor: ['', Validators.required],\r\n      qpcr_template_volume: ['6', [Validators.required, Validators.pattern('[-+]?[0-9]*\\.?[0-9]+')]],\r\n      qpcr_reaction_volume: ['20', [Validators.required, Validators.pattern('[-+]?[0-9]*\\.?[0-9]+')]],\r\n      qpcr_date: [null, Validators.required],\r\n      new_rt: this.formBuilder.group({\r\n        template_volume: ['8.6', [Validators.required, Validators.pattern('[-+]?[0-9]*\\.?[0-9]+')]],\r\n        reaction_volume: ['50', [Validators.required, Validators.pattern('[-+]?[0-9]*\\.?[0-9]+')]],\r\n        rt_date: [null, [Validators.required]],\r\n        re_rt: null,\r\n        re_rt_notes: ''\r\n      }),\r\n      new_replicates: this.formBuilder.array([\r\n        this.formBuilder.group({\r\n          target: '',\r\n          count: ['2', [Validators.required, Validators.min(1)]]\r\n        })\r\n      ]),\r\n      new_sample_extractions: this.formBuilder.array([\r\n        // this.formBuilder.group({\r\n        //   sample: ['', Validators.required],\r\n        //   inhibition_dna: [null, Validators.required],\r\n        //   inhibition_rna: [{ value: null, disabled: true }, Validators.required],\r\n        //   aliquot_string: '',\r\n        //   rack: '',\r\n        //   box: '',\r\n        //   row: '',\r\n        //   spot: '',\r\n        //   aliquots: this.formBuilder.array([])\r\n        // })\r\n      ])\r\n    });\r\n    this.replicateArray = this.extractForm.get('new_replicates') as FormArray;\r\n    this.extractionArray = this.extractForm.get('new_sample_extractions') as FormArray;\r\n  }\r\n\r\n  onAliquotSelect(sampleID, aliquotID) {\r\n    for (let extraction of this.extractionArray.controls) {\r\n      if (sampleID === extraction.get('sample').value) {\r\n        for (let sample of this.abSampleList) {\r\n          if (sampleID === sample.id) {\r\n            for (let aliquot of sample.aliquots) {\r\n              if (aliquot.id === (parseInt(aliquotID, 10))) {\r\n                extraction.get('aliquot_string').setValue(aliquot.aliquot_string);\r\n                extraction.get('rack').setValue(aliquot.freezer_location.rack);\r\n                extraction.get('box').setValue(aliquot.freezer_location.box);\r\n                extraction.get('row').setValue(aliquot.freezer_location.row);\r\n                extraction.get('spot').setValue(aliquot.freezer_location.spot);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private _studyService: StudyService,\r\n    private _sampleService: SampleService,\r\n    private _analysisBatchService: AnalysisBatchService,\r\n    private _targetService: TargetService,\r\n    private _inhibitionService: InhibitionService,\r\n    private _extractionMethodService: ExtractionMethodService,\r\n    private _extractionBatchService: ExtractionBatchService,\r\n    private _unitService: UnitService\r\n  ) {\r\n    this.buildSampleQueryForm();\r\n    this.buildABQueryForm();\r\n    this.buildExtractForm();\r\n    this.buildBatchExtPosForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    // this.analysisBatchesLoading = true;\r\n\r\n    this.queryCountLimit = APP_SETTINGS.QUERY_COUNT_LIMIT;\r\n\r\n    this.nucleicAcidTypes = APP_SETTINGS.NUCLEIC_ACID_TYPES;\r\n\r\n    // on init, call getTargets function of the TargetService, set results to allTargets var\r\n    this._targetService.getTargets()\r\n      .subscribe(targets => this.allTargets = targets,\r\n        error => this.errorMessage = <any>error);\r\n\r\n    // on init, call getAnalysisBatchSummaries function of the AnalysisBatchService, set results to the allAnalysisBatches var\r\n    // this._analysisBatchService.getAnalysisBatchSummaries()\r\n    //   .subscribe(\r\n    //     (analysisBatches) => {\r\n    //       this.allAnalysisBatchSummaries = analysisBatches;\r\n    //       this.analysisBatchesLoading = false;\r\n    //     },\r\n    //     error => { this.errorMessage = <any>error }\r\n    //   );\r\n\r\n    // on init, call getExtractionMethods function of the EXtractionMethodService, set results to allExtractionMethods var\r\n    this._extractionMethodService.getExtractionMethods()\r\n      .subscribe(extractionMethods => this.allExtractionMethods = extractionMethods,\r\n        error => this.errorMessage = <any>error);\r\n\r\n\r\n    // on init, call getStudies function of the StudyService, set results to the studies var\r\n    this._studyService.getStudies()\r\n      .subscribe(\r\n        studies => {\r\n          this.studies = studies\r\n          this.studies.sort(function (a, b) {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n          });\r\n        },\r\n        error => this.errorMessage = error);\r\n\r\n    // DEPRECATED\r\n    // on init, call getSamples function of the SampleService, set results to the allSamples var\r\n    // this.samplesLoading = true;\r\n    // this._sampleService.getSamples()\r\n    //   .subscribe(\r\n    //     samples => {\r\n    //       this.allSamples = samples\r\n    //       this.samplesLoading = false;\r\n    //     },\r\n    //     error => {\r\n    //       this.errorMessage = <any>error\r\n    //     });\r\n\r\n    // on init, call getUnits function of the UnitService, set results to the units var\r\n    this._unitService.getUnits()\r\n      .subscribe(units => this.units = units,\r\n        error => this.errorMessage = <any>error);\r\n  }\r\n\r\n  public doCustomClick(buttonType: string): void {\r\n\r\n    if (\"custom-next-aliquotPage\" === buttonType) {\r\n\r\n      this.aliquotSelectErrorFlag = false;\r\n\r\n      // boolean for missingAliquotSelection\r\n      let missingAliquotSelection = false;\r\n      // loop through extractions and check that an aliquot is selected for each one\r\n      for (let extraction of this.extractionArray.controls) {\r\n        if (extraction.get('aliquot_string').value === null && extraction.get('rack').value === null) {\r\n          missingAliquotSelection = true;\r\n        }\r\n      }\r\n      // throw error if aliquot selection missiing, else advance the wizard\r\n      if (missingAliquotSelection === true) {\r\n        this.aliquotSelectErrorFlag = true;\r\n      } else {\r\n        this.wizardExtract.next();\r\n      }\r\n\r\n    }\r\n\r\n    if (\"custom-next-targetPage\" === buttonType) {\r\n      this.targetSelectErrorFlag = false;\r\n      if (this.selected.length < 1) {\r\n        this.targetSelectErrorFlag = true;\r\n      } else {\r\n\r\n        // add the 'count' property to the selected (targets) object\r\n        // set the default count to 2\r\n        this.selected.map((target) => {\r\n          target.count = 2;\r\n          return target;\r\n        });\r\n        // reset rnaTargetsSelected to false to ensure its value does not carry over from previous use of the extract wizard\r\n        this.rnaTargetsSelected = false;\r\n        this.extractForm.controls.new_rt.disable();\r\n        for (let extraction of this.extractionArray.controls) {\r\n          extraction.get('inhibition_rna').disable()\r\n        }\r\n        // check for RNA targets in current selection, set rnaTargetsSelected var to true if any exist\r\n        for (let target of this.selected) {\r\n          if (target.nucleic_acid_type === 2) {\r\n            this.rnaTargetsSelected = true;\r\n            this.extractForm.controls.new_rt.enable();\r\n            for (let extraction of this.extractionArray.controls) {\r\n              extraction.get('inhibition_rna').enable()\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // reset the replicate form array controls to a blank array so it doesnt get populated twice\r\n        this.replicateArray.controls = [];\r\n        // loop through selected to create replicates form\r\n        for (let target of this.selected) {\r\n          let formGroup: FormGroup = this.formBuilder.group({\r\n            target: this.formBuilder.control(target.id),\r\n            count: this.formBuilder.control(target.count)\r\n          });\r\n          this.replicateArray.push(formGroup);\r\n        }\r\n        this.x = true;\r\n        this.wizardExtract.next();\r\n      }\r\n    }\r\n\r\n    if (\"custom-next-inhPage\" === buttonType) {\r\n\r\n      this.inhibitionErrorFlag = false;\r\n      this.inhibitionError = '';\r\n      // if the user has opted to apply existing inhibitions for both DNA and RNA targets\r\n      if (this.createInhibitionForm.value.dna === false && this.createInhibitionForm.value.rna === false) {\r\n        // if create new inhibitions for DNA targets is not selected, loop through the new_sample_extractions object.\r\n        // if any are null, alert user to select an inhibition for each sample extraction.\r\n        if (this.createInhibitionForm.value.dna === false) {\r\n          for (let extraction of this.extractForm.value.new_sample_extractions) {\r\n            if (extraction.inhibition_dna === null) {\r\n              this.inhibitionError = this.inhibitionErrors.dnaInhibitionSelection;\r\n              this.inhibitionErrorFlag = true;\r\n              // alert(\"Missing one or more inhibition selections. Please make a DNA inhibition selection for each sample.\")\r\n              return;\r\n            }\r\n          }\r\n        }\r\n        // if create new inhibitions for RNA targets is not selected and there are RNA targets selected,\r\n        // loop through the new_sample_extractions object. if any are null, alert user to select an inhibition for each sample extraction.\r\n        if (this.createInhibitionForm.value.rna === false && this.rnaTargetsSelected) {\r\n          for (let extraction of this.extractForm.value.new_sample_extractions) {\r\n            if (extraction.inhibition_rna === null) {\r\n              this.inhibitionError = this.inhibitionErrors.rnaInhibitionSelection;\r\n              this.inhibitionErrorFlag = true;\r\n              // alert(\"Missing one or more inhibition selections. Please make a RNA inhibition selection for each sample.\")\r\n              return;\r\n            }\r\n          }\r\n        }\r\n        // if the user has opted to apply existing inhibitions for one target type but not the other\r\n      } else if (this.createInhibitionForm.value.dna === true || this.createInhibitionForm.value.rna === true) {\r\n\r\n        // if user has opted to create new inhibitions for all DNA targets but has not chosen a date for them\r\n        if (this.createInhibitionForm.value.dna === true && this.createInhibitionForm.value.inhibition_date_dna === '') {\r\n          this.inhibitionError = this.inhibitionErrors.dnaInhibitionDate;\r\n          this.inhibitionErrorFlag = true;\r\n          // alert(\"Please select a date for DNA inhibitions\");\r\n          return;\r\n        }\r\n        // if user has opted to create new inhibitions for all RNA targets but has not chosen a date for them\r\n        if (this.createInhibitionForm.value.rna === true && this.createInhibitionForm.value.inhibition_date_rna === '') {\r\n          this.inhibitionError = this.inhibitionErrors.rnaInhibitionDate;\r\n          this.inhibitionErrorFlag = true;\r\n          // alert(\"Please select a date for RNA inhibitions\");\r\n          return;\r\n        }\r\n        // if create new inhibitions for DNA targets is not selected, loop through the new_sample_extractions object.\r\n        // if any are null, alert user to select an inhibition for each sample extraction.\r\n        if (this.createInhibitionForm.value.dna === false) {\r\n          for (let extraction of this.extractForm.value.new_sample_extractions) {\r\n            if (extraction.inhibition_dna === null) {\r\n              this.inhibitionError = this.inhibitionErrors.dnaInhibitionSelection;\r\n              this.inhibitionErrorFlag = true;\r\n              // alert(\"Missing one or more inhibition selections. Please make a DNA inhibition selection for each sample.\")\r\n              return;\r\n            }\r\n          }\r\n        }\r\n        // if create new inhibitions for RNA targets is not selected and there are RNA targets selected,\r\n        // loop through the new_sample_extractions object. if any are null, alert user to select an inhibition for each sample extraction.\r\n        if (this.createInhibitionForm.value.rna === false && this.rnaTargetsSelected) {\r\n          for (let extraction of this.extractForm.value.new_sample_extractions) {\r\n            if (extraction.inhibition_rna === null) {\r\n              this.inhibitionError = this.inhibitionErrors.rnaInhibitionSelection;\r\n              this.inhibitionErrorFlag = true;\r\n              // alert(\"Missing one or more inhibition selections. Please make a RNA inhibition selection for each sample.\")\r\n              return;\r\n            }\r\n          }\r\n        }\r\n\r\n      }\r\n      this.populateInhibitions();\r\n    }\r\n\r\n    if (\"custom-finish-confirmPage\" === buttonType) {\r\n      if (this.extractionFinished) {\r\n        this.wizardExtract.finish();\r\n        this.resetExtractWizard();\r\n        return;\r\n      }\r\n      this.submitExtractionBatch();\r\n    }\r\n\r\n    if (\"custom-previous\" === buttonType) {\r\n      this.wizardExtract.previous();\r\n    }\r\n\r\n    if (\"custom-cancel\" === buttonType) {\r\n      this.wizardExtract.cancel();\r\n      this.resetExtractWizard();\r\n    }\r\n  }\r\n\r\n  reloadAnalysisBatchesTable() {\r\n\r\n    this.allAnalysisBatchSummaries = [];\r\n    // set sample loading to true to put spinner over table while it updates.\r\n    this.analysisBatchesLoading = true;\r\n\r\n    // set functional limit for amount of samples to display in the table at once\r\n    const countLimit = APP_SETTINGS.QUERY_COUNT_LIMIT;\r\n\r\n    this._analysisBatchService.queryAnalysisBatchesCount(this.abQueryForm.value)\r\n      .subscribe(\r\n        (count) => {\r\n\r\n          this.submitLoading = false;\r\n          // if count exceeds limit, show error message\r\n          if (count.count >= countLimit) {\r\n            this.abQuerySizeErrorFlag = true;\r\n          } else if (count.count < countLimit) {\r\n\r\n            this.analysisBatchesLoading = true;\r\n\r\n            // if AB query count does not exceed limit, query for actual results, set results to the allAnalysisBatchSummaries var\r\n            this._analysisBatchService.queryAnalysisBatches(this.abQueryForm.value)\r\n              .subscribe(\r\n                (analysisBatches) => {\r\n                  this.abCount = count.count;\r\n                  this.abQueryComplete = true;\r\n                  this.allAnalysisBatchSummaries = analysisBatches;\r\n                  this.analysisBatchesLoading = false;\r\n                },\r\n                error => {\r\n                  this.errorMessage = error;\r\n                  this.submitLoading = false;\r\n                  this.analysisBatchesLoading = false;\r\n                }\r\n              );\r\n          }\r\n        },\r\n        error => {\r\n          this.errorMessage = error;\r\n          this.submitLoading = false;\r\n        }\r\n      );\r\n\r\n  }\r\n\r\n  resetExtractWizard() {\r\n    // reset extract form, specifying default values for neccesary fields\r\n    this.extractForm.reset({ qpcr_template_volume: 6, qpcr_reaction_volume: 20, new_rt: { template_volume: 8.6, reaction_volume: 50 } });\r\n\r\n    // clear out the new_replicates formArray\r\n    let newReplicateControls = <FormArray>this.extractForm.get('new_replicates')\r\n    for (let index = newReplicateControls.length - 1; index >= 0; index--) {\r\n      // Remove all but one occurrence and then add back only what the model dictates.\r\n      newReplicateControls.removeAt(index);\r\n    }\r\n\r\n    // clear out the new_sample_extractions formArray\r\n    let newSampleExtractionControls = <FormArray>this.extractForm.get('new_sample_extractions')\r\n    for (let index = newSampleExtractionControls.length - 1; index >= 0; index--) {\r\n      // Remove all but one occurrence and then add back only what the model dictates.\r\n      newSampleExtractionControls.removeAt(index);\r\n    }\r\n\r\n    // reset createInhibition form\r\n    this.createInhibitionForm.reset({ dna: false, rna: false });\r\n    // set the extractionFinished var back to false\r\n    this.extractionFinished = false;\r\n    // set the inhibitionFinished var back to false\r\n    this.inhibitionFinished = false;\r\n    // reset the extract wizard\r\n    this.wizardExtract.reset();\r\n  }\r\n\r\n  deselectAll() {\r\n    this.selected = [];\r\n  }\r\n\r\n  resetFlags() {\r\n    this.submitLoading = false;\r\n    this.showBatchExtPosError = false;\r\n    this.showBatchExtPosSuccess = false;\r\n    this.abQuerySizeErrorFlag = false;\r\n    this.abQueryComplete = false;\r\n    this.sampleQuerySizeErrorFlag = false;\r\n  }\r\n\r\n  retrieveABData(abID) {\r\n    // return this._analysisBatchService.getAnalysisBatchData(abID);\r\n\r\n    this._analysisBatchService.getAnalysisBatchDetail(abID)\r\n      .subscribe(\r\n        (analysisBatchDetail) => {\r\n          console.log(analysisBatchDetail);\r\n          this.focusAnalysisBatchData = analysisBatchDetail;\r\n          // this.extractionDetailArray = this.focusAnalysisBatchData.sampleextractions;\r\n        },\r\n        error => {\r\n          this.errorMessage = <any>error\r\n        }\r\n      );\r\n\r\n    return this.focusAnalysisBatchData;\r\n\r\n\r\n  }\r\n\r\n  resetAB() {\r\n    this.selected = [];\r\n    this.abSampleList = [];\r\n    this.abSampleListPopulated = false;\r\n    this.abInhibitionCount = 0;\r\n    this.abInhibitions = [];\r\n    this.sampleInhibitions = [];\r\n    this.abSampleIDList = [];\r\n    this.sampleListEditLocked = false;\r\n  }\r\n\r\n  reprintWorksheet(selectedAB) {\r\n    this.printSubmitLoading = true;\r\n    this.noExtractionsFlag = false;\r\n    this.oneExtractionFlag = false;\r\n    this.multipleExtractionsFlag = false;\r\n    // get the AB detail from web services\r\n    this._analysisBatchService.getAnalysisBatchDetail(selectedAB.id)\r\n      .subscribe(\r\n        (analysisBatchDetail) => {\r\n          this.selectedAnalysisBatchData = analysisBatchDetail;\r\n\r\n          if (analysisBatchDetail.extractionbatches.length === 0) {\r\n            this.noExtractionsFlag = true;\r\n          } else if (analysisBatchDetail.extractionbatches.length === 1) {\r\n            // since only one extractionBatch, can go immediately to populating the rePrintWorksheetData\r\n            this.rePrintWorksheetData = analysisBatchDetail.extractionbatches[0];\r\n            this.oneExtractionFlag = true;\r\n          } else if (analysisBatchDetail.extractionbatches.length > 1) {\r\n            // because more than one extractionBatch, user input is needed to choose the desired one.\r\n            // set the extractionBatch array, which populates the extraction select form for the user to choose\r\n            this.extractionBatchArray = analysisBatchDetail.extractionbatches;\r\n            this.multipleExtractionsFlag = true;\r\n          }\r\n\r\n          this.printSubmitLoading = false;\r\n          this.showHidePrintModal = true;\r\n        },\r\n        error => {\r\n          this.errorMessage = <any>error;\r\n        }\r\n      );\r\n\r\n  }\r\n\r\n  // called from createWorksheet in success and failure to get samples to ensure worksheet obj gets populated regardless\r\n  private buildReprintWorksheetObj(es: ISampleExtractionSubmission[], tn: any[]) {\r\n\r\n    if (this.rePrintWorksheetData.reverse_transcriptions.length === 0) {\r\n      this.rePrintWorksheetData.reverse_transcriptions.push({ reaction_volume: 0, template_volume: 0, rt_date: \"N/A\" })\r\n      this.rtValuesExist = false;\r\n    }\r\n\r\n    let ABWorksheetObj: IABWorksheet;\r\n    ABWorksheetObj = {\r\n      isReprint: true,\r\n      // TOP TABLE:\r\n      analysis_batch: this.selectedAnalysisBatchData.id,\r\n      creation_date: this.selectedAnalysisBatchData.created_date,\r\n      studies: this.selectedAnalysisBatchData.studies,\r\n      description: this.selectedAnalysisBatchData.analysis_batch_description,\r\n      // extraction_no: (this.selectedAnalysisBatchData.extractionbatches.length) + 1,\r\n      extraction_no: this.rePrintWorksheetData.extraction_number,\r\n      extraction_date: this.rePrintWorksheetData.extraction_date,\r\n      extraction_method: this.rePrintWorksheetData.extraction_method,\r\n      extraction_sample_volume: this.rePrintWorksheetData.extraction_volume,\r\n      eluted_extraction_volume: this.rePrintWorksheetData.elution_volume,\r\n      // Left TABLE:\r\n      extraction_submission: es,\r\n      // Right TABLE:\r\n      targetNames: tn,\r\n      // BOTTOM TABLE:\r\n      reverse_extraction_no: this.rePrintWorksheetData.extraction_number,\r\n      rt_reaction_volume: this.rePrintWorksheetData.reverse_transcriptions[0].reaction_volume,\r\n      rt_template_volume: this.rePrintWorksheetData.reverse_transcriptions[0].template_volume,\r\n      rt_date: this.rePrintWorksheetData.reverse_transcriptions[0].rt_date\r\n    };\r\n    this._analysisBatchService.setWorksheetObject(ABWorksheetObj);\r\n    this.showWorksheet = true;\r\n  }\r\n\r\n  createWorksheet(isReprint, hasMultipleExtractions) {\r\n    let targetNameArray = [];\r\n    let ABWorksheetObj: IABWorksheet;\r\n    if (isReprint) {\r\n      if (hasMultipleExtractions) {\r\n        // set the rePrintWorksheetData to the user selection from the extract batch select form.\r\n        // Note: rePrintWorksheetData was set in the reprintWorksheet function if AB only had one extractionBatch\r\n        for (let extractionBatch of this.selectedAnalysisBatchData.extractionbatches) {\r\n          if (extractionBatch.id === Number(this.extractionBatchSelectForm.value.extraction_batch)) {\r\n            this.rePrintWorksheetData = extractionBatch;\r\n          }\r\n        };\r\n      }\r\n      for (let item of this.rePrintWorksheetData.targets) {\r\n        for (let target of this.allTargets) {\r\n          if (item.id === target.id) {\r\n            targetNameArray.push(target.name)\r\n          }\r\n        };\r\n      };\r\n\r\n      let sampleList = [];\r\n      sampleList = this.selectedAnalysisBatchData.samples.map(ab => ab.id);\r\n\r\n      let extractionSubmission: ISampleExtractionSubmission[] = [];\r\n      // TODO: need to look up the first aliquot of every sample in this analysis batch\r\n      this._sampleService.getSampleSelection(sampleList)\r\n        .subscribe((sampleSelection) => {\r\n\r\n          // sort the sample selection by sample ID\r\n          sampleSelection.sort(function (a, b) {\r\n            return (a.id - b.id);\r\n          });\r\n\r\n          for (let extraction of this.rePrintWorksheetData.sampleextractions) {\r\n            for (let sample of sampleSelection) {\r\n              if (sample.id === extraction.sample) {\r\n                // place the aliquot freezer location data into the extraction_submission\r\n                if (sample.aliquots) {\r\n                  if (sample.aliquots.length > 0) {\r\n                    // create an extractionSubmission from it\r\n                    let extractionSubmit: ISampleExtractionSubmission = {\r\n                      aliquot_string: sample.aliquots[0].aliquot_string,\r\n                      box: sample.aliquots[0].freezer_location.box,\r\n                      rack: sample.aliquots[0].freezer_location.rack,\r\n                      row: sample.aliquots[0].freezer_location.row,\r\n                      sample: sample.aliquots[0].sample,\r\n                      spot: sample.aliquots[0].freezer_location.spot,\r\n                    };\r\n\r\n                    extractionSubmission.push(extractionSubmit);\r\n                  }// end if aliquots.length\r\n                }// end if sample.aliquots\r\n              }\r\n            }\r\n          }\r\n          // proceed in opening worksheet modal with the extractionsubmission\r\n          this.buildReprintWorksheetObj(extractionSubmission, targetNameArray);\r\n        },\r\n          error => {\r\n            // proceed in opening worksheet modal without the extractionsubmission\r\n            this.buildReprintWorksheetObj(extractionSubmission, targetNameArray);\r\n            this.errorMessage = <any>error;\r\n          });\r\n    } else if (!isReprint) {\r\n      // use this.extractWizWorksheetData\r\n      for (let replicate of this.extractWizWorksheetData.new_replicates) {\r\n        for (let target of this.allTargets) {\r\n          if (replicate.target === target.id) {\r\n            targetNameArray.push(target.name)\r\n          }\r\n        }\r\n      }\r\n\r\n      /// lookup inhibition dilution values, append to this.extractWizWorksheetData.new_sample_extractions\r\n      // this.sampleInhibitions\r\n\r\n      // check if extraction.inhibition_dna is a number\r\n      for (let extraction of this.extractWizWorksheetData.new_sample_extractions) {\r\n        for (let inh of this.sampleInhibitions) {\r\n\r\n          if (inh.id === extraction.inhibition_dna) {\r\n            if (typeof extraction.inhibition_dna === 'number') {\r\n              extraction.dna_dilution_factor = inh.dilution_factor;\r\n            } else {\r\n              extraction.dna_dilution_factor = null\r\n            }\r\n          }\r\n\r\n          if (inh.id === extraction.inhibition_rna) {\r\n            if (typeof extraction.inhibition_rna === 'number') {\r\n              extraction.rna_dilution_factor = inh.dilution_factor;\r\n            } else {\r\n              extraction.rna_dilution_factor = null\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // sort the sample selection by sample ID\r\n      this.extractWizWorksheetData.new_sample_extractions.sort(function (a, b) {\r\n        return (a.sample - b.sample);\r\n      });\r\n\r\n      // local var to hold extraction number\r\n      let extractionNumber;\r\n      // add 1 to length of extractionBatches array to get current extraction number\r\n      extractionNumber = (this.selectedAnalysisBatchData.extractionbatches.length) + 1\r\n\r\n      // details for AB worksheet:\r\n      ABWorksheetObj = {\r\n        isReprint: false,\r\n        // TOP TABLE:\r\n        analysis_batch: this.extractWizWorksheetData.analysis_batch,\r\n        creation_date: this.selectedAnalysisBatchData.created_date,\r\n        studies: this.selectedAnalysisBatchData.studies,\r\n        description: this.selectedAnalysisBatchData.analysis_batch_description,\r\n        extraction_no: extractionNumber,\r\n        extraction_date: this.extractWizWorksheetData.extraction_date,\r\n        extraction_method: this.allExtractionMethods.filter(em => { return em.id = this.extractWizWorksheetData.extraction_method })[0],\r\n        extraction_sample_volume: this.extractWizWorksheetData.extraction_volume,\r\n        eluted_extraction_volume: this.extractWizWorksheetData.elution_volume,\r\n        // Left TABLE:\r\n        extraction_submission: this.extractWizWorksheetData.new_sample_extractions,\r\n        // Right TABLE:\r\n        targetNames: targetNameArray,\r\n        // BOTTOM TABLE:\r\n        reverse_extraction_no: extractionNumber,\r\n        rt_reaction_volume: this.extractForm.controls.new_rt.value.reaction_volume,\r\n        rt_template_volume: this.extractForm.controls.new_rt.value.template_volume,\r\n        rt_date: this.extractForm.controls.new_rt.value.rt_date\r\n      };\r\n\r\n      this._analysisBatchService.setWorksheetObject(ABWorksheetObj);\r\n      this.showWorksheet = true;\r\n    }\r\n  }\r\n\r\n  buildAliquotArray(index, sampleID, aliquots) {\r\n\r\n    let aliquotsArray = this.formBuilder.array([]);\r\n\r\n    for (let aliquot of aliquots) {\r\n      let aliquotFormGroup: FormGroup = this.formBuilder.group({\r\n        aliquot_id: this.formBuilder.control(aliquot.id),\r\n        aliquot_string: this.formBuilder.control(aliquot.aliquot_string),\r\n        rack: this.formBuilder.control(aliquot.freezer_location.rack),\r\n        box: this.formBuilder.control(aliquot.freezer_location.box),\r\n        row: this.formBuilder.control(aliquot.freezer_location.row),\r\n        spot: this.formBuilder.control(aliquot.freezer_location.spot)\r\n      });\r\n      aliquotsArray.push(aliquotFormGroup);\r\n    }\r\n    return aliquotsArray;\r\n  }\r\n\r\n  extractAB(selectedAB) {\r\n\r\n    this.submitLoading = true;\r\n    this.resetAB();\r\n    this.selectedAnalysisBatchID = selectedAB.id;\r\n\r\n    this.extractForm.patchValue({\r\n      analysis_batch: selectedAB.id\r\n    })\r\n\r\n    // get the AB detail from web services\r\n    this._analysisBatchService.getAnalysisBatchDetail(selectedAB.id)\r\n      .subscribe(\r\n        (analysisBatchDetail) => {\r\n          this.selectedAnalysisBatchData = analysisBatchDetail;\r\n\r\n          // reset the extraction form array controls to a blank array\r\n          // this.extractionArray.controls = [];\r\n\r\n          // get sample id for each sample in the AB, add those to abSampleList array and abSampleIDList\r\n          if (analysisBatchDetail.samples.length > 0) {\r\n\r\n            // populate the abSampleIDList from a simple loop of the samples array of the AB details\r\n            for (let sampleSummary of this.selectedAnalysisBatchData.samples) {\r\n              this.abSampleIDList.push(sampleSummary.id);\r\n            }\r\n\r\n            // query the needed samples to populate the abSampleList array, needed for the extract step\r\n            const formValue = { \"id\": this.abSampleIDList }\r\n\r\n\r\n            this._sampleService.querySamples(formValue)\r\n              .subscribe(\r\n                (samples) => {\r\n                  this.abSampleList = samples;\r\n\r\n                  this.abSampleListPopulated = true;\r\n\r\n                  // the abSampleList must be populated before this is called\r\n                  for (let i = 0; i < this.abSampleList.length; i++) {\r\n\r\n                    let extractionFormGroup: FormGroup = this.formBuilder.group({\r\n                      sample: this.formBuilder.control(this.abSampleList[i].id),\r\n                      inhibition_dna: this.formBuilder.control(null),\r\n                      inhibition_rna: this.formBuilder.control(null),\r\n                      aliquot_string: this.formBuilder.control(null),\r\n                      rack: this.formBuilder.control(null),\r\n                      box: this.formBuilder.control(null),\r\n                      row: this.formBuilder.control(null),\r\n                      spot: this.formBuilder.control(null),\r\n                      aliquots: this.buildAliquotArray(i, this.abSampleList[i].id, this.abSampleList[i].aliquots)\r\n                    });\r\n\r\n                    this.extractionArray.push(extractionFormGroup);\r\n\r\n                  }\r\n\r\n\r\n                  // call to services to retrieve a list of all inhibitions for each sample in this AB\r\n                  // this must be called AFTER abSampleIDLIst is populated\r\n                  this._analysisBatchService.getSampleInhibitions(this.abSampleIDList)\r\n                    .subscribe(\r\n                      (abSampleInhibitions) => {\r\n\r\n                        for (let sample of abSampleInhibitions) {\r\n\r\n                          this.abSampleInhibitions = abSampleInhibitions;\r\n\r\n                          // populate sampleInhibitions var with all the inhibitions associated with any sample in this AB\r\n                          // used for the sample level inhibition apply select dropdowns\r\n                          for (let inhibition of sample.inhibitions) {\r\n                            this.sampleInhibitions.push(inhibition)\r\n                          }\r\n\r\n                          // check if any of the samples in the list have inhibitions, for inhibitions exist alert\r\n                          // if so set inhibitionsExists var to true\r\n                          if (sample.inhibitions.length > 0) {\r\n                            this.inhibitionsExist = true;\r\n                          }\r\n                        }\r\n\r\n                        this.submitLoading = false;\r\n                        this.extractWizardOpen = true;\r\n                      },\r\n                      error => {\r\n                        this.errorMessage = <any>error\r\n                      }\r\n                    )\r\n\r\n\r\n                },\r\n                error => {\r\n                  this.errorMessage = <any>error\r\n                }\r\n              );\r\n\r\n\r\n          } else {\r\n            this.submitLoading = false;\r\n            alert(\"No samples in this analysis batch. Please add samples before extracting.\");\r\n          }\r\n\r\n        },\r\n        error => {\r\n          this.errorMessage = <any>error\r\n        }\r\n      );\r\n  }\r\n\r\n  populateInhibitions() {\r\n\r\n    this.dnaApplyList = [];\r\n    this.rnaApplyList = [];\r\n\r\n    let createInhibitionFormValue = this.createInhibitionForm.value;\r\n    let extractFormValue = this.extractForm.value;\r\n    if (createInhibitionFormValue.dna === true) {\r\n      for (let extraction of this.extractForm.value.new_sample_extractions) {\r\n        extraction.inhibition_dna = createInhibitionFormValue.inhibition_date_dna;\r\n      }\r\n    }\r\n    if (createInhibitionFormValue.rna === true) {\r\n      for (let extraction of extractFormValue.new_sample_extractions) {\r\n        extraction.inhibition_rna = createInhibitionFormValue.inhibition_date_rna;\r\n      }\r\n    }\r\n    for (let extraction of extractFormValue.new_sample_extractions) {\r\n      if (this.isNumberPattern.test(extraction.inhibition_dna)) {\r\n        extraction.inhibition_dna = parseInt(extraction.inhibition_dna, 10)\r\n        this.dnaApplyList.push(extraction.sample)\r\n      }\r\n      if (this.isNumberPattern.test(extraction.inhibition_rna)) {\r\n        extraction.inhibition_rna = parseInt(extraction.inhibition_rna, 10)\r\n        this.rnaApplyList.push(extraction.sample);\r\n      }\r\n      if (extraction.inhibition_dna === 'new') {\r\n        extraction.inhibition_dna = createInhibitionFormValue.inhibition_date_dna;\r\n      }\r\n      if (extraction.inhibition_rna === 'new') {\r\n        extraction.inhibition_rna = createInhibitionFormValue.inhibition_date_rna;\r\n      }\r\n    }\r\n    this.wizardExtract.next();\r\n  }\r\n\r\n  finishExtractWizard(abID, extractFormValue, createInhibitionFormValue) {\r\n    // end finishExtractWizard func\r\n  }\r\n\r\n  submitExtractionBatch() {\r\n\r\n    this.loadingFlag = true;\r\n    this.extractionErrorFlag = false;\r\n\r\n    // copy the extractForm value to the worksheetdata var before altering the extractForm value schema\r\n    // not working - need to use a deep copy appropriate for a nested object\r\n    let extractFormValue = this.extractForm.value;\r\n    this.extractWizWorksheetData = JSON.parse(JSON.stringify(extractFormValue));\r\n\r\n    extractFormValue.elution_volume = Number(extractFormValue.elution_volume)\r\n    extractFormValue.extraction_method = Number(extractFormValue.extraction_method)\r\n    extractFormValue.extraction_volume = Number(extractFormValue.extraction_volume)\r\n    extractFormValue.qpcr_reaction_volume = Number(extractFormValue.qpcr_reaction_volume)\r\n    extractFormValue.qpcr_template_volume = Number(extractFormValue.qpcr_template_volume)\r\n\r\n    if (extractFormValue.new_rt) {\r\n      extractFormValue.new_rt.reaction_volume = Number(extractFormValue.new_rt.reaction_volume)\r\n      extractFormValue.new_rt.template_volume = Number(extractFormValue.new_rt.template_volume)\r\n    }\r\n\r\n    let extractFormValueCopy = extractFormValue;\r\n    for (let extraction of extractFormValueCopy.new_sample_extractions) {\r\n      delete extraction.aliquot_string;\r\n      delete extraction.rack;\r\n      delete extraction.box;\r\n      delete extraction.row;\r\n      delete extraction.spot;\r\n      delete extraction.aliquots;\r\n    }\r\n\r\n    // if no RNA targets were included in this extraction, remove the new_rt object from the submission\r\n    // Note: not needed if using the disable new_rt formGroup approach - the group is already absent in this case.\r\n    // if (this.rnaTargetsSelected === false) {\r\n    //   delete extractFormValueCopy.new_rt;\r\n    // }\r\n\r\n    this.extractionBatchSubmission = extractFormValueCopy;\r\n\r\n    // TEMPORARY solution to lack of a re_extraction_notes field causing null value which server rejects\r\n    this.extractionBatchSubmission.re_extraction_notes = '';\r\n    if (this.extractionBatchSubmission.new_rt) {\r\n      this.extractionBatchSubmission.new_rt.re_rt_notes = '';\r\n    };\r\n\r\n    // submit the extractFormValue to the extraction batch service\r\n    this._extractionBatchService.create(this.extractionBatchSubmission)\r\n      .subscribe(\r\n        (extractionBatch) => {\r\n          console.log(extractionBatch);\r\n          this.loadingFlag = false;\r\n          this.extractionFinished = true;\r\n          // this.reloadAnalysisBatchesTable();\r\n        },\r\n        error => {\r\n          this.errorMessage = <any>error\r\n          this.loadingFlag = false;\r\n          this.extractionErrorFlag = true;\r\n        }\r\n      )\r\n  }\r\n\r\n  onSubmit(formID, formValue) {\r\n    switch (formID) {\r\n      case 'editAB': {\r\n        this.submitLoading = true;\r\n        this._analysisBatchService.update(formValue)\r\n          .subscribe(\r\n            (ab) => {\r\n              // this.updateSamplesArray(formValue);\r\n              this.editABForm.reset();\r\n              this.submitLoading = false;\r\n              this.showABEditSuccess = true;\r\n              this.reloadAnalysisBatchesTable();\r\n            },\r\n            error => {\r\n              this.errorMessage = error.toString();\r\n              this.submitLoading = false;\r\n              this.showABEditError = true;\r\n            }\r\n\r\n          )\r\n      }\r\n    }\r\n  }\r\n\r\n  // TODO: adjust this function to update the AB Summary array that populates the AB table\r\n  // private updateABArray(newItem) {\r\n  //   let updateItem = this.allSamples.find(this.findIndexToUpdate, newItem.id);\r\n  //   let index = this.allSamples.indexOf(updateItem);\r\n  //   this.allSamples[index] = newItem;\r\n  // }\r\n  // private findIndexToUpdate(newItem) {\r\n  //   return newItem.id === this;\r\n  // }\r\n\r\n  searchInArray(array, field: string, value) {\r\n    for (const item of array) {\r\n      if (item[field] === value) {\r\n        // console.log('Duplicate detected. Already existing ID: ' + value);\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  openTargetDetails(abID) {\r\n\r\n    this.targetDetailLoading = true;\r\n    this.showHideNoTargetErrorModal = false;\r\n    this.targetDetailArray = [];\r\n    // check if AB ID matches the current focusAnalysisBatchID.\r\n    // This will mean the desired AB data is already stored in the variable and does not need to be retrieved\r\n    if (abID === this.focusAnalysisBatchID) {\r\n\r\n      if (this.extractionBatchArray.length > 0) {\r\n        // build the target list by looping through the targets array of the first extractionBatch and adding all targets to a local array\r\n        // all extraction batches of the same analysis batch have identical target list so only first one is needed\r\n        for (let target of this.extractionBatchArray[0].targets) {\r\n          this.targetDetailArray.push(target);\r\n        }\r\n\r\n        this.showHideTargetDetailModal = true;\r\n        this.targetDetailLoading = false;\r\n      } else {\r\n        this.showHideNoTargetErrorModal = true;\r\n        this.targetDetailLoading = false;\r\n      }\r\n\r\n    } else {\r\n      // set the focusAnalysisBatchID to the AB ID of the just-clicked AB record\r\n      this.focusAnalysisBatchID = abID;\r\n      // call to retrieve AB detail data\r\n      this._analysisBatchService.getAnalysisBatchDetail(abID)\r\n        .subscribe(\r\n          (analysisBatchDetail) => {\r\n            if (analysisBatchDetail.extractionbatches.length > 0) {\r\n              this.focusAnalysisBatchData = analysisBatchDetail;\r\n              this.extractionBatchArray = this.focusAnalysisBatchData.extractionbatches;\r\n              // build target list by looping through the targets array of the first extractionBatch and adding all targets to a local array\r\n              // all extraction batches of the same analysis batch have identical target list so only first one is needed\r\n\r\n              for (let extractionbatch of this.focusAnalysisBatchData.extractionbatches) {\r\n                for (let target of extractionbatch.targets) {\r\n                  // add only if does not exist yet\r\n                  if (this.searchInArray(this.targetDetailArray, 'id', target.id)) {\r\n                    break;\r\n                  } else {\r\n                    this.targetDetailArray.push(target);\r\n                  }\r\n                }\r\n              }\r\n\r\n              // show the target details modal if not showing already\r\n              if (this.showHideTargetDetailModal === false) {\r\n                this.showHideTargetDetailModal = true;\r\n              }\r\n              this.targetDetailLoading = false;\r\n            } else {\r\n              this.targetDetailLoading = false;\r\n              this.showHideNoTargetErrorModal = true;\r\n            }\r\n          },\r\n          error => {\r\n            this.errorMessage = <any>error\r\n            this.targetDetailLoading = false;\r\n          }\r\n        );\r\n    }\r\n  }\r\n\r\n  updateABSampleList(editABFormValue, selected) {\r\n    // grab the selected array and patch it in as the samples array for the editABForm\r\n    let samples = [];\r\n    for (let sample of selected) {\r\n      samples.push(sample.id);\r\n    }\r\n    for (let sample of this.abSampleList) {\r\n      samples.push(sample.id)\r\n    }\r\n    this.editABForm.patchValue({\r\n      new_samples: samples\r\n    });\r\n    this.onSubmit('editAB', this.editABForm.value);\r\n  }\r\n\r\n  removeSample(sample) {\r\n    // remove from abSampleList\r\n    // get index of object with id:37\r\n    let removeIndex = this.abSampleList.map(function (item) { return item.id; }).indexOf(sample.id);\r\n\r\n    // remove object\r\n    this.abSampleList.splice(removeIndex, 1);\r\n\r\n    // add to filteredSamples\r\n    this.filteredSamples.push(sample);\r\n  }\r\n\r\n  editAB(selectedAB) {\r\n\r\n    this.editABLoading = true;\r\n    this.showABEditError = false;\r\n    this.showABEditSuccess = false;\r\n\r\n    this.resetAB();\r\n    if (selectedAB.summary.extraction_batch_count > 0) {\r\n      this.sampleListEditLocked = true;\r\n    }\r\n\r\n    // call to retrieve AB detail data\r\n    this._analysisBatchService.getAnalysisBatchDetail(selectedAB.id)\r\n      .subscribe(\r\n        (analysisBatchDetail) => {\r\n          console.log(analysisBatchDetail);\r\n          this.selectedAnalysisBatchData = analysisBatchDetail;\r\n\r\n          if (this.selectedAnalysisBatchData.samples.length > 0) {\r\n\r\n            // populate the abSampleIDList from a simple loop of the samples array of the AB details\r\n            for (let sampleSummary of this.selectedAnalysisBatchData.samples) {\r\n              this.abSampleIDList.push(sampleSummary.id);\r\n            }\r\n\r\n            // query the needed samples to populate the abSampleList array\r\n            const formValue = { \"id\": this.abSampleIDList }\r\n\r\n            this._sampleService.querySamples(formValue)\r\n              .subscribe(\r\n                (samples) => {\r\n                  this.abSampleList = samples;\r\n\r\n                  this.abSampleListPopulated = true;\r\n\r\n\r\n                  this.editABForm.setValue({\r\n                    id: selectedAB.id,\r\n                    name: this.selectedAB.name,\r\n                    analysis_batch_description: selectedAB.analysis_batch_description,\r\n                    analysis_batch_notes: selectedAB.analysis_batch_notes,\r\n                    new_samples: this.abSampleIDList\r\n                  });\r\n\r\n                  this.editABLoading = false;\r\n                  // show the edit analysis batch modal if not showing already\r\n                  if (this.showHideEdit === false) {\r\n                    this.showHideEdit = true;\r\n                  }\r\n\r\n                },\r\n                error => {\r\n                  this.errorMessage = <any>error\r\n                  this.editABLoading = false;\r\n                }\r\n              );\r\n\r\n          } else { }\r\n\r\n\r\n        },\r\n        error => {\r\n          this.errorMessage = <any>error\r\n        }\r\n      );\r\n  }\r\n\r\n  openBatchExtPos(selectedAB) {\r\n\r\n    this.batchExtPosLoading = true\r\n\r\n    let ext_pos_rna_rt_cq_value;\r\n\r\n    // reset the extraction form array controls to a blank array\r\n    this.EB_array.controls = [];\r\n    // call to retrieve AB detail data\r\n    this._analysisBatchService.getAnalysisBatchDetail(selectedAB.id)\r\n      .subscribe(\r\n        (analysisBatchDetail) => {\r\n\r\n          for (let extractionBatch of analysisBatchDetail.extractionbatches) {\r\n\r\n            if (extractionBatch.reverse_transcriptions.length > 0) {\r\n              ext_pos_rna_rt_cq_value = extractionBatch.reverse_transcriptions[0].ext_pos_rna_rt_cq_value;\r\n            } else {\r\n              ext_pos_rna_rt_cq_value = null;\r\n            }\r\n            let ebFormGroup: FormGroup = this.formBuilder.group({\r\n              id: this.formBuilder.control(extractionBatch.id),\r\n              number: this.formBuilder.control(extractionBatch.extraction_number),\r\n              ext_pos_dna_cq_value: this.formBuilder.control(extractionBatch.ext_pos_dna_cq_value),\r\n              ext_pos_rna_rt_cq_value: this.formBuilder.control(ext_pos_rna_rt_cq_value),\r\n            });\r\n            this.EB_array.push(ebFormGroup);\r\n          }\r\n\r\n\r\n          // show the edit analysis batch modal if not showing already\r\n          if (this.batchExtPosModalActive === false) {\r\n            this.batchExtPosModalActive = true;\r\n          }\r\n\r\n          this.batchExtPosLoading = false;\r\n        },\r\n        error => {\r\n          this.errorMessage = <any>error\r\n          this.batchExtPosLoading = false;\r\n        }\r\n      );\r\n  }\r\n\r\n  onSubmitBatchExtPos(formValue) {\r\n    this.showBatchExtPosSuccess = false;\r\n    this.showBatchExtPosError = false;\r\n    this.submitLoading = true;\r\n\r\n    const ebSubmissionArray = [];\r\n\r\n    for (let extraction_batch of formValue.extraction_batches) {\r\n      // remove 'number' field only used for display - not needed for PATCH request\r\n      delete extraction_batch.number;\r\n      ebSubmissionArray.push(extraction_batch);\r\n    }\r\n\r\n\r\n    this._extractionBatchService.bulkUpdate(ebSubmissionArray)\r\n      .subscribe(\r\n        (extractionBatches) => {\r\n          this.submitLoading = false;\r\n          this.showBatchExtPosSuccess = true;\r\n          this.showBatchExtPosError = false;\r\n\r\n        },\r\n        error => {\r\n          this.errorMessage = <any>error\r\n          this.showBatchExtPosError = true;\r\n          this.showBatchExtPosSuccess = false;\r\n          this.submitLoading = false;\r\n        }\r\n      );\r\n  }\r\n\r\n  onSubmitABQuery(formValue) {\r\n\r\n    this.resetFlags();\r\n\r\n\r\n    this.submitLoading = true;\r\n\r\n    // set functional limit for amount of samples to display in the table at once\r\n    const countLimit = APP_SETTINGS.QUERY_COUNT_LIMIT;\r\n\r\n    this._analysisBatchService.queryAnalysisBatchesCount(formValue)\r\n      .subscribe(\r\n        (count) => {\r\n\r\n          this.submitLoading = false;\r\n          // if count exceeds limit, show error message\r\n          if (count.count >= countLimit) {\r\n            this.abQuerySizeErrorFlag = true;\r\n          } else if (count.count < countLimit) {\r\n\r\n            this.analysisBatchesLoading = true;\r\n\r\n            // if AB query count does not exceed limit, query for actual results, set results to the allAnalysisBatchSummaries var\r\n            this._analysisBatchService.queryAnalysisBatches(formValue)\r\n              .subscribe(\r\n                (analysisBatches) => {\r\n                  this.abCount = count.count;\r\n                  this.abQueryComplete = true;\r\n                  this.allAnalysisBatchSummaries = analysisBatches;\r\n                  this.analysisBatchesLoading = false;\r\n                },\r\n                error => {\r\n                  this.errorMessage = error;\r\n                  this.submitLoading = false;\r\n                  this.analysisBatchesLoading = false;\r\n                }\r\n              );\r\n          }\r\n        },\r\n        error => {\r\n          this.errorMessage = error;\r\n          this.submitLoading = false;\r\n        }\r\n      );\r\n\r\n  }\r\n\r\n  onSubmitSampleQuery(formValue) {\r\n\r\n    this.resetFlags();\r\n\r\n    this.submitLoading = true;\r\n    this.samplesLoading = true;\r\n\r\n    // set functional limit for amount of samples to display in the table at once\r\n    const countLimit = 2000;\r\n\r\n    this._sampleService.querySamplesCount(formValue)\r\n      .subscribe(\r\n        (count) => {\r\n\r\n          this.submitLoading = false;\r\n          // if count exceeds limit, show error message\r\n          if (count.count >= countLimit) {\r\n            this.sampleQuerySizeErrorFlag = true;\r\n          } else if (count.count < countLimit) {\r\n\r\n            this.samplesLoading = true;\r\n\r\n            this._sampleService.querySamples(formValue)\r\n              .subscribe(\r\n                (samples) => {\r\n                  this.filteredSamples = samples;\r\n                  this.samplesLoading = false;\r\n                  // remove the current samples form the filteredSamples list for the table\r\n                  for (let i = this.filteredSamples.length - 1; i >= 0; i--) {\r\n                    for (let j = 0; j < this.abSampleList.length; j++) {\r\n                      if (this.filteredSamples[i] && (this.filteredSamples[i].id === this.abSampleList[j].id)) {\r\n                        this.filteredSamples.splice(i, 1);\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                },\r\n                error => {\r\n                  this.errorMessage = <any>error\r\n                  this.samplesLoading = false;\r\n                }\r\n              );\r\n          }\r\n        },\r\n        error => {\r\n          this.errorMessage = error;\r\n          this.submitLoading = false;\r\n        }\r\n      );\r\n\r\n  }\r\n\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/analysis-batches/analysis-batches.component.ts","module.exports = \"<clr-main-container>\\r\\n    <clr-header>\\r\\n        <div class=\\\"branding\\\">\\r\\n            <a href=\\\"#\\\" class=\\\"nav-link\\\">\\r\\n                <!--<span class=\\\"clr-icon ars-logo\\\"></span>-->\\r\\n                <span class=\\\"clr-icon lili-icon\\\"></span>\\r\\n                <span class=\\\"title\\\">\\r\\n                    <span style=\\\"font-size:xx-large; font-weight: bold;\\\">lili</span>\\r\\n                    <span style=\\\"font-size:x-large; font-weight: bold;\\\">L</span>aboratory for\\r\\n                    <span style=\\\"font-size:x-large; font-weight: bold;\\\">I</span>nfectious Disease and Environment\\r\\n                    <span style=\\\"font-size:x-large; font-weight: bold;\\\">LI</span>MS</span>\\r\\n            </a>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"header-actions\\\">\\r\\n            <clr-dropdown>\\r\\n                <button class=\\\"nav-text\\\" clrDropdownTrigger>\\r\\n                    <!-- {{ first_name }} {{ last_name }} -->\\r\\n                    {{currentUser.first_name}} {{currentUser.last_name}}\\r\\n                    <clr-icon shape=\\\"caret down\\\"></clr-icon>\\r\\n                </button>\\r\\n                <clr-dropdown-menu *clrIfOpen clrPosition=\\\"bottom-right\\\">\\r\\n                    <a href=\\\"javascript:void(0)\\\" (click)=\\\"onLogout();\\\" clrDropdownItem>Log out</a>\\r\\n                </clr-dropdown-menu>\\r\\n            </clr-dropdown>\\r\\n        </div>\\r\\n    </clr-header>\\r\\n\\r\\n    <div *ngIf=\\\"servicesFailFlag\\\" class=\\\"alert alert-app-level alert-danger\\\" style=\\\"margin-bottom:24px\\\">\\r\\n        <div class=\\\"alert-items\\\">\\r\\n            <div class=\\\"alert-item static\\\">\\r\\n                <div class=\\\"alert-icon-wrapper\\\">\\r\\n                    <clr-icon class=\\\"alert-icon\\\" shape=\\\"exclamation-circle\\\"></clr-icon>\\r\\n                </div>\\r\\n                <div class=\\\"alert-text\\\">\\r\\n                    Warning: Lili data services are not responding. Please try again later or contact server administrator.\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"content-container\\\">\\r\\n        <div class=\\\"content-area\\\">\\r\\n            <router-outlet></router-outlet>\\r\\n        </div>\\r\\n        <nav class=\\\"sidenav\\\" [clr-nav-level]=\\\"1\\\">\\r\\n            <section class=\\\"sidenav-content\\\">\\r\\n\\r\\n                <!-- <a class=\\\"nav-link \\\" href=\\\"#\\\" [routerLink]=\\\"['/login']\\\" routerLinkActive=\\\"active\\\">\\r\\n                    <clr-icon shape=\\\"login\\\"></clr-icon> Login\\r\\n                </a> -->\\r\\n\\r\\n                <a class=\\\"nav-link \\\" href=\\\"#\\\" [routerLink]=\\\"['/home']\\\" routerLinkActive=\\\"active\\\">\\r\\n                    <clr-icon shape=\\\"home\\\"></clr-icon> Home\\r\\n                </a>\\r\\n\\r\\n                <a class=\\\"nav-link\\\" href=\\\"#\\\" [routerLink]=\\\"['/studies']\\\" routerLinkActive=\\\"active\\\">\\r\\n                    <clr-icon shape=\\\"view-list\\\"></clr-icon> Studies\\r\\n                </a>\\r\\n\\r\\n                <a class=\\\"nav-link\\\" href=\\\"#\\\" [routerLink]=\\\"['/samples']\\\" routerLinkActive=\\\"active\\\">\\r\\n                    <clr-icon shape=\\\"view-list\\\"></clr-icon> Samples\\r\\n                </a>\\r\\n\\r\\n                <a class=\\\"nav-link\\\" href=\\\"#\\\" [routerLink]=\\\"['/analysisbatches']\\\" routerLinkActive=\\\"active\\\">\\r\\n                    <clr-icon shape=\\\"view-list\\\"></clr-icon> Analysis Batches\\r\\n                </a>\\r\\n\\r\\n                <!-- <section class=\\\"nav-group collapsible\\\">\\r\\n                    <input id=\\\"results\\\" type=\\\"checkbox\\\">\\r\\n                    <label for=\\\"results\\\" ><clr-icon shape=\\\"line-chart\\\"></clr-icon> Results</label>\\r\\n                    <ul class=\\\"nav-list\\\">\\r\\n                        <li>\\r\\n                            <a class=\\\"nav-link\\\" href=\\\"#\\\" [routerLink]=\\\"['/results']\\\" routerLinkActive=\\\"active\\\">\\r\\n                                <clr-icon shape=\\\"upload\\\"></clr-icon> Upload \\r\\n                            </a>\\r\\n                        </li>\\r\\n                        <li>\\r\\n                            <a class=\\\"nav-link\\\"><clr-icon shape=\\\"check-circle\\\"></clr-icon> Review</a>\\r\\n                        </li>\\r\\n                    </ul>\\r\\n                </section> -->\\r\\n\\r\\n                <a class=\\\"nav-link\\\" href=\\\"#\\\" [routerLink]=\\\"['/dataupload']\\\" routerLinkActive=\\\"active\\\">\\r\\n                    <clr-icon shape=\\\"upload\\\"></clr-icon> Data Upload\\r\\n                </a>\\r\\n\\r\\n                <a class=\\\"nav-link\\\" href=\\\"#\\\" [routerLink]=\\\"['/results']\\\" routerLinkActive=\\\"active\\\">\\r\\n                    <clr-icon shape=\\\"line-chart\\\"></clr-icon> Results\\r\\n                </a>\\r\\n\\r\\n                <a class=\\\"nav-link\\\" href=\\\"#\\\" [routerLink]=\\\"['/reports']\\\" routerLinkActive=\\\"active\\\">\\r\\n                    <clr-icon shape=\\\"clipboard\\\"></clr-icon> Reports\\r\\n                </a>\\r\\n\\r\\n                <a class=\\\"nav-link\\\" href=\\\"#\\\" [routerLink]=\\\"['/admin']\\\" routerLinkActive=\\\"active\\\">\\r\\n                    <clr-icon shape=\\\"cog\\\"></clr-icon> Admin\\r\\n                </a>\\r\\n\\r\\n                <div class=\\\"colophon\\\">\\r\\n                    <span>lili Lab Information Management System</span>\\r\\n                    <br>\\r\\n                    <span>Laboratory for Infectious Disease and Environment</span>\\r\\n                    <br>\\r\\n                    <span>Developed by USGS Web Informatics and Mapping (WIM)</span>\\r\\n                    <br>\\r\\n                    <span>Version {{liliVersion}}</span>\\r\\n                </div>\\r\\n\\r\\n            </section>\\r\\n\\r\\n        </nav>\\r\\n    </div>\\r\\n\\r\\n</clr-main-container>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = ./src/app/app.component.html\n// module chunks = main","module.exports = \".clr-icon.ars-logo {\\n  background-image: url(\\\"data:image/svg+xml,%3C%3Fxml version%3D%221.0%22 encoding%3D%22utf-8%22%3F%3E%0D%3C!-- Generator%3A Adobe Illustrator 13.0.2%2C SVG Export Plug-In . SVG Version%3A 6.00 Build 14948)  --%3E%0D%3C!DOCTYPE svg PUBLIC %22-%2F%2FW3C%2F%2FDTD SVG 1.1%2F%2FEN%22 %22http%3A%2F%2Fwww.w3.org%2FGraphics%2FSVG%2F1.1%2FDTD%2Fsvg11.dtd%22%3E%0D%3Csvg version%3D%221.1%22 id%3D%22Layer_1%22 xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22 xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22 x%3D%220px%22 y%3D%220px%22%0D%09 width%3D%22720px%22 height%3D%22475px%22 viewBox%3D%220 0 142.137 93.613%22 enable-background%3D%22new 0 0 142.137 93.613%22%0D%09 xml%3Aspace%3D%22preserve%22%3E%0D%3Cg%3E%0D%09%3Cpath d%3D%22M61.174%2C31.226H85.09c0%2C0%2C16.559%2C0%2C16.559%2C18.59c0%2C17.299-11.41%2C17.299-11.41%2C17.299s-13.066%2C0-13.066%2C7.174%0D%09%09c0%2C5.895%2C4.785%2C5.893%2C6.625%2C5.893c1.844%2C0%2C38.281%2C0%2C38.281%2C0s7.918%2C0%2C7.918-5.893c0-7.174-8.012-6.672-12.703-7.174%0D%09%09c-5.154-0.553-12.516-2.578-12.516-17.299c0-17.119%2C13.254-18.406%2C17.301-18.59s20.059%2C0%2C20.059%2C0v12.332h-20.246%0D%09%09c0%2C0-4.598%2C0-4.598%2C6.258c0%2C6.07%2C4.785%2C6.07%2C4.785%2C6.07s20.059%2C0%2C20.059%2C18.402c0%2C18.406-18.406%2C18.406-19.688%2C18.406%0D%09%09c-1.289%2C0-40.309%2C0-40.309%2C0s-16.746%2C0-16.746-18.406c0-18.402%2C18.695-18.283%2C20.426-18.402c1.299-0.086%2C4.418%2C0%2C4.418-6.256%0D%09%09c0-6.072-3.867-5.889-5.148-6.072c-1.293-0.186-23.928%2C0-23.928%2C0L61.174%2C31.226z%22%2F%3E%0D%09%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M48.281%2C31.226%22%2F%3E%0D%09%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M61.162%2C31.226%22%2F%3E%0D%09%3Cpath d%3D%22M48.305%2C43.558L27.93%2C43.624c0%2C0-16.258%2C1.938-15.629%2C20.59L0.062%2C64.077c0%2C0-0.141-5.016%2C0-6.672%0D%09%09c0.137-1.656%2C0.092-3.727%2C0.828-6.627c0.73-2.896%2C2.066-6.117%2C2.672-6.994c0.598-0.871%2C2.711-4.094%2C4.781-5.793%0D%09%09c2.07-1.707%2C5.062-3.684%2C8.465-4.832c3.406-1.152%2C7.133-1.934%2C8.145-1.934c1.008%2C0%2C36.852%2C0%2C36.852%2C0l0.094%2C12.332H48.305z%22%2F%3E%0D%09%3Cpath d%3D%22M12.295%2C63.868c0.061%2C1.84%2C3.041%2C17.229%2C17.213%2C17.229c19.324%2C0%2C18.773-16.379%2C18.773-16.379l0.094-22.293L61%2C42.679%0D%09%09l0.162%2C24.156c0%2C0-1.652%2C26.871-29.814%2C26.777C3.375%2C93.522%2C0.062%2C64.812%2C0.062%2C63.985L12.295%2C63.868z%22%2F%3E%0D%09%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M61.162%2C43.558%22%2F%3E%0D%09%3Cpath d%3D%22M48.125%2C31.823c0%2C0%2C1.258-9.25-1.684-13.848c-3.715-5.805-13.617-5.52-13.617-5.52H10.922l0.074-12.449h22.637%0D%09%09c0%2C0%2C16.117-0.621%2C23.113%2C10.055C61.949%2C18.007%2C61%2C32.075%2C61%2C32.075L48.125%2C31.823z%22%2F%3E%0D%3C%2Fg%3E%0D%3C%2Fsvg%3E%0D\\\"); }\\n\\n.clr-icon.USDA-logo {\\n  background-image: url(\\\"data:image/svg+xml,%3C%3Fxml version%3D%221.0%22 encoding%3D%22UTF-8%22 standalone%3D%22no%22%3F%3E%0D%3Csvg xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22 version%3D%221.1%22 width%3D%2273.427002%22 height%3D%2250.223%22%3E%0D  %3Cg fill%3D%22%23000066%22%3E%0D    %3Cpath d%3D%22m 16.6555%2C2.043 -0.0903%2C12.6625 c 0%2C5.2625 -3.1297%2C7.305 -7.33473%2C7.305 -3.625%2C0 -8.238282%2C-1.6082 -8.238282%2C-7.0898 V 2.043 C 0.992188%2C1.3301 0.494922%2C0.8973 0%2C0.6492 H 5.94375 C 5.45078%2C0.8973 4.98477%2C1.3301 4.98477%2C2.043 v 12.9711 c 0%2C2.1675 0.74375%2C5.2332 4.76523%2C5.2332 3.6855%2C0 5.0191%2C-2.4153 5.0191%2C-5.4813 L 14.709%2C2.043 c 0%2C-0.7129 -0.3715%2C-1.1457 -0.8375%2C-1.3938 h 3.5926 C 16.9973%2C0.8973 16.6555%2C1.3301 16.6555%2C2.043%22 %2F%3E%0D    %3Cpath d%3D%22m 25.0414%2C22.0105 c -2.8125%2C0 -4.8578%2C-0.9597 -5.9391%2C-1.4843 l -0.1574%2C-5.2321 c 0.5895%2C2.1961 2.4438%2C5.1082 5.666%2C5.1082 3.0661%2C0 3.995%2C-2.1984 3.995%2C-3.716 0%2C-2.9734 -2.6977%2C-3.3758 -5.5102%2C-4.8922 -2.8492%2C-1.5793 -4.0875%2C-3.2492 -4.0875%2C-5.6027 0%2C-4.2102 3.9309%2C-5.882 6.75%2C-5.882 1.052%2C0 3.0926%2C0.2148 4.6727%2C1.1449 l 0.1535%2C4.5816 C 30.1539%2C4.3953 28.3883%2C1.918 25.4137%2C1.918 c -2.3516%2C0 -3.2789%2C1.641 -3.2789%2C2.9726 0%2C1.8879 1.332%2C2.602 4.2402%2C3.9324 2.8824%2C1.3625 5.8832%2C2.384 5.8832%2C6.6887 0%2C3.8692 -3.4074%2C6.4988 -7.2168%2C6.4988%22 %2F%3E%0D    %3Cpath d%3D%22m 41.8867%2C2.1973 c -0.7461%2C0 -2.3851%2C0 -2.8508%2C0.0625 v 17.832 h 2.4762 c 6.9996%2C0 8.9504%2C-4.707 8.9504%2C-9.2266 0%2C-3.7129 -2.1687%2C-8.6679 -8.5758%2C-8.6679 z m 0.3684%2C19.5043 -7.9539%2C0 c 0.4629%2C-0.2789 0.8066%2C-0.7125 0.8066%2C-1.3938 V 2.043 c 0%2C-0.7129 -0.3437%2C-1.1457 -0.8066%2C-1.3938 h 8.2371 c 10.1828%2C0 12.225%2C7.2149 12.225%2C10.216 0%2C5.3879 -4.1473%2C10.8364 -12.5082%2C10.8364%22 %2F%3E%0D    %3Cpath d%3D%22m 61.9086%2C6.6875 c 0%2C0 -2.1066%2C5.2633 -3.0957%2C7.584 h 6.2539 c -1.4539%2C-3.4379 -3.1582%2C-7.584 -3.1582%2C-7.584 z m 4.8906%2C15.0141 c 0.8028%2C-0.4336 0.9613%2C-0.8668 0.7446%2C-1.5157 -0.095%2C-0.3101 -0.8985%2C-2.2004 -1.7641%2C-4.3039 h -7.5859 c -0.9293%2C2.1035 -1.6719%2C3.9313 -1.736%2C4.2723 -0.2766%2C0.743 -0.1226%2C1.1754 0.7145%2C1.5473 h -4.2707 c 0.866%2C-0.5875 1.1429%2C-0.9282 1.4504%2C-1.5157 C 54.9418%2C19.009 63.0855%2C0 63.0855%2C0 c 0%2C0 8.2372%2C19.009 8.793%2C20.1859 0.309%2C0.6489 0.5235%2C0.9899 1.5485%2C1.5157 h -6.6278%22 %2F%3E%0D  %3C%2Fg%3E%0D  %3Cg fill%3D%22%23006600%22%3E%0D    %3Cpath d%3D%22m 72.4973%2C24.6754 c 0%2C0 -45.0547%2C-1.1184 -71.737925%2C13.1008 0%2C0 28.280125%2C-11.184 71.737925%2C-10.0653 v -3.0355%22 %2F%3E%0D    %3Cpath d%3D%22m 0.759375%2C24.6754 c 0%2C0 15.178525%2C0.1594 24.603525%2C3.6746 0%2C0 -19.33126%2C-1.598 -24.603525%2C-0.798 v -2.8766%22 %2F%3E%0D    %3Cpath d%3D%22m 0.759375%2C29.6297 c 0%2C0 10.865225%2C-0.4805 17.414025%2C0.1594 0%2C0 -15.81402%2C1.9156 -17.414025%2C2.7132 v -2.8726%22 %2F%3E%0D    %3Cpath d%3D%22M 65.0309%2C30.1176 C 64.9579%2C30.1129 64.860546%2C30.1215 64.798%2C30.123 51.6965%2C30.3742 24.2219%2C31.9539 0.771875%2C40.2391 l 0%2C9.9839 71.733225%2C0 0%2C-20.1054 c 0%2C0 -2.784%2C-0.086 -7.4742%2C0%22 %2F%3E%0D  %3C%2Fg%3E%0D%3C%2Fsvg%3E%0D\\\"); }\\n\\n.clr-icon.clr-clarity-logo {\\n  background-image: url(\\\"data:image/svg+xml,%3C%3Fxml version%3D%221.0%22 encoding%3D%22UTF-8%22 standalone%3D%22no%22%3F%3E%0D%3C!--%0D  ~ Copyright (c) 2016 VMware%2C Inc. All Rights Reserved.%0D  ~ This software is released under MIT license.%0D  ~ The full license information can be found in LICENSE in the root directory of this project.%0D  --%3E%0D%3Csvg width%3D%2236px%22 height%3D%2236px%22 viewBox%3D%220 0 36 36%22 version%3D%221.1%22 xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22 xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%3E%0D    %3C!-- Generator%3A Sketch 40.3 (33839) - http%3A%2F%2Fwww.bohemiancoding.com%2Fsketch --%3E%0D    %3Ctitle%3Elogo%3C%2Ftitle%3E%0D    %3Cdesc%3ECreated with Sketch.%3C%2Fdesc%3E%0D    %3Cdefs%3E%3C%2Fdefs%3E%0D    %3Cg id%3D%22Page-1%22 stroke%3D%22none%22 stroke-width%3D%221%22 fill%3D%22none%22 fill-rule%3D%22evenodd%22%3E%0D        %3Cg id%3D%22logo%22 transform%3D%22translate(0.000000%2C 4.500000)%22%3E%0D            %3Cg id%3D%22large%22 transform%3D%22translate(0.000000%2C 0.044118)%22%3E%0D                %3Cpolyline id%3D%22Fill-3%22 fill%3D%22%230095D3%22 points%3D%2224.7018129 0.0388840336 35.979641 6.71768066 35.9614589 20.2811697 24.7018129 26.9417748 18.0173463 22.9707846 29.6688177 16.4295126 29.6688177 10.5321277 24.9216504 7.92742184 18.0321077 3.99030785%22%3E%3C%2Fpolyline%3E%0D                %3Cpolyline id%3D%22Fill-4%22 fill%3D%22%23F38B00%22 points%3D%2211.3313965 0.0388840336 0.0535685039 6.71768066 0.0717505512 20.2811697 11.3313965 26.9417748 18.0166889 22.970061 7.35448694 16.4295126 7.35448694 10.5321277 18.0324642 3.98991663%22%3E%3C%2Fpolyline%3E%0D                %3Cpolyline id%3D%22Fill-5%22 fill%3D%22%23004B70%22 points%3D%2218.017374 22.9708988 11.4990488 18.9719838 18.0212495 15.1272387 24.9510827 19.0786297%22%3E%3C%2Fpolyline%3E%0D                %3Cpolyline id%3D%22Fill-6%22 fill%3D%22%2398441E%22 points%3D%2218.0314053 3.98921729 11.5267517 7.97364692 18.0439938 11.8578324 24.9058951 7.91831944%22%3E%3C%2Fpolyline%3E%0D            %3C%2Fg%3E%0D        %3C%2Fg%3E%0D    %3C%2Fg%3E%0D%3C%2Fsvg%3E%0D\\\"); }\\n\\n.clr-icon.lili-icon {\\n  background-image: url(\\\"data:image/svg+xml,%3C%3Fxml version%3D%221.0%22 encoding%3D%22utf-8%22%3F%3E%0D%3C!-- Generator%3A Adobe Illustrator 17.0.0%2C SVG Export Plug-In . SVG Version%3A 6.00 Build 0)  --%3E%0D%3C!DOCTYPE svg PUBLIC %22-%2F%2FW3C%2F%2FDTD SVG 1.1%2F%2FEN%22 %22http%3A%2F%2Fwww.w3.org%2FGraphics%2FSVG%2F1.1%2FDTD%2Fsvg11.dtd%22%3E%0D%3Csvg version%3D%221.1%22 id%3D%22Layer_1%22 xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22 xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22 x%3D%220px%22 y%3D%220px%22%0D%09 width%3D%22500px%22 height%3D%22500px%22 viewBox%3D%220 0 500 500%22 enable-background%3D%22new 0 0 500 500%22 xml%3Aspace%3D%22preserve%22%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M495.588%2C231.151c-0.266-4.598-2.366-9.578-5.022-14.22c-2.669-4.686-6.036-9.127-9.563-13.448%0D%09c-3.539-4.311-13.26-14.166-13.26-14.166l-7.722-6.463l-3.228-2.499c-4.37-3.456-9.152-6.893-13.879-10.191l-3.182-2.068%0D%09l-11.027-4.521c-2.577-0.848-5.297-1.424-7.995-2.053c-2.748-0.503-5.502-1.068-8.285-1.423c-2.735-0.426-5.647-0.747-8.534-1.069%0D%09l-8.563-0.771l-17.316-1.515c-5.74-0.516-11.399-0.73-17.038-0.765l-4.184%2C0.173l-8.07%2C0.746c-1.398%2C0.266-6.151%2C1.299-6.151%2C1.299%0D%09l-5.369%2C2.289l-3.558%2C1.904l-1.732%2C1.002c-0.579%2C0.336-4.13%2C2.809-4.13%2C2.809l-4.569%2C3.437c-2.303%2C1.745-4.617%2C3.484-6.871%2C5.253%0D%09c-4.515%2C3.533-8.92%2C7.162-12.857%2C11.102l-2.807%2C2.963l-2.779%2C3.354l-2.268%2C3.244c-0.622%2C1.075-1.189%2C2.166-1.792%2C3.248l-0.724%2C3.971%0D%09c-0.151%2C1.443-0.067%2C9.759-0.067%2C9.759l0.797%2C5.088l0.665%2C2.665l2.808%2C8.794l0.744%2C2.132c0.265%2C0.703%2C2.77%2C2.672%2C3.386%2C2.242%0D%09c0.241-0.168%2C12.832-11.453%2C23.144-12.276c14.948-1.193%2C30.502%2C0.373%2C46.828%2C7.745c13.873%2C6.264%2C27.705%2C11.207%2C38.197%2C17.753%0D%09c14.259%2C8.896%2C22.547%2C19.355%2C22.547%2C19.355s3.313-3.377%2C4.446-4.004l3.43-1.846c1.155-0.591%2C2.355-1.075%2C3.539-1.603%0D%09c0%2C0%2C6.001-2.444%2C7.216-2.896l3.664-1.31c1.226-0.426%2C7.444-2.219%2C7.444-2.219c1.249-0.341%2C2.51-0.605%2C3.766-0.913l3.775-0.891%0D%09l7.589-1.493l-0.259%2C0.047l3.564-1.028l3.839-1.47l-0.072%2C0.023l0.154-0.075l2.982-1.59l2.824-2.11c0%2C0%2C3.64-3.313%2C4.487-5.209%0D%09C495.418%2C235.55%2C495.728%2C233.434%2C495.588%2C231.151z%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M79.245%2C275.08c-6.34-0.319-36.902-12.218-59.284-17.525c-32.406-9.048-5.565-34.053%2C2.981-51.892%0D%09c1.792-2.748%2C3.634-5.5%2C5.473-8.266c1.84-2.764%2C3.664-5.546%2C5.468-8.345s3.589-5.619%2C5.347-8.461%0D%09c27.555-34.23%2C77.914-22.288%2C116.58-23.704c2.412%2C0.284%2C4.591%2C0.908%2C6.416%2C2.066c16.58%2C8.791%2C28.481%2C24.254%2C40.51%2C40.075%0D%09c2.406%2C3.165%2C4.816%2C6.343%2C7.258%2C9.459c2.009%2C2.735%2C3.383%2C5.566%2C4.225%2C8.45c0.844%2C2.884%2C1.309%2C5.831%2C1.05%2C8.766%0D%09c-0.306%2C3.468-7.051-1.481-16.114-3.45c-10.082-2.191-21.586-2.441-22.876-1.885c0%2C0-24.314%2C2.671-36.094%2C7.204%0D%09c-10.717%2C4.124-9.378%2C4.6-13.059%2C5.968c-2.115%2C0.787-4.978%2C2.05-10.261%2C4.965c-4.224%2C2.33-7.124%2C5-9.709%2C7.475%0D%09c-0.892%2C0.854-1.797%2C1.61-2.704%2C2.325c-1.721%2C1.356-3.451%2C2.556-5.122%2C3.977C94.084%2C256.743%2C79.924%2C275.133%2C79.245%2C275.08z%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M449.626%2C358.897c-0.192-3.336-0.392-6.729-0.614-10.116c-1.297-19.758-4.352-38.959-13.796-55.247%0D%09c-1.888-3.257-15.728-16.302-19.273-17.964c-13.221-6.195-21.108-10.309-27.686-13.468c-10.464-5.027-17.614-7.643-37.642-12.395%0D%09c-3.266-0.775-11.504-1.524-21.689-0.363c-7.933%2C0.904-12.958%2C5.389-14.076%2C5.802c-5.032%2C1.859%2C1.771%2C22.252%2C3.258%2C29.218%0D%09c1.487%2C6.967%2C12.298%2C73.331%2C12.854%2C79.232c0.613%2C6.493%2C1.544%2C13.717%2C3.103%2C16.937c2.343%2C4.844%2C1.098%2C3.419%2C3.719%2C6.903%0D%09c3.055%2C4.064%2C6.378%2C7.653%2C9.881%2C11.169c8.424%2C10.609%2C17.455%2C11.731%2C24.514%2C13.724c12.664%2C3.574%2C23.308%2C1.363%2C43.458%2C0.709%0D%09c5.452-0.975%2C23.517-0.917%2C26.745-4.43C450.692%2C400.749%2C451.172%2C376.831%2C449.626%2C358.897z%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M312.146%2C381.962c-7.323%2C8.294-12.349%2C18.284-17.29%2C28.032c-1.647%2C3.248-3.539%2C6.309-5.566%2C9.373%0D%09c-1.945%2C3.172-5.223%2C7.709-7.305%2C10.78c-2.083%2C3.071-5.294%2C6.61-7.573%2C9.516c-2.273%2C2.719-4.643%2C4.208-7.52%2C6.533%0D%09c-2.877%2C2.325-3.516%2C2.249-7.118%2C3.431c-3.248%2C1.56-5.97%2C2.279-9.325%2C2.64c-6.71%2C0.724-12.847-2.188-18.847-8.183%0D%09c-17.405-17.392-24.248-40.735-35.783-64.885c-1.435-2.954-4.516-11.119-5.718-14.103c-2.103-5.221-1.958-6.817-2.948-12.061%0D%09c-0.496-2.622-0.386-4.205-0.317-6.847c0.097-3.709%2C1.944-8.978%2C3.447-14.258c0.752-2.64%2C0.987-3.557%2C1.989-6.374%0D%09c8.841-41.552%2C24.574-77.892%2C72.066-67.741c2.934-0.578%2C7.485-1.789%2C10.504-2.864c16.416-1.958%2C20.111%2C10.248%2C24.617%2C23.921%0D%09c1.126%2C3.418%2C10.982%2C61.125%2C11.551%2C63.594c1.663%2C7.214%2C2.299%2C19.211%2C1.895%2C27.278C312.551%2C376.812%2C312.146%2C381.962%2C312.146%2C381.962z%0D%09%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M187.963%2C142.378c17.671%2C3.197%2C25.753%2C21.755%2C31.176%2C36.902c5.717%2C15.967%2C8.203%2C33.387%2C15.551%2C48.732%0D%09c1.03%2C2.15%2C9.192-0.775%2C8.477-2.271c-7.574-15.818-10.218-33.839-16.115-50.31c-5.524-15.429-14.398-33.184-32.138-36.393%0D%09C192.881%2C138.669%2C185.535%2C141.939%2C187.963%2C142.378z%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M200.685%2C142.401c-4.18%2C4.345-11.103%2C5.201-16.724%2C1.647c-19.728-15.461-22.941-38.421-24.735-59.735%0D%09c-1.506-6.183%2C5.419-7.039%2C9.648-3.617c15.498%2C12.041%2C28.331%2C29.87%2C30.317%2C50.937C200.088%2C137.54%2C200.685%2C142.401%2C200.685%2C142.401z%22%0D%09%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M311.472%2C140.563c-38.316%2C8.921-34.888%2C61.707-46.962%2C90.524c-0.646%2C1.543%2C7.444%2C0.741%2C8.368-1.462%0D%09c6.128-14.625%2C7.985-30.977%2C12.174-46.207c3.921-14.255%2C10.6-36.262%2C27.153-40.116C317.219%2C142.131%2C316.431%2C139.407%2C311.472%2C140.563%0D%09z%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M298.379%2C139.359c-0.227%2C4.016%2C2.026%2C6.805%2C5.272%2C8.156c3.263%2C1.446%2C7.516%2C1.419%2C11.219-0.627%0D%09c22.438-14.977%2C38.86-43.399%2C27.498-60.856c-9.379-15.671-23.166%2C11.761-32.22%2C29.728c-1.811%2C3.593-3.432%2C6.808-4.791%2C9.224%0D%09C301.55%2C132.758%2C298.379%2C139.359%2C298.379%2C139.359z%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M257.808%2C91.003c-2.738%2C18.404-1.574%2C7.65-2.656%2C24.084c-0.74%2C11.241-3.253%2C22.446-3.757%2C33.658%0D%09c-1.073%2C23.839%2C0.644%2C47.885-1.495%2C71.664c-0.113%2C1.246%2C8.243%2C0.328%2C8.477-2.271c1.976-21.981%2C0.642-44.249%2C1.296-66.29%0D%09c0.339-11.418%2C0.989-22.901%2C3.004-34.159c1.193-6.663%2C0.698-14.765%2C1.686-22.108C265.226%2C89.168%2C260.843%2C93.111%2C257.808%2C91.003z%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M258.408%2C127.95c-7.64-2.632-9.962-11.037-12.285-19.442c-2.849-19.608%2C8.291-74.432%2C19.545-57.777%0D%09c10.985%2C16.257%2C6.78%2C47.364-2.774%2C67.323C260.387%2C123.532%2C258.408%2C127.95%2C258.408%2C127.95z%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M175.975%2C394.934c-1.958%2C1.404-3.283%2C2.888-5.518%2C4.266c-4.057%2C2.501-7.219%2C4.123-10.305%2C5.413%0D%09c-5.145%2C2.15-8.376%2C4.035-18.321%2C5.885c-2.964%2C0.551-16.134%2C1.1-19.176%2C1.381c-3.043%2C0.279-8.478%2C1.193-11.229%2C1.936%0D%09c-8.722%2C2.903-17.393%2C6.932-24.902%2C9.786c-6.828%2C2.594-12.754%2C4.379-15.707%2C0.322c-4.588-5.794-3.443-14.568-2.26-23.303%0D%09c1.449-10.704%2C3.639-21.096%2C3.807-22.724c0.848-8.212%2C0.51-7.813%2C0.841-16.974c0.11-3.054-0.307-29.267%2C0.038-32.156%0D%09c2.511-15.26%2C6.591-23.669%2C12.345-31.553c4.301-5.895%2C8.991-11.887%2C17.63-18.107c2.899-2.087%2C15.943-12.468%2C19.143-13.957%0D%09c3.75-1.973%2C9.132-4.85%2C13.154-6.376c2.975-1.17%2C16.877-6.005%2C20.111-6.665c10.395-2.001%2C19.78-4.371%2C30.914-2.909%0D%09c3.715%2C0.488%2C16.86%2C2.776%2C17.012%2C6.436c0.221%2C5.307-15.668%2C15.473-20.169%2C26.307c-6.698%2C16.118-9.727%2C20.96-14.305%2C44.897%0D%09c-1.575%2C8.237-4.004%2C15.889-5.565%2C23.005C159.979%2C365.95%2C178.633%2C392.767%2C175.975%2C394.934z%22%2F%3E%0D%3C%2Fsvg%3E%0D\\\"); }\\n\\n.alert-icon, .clr-icon {\\n  display: inline-block;\\n  height: 30px;\\n  width: 30px;\\n  padding: 0;\\n  background-repeat: no-repeat;\\n  background-size: contain;\\n  vertical-align: middle; }\\n\\n.sidenav-content {\\n  position: relative;\\n  padding-bottom: 50px; }\\n\\n.colophon {\\n  font-size: x-small;\\n  padding: 5px;\\n  bottom: 2px;\\n  position: absolute;\\n  vertical-align: bottom;\\n  height: 50px;\\n  line-height: 1.5em; }\\n\\n@media only screen and (max-height: 450px) {\\n  .colophon {\\n    display: none; } }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.scss\n// module id = ./src/app/app.component.scss\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { StudyService } from './studies/study.service';\r\nimport { SampleService } from './samples/sample.service';\r\nimport { AnalysisBatchService } from './analysis-batches/analysis-batch.service'\r\nimport { SampleTypeService } from './SHARED/sample-type.service';\r\nimport { FilterTypeService } from './SHARED/filter-type.service';\r\nimport { MatrixService } from './SHARED/matrix.service';\r\nimport { UnitService } from './units/unit.service';\r\nimport { UserService } from './SHARED/user.service';\r\nimport { TargetService } from './targets/target.service';\r\nimport { ExtractionMethodService } from './extraction-batches/extraction-method.service';\r\nimport { ConcentrationTypeService } from './concentration-types/concentration-types.service';\r\nimport { ServerTestService } from './SHARED/server-test.service';\r\nimport { AuthenticationService } from './authentication/authentication.service';\r\n\r\nimport { APP_SETTINGS } from './app.settings';\r\nimport { CurrentUserService } from './authentication/current-user.service';\r\n\r\n@Component({\r\n    selector: 'my-app',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.scss'],\r\n    providers: [\r\n        StudyService,\r\n        SampleService,\r\n        AnalysisBatchService\r\n    ]\r\n})\r\nexport class AppComponent implements OnInit {\r\n    servicesFailFlag: boolean = false;\r\n\r\n    public liliVersion: string = '';\r\n\r\n    currentUser;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private _serverTestService: ServerTestService,\r\n        public authenticationService: AuthenticationService,\r\n        public currentUserService: CurrentUserService\r\n    ) {\r\n\r\n        currentUserService.currentUser.subscribe(user => {\r\n            this.currentUser = user\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.liliVersion = APP_SETTINGS.VERSION;\r\n\r\n        this._serverTestService.testLIDEServices()\r\n            .subscribe(\r\n                (response) => {\r\n                    // console.log(response);\r\n                },\r\n                error => {\r\n                    console.log(error);\r\n                    this.servicesFailFlag = true;\r\n                }\r\n            );\r\n\r\n\r\n\r\n        if ((!!sessionStorage.getItem('username') && !!sessionStorage.getItem('password'))) {\r\n\r\n            this.currentUserService.updateCurrentUser({\r\n                \"first_name\": sessionStorage.getItem('first_name'),\r\n                \"last_name\": sessionStorage.getItem('last_name')\r\n            });\r\n\r\n        } else {\r\n            this.currentUserService.updateCurrentUser({\r\n                \"first_name\": \"Logged Out\",\r\n                \"last_name\": \"\"\r\n            });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onLogout() {\r\n        this.authenticationService.logout();\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpModule } from '@angular/http';\r\nimport { ClarityModule } from 'clarity-angular';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { ROUTING } from \"./app.routing\";\r\nimport { HomeComponent } from \"./home/home.component\";\r\nimport { StudiesComponent } from './studies/studies.component';\r\nimport { SamplesComponent } from './samples/samples.component';\r\nimport { AnalysisBatchesComponent } from './analysis-batches/analysis-batches.component';\r\nimport { ResultsComponent } from './results/results.component';\r\nimport { ReportsComponent } from './reports/reports.component';\r\n\r\nimport { AdminComponent } from './admin/admin.component';\r\nimport { DisplayValuePipe } from './SHARED/display-value.pipe';\r\nimport { StudyFilter } from './FILTERS/study-filter/study-filter.component';\r\nimport { SampleTypeFilter } from './FILTERS/sample-type-filter/sample-type-filter.component';\r\nimport { MatrixTypeFilter } from './FILTERS/matrix-type-filter/matrix-type-filter.component';\r\nimport { SamplerNameFilter } from './FILTERS/sampler-name-filter/sampler-name-filter.component';\r\nimport { FilterTypeFilter } from './FILTERS/filter-type-filter/filter-type-filter.component';\r\nimport { RangeFilter } from './FILTERS/range-filter/range-filter.component';\r\nimport { CollectionStartDateFilter } from './FILTERS/collection-start-date-filter/collection-start-date-filter.component';\r\nimport { CollectionEndDateFilter } from './FILTERS/collection-end-date-filter/collection-end-date-filter.component';\r\nimport { FilterBornOnDateFilter } from './FILTERS/filter-born-on-date-filter/filter-born-on-date-filter.component';\r\nimport { DateAddedFilter } from './FILTERS/date-added-filter/date-added-filter.component';\r\nimport { DateUpdatedFilter } from './FILTERS/date-updated-filter/date-updated-filter.component';\r\nimport { AnalysisBatchDetailComponent } from './analysis-batches/analysis-batch-detail/analysis-batch-detail.component';\r\nimport { ConcentrationTypesComponent } from './admin/concentration-types/concentration-types.component';\r\nimport { ConcentrationResolve } from \"./concentration-types/concentration-types.resolve\";\r\nimport { ConcentrationTypeService } from \"./concentration-types/concentration-types.service\";\r\nimport { UnitsComponent } from './admin/units/units.component';\r\nimport { ExtractionMethodsComponent } from './admin/extraction-methods/extraction-methods.component';\r\nimport { MatrixTypesComponent } from './admin/matrix-types/matrix-types.component';\r\nimport { SampleTypesComponent } from './admin/sample-types/sample-types.component';\r\nimport { FilterTypesComponent } from './admin/filter-types/filter-types.component';\r\nimport { TargetsComponent } from './admin/targets/targets.component';\r\nimport { UsersComponent } from './admin/users/users.component';\r\nimport { UnitResolve } from \"./units/unit.resolve\";\r\nimport { UnitService } from \"./units/unit.service\";\r\nimport { ExtractionMethodService } from \"./extraction-batches/extraction-method.service\";\r\nimport { ExtractionResolve } from \"./extraction-batches/extraction-method.resolve\";\r\nimport { FilterTypeService } from \"./SHARED/filter-type.service\";\r\nimport { FilterResolve } from \"./SHARED/filter-type.resolve\";\r\nimport { MatrixResolve } from \"./SHARED/matrix.resolve\";\r\nimport { MatrixService } from \"./SHARED/matrix.service\";\r\nimport { SampleTypeResolve } from \"./SHARED/sample-type.resolve\";\r\nimport { SampleTypeService } from \"./SHARED/sample-type.service\";\r\nimport { TargetService } from \"./targets/target.service\";\r\nimport { TargetResolve } from \"./targets/target.resolve\";\r\nimport { UserService } from \"./SHARED/user.service\";\r\nimport { UserResolve } from \"./SHARED/user.resolve\";\r\nimport { AnalysisBatchWorksheetComponent } from './analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component';\r\nimport { InhibitionService } from \"./inhibitions/inhibition.service\";\r\nimport { ExtractionBatchService } from \"app/extraction-batches/extraction-batch.service\";\r\nimport { PcrReplicateBatchService } from \"app/pcr-replicates/pcr-replicate-batch.service\";\r\nimport { FinalConcentratedSampleVolumeService } from \"app/fcsv/final-concentrated-sample-volume.service\";\r\nimport { AliquotService } from \"app/aliquots/aliquot.service\";\r\nimport { FreezerLocationsService } from \"app/aliquots/freezer-locations.service\";\r\nimport { FreezerService } from \"app/aliquots/freezer.service\";\r\nimport { SampleLabelComponent } from \"./samples/sample-label/sample-label.component\";\r\nimport { PcrReplicateService } from \"./pcr-replicates/pcr-replicate.service\";\r\nimport { ServerTestService } from \"./SHARED/server-test.service\";\r\nimport { RecordTypeFilter } from './FILTERS/record-type-filter/record-type-filter.component';\r\nimport { RecordTypeService } from \"./SHARED/record-type.service\";\r\nimport { MultiStudyFilterComponent } from './FILTERS/multi-study-filter/multi-study-filter.component';\r\nimport { DataUploadComponent } from './data-upload/data-upload.component';\r\nimport { FinalSampleMeanConcentrationService } from \"./results/final-sample-mean-concentration.service\";\r\nimport { AuthenticationComponent } from './authentication/authentication.component';\r\nimport { AuthenticationService } from \"./authentication/authentication.service\";\r\nimport { AuthenticationGuard } from \"./authentication/authentication.guard\";\r\nimport { CurrentUserService } from \"./authentication/current-user.service\";\r\nimport { TargetFilter } from './FILTERS/target-filter/target-filter.component';\r\nimport { ReverseTranscriptionService } from \"./SHARED/reverse-transcription.service\";\r\nimport { QualityControlReportService } from \"./reports/quality-control-report.service\";\r\nimport { ControlResultsReportService } from \"./reports/control-results-report.service\";\r\nimport { ReportFileService } from \"./reports/report-file.service\";\r\nimport { ReportTypesService } from \"./reports/report-types.service\";\r\nimport { ReportStatusService } from \"./reports/report-status.service\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        HomeComponent,\r\n        StudiesComponent,\r\n        SamplesComponent,\r\n        AnalysisBatchesComponent,\r\n        ResultsComponent,\r\n        ReportsComponent,\r\n        AdminComponent,\r\n        DisplayValuePipe,\r\n        StudyFilter,\r\n        SampleTypeFilter,\r\n        MatrixTypeFilter,\r\n        SamplerNameFilter,\r\n        FilterTypeFilter,\r\n        RangeFilter,\r\n        CollectionStartDateFilter,\r\n        CollectionEndDateFilter,\r\n        FilterBornOnDateFilter,\r\n        DateAddedFilter,\r\n        DateUpdatedFilter,\r\n        AnalysisBatchDetailComponent,\r\n        ConcentrationTypesComponent,\r\n        UnitsComponent,\r\n        ExtractionMethodsComponent,\r\n        MatrixTypesComponent,\r\n        SampleTypesComponent,\r\n        FilterTypesComponent,\r\n        TargetsComponent,\r\n        UsersComponent,\r\n        AnalysisBatchWorksheetComponent,\r\n        SampleLabelComponent,\r\n        RecordTypeFilter,\r\n        MultiStudyFilterComponent,\r\n        DataUploadComponent,\r\n        AuthenticationComponent,\r\n        TargetFilter\r\n    ],\r\n    imports: [\r\n        BrowserAnimationsModule,\r\n        BrowserModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        HttpModule,\r\n        ClarityModule.forRoot(),\r\n        ROUTING\r\n    ],\r\n    providers: [\r\n        AuthenticationService,\r\n        ConcentrationTypeService,\r\n        ConcentrationResolve,\r\n        UnitService,\r\n        UnitResolve,\r\n        InhibitionService,\r\n        ExtractionMethodService,\r\n        ExtractionBatchService,\r\n        AliquotService,\r\n        FreezerService,\r\n        FreezerLocationsService,\r\n        ExtractionResolve,\r\n        FilterTypeService,\r\n        PcrReplicateBatchService,\r\n        PcrReplicateService,\r\n        FinalConcentratedSampleVolumeService,\r\n        FilterResolve,\r\n        MatrixService,\r\n        MatrixResolve,\r\n        SampleTypeService,\r\n        SampleTypeResolve,\r\n        TargetService,\r\n        TargetResolve,\r\n        UserService,\r\n        UserResolve,\r\n        ServerTestService,\r\n        RecordTypeService,\r\n        FinalSampleMeanConcentrationService,\r\n        QualityControlReportService,\r\n        ControlResultsReportService,\r\n        ReverseTranscriptionService,\r\n        AuthenticationGuard,\r\n        CurrentUserService,\r\n        ReportFileService,\r\n        ReportTypesService,\r\n        ReportStatusService\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","/*\r\n * Copyright (c) 2016 VMware, Inc. All Rights Reserved.\r\n * This software is released under MIT license.\r\n * The full license information can be found in LICENSE in the root directory of this project.\r\n */\r\nimport { ModuleWithProviders } from '@angular/core/src/metadata/ng_module';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { AuthenticationComponent } from './authentication/authentication.component';\r\nimport { AuthenticationGuard } from './authentication/authentication.guard';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { StudiesComponent } from './studies/studies.component';\r\nimport { SamplesComponent } from './samples/samples.component';\r\nimport { AnalysisBatchesComponent } from './analysis-batches/analysis-batches.component'\r\nimport { ResultsComponent } from './results/results.component';\r\nimport { ReportsComponent } from './reports/reports.component';\r\nimport { AdminComponent } from './admin/admin.component';\r\nimport { ConcentrationResolve } from './concentration-types/concentration-types.resolve';\r\nimport { UnitResolve } from './units/unit.resolve';\r\nimport { ExtractionResolve } from './extraction-batches/extraction-method.resolve';\r\nimport { FilterResolve } from './SHARED/filter-type.resolve';\r\nimport { MatrixResolve } from './SHARED/matrix.resolve';\r\nimport { SampleTypeResolve } from './SHARED/sample-type.resolve';\r\nimport { TargetResolve } from './targets/target.resolve';\r\nimport { UserResolve } from './SHARED/user.resolve';\r\nimport { AnalysisBatchWorksheetComponent } from './analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component';\r\nimport { DataUploadComponent } from './data-upload/data-upload.component';\r\n\r\n\r\nexport const ROUTES: Routes = [\r\n    { path: 'login', component: AuthenticationComponent },\r\n    { path: '', redirectTo: 'login', pathMatch: 'full' },\r\n    { path: 'home', component: HomeComponent, canActivate: [AuthenticationGuard] },\r\n    { path: 'studies', component: StudiesComponent, canActivate: [AuthenticationGuard] },\r\n    { path: 'samples', component: SamplesComponent, canActivate: [AuthenticationGuard] },\r\n    { path: 'analysisbatches', component: AnalysisBatchesComponent, canActivate: [AuthenticationGuard] },\r\n    { path: 'analysisbatchworksheet/:id', component: AnalysisBatchWorksheetComponent, canActivate: [AuthenticationGuard] },\r\n    { path: 'dataupload', component: DataUploadComponent, canActivate: [AuthenticationGuard] },\r\n    { path: 'results', component: ResultsComponent, canActivate: [AuthenticationGuard] },\r\n    { path: 'reports', component: ReportsComponent, canActivate: [AuthenticationGuard] },\r\n    {\r\n        path: 'admin',\r\n        component: AdminComponent,\r\n        canActivate: [AuthenticationGuard],\r\n        resolve: {\r\n            concentrationTypes: ConcentrationResolve,\r\n            units: UnitResolve,\r\n            extractionMethods: ExtractionResolve,\r\n            filterTypes: FilterResolve,\r\n            matrixTypes: MatrixResolve,\r\n            sampleTypes: SampleTypeResolve,\r\n            targets: TargetResolve,\r\n            users: UserResolve\r\n        }\r\n    }\r\n];\r\n\r\nexport const ROUTING: ModuleWithProviders = RouterModule.forRoot(ROUTES);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.routing.ts","import { Injectable } from '@angular/core';\r\nimport { Headers } from '@angular/http';\r\nimport { environment } from 'environments/environment';\r\n\r\n@Injectable()\r\nexport class APP_SETTINGS {\r\n\r\n    private static _environment: string = 'development';\r\n    private static production: boolean = false;\r\n    private static _API_ENDPOINT: string = APP_SETTINGS._environment === 'production' ? 'https://lidedev.wim.usgs.gov/api/' : 'https://lidedev.wim.usgs.gov/api/';\r\n    // private static _API_ENDPOINT: string = APP_SETTINGS._environment === 'production' ? 'https://lidetest.wim.usgs.gov/lideservices/' : 'https://lidetest.wim.usgs.gov/lideservices/';\r\n    public static set environment(env: string) { this._environment = env };\r\n    public static get API_USERNAME(): string { return 'admin' };\r\n    public static get API_PASSWORD(): string { return 'lideadmin' };\r\n\r\n    public static get IS_LOGGEDIN(): boolean { return (!!sessionStorage.getItem('username') && !!sessionStorage.getItem('password')); };\r\n\r\n    public static get QUERY_COUNT_LIMIT(): number { return 2000 };\r\n\r\n    public static get ROOT_URL(): string { return this._API_ENDPOINT };\r\n    public static get AUTH_URL(): string { return this._API_ENDPOINT + 'auth/' };\r\n    public static get STUDIES_URL(): string { return this._API_ENDPOINT + 'studies/' };\r\n    public static get SAMPLES_URL(): string { return this._API_ENDPOINT + 'samples/' };\r\n    public static get FREEZERS_URL(): string { return this._API_ENDPOINT + 'freezers/' };\r\n    public static get FREEZER_LOCATIONS_URL(): string { return this._API_ENDPOINT + 'freezerlocations/' };\r\n    public static get ALIQUOTS_URL(): string { return this._API_ENDPOINT + 'aliquots/' };\r\n    public static get SAMP_TYPES_URL(): string { return this._API_ENDPOINT + 'sampletypes/' };\r\n    public static get MATRICES_URL(): string { return this._API_ENDPOINT + 'matrices/' };\r\n    public static get SAMPLE_ENV_URL(): string { return this._API_ENDPOINT + 'sampleenvironments/' };\r\n    public static get UNITS_URL(): string { return this._API_ENDPOINT + 'units/' };\r\n    public static get SAMP_LOC_URL(): string { return this._API_ENDPOINT + 'samplelocations/' };\r\n    public static get FCSV_URL(): string { return this._API_ENDPOINT + 'finalconcentratedsamplevolumes/' };\r\n    public static get FILTER_TYPES_URL(): string { return this._API_ENDPOINT + 'filtertypes/' };\r\n    public static get RECORD_TYPES_URL(): string { return this._API_ENDPOINT + 'recordtypes/' };\r\n    public static get WATER_TYPES_URL(): string { return this._API_ENDPOINT + 'watertypes/' };\r\n    public static get ANALYSIS_BATCH_URL(): string { return this._API_ENDPOINT + 'analysisbatches/' };\r\n    public static get ANALYSIS_BATCH_DETAIL_URL(): string { return this._API_ENDPOINT + 'analysisbatchdetail/' };\r\n    public static get ANALYSIS_BATCH_SUMMARY_URL(): string { return this._API_ENDPOINT + 'analysisbatchsummary/' };\r\n    public static get EXTRACTIONS_URL(): string { return this._API_ENDPOINT + 'sampleextractions/'; };\r\n    public static get EXTRACTION_BATCHES_URL(): string { return this._API_ENDPOINT + 'extractionbatches/' };\r\n    public static get EXTRACTION_METHODS_URL(): string { return this._API_ENDPOINT + 'extractionmethods/' };\r\n    public static get INHIBITIONS_URL(): string { return this._API_ENDPOINT + 'inhibitions/' };\r\n    public static get SAMPLE_INHIBITIONS_URL(): string { return this._API_ENDPOINT + 'sampleinhibitions' };\r\n    public static get INHIBITIONS_RAW_RESULTS_URL(): string { return this._API_ENDPOINT + 'inhibitionscalculatedilutionfactor/' };\r\n    public static get CONCENTRATION_TYPES_URL(): string { return this._API_ENDPOINT + 'concentrationtype/' };\r\n    public static get RT_URL(): string { return this._API_ENDPOINT + 'reversetranscriptions/' };\r\n    public static get REPLICATES_URL(): string { return this._API_ENDPOINT + 'pcrreplicates/' };\r\n    public static get REPLICATE_BATCH_URL(): string { return this._API_ENDPOINT + 'pcrreplicatebatches/' };\r\n    public static get STANDARD_CURVES_URL(): string { return this._API_ENDPOINT + 'standardcurves/' };\r\n    public static get TARGETS_URL(): string { return this._API_ENDPOINT + 'targets/' };\r\n    public static get CONTROLS_URL(): string { return this._API_ENDPOINT + 'controls/' };\r\n    public static get OTHER_ANALYSES_URL(): string { return this._API_ENDPOINT + 'otheranalyses/' };\r\n    public static get USERS_URL(): string { return this._API_ENDPOINT + 'users/' };\r\n    public static get FINALSAMPLEMEANCONCENTRATIONS_URL(): string { return this._API_ENDPOINT + 'finalsamplemeanconcentrations/' };\r\n    public static get QUALITY_CONTROL_REPORT_URL(): string { return this._API_ENDPOINT + 'qualitycontrolreport/' };\r\n    public static get CONTROL_RESULTS_REPORT_URL(): string { return this._API_ENDPOINT + 'controlresultsreport/' };\r\n    public static get REPORT_FILES_URL(): string { return this._API_ENDPOINT + 'reportfiles/' };\r\n    public static get REPORT_TYPES_URL(): string { return this._API_ENDPOINT + 'reporttypes/' };\r\n    public static get REPORT_STATUSES_URL(): string { return this._API_ENDPOINT + 'statuses/' };\r\n\r\n    public static get VERSION() {\r\n        // return require('../../package.json').version\r\n        return environment.version;\r\n    }\r\n\r\n    public static get NUCLEIC_ACID_TYPES() {\r\n        return [\r\n            { \"id\": 1, \"name\": \"DNA\" },\r\n            { \"id\": 2, \"name\": \"RNA\" }\r\n        ]\r\n    };\r\n\r\n    public static get SAMPLE_RECORD_TYPES() {\r\n        return [\r\n            { \"id\": 1, \"name\": \"Data\" },\r\n            { \"id\": 2, \"name\": \"Control\" }\r\n        ]\r\n    };\r\n\r\n    public static get PEGNEG_FIELD_VALUES() {\r\n        return {\r\n            \"study\": 1,\r\n            \"matrix\": 1,\r\n            // \"filter_type\": 8,\r\n            \"sample_type\": 4,\r\n            // \"collection_start_time\": '00:00',\r\n            // \"collection_end_time\": '00:00'\r\n        }\r\n    }\r\n\r\n    public static get MIN_JSON_HEADERS() { return new Headers({ 'Accept': 'application/json' }) };\r\n    public static get JSON_HEADERS() { return new Headers({ 'Accept': 'application/json', 'Content-Type': 'application/json' }) };\r\n\r\n    public static get AUTH_HEADERS() {\r\n        return new Headers({\r\n            'Authorization': 'Basic ' +\r\n                btoa(sessionStorage.getItem('username') + ':' + sessionStorage.getItem('password'))\r\n        })\r\n    };\r\n    public static get MIN_AUTH_JSON_HEADERS() {\r\n        return new Headers({\r\n            'Authorization': 'Basic ' + btoa(sessionStorage.getItem('username') + ':' + sessionStorage.getItem('password')),\r\n            'Accept': 'application/json'\r\n        }\r\n        )\r\n    };\r\n    public static get AUTH_JSON_HEADERS() {\r\n        return new Headers({\r\n            'Authorization': 'Basic ' + btoa(sessionStorage.getItem('username') + ':' + sessionStorage.getItem('password')),\r\n            'Accept': 'application/json', 'Content-Type': 'application/json'\r\n        }\r\n        )\r\n    };\r\n\r\n    // public static get WATER_MATRIX_ID() {\r\n    //     return 1;\r\n    // }\r\n\r\n    // public static get ULTRAFILTER_FILTER_TYPE_ID() {\r\n    //     return 8;\r\n    // }\r\n\r\n    // public static get QC_SAMPLE_TYPE_ID() {\r\n    //     return 4;\r\n    // }\r\n\r\n    // line below is for headers stored in local storage. todo: revisit and implement this\r\n    // public static get AUTH_HEADERS() { return new Headers({ 'Authorization': 'Basic ' + btoa(sessionStorage.getItem('username') + ':' + sessionStorage.getItem('password'))}) };\r\n    // public static get AUTH_HEADERS() {\r\n    //     return new Headers({\r\n    //         'Authorization': 'Basic ' + btoa(this.API_USERNAME + ':' + this.API_PASSWORD)\r\n    //     });\r\n    // };\r\n    public static get ADMIN_MIN_AUTH_JSON_HEADERS() {\r\n        return new Headers({\r\n            'Authorization': 'Basic ' + btoa(this.API_USERNAME + ':' + this.API_PASSWORD),\r\n            'Accept': 'application/json'\r\n        }\r\n        );\r\n    };\r\n    public static get ADMIN_AUTH_JSON_HEADERS() {\r\n        return new Headers({\r\n            'Authorization': 'Basic ' + btoa(this.API_USERNAME + ':' + this.API_PASSWORD),\r\n            'Accept': 'application/json', 'Content-Type': 'application/json'\r\n        }\r\n        );\r\n    };\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.settings.ts","import { Injectable } from '@angular/core';\r\n\r\nimport { IAnalysisBatchSummary } from './analysis-batches/analysis-batch-summary';\r\nimport { IAnalysisBatch } from './analysis-batches/analysis-batch';\r\nimport { ITarget } from './targets/target';\r\n\r\n@Injectable()\r\nexport class APP_UTILITIES {\r\n\r\n    public static get TODAY(): string { return new Date().toISOString().substr(0, 10); }\r\n\r\n    public static get TIME(): string { return new Date().toISOString().substr(14, 22); }\r\n\r\n    // SAMPLE_FORM_CONFIG is the config JSON object for the sample form, based on matrix selection\r\n    // object keys match the matrix ID\r\n    public static get SAMPLE_FORM_CONFIG(): Object {\r\n        return {\r\n            \"6\": { // air\r\n                \"matrix\": false,\r\n                \"study\": false,\r\n                \"sample_type\": false,\r\n                \"collaborator_sample_id\": false,\r\n                \"filter_flag\": false,\r\n                \"secondary_concentration_flag\": false,\r\n                \"study_site_name\": false,\r\n                \"sample_description\": false,\r\n                \"sampler_name\": false,\r\n                \"sample_notes\": false,\r\n                \"arrival_date\": false,\r\n                \"arrival_notes\": false,\r\n                \"collection_start_date\": false,\r\n                \"collection_start_time\": false,\r\n                \"collection_end_date\": false,\r\n                \"collection_end_time\": false,\r\n                \"meter_reading_initial\": true,\r\n                \"meter_reading_final\": true,\r\n                \"meter_reading_unit\": true,\r\n                \"total_volume_sampled_initial\": false,\r\n                \"total_volume_sampled_unit_initial\": false,\r\n                \"post_dilution_volume\": true,\r\n                \"filter_type\": false,\r\n                \"filter_born_on_date\": true,\r\n                \"dissolution_volume\": false,\r\n                \"elution_notes\": true,\r\n                \"technician_initials\": true,\r\n                \"sample_volume_initial\": true\r\n            },\r\n            \"4\": { // Forage or sediment\r\n                \"matrix\": false,\r\n                \"study\": false,\r\n                \"sample_type\": false,\r\n                \"collaborator_sample_id\": false,\r\n                \"filter_flag\": false,\r\n                \"secondary_concentration_flag\": false,\r\n                \"study_site_name\": false,\r\n                \"sample_description\": false,\r\n                \"sampler_name\": false,\r\n                \"sample_notes\": false,\r\n                \"arrival_date\": false,\r\n                \"arrival_notes\": false,\r\n                \"collection_start_date\": false,\r\n                \"collection_start_time\": true,\r\n                \"collection_end_date\": true,\r\n                \"collection_end_time\": true,\r\n                \"meter_reading_initial\": true,\r\n                \"meter_reading_final\": true,\r\n                \"meter_reading_unit\": true,\r\n                \"total_volume_sampled_initial\": false,\r\n                \"total_volume_sampled_unit_initial\": false,\r\n                \"post_dilution_volume\": true,\r\n                \"filter_type\": true,\r\n                \"filter_born_on_date\": true,\r\n                \"dissolution_volume\": true,\r\n                \"elution_notes\": false,\r\n                \"technician_initials\": false,\r\n                \"sample_volume_initial\": false\r\n            },\r\n            \"5\": {  // Liquid Manure\r\n                \"matrix\": false,\r\n                \"study\": false,\r\n                \"sample_type\": false,\r\n                \"collaborator_sample_id\": false,\r\n                \"filter_flag\": false,\r\n                \"secondary_concentration_flag\": false,\r\n                \"study_site_name\": false,\r\n                \"sample_description\": false,\r\n                \"sampler_name\": false,\r\n                \"sample_notes\": false,\r\n                \"arrival_date\": false,\r\n                \"arrival_notes\": false,\r\n                \"collection_start_date\": false,\r\n                \"collection_start_time\": true,\r\n                \"collection_end_date\": true,\r\n                \"collection_end_time\": true,\r\n                \"meter_reading_initial\": false,\r\n                \"meter_reading_final\": false,\r\n                \"meter_reading_unit\": false,\r\n                \"total_volume_sampled_initial\": false,\r\n                \"total_volume_sampled_unit_initial\": false,\r\n                \"post_dilution_volume\": true,\r\n                \"filter_type\": true,\r\n                \"filter_born_on_date\": true,\r\n                \"dissolution_volume\": true,\r\n                \"elution_notes\": true,\r\n                \"technician_initials\": true,\r\n                \"sample_volume_initial\": true\r\n            },\r\n            \"3\": { // Solid Manure\r\n                \"matrix\": false,\r\n                \"study\": false,\r\n                \"sample_type\": false,\r\n                \"collaborator_sample_id\": false,\r\n                \"filter_flag\": false,\r\n                \"secondary_concentration_flag\": false,\r\n                \"study_site_name\": false,\r\n                \"sample_description\": false,\r\n                \"sampler_name\": false,\r\n                \"sample_notes\": false,\r\n                \"arrival_date\": false,\r\n                \"arrival_notes\": false,\r\n                \"collection_start_date\": false,\r\n                \"collection_start_time\": true,\r\n                \"collection_end_date\": true,\r\n                \"collection_end_time\": true,\r\n                \"meter_reading_initial\": true,\r\n                \"meter_reading_final\": true,\r\n                \"meter_reading_unit\": true,\r\n                \"total_volume_sampled_initial\": false,\r\n                \"total_volume_sampled_unit_initial\": false,\r\n                \"post_dilution_volume\": false,\r\n                \"filter_type\": true,\r\n                \"filter_born_on_date\": true,\r\n                \"dissolution_volume\": true,\r\n                \"elution_notes\": true,\r\n                \"technician_initials\": true,\r\n                \"sample_volume_initial\": true\r\n            },\r\n            \"2\": { // wastewater\r\n                \"matrix\": false,\r\n                \"study\": false,\r\n                \"sample_type\": false,\r\n                \"collaborator_sample_id\": false,\r\n                \"filter_flag\": false,\r\n                \"secondary_concentration_flag\": false,\r\n                \"study_site_name\": false,\r\n                \"sample_description\": false,\r\n                \"sampler_name\": false,\r\n                \"sample_notes\": false,\r\n                \"arrival_date\": false,\r\n                \"arrival_notes\": false,\r\n                \"collection_start_date\": false,\r\n                \"collection_start_time\": false,\r\n                \"collection_end_date\": false,\r\n                \"collection_end_time\": false,\r\n                \"meter_reading_initial\": true,\r\n                \"meter_reading_final\": true,\r\n                \"meter_reading_unit\": true,\r\n                \"total_volume_sampled_initial\": false,\r\n                \"total_volume_sampled_unit_initial\": false,\r\n                \"post_dilution_volume\": true,\r\n                \"filter_type\": true,\r\n                \"filter_born_on_date\": true,\r\n                \"dissolution_volume\": true,\r\n                \"elution_notes\": true,\r\n                \"technician_initials\": true,\r\n                \"sample_volume_initial\": true\r\n            },\r\n            \"1\": { // water\r\n                \"matrix\": false,\r\n                \"study\": false,\r\n                \"sample_type\": false,\r\n                \"collaborator_sample_id\": false,\r\n                \"filter_flag\": false,\r\n                \"secondary_concentration_flag\": false,\r\n                \"study_site_name\": false,\r\n                \"sample_description\": false,\r\n                \"sampler_name\": false,\r\n                \"sample_notes\": false,\r\n                \"arrival_date\": false,\r\n                \"arrival_notes\": false,\r\n                \"collection_start_date\": false,\r\n                \"collection_start_time\": false,\r\n                \"collection_end_date\": false,\r\n                \"collection_end_time\": false,\r\n                \"meter_reading_initial\": false,\r\n                \"meter_reading_final\": false,\r\n                \"meter_reading_unit\": false,\r\n                \"total_volume_sampled_initial\": false,\r\n                \"total_volume_sampled_unit_initial\": false,\r\n                \"post_dilution_volume\": true,\r\n                \"filter_type\": false,\r\n                \"filter_born_on_date\": false,\r\n                \"dissolution_volume\": true,\r\n                \"elution_notes\": false,\r\n                \"technician_initials\": false,\r\n                \"sample_volume_initial\": false\r\n            }\r\n        }\r\n    }\r\n\r\n    public static mapOrder(array, order, key) {\r\n\r\n        array.sort(function (a, b) {\r\n            const A = a[key], B = b[key];\r\n\r\n            if (order.indexOf(A) > order.indexOf(B)) {\r\n                return 1;\r\n            } else {\r\n                return -1;\r\n            }\r\n\r\n        });\r\n\r\n        return array;\r\n    };\r\n\r\n\r\n    public static convertArrayOfObjectsToCSV(args: any) {\r\n        let result, counter, keys = [], columnDelimiter, lineDelimiter, data, headers, unorderedKeys;\r\n\r\n        headers = [];\r\n\r\n        data = args.data || null;\r\n        if (data == null || !data.length) {\r\n            return null;\r\n        }\r\n\r\n        columnDelimiter = args.columnDelimiter || ',';\r\n        lineDelimiter = args.lineDelimiter || '\\n';\r\n\r\n        unorderedKeys = Object.keys(data[0]);\r\n\r\n        args.headers.forEach(function (col) {\r\n            let found = false;\r\n            unorderedKeys = unorderedKeys.filter(function (item) {\r\n                if (!found && item === col.fieldName) {\r\n                    keys.push(item);\r\n                    found = true;\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            })\r\n        })\r\n\r\n        // put the headers array in the same order as the data keys\r\n        keys.forEach(function (item) {\r\n            const obj = args.headers.filter(function (o) {\r\n                return o.fieldName === item;\r\n            })[0];\r\n            if (obj) {\r\n                headers.push(obj.colName);\r\n            }\r\n\r\n        });\r\n\r\n        // remove keys that aren't in the headers array, ensuring those data columns won't be exported\r\n        // keys.forEach(function (item) {\r\n        //     if (headers.indexOf(item) < 0) {\r\n        //         let ndx = keys.indexOf(item);\r\n        //         keys.splice(ndx, 1);\r\n        //     }\r\n        // });\r\n        result = '';\r\n        result += (args.headers) ? headers.join(columnDelimiter) : keys.join(columnDelimiter);\r\n        result += lineDelimiter;\r\n\r\n        data.forEach(function (item) {\r\n            counter = 0;\r\n            keys.forEach(function (key) {\r\n                if (counter > 0) {\r\n                    result += columnDelimiter;\r\n                }\r\n                if (item[key] == null) {\r\n                    result += '';\r\n                } else if (typeof item[key] === 'string' && item[key].includes(',')) {\r\n                    result += '\"' + item[key] + '\"';\r\n                } else {\r\n                    result += item[key];\r\n                }\r\n                counter++;\r\n            });\r\n            result += lineDelimiter;\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public static generateCSV(args: any) {\r\n        let data, filename, link;\r\n        let csv = this.convertArrayOfObjectsToCSV({\r\n            data: args.data,\r\n            headers: args.headers\r\n        });\r\n        if (csv == null) { return; }\r\n\r\n        filename = args.filename || 'export.csv';\r\n\r\n        if (!csv.match(/^data:text\\/csv/i)) {\r\n            csv = 'data:text/csv;charset=utf-8,' + csv;\r\n        }\r\n        data = encodeURI(csv);\r\n\r\n        link = document.createElement('a');\r\n        link.setAttribute('href', data);\r\n        link.setAttribute('download', filename);\r\n        link.click();\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.utilities.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-4 col-md-6 col-sm-12 col-xs-12\\\">\\r\\n    <div class=\\\"card\\\">\\r\\n      <div class=\\\"card-block\\\">\\r\\n        <div class=\\\"card-text\\\">\\r\\n          <p>Welcome to\\r\\n            <span class=\\\"standoutMore\\\">lili</span>\\r\\n            <br>\\r\\n            <!-- <span class=\\\"standout\\\">L</span>aboratory for\\r\\n            <span class=\\\"standout\\\">I</span>nfectious Disease and Environment\\r\\n            <span class=\\\"standout\\\">L</span>aboratory\\r\\n            <span class=\\\"standout\\\">I</span>nformation Management System. -->\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"card-block\\\">\\r\\n        <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit(loginForm.value)\\\">\\r\\n          <label class=\\\"title\\\">\\r\\n            <h5 class=\\\"hint\\\">Please login</h5>\\r\\n          </label>\\r\\n          <p>\\r\\n            <div class=\\\"login-group\\\">\\r\\n              <input class=\\\"username\\\" type=\\\"text\\\" id=\\\"login_username\\\" placeholder=\\\"Username\\\" formControlName=\\\"username\\\">\\r\\n              <input class=\\\"password\\\" type=\\\"password\\\" id=\\\"login_password\\\" placeholder=\\\"Password\\\" formControlName=\\\"password\\\">\\r\\n            </div>\\r\\n            <p>\\r\\n\\r\\n            </p>\\r\\n            <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"authenticationErrorFlag\\\">\\r\\n              <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">Invalid username/password combination</span>\\r\\n              </div>\\r\\n            </clr-alert>\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Login</button>\\r\\n        </form>\\r\\n        <!-- <p>\\r\\n          <button class=\\\"btn btn-danger-outline\\\" (click)=\\\"onLogout()\\\">Logout</button> -->\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/authentication/authentication.component.html\n// module id = ./src/app/authentication/authentication.component.html\n// module chunks = main","module.exports = \".standout {\\n  font-size: x-large;\\n  font-weight: bold; }\\n\\n.standoutMore {\\n  font-size: xx-large;\\n  font-weight: bold; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/authentication/authentication.component.scss\n// module id = ./src/app/authentication/authentication.component.scss\n// module chunks = main","import { Component, Output, EventEmitter } from \"@angular/core\";\r\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthenticationService } from './authentication.service';\r\n\r\n@Component({\r\n  selector: 'app-authentication',\r\n  templateUrl: './authentication.component.html',\r\n  styleUrls: ['./authentication.component.scss']\r\n})\r\nexport class AuthenticationComponent {\r\n  loginForm: FormGroup;\r\n  authenticationErrorFlag: boolean = false;\r\n\r\n  constructor(formBuilder: FormBuilder, public authenticationService: AuthenticationService, public router: Router) {\r\n\r\n    this.loginForm = formBuilder.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n\r\n    });\r\n  }\r\n\r\n  onSubmit(formValue: any) {\r\n    if (sessionStorage.getItem('username')) {\r\n      this.authenticationService.logout();\r\n    }\r\n\r\n    this.authenticationService.login(formValue.username, formValue.password)\r\n      .subscribe(\r\n        (user: any) => {\r\n          this.router.navigateByUrl('home')\r\n        },\r\n        (error) => {\r\n          this.authenticationErrorFlag = true;\r\n        }\r\n      );\r\n  }\r\n\r\n  onLogout() {\r\n    this.authenticationService.logout();\r\n  }\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/authentication/authentication.component.ts","import {CanActivate} from '@angular/router';\r\nimport {APP_SETTINGS} from '../app.settings';\r\n\r\nexport class AuthenticationGuard implements CanActivate {\r\n    canActivate() {\r\n        return APP_SETTINGS.IS_LOGGEDIN;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/authentication/authentication.guard.ts","import { Injectable, Output } from '@angular/core';\r\nimport { Observable } from 'rxjs/Rx';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/observable/of';\r\nimport { Http, Response, Headers, RequestOptions, URLSearchParams } from '@angular/http';\r\nimport { Router } from '@angular/router';\r\nimport { APP_SETTINGS } from '../app.settings';\r\nimport { IUser } from '../SHARED/user'\r\nimport { EventEmitter } from 'events';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { CurrentUserService } from './current-user.service';\r\n\r\n@Injectable()\r\n\r\nexport class AuthenticationService {\r\n\r\n  user: IUser;\r\n\r\n  constructor(private _http: Http, private router: Router, private currentUserService: CurrentUserService) {\r\n\r\n  }\r\n\r\n  login(username: string, password: string) {\r\n    let options = new RequestOptions({ headers: new Headers({ \"Authorization\": \"Basic \" + btoa(username + \":\" + password) }) });\r\n\r\n    return this._http.post(APP_SETTINGS.AUTH_URL, null, options)\r\n      .map((res: any) => {\r\n        this.user = res.json();\r\n        if (this.user.is_staff) {\r\n          sessionStorage.setItem('username', username);\r\n          sessionStorage.setItem('password', password);\r\n          sessionStorage.setItem('first_name', this.user.first_name);\r\n          sessionStorage.setItem('last_name', this.user.last_name);\r\n          sessionStorage.setItem('email', this.user.email);\r\n          sessionStorage.setItem('is_staff', this.user.is_staff.toString());\r\n          // this.userLoggedIn$.emit(res);\r\n          // this.currentUser.emit(res);\r\n          this.currentUserService.updateCurrentUser(this.user);\r\n        } else {\r\n          // TODO: do something more professional here\r\n          alert('This user is not authorized!');\r\n        }\r\n      });\r\n\r\n  }\r\n\r\n  logout() {\r\n\r\n    this.router.navigate(['/login']);\r\n    // this.router.navigateByUrl('login');\r\n    this.user = undefined;\r\n    this.currentUserService.updateCurrentUser({\"first_name\": \"Logged Out\"});\r\n    sessionStorage.removeItem('username');\r\n    sessionStorage.removeItem('password');\r\n    sessionStorage.removeItem('first_name');\r\n    sessionStorage.removeItem('last_name');\r\n    sessionStorage.removeItem('email');\r\n    sessionStorage.removeItem('is_staff');\r\n    return Observable.of(true);\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/authentication/authentication.service.ts","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n\r\n@Injectable()\r\nexport class CurrentUserService {\r\n\r\n  private userSource = new BehaviorSubject('None');\r\n  currentUser = this.userSource.asObservable();\r\n\r\n  constructor() { }\r\n\r\n  updateCurrentUser(user: any) {\r\n    this.userSource.next(user)\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/authentication/current-user.service.ts","import { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { ConcentrationTypeService } from './concentration-types.service';\r\nimport { IConcentrationType } from './concentration-type';\r\n\r\n@Injectable()\r\nexport class ConcentrationResolve implements Resolve<Array<IConcentrationType>> {\r\n\r\n  constructor(private _concentrationService: ConcentrationTypeService) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot): Observable<Array<IConcentrationType>> {\r\n     return this._concentrationService.getConcentrationTypes();\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/concentration-types/concentration-types.resolve.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\nimport { IConcentrationType } from './concentration-type';\r\n\r\n@Injectable()\r\nexport class ConcentrationTypeService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  getConcentrationTypes(): Observable<IConcentrationType[]> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.get(APP_SETTINGS.CONCENTRATION_TYPES_URL, options)\r\n      .map((response: Response) => <IConcentrationType[]>response.json())\r\n      // .do(data => console.log('Sample types data: ' + JSON.stringify(data)))\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public create(formValue: IConcentrationType): Observable<IConcentrationType> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.AUTH_JSON_HEADERS });\r\n\r\n    return this._http.post(APP_SETTINGS.CONCENTRATION_TYPES_URL, formValue, options)\r\n      .map((response: Response) => <IConcentrationType>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public update(formValue: IConcentrationType): Observable<IConcentrationType> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.put(APP_SETTINGS.CONCENTRATION_TYPES_URL + formValue.id + '/', formValue, options)\r\n      .map((response: Response) => <IConcentrationType>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public delete(id: number): Observable<IConcentrationType> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.delete(APP_SETTINGS.CONCENTRATION_TYPES_URL + id, options)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/concentration-types/concentration-types.service.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-lg-10 col-md-10 col-sm-12 col-xs-12\\\">\\r\\n    <clr-tabs>\\r\\n\\r\\n      <!--Upload Replicate PCR File tab -->\\r\\n      <clr-tab>\\r\\n        <button clrTabLink>Upload Replicate PCR File</button>\\r\\n        <clr-tab-content active>\\r\\n\\r\\n          <div class=\\\"card-block\\\">\\r\\n            <div class=\\\"card-title\\\">\\r\\n              <clr-icon shape=\\\"upload\\\"></clr-icon> Upload Replicate PCR File\\r\\n            </div>\\r\\n            <p>\\r\\n              <div class=\\\"card-text\\\">\\r\\n                <span>File name convention: [Analysis Batch ID]-[Extraction number]-[Target code]-[Replicate\\r\\n                  number]</span>\\r\\n                <clr-tree-node>\\r\\n                  <clr-icon shape=\\\"search\\\"></clr-icon>\\r\\n                  Show Target Code List\\r\\n                  <ng-template clrIfExpanded>\\r\\n                    <ng-container>\\r\\n                      <clr-tree-node>\\r\\n                        <div class=\\\"row\\\">\\r\\n                          <div class=\\\"col-xs-12 col-md-12 col-lg-12 col-xl-12\\\">\\r\\n\\r\\n                            <table class=\\\"table table-vertical table-noborder table-compact\\\">\\r\\n                              <tbody>\\r\\n                                <tr *ngFor=\\\"let target of allTargets\\\">\\r\\n                                  <th>{{target.name}}</th>\\r\\n                                  <td>{{target.code}}</td>\\r\\n                                </tr>\\r\\n                              </tbody>\\r\\n                            </table>\\r\\n                          </div>\\r\\n                        </div>\\r\\n\\r\\n                      </clr-tree-node>\\r\\n                    </ng-container>\\r\\n                  </ng-template>\\r\\n                </clr-tree-node>\\r\\n                <p>\\r\\n                  <input id=\\\"targetFileInput\\\" type=\\\"file\\\" (change)=\\\"loadTargetFile($event)\\\" placeholder=\\\"Upload file\\\"\\r\\n                    accept=\\\"*\\\">\\r\\n                  <div class=\\\"alert alert-danger\\\" *ngIf=\\\"targetFileNameErrorFlag\\\">\\r\\n                    <div class=\\\"alert-items\\\">\\r\\n                      <div class=\\\"alert-item static\\\">\\r\\n                        <div class=\\\"alert-icon-wrapper\\\">\\r\\n                          <clr-icon class=\\\"alert-icon\\\" shape=\\\"exclamation-circle\\\"></clr-icon>\\r\\n                        </div>\\r\\n                        <span class=\\\"alert-text\\\">\\r\\n                          Incorrect file name or extension chosen. Replicate PCR files should have the '.txt' file\\r\\n                          extension, and have the following\\r\\n                          name convention: [Analysis Batch ID]-[Extraction number]-[Target code]-[Replicate number].\\r\\n                          Example:\\r\\n                          10001-1-PV-1.txt\\r\\n                        </span>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n              </div>\\r\\n          </div>\\r\\n          <hr>\\r\\n          <!-- results display div -->\\r\\n          <div>\\r\\n            <!-- raw results display -->\\r\\n            <div *ngIf=\\\"rawResultsParsed && !validationResponseReady\\\">\\r\\n              <div>\\r\\n                <h4>\\r\\n                  <b>Text file raw results confirmation</b>\\r\\n                </h4>\\r\\n                <label>Text file:\\r\\n                  {{parsedRawTargetResults.analysis_batch}}-{{parsedRawTargetResults.extraction_number}}-{{textFileNameTargetCode}}-{{parsedRawTargetResults.replicate_number}}</label>\\r\\n                <div class=\\\"row\\\">\\r\\n                  <div class=\\\"col-lg-4\\\">\\r\\n                    <table class=\\\"table table-vertical table-compact\\\">\\r\\n                      <tbody>\\r\\n                        <tr>\\r\\n                          <th>Analysis Batch</th>\\r\\n                          <td>{{parsedRawTargetResults.analysis_batch}}</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                          <th>Extraction Number</th>\\r\\n                          <td>{{parsedRawTargetResults.extraction_number}}</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                          <th>Target</th>\\r\\n                          <td>{{parsedRawTargetResults.target | displayValue:'name':this.allTargets}}</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                          <th>Replicate Number</th>\\r\\n                          <td>{{parsedRawTargetResults.replicate_number}}</td>\\r\\n                        </tr>\\r\\n                      </tbody>\\r\\n                    </table>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <table class=\\\"table table-compact\\\" style=\\\"width: 15em\\\">\\r\\n                  <thead>\\r\\n                    <tr>\\r\\n                      <th></th>\\r\\n                      <th class=\\\"left\\\">Sample</th>\\r\\n                      <th class=\\\"left\\\">Cq Value</th>\\r\\n                      <th class=\\\"left\\\">Concentration</th>\\r\\n                    </tr>\\r\\n                  </thead>\\r\\n                  <tbody>\\r\\n                    <tr *ngFor=\\\"let rep of parsedRawTargetResults.updated_pcrreplicates; let i = index\\\">\\r\\n                      <td>{{i+1}}</td>\\r\\n                      <td class=\\\"left\\\">{{rep.sample}}</td>\\r\\n                      <td class=\\\"left\\\">{{rep.cq_value}}</td>\\r\\n                      <td class=\\\"left\\\">{{rep.gc_reaction}}</td>\\r\\n                    </tr>\\r\\n                  </tbody>\\r\\n                </table>\\r\\n                <br>\\r\\n                <div class=\\\"alert alert-danger\\\" *ngIf=\\\"pcrReplicateBatchIDErrorFlag\\\">\\r\\n                  <div class=\\\"alert-items\\\">\\r\\n                    <div class=\\\"alert-item static\\\">\\r\\n                      <div class=\\\"alert-icon-wrapper\\\">\\r\\n                        <clr-icon class=\\\"alert-icon\\\" shape=\\\"exclamation-circle\\\"></clr-icon>\\r\\n                      </div>\\r\\n                      <span class=\\\"alert-text\\\">\\r\\n                        The submitted analysis batch/extraction number/replicate number combination was not found in the\\r\\n                        database. Please check filename\\r\\n                        for errors and try again.\\r\\n                      </span>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <button class=\\\"btn btn-primary\\\" [disabled]=\\\"!resultsSubmissionReady\\\"\\r\\n                  (click)=\\\"validateTargetResults(); resetFlags()\\\">\\r\\n                  <clr-icon shape=\\\"check\\\"></clr-icon> Validate Results\\r\\n                </button>\\r\\n              </div>\\r\\n            </div>\\r\\n            <!-- end raw results display -->\\r\\n\\r\\n            <!---------- Loading spinner---------->\\r\\n            <span class=\\\"spinner spinner-lg\\\" *ngIf=\\\"validationLoading || replicatesLoading\\\">\\r\\n              Loading...\\r\\n            </span>\\r\\n            <!---------- Loading spinner---------->\\r\\n\\r\\n            <!---------- Success/fail alerts---------->\\r\\n            <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"resultsSubmissionErrorFlag\\\">\\r\\n              <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">Submission error. Results not uploaded to database.</span>\\r\\n                <span>{{errorMessage}}</span>\\r\\n                <div class=\\\"alert-actions\\\">\\r\\n                  <a class=\\\"alert-action\\\" (click)=\\\"submitRawTargetResults()\\\">Try again</a>\\r\\n                </div>\\r\\n              </div>\\r\\n            </clr-alert>\\r\\n\\r\\n            <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"resultsSubmissionSuccessFlag\\\">\\r\\n              <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">Results successfully submitted.</span>\\r\\n              </div>\\r\\n            </clr-alert>\\r\\n            <!---------- End Success/fail alerts---------->\\r\\n\\r\\n            <!-- validation div -->\\r\\n            <div *ngIf=\\\"validationResponseReady\\\">\\r\\n              <div class=\\\"card-title\\\">\\r\\n                <b>Results Validation</b>\\r\\n                <br>\\r\\n                <label>Text file:\\r\\n                  {{parsedRawTargetResults.analysis_batch}}-{{parsedRawTargetResults.extraction_number}}-{{textFileNameTargetCode}}-{{parsedRawTargetResults.replicate_number}}</label>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-xs-12\\\">\\r\\n                  <h4>Batch Data</h4>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-4 col-sm-6\\\">\\r\\n                  <table class=\\\"table table-vertical table-compact\\\">\\r\\n                    <tbody>\\r\\n                      <tr>\\r\\n                        <th>Analysis Batch</th>\\r\\n                        <td>{{parsedRawTargetResults.analysis_batch}}</td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>Extraction Number</th>\\r\\n                        <td>{{parsedRawTargetResults.extraction_number}}</td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>Target</th>\\r\\n                        <td>{{parsedRawTargetResults.target | displayValue:'name':this.allTargets}}</td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>Replicate Number</th>\\r\\n                        <td>{{parsedRawTargetResults.replicate_number}}</td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>PCR Neg</th>\\r\\n                        <td>\\r\\n                          <span class=\\\"label\\\"\\r\\n                            [ngClass]=\\\"{'label-danger' : pcrResultsValidationObject.pcr_neg_invalid, 'label-success': !pcrResultsValidationObject.pcr_neg_invalid}\\\">{{pcrResultsValidationObject.pcr_neg_invalid ? \\\"Invalid\\\" : \\\"Valid\\\"}}</span>\\r\\n                        </td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>PCR Pos</th>\\r\\n                        <td>\\r\\n                          <span class=\\\"label\\\"\\r\\n                            [ngClass]=\\\"{'label-danger' : pcrResultsValidationObject.pcr_pos_invalid, 'label-success': !pcrResultsValidationObject.pcr_pos_invalid}\\\">{{pcrResultsValidationObject.pcr_pos_invalid ? \\\"Invalid\\\" : \\\"Valid\\\"}}</span>\\r\\n                        </td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>Ext Neg</th>\\r\\n                        <td>\\r\\n                          <span class=\\\"label\\\"\\r\\n                            [ngClass]=\\\"{'label-danger' : pcrResultsValidationObject.ext_neg_invalid, 'label-success': !pcrResultsValidationObject.ext_neg_invalid}\\\">{{pcrResultsValidationObject.ext_neg_invalid ? \\\"Invalid\\\" : \\\"Valid\\\"}}</span>\\r\\n                        </td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>RT Neg</th>\\r\\n                        <td>\\r\\n                          <span class=\\\"label\\\"\\r\\n                            [ngClass]=\\\"{'label-danger' : pcrResultsValidationObject.rt_neg_invalid, 'label-success': !pcrResultsValidationObject.rt_neg_invalid}\\\">{{pcrResultsValidationObject.rt_neg_invalid ? \\\"Invalid\\\" : \\\"Valid\\\"}}\\r\\n                          </span>\\r\\n                        </td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>Standard Curve</th>\\r\\n                        <td></td>\\r\\n                      </tr>\\r\\n                    </tbody>\\r\\n                  </table>\\r\\n                  <div *ngFor=\\\"let error of pcrResultsValidationObject.validation_errors\\\">\\r\\n                    <clr-alert [clrAlertSizeSmall]=\\\"true\\\" [clrAlertClosable]=\\\"false\\\"\\r\\n                      [clrAlertType]=\\\"error.severity == 1 ? 'alert-danger': error.severity == 2 ? 'alert-warning' : 'alert-warning'\\\">\\r\\n                      <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                        <span class=\\\"alert-text\\\">{{error.message}}</span>\\r\\n                      </div>\\r\\n                    </clr-alert>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <!-- title and info -->\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-xs-12\\\">\\r\\n                  <h4>Replicates</h4>\\r\\n                </div>\\r\\n                <div class=\\\"row\\\" *ngIf=\\\"!replicateUpdateSuccessFlag\\\">\\r\\n                  <div class=\\\"col-lg-12 col-sm-12\\\">\\r\\n                    <span>\\r\\n                      <label>Note: validity displayed below is based on negative controls only, including Peg\\r\\n                        Neg.</label>\\r\\n                      <clr-signpost>\\r\\n                        <clr-signpost-content *clrIfOpen>\\r\\n                          All replicate records are considered invalid by default. They are only made valid if all of\\r\\n                          the\\r\\n                          following checks pass:\\r\\n                          <p>1.All the parent controls (Peg Neg, Ext Neg, RT Neg, PCR Neg) for this replicate have been\\r\\n                            entered\\r\\n                            into the database\\r\\n                            <p>2. The replicate’s related Peg Neg’s replicates with same target as this data replicate\\r\\n                              are\\r\\n                              all\\r\\n                              valid (if no related Peg Neg, this check does not apply), if even a single one of the Peg\\r\\n                              Neg\\r\\n                              replicates is invalid then the data replicate is set to invalid.\\r\\n                              <p>3. The replicate's parent replicate batch negative controls (Ext Neg, RT Neg, PCR Neg)\\r\\n                                are all\\r\\n                                valid, if even a single one of the controls is invalid then the data replicate is set to\\r\\n                                invalid.\\r\\n                                <p>4. The replicate’s CQ value and GC/reaction are greater than or equal to zero.\\r\\n                                  <p>Alternately, the user has the option to manually override the system-determined\\r\\n                                    validity.\\r\\n\\r\\n                        </clr-signpost-content>\\r\\n                      </clr-signpost>\\r\\n                    </span>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <!-- End title and info -->\\r\\n              <!-----------------Validation Table -------------------------------->\\r\\n              <div class=\\\"row\\\" *ngIf=\\\"validationResponseReady\\\">\\r\\n                <div class=\\\"col-lg-12 col-sm-12\\\">\\r\\n                  <clr-datagrid [clrDgLoading]=\\\"replicatesLoading\\\">\\r\\n                    <clr-dg-action-bar>\\r\\n                      <div class=\\\"btn-group\\\">\\r\\n                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-warning\\\" (click)=\\\"finishResultsSubmission()\\\">\\r\\n                          <clr-icon shape=\\\"window-close\\\"></clr-icon> Cancel and Reset\\r\\n                        </button>\\r\\n                        <button class=\\\" btn btn-sm btn-success\\\" (click)=\\\"submitRawTargetResults()\\\">\\r\\n                          <clr-icon shape=\\\"check\\\"></clr-icon> Submit Results\\r\\n                        </button>\\r\\n                      </div>\\r\\n                    </clr-dg-action-bar>\\r\\n\\r\\n                    <clr-dg-column [clrDgField]=\\\"'name'\\\">Sample</clr-dg-column>\\r\\n                    <clr-dg-column [clrDgField]=\\\"'code'\\\">Cq Value</clr-dg-column>\\r\\n                    <clr-dg-column [clrDgField]=\\\"'type'\\\">GC/Reaction</clr-dg-column>\\r\\n                    <!-- <clr-dg-column [clrDgField]=\\\"'type'\\\">Concentration</clr-dg-column> -->\\r\\n                    <clr-dg-column [clrDgField]=\\\"'type'\\\">Validation Errors</clr-dg-column>\\r\\n\\r\\n                    <clr-dg-row *clrDgItems=\\\"let rep of pcrResultsValidationReplicates\\\" [clrDgItem]=\\\"rep\\\">\\r\\n                      <clr-dg-cell>{{rep.sample}}</clr-dg-cell>\\r\\n                      <clr-dg-cell>{{rep.cq_value}}</clr-dg-cell>\\r\\n                      <clr-dg-cell>{{rep.gc_reaction_sci}}</clr-dg-cell>\\r\\n                      <!-- <clr-dg-cell>{{rep.replicate_concentration_sci}}</clr-dg-cell> -->\\r\\n                      <clr-dg-cell>\\r\\n                        <div *ngFor=\\\"let error of rep.validation_errors\\\">\\r\\n                          <clr-alert [clrAlertSizeSmall]=\\\"true\\\" [clrAlertClosable]=\\\"false\\\"\\r\\n                            [clrAlertType]=\\\"error.severity == 1 ? 'alert-danger': error.severity == 2 ? 'alert-warning' : 'alert-warning'\\\">\\r\\n                            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                              <span class=\\\"alert-text\\\">{{error.message}}</span>\\r\\n                            </div>\\r\\n                          </clr-alert>\\r\\n                        </div>\\r\\n\\r\\n                      </clr-dg-cell>\\r\\n                      <!-- <clr-dg-cell>\\r\\n                        <span class=\\\"label\\\" [ngClass]=\\\"{'label-danger' : rep.invalid, 'label-success': !rep.invalid}\\\">{{rep.invalid ? \\\"Invalid\\\" : \\\"Valid\\\"}}</span>\\r\\n                      </clr-dg-cell> -->\\r\\n                    </clr-dg-row>\\r\\n                    <clr-dg-footer>{{pcrResultsValidationReplicates.length}} reps</clr-dg-footer>\\r\\n                  </clr-datagrid>\\r\\n                </div>\\r\\n              </div>\\r\\n              <!-----------------End Validation Table -------------------------------->\\r\\n            </div>\\r\\n            <!-- end validation div -->\\r\\n\\r\\n            <!-- Submission Review div -->\\r\\n            <div *ngIf=\\\"resultsSubmissionSuccessFlag\\\">\\r\\n              <div class=\\\"card-title\\\">\\r\\n                <b>Submitted Results Review</b>\\r\\n                <br>\\r\\n                <label>Text file:\\r\\n                  {{parsedRawTargetResults.analysis_batch}}-{{parsedRawTargetResults.extraction_number}}-{{textFileNameTargetCode}}-{{parsedRawTargetResults.replicate_number}}</label>\\r\\n              </div>\\r\\n              <!--Finish button-->\\r\\n              <!-- <div class=\\\"row finish-button\\\">\\r\\n                <div class=\\\"col-lg-6 col-sm-12\\\">\\r\\n                  <button class=\\\"btn btn-primary\\\" (click)=\\\"finishResultsSubmission()\\\">Finish</button>\\r\\n                </div>\\r\\n              </div> -->\\r\\n              <!-- End Finish button-->\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-xs-12\\\">\\r\\n                  <h4>Batch Data</h4>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-4 col-sm-6\\\">\\r\\n                  <table class=\\\"table table-vertical table-compact\\\">\\r\\n                    <tbody>\\r\\n                      <tr>\\r\\n                        <th>Analysis Batch</th>\\r\\n                        <td>{{parsedRawTargetResults.analysis_batch}}</td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>Extraction Number</th>\\r\\n                        <td>{{parsedRawTargetResults.extraction_number}}</td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>Target</th>\\r\\n                        <td>{{parsedRawTargetResults.target | displayValue:'name':this.allTargets}}</td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>Replicate Number</th>\\r\\n                        <td>{{parsedRawTargetResults.replicate_number}}</td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>PCR Neg</th>\\r\\n                        <td>\\r\\n                          <span class=\\\"label\\\"\\r\\n                            [ngClass]=\\\"{'label-danger' : pcrResultsObject.pcr_neg_invalid, 'label-success': !pcrResultsObject.pcr_neg_invalid}\\\">{{pcrResultsObject.pcr_neg_invalid ? \\\"Invalid\\\" : \\\"Valid\\\"}}</span>\\r\\n                        </td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>PCR Pos</th>\\r\\n                        <td>\\r\\n                          <span class=\\\"label\\\"\\r\\n                            [ngClass]=\\\"{'label-danger' : pcrResultsObject.pcr_pos_invalid, 'label-success': !pcrResultsObject.pcr_pos_invalid}\\\">{{pcrResultsObject.pcr_pos_invalid ? \\\"Invalid\\\" : \\\"Valid\\\"}}</span>\\r\\n                        </td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>Ext Neg</th>\\r\\n                        <td>\\r\\n                          <span class=\\\"label\\\"\\r\\n                            [ngClass]=\\\"{'label-danger' : pcrResultsObject.ext_neg_invalid, 'label-success': !pcrResultsObject.ext_neg_invalid}\\\">{{pcrResultsObject.ext_neg_invalid ? \\\"Invalid\\\" : \\\"Valid\\\"}}</span>\\r\\n                        </td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>RT Neg</th>\\r\\n                        <td>\\r\\n                          <span class=\\\"label\\\"\\r\\n                            [ngClass]=\\\"{'label-danger' : pcrResultsObject.rt_neg_invalid, 'label-success': !pcrResultsObject.rt_neg_invalid}\\\">{{pcrResultsObject.rt_neg_invalid ? \\\"Invalid\\\" : \\\"Valid\\\"}}\\r\\n                          </span>\\r\\n                        </td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>Standard Curve</th>\\r\\n                        <td></td>\\r\\n                      </tr>\\r\\n                    </tbody>\\r\\n                  </table>\\r\\n                </div>\\r\\n              </div>\\r\\n              <!-- title and info -->\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-12 col-sm-12\\\">\\r\\n                  <h4>Replicates</h4>\\r\\n                </div>\\r\\n                <div class=\\\"row\\\" *ngIf=\\\"replicateUpdateSuccessFlag\\\">\\r\\n                  <div class=\\\"col-lg-12 col-sm-12\\\">\\r\\n                    <span>\\r\\n                      <label>Note: validity displayed below is based on negative controls only, including Peg\\r\\n                        Neg.</label>\\r\\n                      <clr-signpost>\\r\\n                        <clr-signpost-content *clrIfOpen>\\r\\n                          All replicate records are considered invalid by default. They are only made valid if all of\\r\\n                          the\\r\\n                          following checks pass:\\r\\n                          <p>1.All the parent controls (Peg Neg, Ext Neg, RT Neg, PCR Neg) for this replicate have been\\r\\n                            entered\\r\\n                            into the database\\r\\n                            <p>2. The replicate’s related Peg Neg’s replicates with same target as this data replicate\\r\\n                              are\\r\\n                              all\\r\\n                              valid (if no related Peg Neg, this check does not apply), if even a single one of the Peg\\r\\n                              Neg\\r\\n                              replicates is invalid then the data replicate is set to invalid.\\r\\n                              <p>3. The replicate's parent replicate batch negative controls (Ext Neg, RT Neg, PCR Neg)\\r\\n                                are all\\r\\n                                valid, if even a single one of the controls is invalid then the data replicate is set to\\r\\n                                invalid.\\r\\n                                <p>4. The replicate’s CQ value and GC/reaction are greater than or equal to zero.\\r\\n                                  <p>Alternately, the user has the option to manually override the system-determined\\r\\n                                    validity.\\r\\n\\r\\n                        </clr-signpost-content>\\r\\n                      </clr-signpost>\\r\\n                    </span>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <!-- End title and info -->\\r\\n              <!-----------------Results Success Table -------------------------------->\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-12 col-sm-12\\\">\\r\\n                  <clr-datagrid [(clrDgSelected)]=\\\"selected\\\" [clrDgLoading]=\\\"replicatesLoading\\\">\\r\\n                    <clr-dg-action-bar>\\r\\n                      <div class=\\\"btn-group\\\">\\r\\n                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"selected.length < 1\\\"\\r\\n                          (click)=\\\"showHideOverrideValidityModal = true\\\">\\r\\n                          <clr-icon shape=\\\"switch\\\"></clr-icon> Switch Validity\\r\\n                        </button>\\r\\n                        <button class=\\\"btn btn-sm btn-success\\\" (click)=\\\"finishResultsSubmission()\\\">\\r\\n                          <clr-icon shape=\\\"check\\\"></clr-icon> Finish\\r\\n                        </button>\\r\\n                      </div>\\r\\n                    </clr-dg-action-bar>\\r\\n                    <clr-dg-column [clrDgField]=\\\"'name'\\\">Sample</clr-dg-column>\\r\\n                    <clr-dg-column [clrDgField]=\\\"'code'\\\">Cq Value</clr-dg-column>\\r\\n                    <clr-dg-column [clrDgField]=\\\"'type'\\\">GC/Reaction</clr-dg-column>\\r\\n                    <clr-dg-column [clrDgField]=\\\"'type'\\\">Concentration</clr-dg-column>\\r\\n                    <clr-dg-column [clrDgField]=\\\"'type'\\\">Validity</clr-dg-column>\\r\\n                    <clr-dg-column [clrDgField]=\\\"'type'\\\">Invalid Reasons</clr-dg-column>\\r\\n\\r\\n                    <clr-dg-row *clrDgItems=\\\"let rep of pcrResultsReplicates\\\" [clrDgItem]=\\\"rep\\\">\\r\\n                      <clr-dg-cell>{{rep.sample}}</clr-dg-cell>\\r\\n                      <clr-dg-cell>{{rep.cq_value}}</clr-dg-cell>\\r\\n                      <clr-dg-cell>{{rep.gc_reaction_sci}}</clr-dg-cell>\\r\\n                      <clr-dg-cell>{{rep.replicate_concentration_sci}}</clr-dg-cell>\\r\\n                      <clr-dg-cell>\\r\\n                        <span class=\\\"label\\\"\\r\\n                          [ngClass]=\\\"{'label-danger' : rep.invalid, 'label-success': !rep.invalid}\\\">{{rep.invalid ? \\\"Invalid\\\" : \\\"Valid\\\"}}</span>\\r\\n                      </clr-dg-cell>\\r\\n                      <clr-dg-cell>\\r\\n                        <ul>\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.pcr_neg_missing\\\">PCR Negative is missing</li>\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.ext_pos_dna_missing\\\">Ext Pos DNA is missing</li>\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.rt_neg_invalid\\\">RT Negative is invalid</li>\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.ext_neg_invalid\\\">Ext Negative is invalid</li>\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.pcr_neg_invalid\\\">PCR Negative is invalid</li>\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.ext_pos_dna_invalid\\\">Ext Pos DNA is invalid</li>\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.ext_rt_pos_rna_missing\\\">Ext Pos RNA/RT is missing</li>\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.cq_value_missing\\\">Cq value is missing</li>\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.ext_neg_missing\\\">Ext Negative is missing</li>\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.peg_neg_invalid\\\">PEG NEG is invalid</li>\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.gc_reaction_missing\\\">GC/reaction value is missing</li>\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.peg_neg_not_extracted\\\">PEG NEG not extracted </li>\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.invalid_override\\\">Invalid Override</li>\\r\\n\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.peg_neg_reps_invalid\\\">PEG NEG Replicates Invalid\\r\\n                            <clr-tree-node><span>Invalid PEG NEG Replicates</span>\\r\\n                              <ng-template [clrIfExpanded]=\\\"false\\\">\\r\\n                                <clr-tree-node>\\r\\n                                  <ul>\\r\\n                                    <li *ngFor=\\\"let item of rep.invalid_reasons.peg_neg_reps_invalid_list\\\">\\r\\n                                      AB {{item.analysis_batch}}, Extraction\\r\\n                                      {{item.extraction_number}}, Replicate\\r\\n                                      {{item.replicate_number}}, Sample {{item.sample}},\\r\\n                                      {{item.target | displayValue:'name': allTargets}}\\r\\n                                    </li>\\r\\n                                  </ul>\\r\\n                                </clr-tree-node>\\r\\n                              </ng-template>\\r\\n                            </clr-tree-node>\\r\\n                          </li>\\r\\n\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.peg_neg_reps_missing\\\">PEG NEG Replicates Missing\\r\\n                            <clr-tree-node><span>Missing PEG NEG Replicates</span>\\r\\n                              <ng-template [clrIfExpanded]=\\\"false\\\">\\r\\n                                <clr-tree-node>\\r\\n                                  <ul>\\r\\n                                    <li *ngFor=\\\"let item of rep.invalid_reasons.peg_neg_reps_missing_list\\\">\\r\\n                                      AB {{item.analysis_batch}}, Extraction\\r\\n                                      {{item.extraction_number}}, Replicate\\r\\n                                      {{item.replicate_number}}, Sample {{item.sample}},\\r\\n                                      {{item.target | displayValue:'name': allTargets}}\\r\\n                                    </li>\\r\\n                                  </ul>\\r\\n                                </clr-tree-node>\\r\\n                              </ng-template>\\r\\n                            </clr-tree-node>\\r\\n                          </li>\\r\\n\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.ext_rt_pos_rna_invalid\\\">Ext/RT Pos RNA is invalid</li>\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.rt_neg_missing\\\">RT Negative is missing</li>\\r\\n\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.sibling_pcr_rep_controls_missing\\\">Controls for sibling PCR\\r\\n                            Replicates in Extraction are missing\\r\\n                            <clr-tree-node><span>Missing Replicates</span>\\r\\n                              <ng-template [clrIfExpanded]=\\\"false\\\">\\r\\n                                <clr-tree-node>\\r\\n                                  <ul>\\r\\n                                    <li *ngFor=\\\"let item of rep.invalid_reasons.sibling_pcr_rep_controls_missing_list\\\">\\r\\n                                      AB {{item.analysis_batch}}, Extraction\\r\\n                                      {{item.extraction_number}}, Replicate\\r\\n                                      {{item.replicate_number}},\\r\\n                                      {{item.target | displayValue:'name': allTargets}}\\r\\n                                    </li>\\r\\n                                  </ul>\\r\\n                                </clr-tree-node>\\r\\n                              </ng-template>\\r\\n                            </clr-tree-node>\\r\\n                          </li>\\r\\n\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.sibling_pcr_rep_controls_invalid\\\">Controls for sibling PCR\\r\\n                            Replicates in Extraction are invalid\\r\\n                            <clr-tree-node><span>Invalid Replicates</span>\\r\\n                              <ng-template [clrIfExpanded]=\\\"false\\\">\\r\\n                                <clr-tree-node>\\r\\n                                  <ul>\\r\\n                                    <li *ngFor=\\\"let item of rep.invalid_reasons.sibling_pcr_rep_controls_invalid_list\\\">\\r\\n                                      AB {{item.analysis_batch}}, Extraction\\r\\n                                      {{item.extraction_number}}, Replicate\\r\\n                                      {{item.replicate_number}},\\r\\n                                      {{item.target | displayValue:'name': allTargets}}\\r\\n                                    </li>\\r\\n                                  </ul>\\r\\n                                </clr-tree-node>\\r\\n                              </ng-template>\\r\\n                            </clr-tree-node>\\r\\n                          </li>\\r\\n\\r\\n                          <li *ngIf=\\\"rep.invalid_reasons.peg_neg_replicates_missing\\\">PEG NEG is missing\\r\\n                            <clr-tree-node><span>Missing PEG NEGs</span>\\r\\n                              <ng-template [clrIfExpanded]=\\\"false\\\">\\r\\n                                <clr-tree-node>\\r\\n                                  <ul>\\r\\n                                    <li *ngFor=\\\"let item of rep.invalid_reasons.peg_neg_replicates_missing_list\\\">\\r\\n                                      AB {{item.analysis_batch}}, Extraction\\r\\n                                      {{item.extraction_number}}, Replicate\\r\\n                                      {{item.replicate_number}}, Sample {{item.sample}},\\r\\n                                      {{item.target | displayValue:'name': allTargets}}\\r\\n                                    </li>\\r\\n                                  </ul>\\r\\n                                </clr-tree-node>\\r\\n                              </ng-template>\\r\\n                            </clr-tree-node>\\r\\n                          </li>\\r\\n                        </ul>\\r\\n                      </clr-dg-cell>\\r\\n                    </clr-dg-row>\\r\\n                    <clr-dg-footer>{{pcrResultsReplicates.length}} reps</clr-dg-footer>\\r\\n                  </clr-datagrid>\\r\\n                </div>\\r\\n              </div>\\r\\n              <!-----------------End Results Success Table -------------------------------->\\r\\n\\r\\n            </div>\\r\\n            <!-- End Submission Review div -->\\r\\n\\r\\n          </div>\\r\\n          <!-- end results display div -->\\r\\n\\r\\n        </clr-tab-content>\\r\\n      </clr-tab>\\r\\n      <!-- End Upload Replicate PCR File tab -->\\r\\n\\r\\n      <!-- inhibition results tab -->\\r\\n      <clr-tab>\\r\\n        <button clrTabLink id=\\\"inhibition\\\">Upload Inhibition File</button>\\r\\n        <clr-tab-content id=\\\"inhibition\\\">\\r\\n\\r\\n          <div class=\\\"card-block\\\">\\r\\n            <div class=\\\"card-title\\\">\\r\\n              <clr-icon shape=\\\"upload\\\"></clr-icon> Upload Inhibition File\\r\\n            </div>\\r\\n            <p>\\r\\n              <div class=\\\"card-text\\\">\\r\\n                <span>File name convention: [Analysis Batch ID]-[Extraction Number]-<b>I</b>[First letter of nucleic\\r\\n                  acid\\r\\n                  type] (the letter \\\"I\\\" precedes nucleic acid type letter)</span>\\r\\n                <p>\\r\\n                  <input id=\\\"inhibitionFileInput\\\" type=\\\"file\\\" (change)=\\\"loadInhFile($event)\\\" placeholder=\\\"Upload file\\\"\\r\\n                    accept=\\\"*\\\">\\r\\n                  <!-- <button class=\\\"btn btn-primary\\\" (click)=\\\"parseJSON()\\\">Parse Data</button> -->\\r\\n                  <div class=\\\"alert alert-danger\\\" *ngIf=\\\"inhFileNameErrorFlag\\\">\\r\\n                    <div class=\\\"alert-items\\\">\\r\\n                      <div class=\\\"alert-item static\\\">\\r\\n                        <div class=\\\"alert-icon-wrapper\\\">\\r\\n                          <clr-icon class=\\\"alert-icon\\\" shape=\\\"exclamation-circle\\\"></clr-icon>\\r\\n                        </div>\\r\\n                        <span class=\\\"alert-text\\\">\\r\\n                          Incorrect file name or extension chosen. Inhibition files should have the '.txt' file\\r\\n                          extension and have the following name\\r\\n                          convention: [Analysis Batch ID]-[Extraction Number]-I[First letter of nucleic acid type].\\r\\n                          Example:\\r\\n                          10045-2-IR.txt\\r\\n                        </span>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div class=\\\"alert alert-danger\\\" *ngIf=\\\"inhRawErrorFlag\\\">\\r\\n                    <div class=\\\"alert-items\\\">\\r\\n                      <div class=\\\"alert-item static\\\">\\r\\n                        <div class=\\\"alert-icon-wrapper\\\">\\r\\n                          <clr-icon class=\\\"alert-icon\\\" shape=\\\"exclamation-circle\\\"></clr-icon>\\r\\n                        </div>\\r\\n                        <span class=\\\"alert-text\\\">\\r\\n                          The file uploaded refers to inhibitions not found in the database. Please check file name\\r\\n                          details.\\r\\n                        </span>\\r\\n                        <br>\\r\\n                        <span>{{errorMessage}}</span>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n              </div>\\r\\n          </div>\\r\\n          <hr>\\r\\n          <!-- raw results display-->\\r\\n          <div class=\\\"card-block\\\" *ngIf=\\\"rawInhResultsParsed && !dilutionFactorsCalculated\\\">\\r\\n            <!-- <div class=\\\"card-title\\\">Uploaded Inhibition Results</div> -->\\r\\n            <div>\\r\\n              <h4>\\r\\n                <b>Inhibition file raw results confirmation</b>\\r\\n              </h4>\\r\\n              <label>Text file:\\r\\n                {{parsedRawInhResults.analysis_batch}}-{{parsedRawInhResults.extraction_number}}-{{inhTextFileNameNAType}}</label>\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-4\\\">\\r\\n                  <table class=\\\"table table-vertical table-compact\\\">\\r\\n                    <tbody>\\r\\n                      <tr>\\r\\n                        <th>Analysis Batch</th>\\r\\n                        <td>{{parsedRawInhResults.analysis_batch}}</td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>Extraction Number</th>\\r\\n                        <td>{{parsedRawInhResults.extraction_number}}</td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>Nucleic Acid Inhibition Type</th>\\r\\n                        <td>{{parsedRawInhResults.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes}}</td>\\r\\n                      </tr>\\r\\n                      <tr>\\r\\n                        <th>Inhibition Positive Cq </th>\\r\\n                        <td>{{parsedRawInhResults.inh_pos_cq_value}}</td>\\r\\n                      </tr>\\r\\n                    </tbody>\\r\\n                  </table>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n\\r\\n              <table class=\\\"table table-compact\\\" style=\\\"width: 15em\\\">\\r\\n                <thead>\\r\\n                  <tr>\\r\\n                    <th></th>\\r\\n                    <th class=\\\"left\\\">Sample</th>\\r\\n                    <th class=\\\"left\\\">Cq Value</th>\\r\\n\\r\\n                  </tr>\\r\\n                </thead>\\r\\n                <tbody>\\r\\n                  <tr *ngFor=\\\"let sample of parsedRawInhResults.inhibitions; let i = index\\\">\\r\\n                    <td>{{i+1}}</td>\\r\\n                    <td class=\\\"left\\\">{{sample.sample}}</td>\\r\\n                    <td class=\\\"left\\\">{{sample.cq_value}}</td>\\r\\n                  </tr>\\r\\n                </tbody>\\r\\n              </table>\\r\\n              <br>\\r\\n              <button class=\\\"btn btn-primary\\\" (click)=\\\"submitRawInhibitionResults()\\\">Calculate Dilution Factors</button>\\r\\n            </div>\\r\\n          </div>\\r\\n          <!-- end raw results display-->\\r\\n          <!-- inhibition dilution factor confirmation -->\\r\\n          <div *ngIf=\\\"dilutionFactorsCalculated\\\">\\r\\n            <div class=\\\"card-title\\\">\\r\\n              <b>Inhibition Dilution Factor Confirmation</b>\\r\\n              <br>\\r\\n              <label>Text file:\\r\\n                {{parsedRawInhResults.analysis_batch}}-{{parsedRawInhResults.extraction_number}}-{{inhTextFileNameNAType}}</label>\\r\\n\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-xs-12\\\">\\r\\n                <h4>Batch Data</h4>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-lg-4 col-sm-6\\\">\\r\\n                <table class=\\\"table table-vertical table-compact\\\">\\r\\n                  <tbody>\\r\\n                    <tr>\\r\\n                      <th>Analysis Batch</th>\\r\\n                      <td>{{parsedRawInhResults.analysis_batch}}</td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                      <th>Extraction Number</th>\\r\\n                      <td>{{parsedRawInhResults.extraction_number}}</td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                      <th>Nucleic Acid Inhibition Type</th>\\r\\n                      <td>{{parsedRawInhResults.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes}}</td>\\r\\n                    </tr>\\r\\n                  </tbody>\\r\\n                </table>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-xs-12\\\">\\r\\n                <h4>Confirm Dilution Factors</h4>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-xs-12\\\">\\r\\n                Dilution factors displayed have been calculated and suggested by lili. Update if appropriate or leave as\\r\\n                is, then click Submit\\r\\n                to save the inhibition dilution factors.\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-lg-4 col-md-6 col-sm-12\\\">\\r\\n                <form class=\\\"compact\\\" [formGroup]=\\\"dilutionsForm\\\" (ngSubmit)=\\\"submitInhibitions(dilutionsForm.value)\\\">\\r\\n                  <section class=\\\"form-block\\\">\\r\\n\\r\\n                    <div formArrayName=\\\"inhibitions\\\">\\r\\n\\r\\n                      <table class=\\\"table\\\">\\r\\n                        <thead>\\r\\n                          <tr>\\r\\n                            <th class=\\\"left\\\">Sample</th>\\r\\n                            <th class=\\\"left\\\">Dilution Factor</th>\\r\\n                          </tr>\\r\\n                        </thead>\\r\\n                        <tbody>\\r\\n                          <tr *ngFor=\\\"let inh of inhibitionsArray.controls; let i = index\\\" [formGroupName]=\\\"i\\\">\\r\\n                            <td class=\\\"left\\\">\\r\\n                              <label class=\\\"required\\\">Sample {{inh.controls.sample.value}}</label>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                              <input formControlName=\\\"dilution_factor\\\" type=\\\"number\\\" min=\\\"1\\\"\\r\\n                                class=\\\"dilution-factor-input\\\">\\r\\n                            </td>\\r\\n                          </tr>\\r\\n                        </tbody>\\r\\n                      </table>\\r\\n                    </div>\\r\\n\\r\\n                  </section>\\r\\n                  <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"inhibitionUpdateErrorFlag\\\">\\r\\n                    <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                      <span class=\\\"alert-text\\\">Submission error. Inhibition dilution factors not submitted.</span>\\r\\n                      <span>{{errorMessage}}</span>\\r\\n                      <div class=\\\"alert-actions\\\">\\r\\n                        <a class=\\\"alert-action\\\" (click)=\\\"submitInhibitions(dilutionsForm.value)\\\">Try again</a>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </clr-alert>\\r\\n                  <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"inhibitionUpdateSuccessFlag\\\">\\r\\n                    <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                      <span class=\\\"alert-text\\\">Inhibition dilution factors successfully submitted.</span>\\r\\n\\r\\n                    </div>\\r\\n                  </clr-alert>\\r\\n                  <button class=\\\"btn btn-primary\\\" *ngIf=\\\"!inhibitionUpdateSuccessFlag\\\" type=\\\"submit\\\"\\r\\n                    [clrLoading]=\\\"submitLoading\\\">Submit Dilution Factors</button>\\r\\n                </form>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-xs-12\\\">\\r\\n                <button *ngIf=\\\"inhibitionUpdateSuccessFlag\\\" class=\\\"btn btn-success\\\"\\r\\n                  (click)=\\\"resetInhibitions()\\\">Finshed</button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </clr-tab-content>\\r\\n      </clr-tab>\\r\\n      <!-- end inhibition results tab -->\\r\\n\\r\\n      <!-- Batch Submit Neg results tab-->\\r\\n      <clr-tab>\\r\\n        <button clrTabLink>Bulk Submit Negative Results</button>\\r\\n        <clr-tab-content>\\r\\n          <div>\\r\\n            <div>\\r\\n              <div>\\r\\n                <h3>Batch Submit Negative Results</h3>\\r\\n              </div>\\r\\n            </div>\\r\\n            <div class=\\\"card-block\\\">\\r\\n              <div class=\\\"card-title\\\"></div>\\r\\n              <div class=\\\"card-text\\\">\\r\\n\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </clr-tab-content>\\r\\n      </clr-tab>\\r\\n      <!-- End Batch Submit Neg results tab-->\\r\\n\\r\\n    </clr-tabs>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<!-- begin override validity modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideOverrideValidityModal\\\">\\r\\n  <h3 class=\\\"modal-title\\\">\\r\\n    <clr-icon shape=\\\"switch\\\" size=\\\"36\\\"></clr-icon> Switch (override) validity of individual replicates\\r\\n  </h3>\\r\\n  <div class=\\\"modal-body\\\">\\r\\n    <p>You are about to override the validity of the following replicates. This will not change the value of any\\r\\n      associated\\r\\n      control, but will overwrite the validity flag of the replicate and\\r\\n      <b>will affect results calculation.</b>\\r\\n      <p>\\r\\n\\r\\n        <ul class=\\\"list compact list-unstyled\\\">\\r\\n          <li *ngFor=\\\"let rep of selected\\\">Overriding sample {{rep.sample}} from\\r\\n            <span class=\\\"label\\\"\\r\\n              [ngClass]=\\\"{'label-danger' : rep.invalid, 'label-success': !rep.invalid}\\\">{{rep.invalid ? \\\"Invalid\\\" : \\\"Valid\\\"}}</span>\\r\\n            to\\r\\n            <span class=\\\"label\\\"\\r\\n              [ngClass]=\\\"{'label-danger' : !rep.invalid, 'label-success': rep.invalid}\\\">{{!(rep.invalid) ? \\\"Invalid\\\" : \\\"Valid\\\"}}</span>\\r\\n          </li>\\r\\n        </ul>\\r\\n        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"replicateUpdateErrorFlag\\\">\\r\\n          <div clr-alert-item class=\\\"alert-item\\\">\\r\\n            <span class=\\\"alert-text\\\">Submission error. Replicate validity not updated.</span>\\r\\n            <span>{{errorMessage}}</span>\\r\\n            <div class=\\\"alert-actions\\\">\\r\\n              <a class=\\\"alert-action\\\" (click)=\\\"onUpdatePCRReplicates(selected)\\\">Try again</a>\\r\\n            </div>\\r\\n          </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"replicateUpdateSuccessFlag \\\">\\r\\n          <div clr-alert-item class=\\\"alert-item\\\">\\r\\n            <span class=\\\"alert-text\\\">Replicates' validity successfully updated.</span>\\r\\n            <div class=\\\"alert-actions\\\">\\r\\n              <a class=\\\"alert-action\\\"\\r\\n                (click)=\\\"showHideOverrideValidityModal  = false; replicateUpdateSuccessFlag = false\\\">Close</a>\\r\\n            </div>\\r\\n          </div>\\r\\n        </clr-alert>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"modal-footer\\\">\\r\\n    <button class=\\\"btn btn-primary\\\" (click)=\\\"onUpdatePCRReplicates(selected)\\\" [clrLoading]=\\\"submitLoading\\\">Save\\r\\n      Changes</button>\\r\\n    <button class=\\\"btn btn-info\\\" (click)=\\\"showHideOverrideValidityModal = !showHideOverrideValidityModal\\\">Close</button>\\r\\n  </div>\\r\\n</clr-modal>\\r\\n<!-- end override validity modal -->\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/data-upload/data-upload.component.html\n// module id = ./src/app/data-upload/data-upload.component.html\n// module chunks = main","module.exports = \".text-smaller {\\n  font-size: smaller; }\\n\\n.finish-button {\\n  padding: 10px;\\n  margin: 10px; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/data-upload/data-upload.component.scss\n// module id = ./src/app/data-upload/data-upload.component.scss\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, FormArray, Validators, PatternValidator } from \"@angular/forms/\";\r\n\r\nimport { ITarget } from '../targets/target';\r\nimport { IInhResults } from './inh-results';\r\nimport { IInhResult } from './inh-result';\r\nimport { ITargetResults } from './target-results';\r\nimport { ITargetResult } from './target-result';\r\n\r\nimport { TargetService } from '../targets/target.service';\r\nimport { InhibitionService } from '../inhibitions/inhibition.service';\r\nimport { ExtractionBatchService } from '../extraction-batches/extraction-batch.service';\r\nimport { PcrReplicateBatchService } from '../pcr-replicates/pcr-replicate-batch.service';\r\nimport { PcrReplicateService } from '../pcr-replicates/pcr-replicate.service';\r\n\r\nimport { RegExp } from 'core-js/library/web/timers';\r\n\r\nimport { NgClass } from '@angular/common';\r\n\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\n@Component({\r\n  selector: 'app-data-upload',\r\n  templateUrl: './data-upload.component.html',\r\n  styleUrls: ['./data-upload.component.scss']\r\n})\r\nexport class DataUploadComponent implements OnInit {\r\n\r\n  allTargets: ITarget[] = [];\r\n  nucleicAcidTypes;\r\n\r\n  selected = [];\r\n\r\n  inhFileNameErrorFlag: boolean = false;\r\n  parsedRawInhResults;\r\n  parsedRawTargetResults;\r\n  pcrResultsValidationObject;\r\n  pcrResultsValidationReplicates = [];\r\n  parsedRawTargetResults_pcrBatchID;\r\n\r\n  pcrResultsObject;\r\n  pcrResultsReplicates = [];\r\n\r\n  // showResultsDisplay: boolean = false;\r\n  rawResultsParsed: boolean = false;\r\n  resultsSubmissionReady: boolean = false;\r\n  validationResponseReady: boolean = false;\r\n  rawInhResultsParsed: boolean = false;\r\n  replicatesLoading: boolean = false;\r\n  validationLoading: boolean = false;\r\n\r\n  textFileNameTargetCode;\r\n  inhTextFileNameNAType;\r\n\r\n  inhLoadingFlag: boolean = false;\r\n  inhRawErrorMessage: string = '';\r\n  inhRawErrorFlag: boolean = false;\r\n  dilutionFactorsCalculated: boolean = false;\r\n  inhibitionValidationObject;\r\n\r\n  targetFileNameErrorFlag: boolean = false;\r\n  pcrReplicateBatchIDErrorFlag: boolean = false;\r\n\r\n  resultsSubmissionErrorFlag: boolean = false;\r\n  resultsSubmissionSuccessFlag: boolean = false;\r\n\r\n  showHideOverrideValidityModal: boolean = false;\r\n\r\n  errorMessage: string;\r\n\r\n  replicateUpdateSuccessFlag: boolean = false;\r\n  replicateUpdateErrorFlag: boolean = false;\r\n  inhibitionUpdateSuccessFlag: boolean = false;\r\n  inhibitionUpdateErrorFlag: boolean = false;\r\n  submitLoading: boolean = false;\r\n\r\n  dilutionsForm: FormGroup;\r\n  inhibitionsArray: FormArray;\r\n\r\n  batchExtPosForm: FormGroup;\r\n  extractions_array: FormArray;\r\n\r\n  resetFlags() {\r\n    this.resultsSubmissionSuccessFlag = false;\r\n    this.resultsSubmissionErrorFlag = false;\r\n    this.rawResultsParsed = false;\r\n    this.validationResponseReady = false;\r\n  }\r\n\r\n  buildDilutionsForm() {\r\n    this.dilutionsForm = this.formBuilder.group({\r\n      inhibitions: this.formBuilder.array([\r\n        this.formBuilder.group({\r\n          id: null,\r\n          sample: null,\r\n          dilution_factor: null\r\n        })\r\n      ])\r\n    })\r\n    this.inhibitionsArray = this.dilutionsForm.get('inhibitions') as FormArray;\r\n  }\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private _inhibitionService: InhibitionService,\r\n    private _extractionBatchService: ExtractionBatchService,\r\n    private _targetService: TargetService,\r\n    private _pcrReplicateBatchService: PcrReplicateBatchService,\r\n    private _pcrReplicateService: PcrReplicateService\r\n  ) {\r\n    this.buildDilutionsForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    // on init, call getTargets function of the TargetService, set results to allTargets var\r\n    this._targetService.getTargets()\r\n      .subscribe(\r\n        (targets) => {\r\n          this.allTargets = targets;\r\n          this.allTargets.sort(function (a, b) {\r\n            if (a.name < b.name) { return -1 };\r\n            if (a.name > b.name) { return 1 };\r\n            return 0;\r\n          });\r\n        },\r\n        error => { this.errorMessage = <any>error });\r\n\r\n    this.nucleicAcidTypes = APP_SETTINGS.NUCLEIC_ACID_TYPES;\r\n  }\r\n\r\n  tsvJSON(tsv) {\r\n\r\n    let lines = tsv.split(\"\\n\");\r\n\r\n    // discard first line of text file (specific to LIDE text files)\r\n    lines.splice(0, 1);\r\n\r\n    let result = [];\r\n\r\n    let headers = lines[0].split(\"\\t\");\r\n\r\n    for (let i = 1; i < lines.length; i++) {\r\n\r\n      let obj = {};\r\n      let currentline = lines[i].split(\"\\t\");\r\n\r\n      for (let j = 0; j < headers.length; j++) {\r\n        obj[headers[j]] = currentline[j];\r\n      }\r\n      result.push(obj);\r\n    }\r\n\r\n    // return result as JavaScript object\r\n    return result;\r\n  }\r\n\r\n  lookupTargetID(targetCode) {\r\n    for (let target of this.allTargets) {\r\n      if (targetCode === target.code) {\r\n        return target.id;\r\n      }\r\n    }\r\n  }\r\n\r\n  clearFileInput(ctrl) {\r\n    try {\r\n      ctrl.value = null;\r\n    } catch (ex) { }\r\n    if (ctrl.value) {\r\n      ctrl.parentNode.replaceChild(ctrl.cloneNode(true), ctrl);\r\n    }\r\n  }\r\n\r\n  loadInhFile(fileInput: any) {\r\n    this.inhFileNameErrorFlag = false;\r\n    let self = this;\r\n    let input = fileInput.target\r\n    let fileName = fileInput.target.files[0].name;\r\n\r\n    // let fileNamePattern: RegExp = (/\\d+-\\d-I[DR]\\.txt/);\r\n    let fileNamePattern: RegExp = (/\\d+-\\d+-I[DR]\\.txt/);\r\n\r\n    if (!fileNamePattern.test(fileName)) {\r\n      this.inhFileNameErrorFlag = true;\r\n      return;\r\n    }\r\n\r\n    let tsv: string;\r\n    let json = [];\r\n    let fileReader = new FileReader();\r\n    fileReader.onload = function (e) {\r\n\r\n      // capture TSV string from file\r\n      tsv = fileReader.result;\r\n      // convert tsv to JSON\r\n      json = self.tsvJSON(tsv);\r\n\r\n      // delete superfluous fields from raw data\r\n      for (let item of json) {\r\n        delete item.Color;\r\n        delete item.Include;\r\n        delete item.Status;\r\n        delete item.Pos;\r\n        delete item.Standard;\r\n      }\r\n      self.parseInhJSON(fileName, json)\r\n    }\r\n    fileReader.readAsText(input.files[0]);\r\n  }\r\n\r\n  loadTargetFile(fileInput: any) {\r\n\r\n    this.rawResultsParsed = false;\r\n    this.resultsSubmissionReady = false;\r\n    this.validationResponseReady = false;\r\n    this.resultsSubmissionErrorFlag = false;\r\n    this.replicateUpdateSuccessFlag = false;\r\n    this.resultsSubmissionSuccessFlag = false;\r\n\r\n    this.targetFileNameErrorFlag = false;\r\n    let self = this;\r\n    let input = fileInput.target\r\n    let fileName = fileInput.target.files[0].name;\r\n\r\n    // let fileNamePattern: RegExp = (/\\d\\d\\d\\d\\d-\\d-[A-z]+-\\d/);\r\n    let fileNamePattern: RegExp = (/\\d+-\\d+-[a-zA-Z0-9]+-\\d+.txt/);\r\n\r\n    if (!fileNamePattern.test(fileName)) {\r\n      this.targetFileNameErrorFlag = true;\r\n      return;\r\n    }\r\n\r\n    let tsv: string;\r\n    let json = [];\r\n    let fileReader = new FileReader();\r\n    fileReader.onload = function (e) {\r\n\r\n      // capture TSV string from file\r\n      tsv = fileReader.result;\r\n      // convert tsv to JSON\r\n      json = self.tsvJSON(tsv);\r\n\r\n      // delete superfluous fields from raw data\r\n      for (let item of json) {\r\n        delete item.Color;\r\n        delete item.Include;\r\n        delete item.Status;\r\n        delete item.Pos;\r\n        delete item.Standard;\r\n      }\r\n\r\n      self.parseTargetJSON(fileName, json)\r\n    }\r\n    fileReader.readAsText(input.files[0]);\r\n  }\r\n\r\n  parseTargetJSON(fileName, rawResults) {\r\n    let rawTargetResults: ITargetResults = {\r\n      target: null,\r\n      analysis_batch: null,\r\n      extraction_number: null,\r\n      replicate_number: null,\r\n\r\n      // ext_neg_cq_value: null,\r\n      // ext_neg_gc_reaction: null,\r\n      // rt_neg_cq_value: null,\r\n      // rt_neg_gc_reaction: null,\r\n      // pcr_neg_cq_value: null,\r\n      // pcr_neg_gc_reaction: null,\r\n      // pcr_pos_cq_value: null,\r\n      // pcr_pos_gc_reaction: null,\r\n      re_pcr: null,\r\n      notes: '',\r\n      updated_pcrreplicates: []\r\n    }\r\n    let fileNameSansExtension = fileName.replace(\".txt\", \"\")\r\n    let fileMetadata = fileNameSansExtension.split(\"-\");\r\n\r\n    let numbersOnlyPattern: RegExp = (/^[0-9]*$/);\r\n\r\n    rawTargetResults.analysis_batch = Number(fileMetadata[0]);\r\n    rawTargetResults.extraction_number = Number(fileMetadata[1]);\r\n    rawTargetResults.target = this.lookupTargetID(fileMetadata[2]);\r\n    rawTargetResults.replicate_number = Number(fileMetadata[3])\r\n\r\n    // strictly for display on confirmation div\r\n    this.textFileNameTargetCode = fileMetadata[2]\r\n\r\n    for (let rep of rawResults) {\r\n      if (rep.Name === \"EXT NEG\") {\r\n        if (rep.Cp === \"\") { rawTargetResults.ext_neg_cq_value = null; } else { rawTargetResults.ext_neg_cq_value = Number(rep.Cp) }\r\n        // tslint:disable-next-line:max-line-length\r\n        if (rep.Concentration === \"\") { rawTargetResults.ext_neg_gc_reaction = null; } else { rawTargetResults.ext_neg_gc_reaction = Number(rep.Concentration) }\r\n      }\r\n      if (rep.Name === \"PCR NEG\") {\r\n        if (rep.Cp === \"\") { rawTargetResults.pcr_neg_cq_value = null; } else { rawTargetResults.pcr_neg_cq_value = Number(rep.Cp) }\r\n        // tslint:disable-next-line:max-line-length\r\n        if (rep.Concentration === \"\") { rawTargetResults.pcr_neg_gc_reaction = null; } else { rawTargetResults.pcr_neg_gc_reaction = Number(rep.Concentration) }\r\n      }\r\n      if (rep.Name === \"POS\") {\r\n        if (rep.Cp === \"\") { rawTargetResults.pcr_pos_cq_value = null; } else { rawTargetResults.pcr_pos_cq_value = Number(rep.Cp) }\r\n        // tslint:disable-next-line:max-line-length\r\n        if (rep.Concentration === \"\") { rawTargetResults.pcr_pos_gc_reaction = null; } else { rawTargetResults.pcr_pos_gc_reaction = Number(rep.Concentration) }\r\n      }\r\n      if (rep.Name === \"RT NEG\") {\r\n        if (rep.Cp === \"\") { rawTargetResults.rt_neg_cq_value = null; } else { rawTargetResults.rt_neg_cq_value = Number(rep.Cp) }\r\n        // tslint:disable-next-line:max-line-length\r\n        if (rep.Concentration === \"\") { rawTargetResults.rt_neg_gc_reaction = null; } else { rawTargetResults.rt_neg_gc_reaction = Number(rep.Concentration) }\r\n      }\r\n\r\n      if (numbersOnlyPattern.test(rep.Name)) {\r\n\r\n        // these two lines set blank values to null, and coerce non-blank values to numbers\r\n        if (rep.Cp === \"\") { rep.Cp = null; } else { rep.Cp = Number(rep.Cp) }\r\n        if (rep.Concentration === \"\") { rep.Concentration = null; } else { rep.Concentration = Number(rep.Concentration) }\r\n\r\n        rawTargetResults.updated_pcrreplicates.push({\r\n          \"sample\": Number(rep.Name),\r\n          \"cq_value\": rep.Cp,\r\n          \"gc_reaction\": rep.Concentration\r\n        });\r\n      }\r\n    }\r\n    this.parsedRawTargetResults = rawTargetResults;\r\n    this.rawResultsParsed = true;\r\n\r\n    // retrieve the PCR replicate batch ID based on text file name metadata\r\n    this._pcrReplicateBatchService.getID(rawTargetResults.analysis_batch,\r\n      rawTargetResults.extraction_number, rawTargetResults.target, rawTargetResults.replicate_number)\r\n      .subscribe(\r\n        (pcrReplicateBatch) => {\r\n\r\n          if (pcrReplicateBatch.length === 0) {\r\n            alert(\"Replicate #\" + rawTargetResults.replicate_number + \" not found in database.\");\r\n          }\r\n          this.parsedRawTargetResults_pcrBatchID = pcrReplicateBatch[0].id;\r\n          this.pcrReplicateBatchIDErrorFlag = false;\r\n          this.resultsSubmissionReady = true;\r\n        },\r\n        error => {\r\n          this.errorMessage = error;\r\n          this.pcrReplicateBatchIDErrorFlag = true;\r\n          this.resultsSubmissionReady = false;\r\n        }\r\n      )\r\n  }\r\n\r\n  parseInhJSON(fileName, rawInhResults) {\r\n    let inhResults: IInhResults = {\r\n      analysis_batch: null,\r\n      extraction_number: null,\r\n      nucleic_acid_type: null,\r\n      inh_pos_cq_value: null,\r\n      inhibitions: []\r\n    }\r\n    let fileNameSansExtension = fileName.replace(\".txt\", \"\")\r\n    let fileMetadata = fileNameSansExtension.split(\"-\");\r\n    let type = fileMetadata[2];\r\n\r\n    // strictly for display on confirmation div\r\n    this.inhTextFileNameNAType = fileMetadata[2];\r\n\r\n    inhResults.analysis_batch = Number(fileMetadata[0]);\r\n    inhResults.extraction_number = Number(fileMetadata[1]);\r\n    if (type === \"ID\") { inhResults.nucleic_acid_type = 1 } else if (type === \"IR\") { inhResults.nucleic_acid_type = 2 }\r\n\r\n    // loop below removes any superfluous blank lines (Name = undefined) with a reverse loop conditional and splice\r\n    for (let i = rawInhResults.length - 1; i >= 0; --i) {\r\n      if (rawInhResults[i].Name === undefined) {\r\n        rawInhResults.splice(i, 1); // Remove blank lines\r\n      }\r\n    }\r\n\r\n    for (let sample of rawInhResults) {\r\n      if (sample.Name === \"INH CONT\") {\r\n        inhResults.inh_pos_cq_value = Number(sample.Cp);\r\n      } else if (sample.Name !== \"INH CONT\") {\r\n        inhResults.inhibitions.push({ \"sample\": Number(sample.Name), \"cq_value\": Number(sample.Cp) })\r\n      }\r\n    }\r\n    this.parsedRawInhResults = inhResults;\r\n    this.rawInhResultsParsed = true;\r\n  }\r\n\r\n  submitRawInhibitionResults() {\r\n\r\n    this.resetInhibitions();\r\n\r\n    this._inhibitionService.submitRawInhibitionResults(this.parsedRawInhResults)\r\n      .subscribe(\r\n        (calculatedDilutions) => {\r\n          this.inhibitionValidationObject = calculatedDilutions;\r\n          this.inhibitionsArray.controls = [];\r\n          // populate the dilutions form inhibitions array from the calculatedDilutions response\r\n          for (let inh of calculatedDilutions) {\r\n            let formGroup: FormGroup = this.formBuilder.group({\r\n              id: this.formBuilder.control(inh.id),\r\n              sample: this.formBuilder.control(inh.sample),\r\n              dilution_factor: this.formBuilder.control(inh.suggested_dilution_factor),\r\n              cq_value: this.formBuilder.control(inh.cq_value)\r\n            })\r\n            this.inhibitionsArray.push(formGroup);\r\n          }\r\n\r\n          // capture the extractionbatch ID calculated by the inh calculation step response for use in the submitInhibitons func\r\n          // the ID is rpeated in each item in the array, so just capture from the first item in the array\r\n          // this.inhExtractionBatchID = calculatedDilutions[0].extraction_batch;\r\n          this.parsedRawInhResults.extraction_batch = calculatedDilutions[0].extraction_batch;\r\n\r\n          this.inhLoadingFlag = false;\r\n          this.dilutionFactorsCalculated = true;\r\n        },\r\n        error => {\r\n          this.errorMessage = error;\r\n          this.inhLoadingFlag = false;\r\n          this.inhRawErrorMessage = <any>error\r\n          this.inhRawErrorFlag = true;\r\n        }\r\n      )\r\n  }\r\n\r\n  // outgoing, old function\r\n  submitRawTargetResults() {\r\n\r\n    this.replicatesLoading = true;\r\n    this.validationResponseReady = false;\r\n    this.resultsSubmissionSuccessFlag = false;\r\n\r\n    this.errorMessage = '';\r\n\r\n    this._pcrReplicateBatchService.update(this.parsedRawTargetResults_pcrBatchID, this.parsedRawTargetResults)\r\n      .subscribe(\r\n        (results) => {\r\n          this.pcrResultsObject = results;\r\n          this.pcrResultsReplicates = results.pcrreplicates;\r\n\r\n          this.pcrResultsReplicates.sort(function (a, b) {\r\n            return a.sample - b.sample\r\n          })\r\n          this.resultsSubmissionSuccessFlag = true;\r\n          this.replicatesLoading = false;\r\n          // this.finishResultsSubmission();\r\n        },\r\n        error => {\r\n          this.errorMessage = error;\r\n          this.resultsSubmissionErrorFlag = true;\r\n          this.resultsSubmissionSuccessFlag = false;\r\n          this.replicatesLoading = false;\r\n        }\r\n      )\r\n  }\r\n\r\n  // TODO: new validate function\r\n  validateTargetResults() {\r\n\r\n    this.errorMessage = '';\r\n\r\n    this.validationLoading = true;\r\n\r\n    this._pcrReplicateBatchService.validate(this.parsedRawTargetResults)\r\n      .subscribe(\r\n        (results) => {\r\n          console.log(results);\r\n\r\n          // use only for testing\r\n          // for (const rep of results.updated_pcrreplicates) {\r\n\r\n          //   rep.validation_errors.push({\r\n          //     \"field\": \"cq_value\",\r\n          //     \"message\": \"cq_value ('cp') is missing\",\r\n          //     \"severity\": 2\r\n          //   })\r\n          //   rep.validation_errors.push({\r\n          //     \"field\": \"gc_reaction\",\r\n          //     \"message\": \"gc_reaction ('concentration') is missing\",\r\n          //     \"severity\": 2\r\n          //   })\r\n          // }\r\n\r\n          this.parsedRawTargetResults_pcrBatchID = results.id;\r\n          this.pcrReplicateBatchIDErrorFlag = false;\r\n\r\n          this.pcrResultsValidationObject = results;\r\n          this.pcrResultsValidationReplicates = results.updated_pcrreplicates;\r\n          this.pcrResultsValidationReplicates.sort(function (a, b) {\r\n            return a.sample - b.sample\r\n          })\r\n          this.validationLoading = false;\r\n          this.validationResponseReady = true;\r\n        },\r\n        error => {\r\n          this.errorMessage = error;\r\n          this.validationLoading = false;\r\n          //this.resultsSubmissionErrorFlag = true;\r\n        }\r\n      )\r\n  }\r\n\r\n  onUpdatePCRReplicates(selectedReps) {\r\n\r\n    this.errorMessage = '';\r\n    this.replicateUpdateSuccessFlag = false;\r\n    this.replicateUpdateErrorFlag = false;\r\n    this.submitLoading = true;\r\n\r\n    this.replicatesLoading = true;\r\n    this.pcrResultsReplicates = [];\r\n\r\n    let repArray = [];\r\n\r\n    for (let rep of selectedReps) {\r\n      repArray.push({\r\n        \"id\": rep.id,\r\n        \"invalid\": !rep.invalid\r\n      })\r\n    }\r\n\r\n    this._pcrReplicateService.update(repArray)\r\n      .subscribe(\r\n        (results) => {\r\n          this.pcrResultsReplicates = results;\r\n          this.replicateUpdateSuccessFlag = true;\r\n          this.replicateUpdateErrorFlag = false;\r\n          this.submitLoading = false;\r\n          this.replicatesLoading = false;\r\n        },\r\n        error => {\r\n          this.errorMessage = error;\r\n          this.replicateUpdateSuccessFlag = false;\r\n          this.replicateUpdateErrorFlag = true;\r\n          this.submitLoading = false;\r\n          this.replicatesLoading = false;\r\n        }\r\n      )\r\n  }\r\n\r\n  finishResultsSubmission() {\r\n    this.rawResultsParsed = false;\r\n    this.resultsSubmissionReady = false;\r\n    this.validationResponseReady = false;\r\n    this.resultsSubmissionErrorFlag = false;\r\n    this.replicateUpdateSuccessFlag = false;\r\n    this.resultsSubmissionSuccessFlag = false;\r\n    this.clearFileInput(document.getElementById(\"targetFileInput\"));\r\n  }\r\n\r\n  resetResultsUpload() {\r\n\r\n  }\r\n\r\n  submitInhibitions(dilutionsFormValue) {\r\n    this.errorMessage = '';\r\n    this.submitLoading = true;\r\n    this.inhibitionUpdateSuccessFlag = false;\r\n    this.inhibitionUpdateErrorFlag = false;\r\n\r\n    let inhibitionsSubmission = [];\r\n    for (let inh of dilutionsFormValue.inhibitions) {\r\n      inhibitionsSubmission.push(inh);\r\n    }\r\n\r\n    this._inhibitionService.update(inhibitionsSubmission)\r\n      .subscribe(\r\n        (results) => {\r\n\r\n          // build an object to update the EB record with the inh pos cq value (and nucleic acid type)\r\n          let extractionbatchObject = {\r\n            id: this.parsedRawInhResults.extraction_batch,\r\n            inh_pos_nucleic_acid_type: this.parsedRawInhResults.nucleic_acid_type,\r\n            inh_pos_cq_value: this.parsedRawInhResults.inh_pos_cq_value\r\n          };\r\n\r\n          // submit PATCH to extractionbatch record with inh_pos_cq_value and inh_pos_nucleic_acid_type\r\n          this._extractionBatchService.update(extractionbatchObject)\r\n            .subscribe(\r\n              (extractionbatch) => {\r\n                this.inhibitionUpdateSuccessFlag = true;\r\n                this.inhibitionUpdateErrorFlag = false;\r\n                this.submitLoading = false;\r\n              },\r\n              error => {\r\n                this.errorMessage = error;\r\n\r\n              }\r\n            )\r\n\r\n        },\r\n        error => {\r\n          this.errorMessage = error;\r\n          this.inhibitionUpdateSuccessFlag = false;\r\n          this.inhibitionUpdateErrorFlag = true;\r\n          this.submitLoading = false;\r\n        }\r\n      )\r\n  }\r\n\r\n  resetInhibitions() {\r\n\r\n    this.errorMessage = '';\r\n\r\n    this.inhibitionUpdateSuccessFlag = false;\r\n    this.inhibitionUpdateErrorFlag = false;\r\n\r\n    this.rawInhResultsParsed = false;\r\n    this.dilutionFactorsCalculated = false;\r\n    this.clearFileInput(document.getElementById(\"inhibitionFileInput\"));\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/data-upload/data-upload.component.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\nimport { IExtractionBatchSubmission } from './extraction-batch-submission';\r\nimport { IExtractionBatch } from 'app/extraction-batches/extraction-batch';\r\n\r\n@Injectable()\r\nexport class ExtractionBatchService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  public create(formValue: IExtractionBatchSubmission): Observable<any[]> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.post(APP_SETTINGS.EXTRACTION_BATCHES_URL, formValue, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  public update(formValue): Observable<IExtractionBatch> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.patch(APP_SETTINGS.EXTRACTION_BATCHES_URL + formValue.id + '/', formValue, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  public delete(id: number): Observable<any> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.delete(APP_SETTINGS.EXTRACTION_BATCHES_URL + id, options)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public bulkUpdate(ebSubmissionArray): Observable<IExtractionBatch> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.patch(APP_SETTINGS.EXTRACTION_BATCHES_URL, ebSubmissionArray, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/extraction-batches/extraction-batch.service.ts","import { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { IExtractionMethod } from '../extraction-batches/extraction-method';\r\nimport { ExtractionMethodService } from '../extraction-batches/extraction-method.service';\r\n\r\n@Injectable()\r\nexport class ExtractionResolve implements Resolve<Array<IExtractionMethod>> {\r\n\r\n  constructor(private _extractionService: ExtractionMethodService) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot): Observable<Array<IExtractionMethod>> {\r\n     return this._extractionService.getExtractionMethods();\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/extraction-batches/extraction-method.resolve.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\nimport { IExtractionMethod } from './extraction-method';\r\n\r\n\r\n@Injectable()\r\nexport class ExtractionMethodService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  private extractData(res: Response) {\r\n    let body = res.json();\r\n    return body.data || {};\r\n  }\r\n\r\n  getExtractionMethods(): Observable<IExtractionMethod[]> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.get(APP_SETTINGS.EXTRACTION_METHODS_URL, options)\r\n      .map((response: Response) => <IExtractionMethod[]>response.json())\r\n      // .do(data => console.log('Sample types data: ' + JSON.stringify(data)))\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  public create(formValue: IExtractionMethod): Observable<IExtractionMethod> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.AUTH_JSON_HEADERS });\r\n\r\n    return this._http.post(APP_SETTINGS.EXTRACTION_METHODS_URL, formValue, options)\r\n      .map((response: Response) => <IExtractionMethod>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public update(formValue: IExtractionMethod): Observable<IExtractionMethod> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.put(APP_SETTINGS.EXTRACTION_METHODS_URL + formValue.id + '/', formValue, options)\r\n    .map((response: Response) => <IExtractionMethod>response.json())\r\n    .catch(this.handleError);\r\n  }\r\n\r\n  public delete(id: number): Observable<IExtractionMethod> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.delete(APP_SETTINGS.EXTRACTION_METHODS_URL + id, options)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/extraction-batches/extraction-method.service.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\nimport { Subject } from \"rxjs/Subject\";\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\nimport { IFinalConcentratedSampleVolume } from './final-concentrated-sample-volume';\r\n\r\n@Injectable()\r\nexport class FinalConcentratedSampleVolumeService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  public create(fcsvSubmission: IFinalConcentratedSampleVolume[]): Observable<any> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.post(APP_SETTINGS.FCSV_URL, fcsvSubmission, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError)\r\n\r\n  }\r\n\r\n  public update(fcsvID, formValue): Observable<any> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.put(APP_SETTINGS.FCSV_URL + fcsvID + '/', formValue, options)\r\n      .map((response: Response) => <any>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/fcsv/final-concentrated-sample-volume.service.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-8 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-block\\\">\\r\\n                <div class=\\\"card-text\\\">\\r\\n                    <p>Welcome to\\r\\n                        <span class=\\\"standoutMore\\\">lili</span>\\r\\n                        <br>\\r\\n                        <span class=\\\"standout\\\">L</span>aboratory for\\r\\n                        <span class=\\\"standout\\\">I</span>nfectious Disease and Environment\\r\\n                        <span class=\\\"standout\\\">L</span>aboratory\\r\\n                        <span class=\\\"standout\\\">I</span>nformation Management System.\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/home.component.html\n// module id = ./src/app/home/home.component.html\n// module chunks = main","module.exports = \".standout {\\n  font-size: x-large;\\n  font-weight: bold; }\\n\\n.standoutMore {\\n  font-size: xx-large;\\n  font-weight: bold; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/home/home.component.scss\n// module id = ./src/app/home/home.component.scss\n// module chunks = main","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    styleUrls: ['./home.component.scss'],\r\n    templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent {\r\n\r\n    constructor() { }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/home/home.component.ts","export * from './app.component';\r\nexport * from './app.module';\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/index.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\nimport { IInhibition } from './inhibition';\r\n\r\n\r\n@Injectable()\r\nexport class InhibitionService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  public submitRawInhibitionResults(rawInhResults): Observable<any> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.post(APP_SETTINGS.INHIBITIONS_RAW_RESULTS_URL, rawInhResults, options)\r\n      .map((response: Response) => <any>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  public create(formValue): Observable<IInhibition[]> {\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.post(APP_SETTINGS.INHIBITIONS_URL, formValue, options)\r\n      .map((response: Response) => <IInhibition[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  public update(inhibitionArray): Observable<any> {\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.patch(APP_SETTINGS.INHIBITIONS_URL, inhibitionArray, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public getInhibitionReport(queryObject): Observable<any> {\r\n\r\n    let queryString = '';\r\n    queryString += '?sample=';\r\n    for (let sample of queryObject.samples) {\r\n      queryString += ((sample.toString()) + ',')\r\n    }\r\n    queryString = queryString.slice(0, -1);\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.EXTRACTIONS_URL + 'inhibition_report/' + queryString, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/inhibitions/inhibition.service.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\n@Injectable()\r\nexport class PcrReplicateBatchService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  public getID(analysisBatchID, extractionNo, targetID, replicateNo): Observable<any> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.REPLICATE_BATCH_URL +\r\n      '?analysis_batch=' + analysisBatchID +\r\n      '&extraction_number=' + extractionNo +\r\n      '&target=' + targetID +\r\n      '&replicate_number=' + replicateNo, options)\r\n      .map((response: Response) => <any>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public validate(targetResults): Observable<any> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.post(APP_SETTINGS.REPLICATE_BATCH_URL + 'validate/', targetResults, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public update(pcrBatchID, targetResults): Observable<any> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.put(APP_SETTINGS.REPLICATE_BATCH_URL + pcrBatchID + '/', targetResults, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  postBulkNegativeResults(replicateArray) {\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.post(APP_SETTINGS.REPLICATE_BATCH_URL + 'bulk_load_negatives/', replicateArray, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/pcr-replicates/pcr-replicate-batch.service.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\n@Injectable()\r\nexport class PcrReplicateService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  // TODO: update this to handle batch (array) patch\r\n  public update(replicateArray): Observable<any> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.patch(APP_SETTINGS.REPLICATES_URL, replicateArray, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  getPCRReplicates(replicateList) {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.REPLICATES_URL + '?id=' + replicateList, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  getSummaryStatistics(queryObject): Observable<any> {\r\n    let queryString = '';\r\n    queryString += '?sample=';\r\n    for (let sample of queryObject.samples) {\r\n      queryString += ((sample.toString()) + ',')\r\n    }\r\n    queryString = queryString.slice(0, -1);\r\n    queryString += '&target=';\r\n    for (let target of queryObject.targets) {\r\n      queryString += ((target.toString()) + ',')\r\n    }\r\n    queryString = queryString.slice(0, -1);\r\n\r\n    if (queryObject.summary_stats.length > 0) {\r\n      queryString += '&statistic=';\r\n      for (let stat of queryObject.summary_stats) {\r\n        queryString += ((stat.toString()) + ',')\r\n      }\r\n      queryString = queryString.slice(0, -1);\r\n    }\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.REPLICATES_URL + 'summary_statistics/' + queryString, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/pcr-replicates/pcr-replicate.service.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\n@Injectable()\r\nexport class ControlResultsReportService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  public getControlResultsReport(queryObject): Observable<any> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.post(APP_SETTINGS.CONTROL_RESULTS_REPORT_URL, queryObject, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/reports/control-results-report.service.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\n\r\n@Injectable()\r\nexport class QualityControlReportService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  public getQualityControlReport(sampleArray): Observable<any> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.post(APP_SETTINGS.QUALITY_CONTROL_REPORT_URL, sampleArray, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/reports/quality-control-report.service.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\n@Injectable()\r\nexport class ReportFileService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  public getReportFiles(): Observable<any> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.REPORT_FILES_URL, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  public retrieveReport(fileURL): Observable<any> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(fileURL, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/reports/report-file.service.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings'\r\n\r\n\r\n@Injectable()\r\nexport class ReportStatusService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  getReportStatuses(): Observable<any> {\r\n\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.get(APP_SETTINGS.REPORT_STATUSES_URL, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/reports/report-status.service.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings'\r\n\r\n@Injectable()\r\nexport class ReportTypesService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  getReportTypes(): Observable<any> {\r\n\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.get(APP_SETTINGS.REPORT_TYPES_URL, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/reports/report-types.service.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-xs-12\\\">\\r\\n        <h3>Reports</h3>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n\\r\\n        <clr-tabs>\\r\\n            <!-- Generate Reports tab -->\\r\\n            <clr-tab>\\r\\n                <button clrTabLink>Generate Reports</button>\\r\\n                <clr-tab-content>\\r\\n\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n                            <p>\\r\\n                                <button class=\\\"btn btn-outline\\\" (click)=\\\"openReportsQueryWizard()\\\">\\r\\n                                    <clr-icon shape=\\\"search\\\"></clr-icon> Open Reports Query Builder\\r\\n                                </button>\\r\\n\\r\\n                        </div>\\r\\n                        <div class=\\\"row\\\">\\r\\n                            <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n\\r\\n                                <clr-wizard #reportsQueryWizard [(clrWizardOpen)]=\\\"reportsQueryWizardActive\\\">\\r\\n                                    <clr-wizard-title>Reports Query Builder</clr-wizard-title>\\r\\n\\r\\n                                    <clr-wizard-button [type]=\\\"'cancel'\\\">Cancel</clr-wizard-button>\\r\\n                                    <clr-wizard-button [type]=\\\"'previous'\\\">Back</clr-wizard-button>\\r\\n                                    <clr-wizard-button [type]=\\\"'next'\\\">Next</clr-wizard-button>\\r\\n                                    <clr-wizard-button [type]=\\\"'finish'\\\">Finish</clr-wizard-button>\\r\\n\\r\\n                                    <clr-wizard-page (clrWizardPageCustomButton)=\\\"doCustomClick($event)\\\">\\r\\n                                        <ng-template clrPageTitle>Select Samples</ng-template>\\r\\n\\r\\n                                        <!-- Begin sample query form -->\\r\\n                                        <div class=\\\"card-text\\\">\\r\\n                                            <form class=\\\"form compact\\\" [formGroup]=\\\"sampleQueryForm\\\"\\r\\n                                                (ngSubmit)=\\\"onSubmitSampleQuery(sampleQueryForm.value)\\\">\\r\\n                                                <section class=\\\"form-block\\\">\\r\\n\\r\\n                                                    <div class=\\\"form-group\\\">\\r\\n                                                        <label\\r\\n                                                            [ngClass]=\\\"{'required': sampleQueryForm.get('study').enabled}\\\">Study</label>\\r\\n                                                        <label for=\\\"studySelect\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                                            class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                                                            [class.invalid]=\\\"sampleQueryForm.get('study').invalid && (sampleQueryForm.get('study').dirty || sampleQueryForm.get('study').touched)\\\">\\r\\n                                                            <div class=\\\"select\\\">\\r\\n                                                                <select id=\\\"studySelect\\\" name=\\\"study\\\"\\r\\n                                                                    formControlName=\\\"study\\\">\\r\\n                                                                    <option value=\\\"\\\">\\r\\n                                                                        <span class=\\\"all\\\">ALL STUDIES</span>\\r\\n                                                                    </option>\\r\\n                                                                    <option *ngFor=\\\"let study of studies\\\"\\r\\n                                                                        [value]=\\\"study.id\\\">{{study.name}}\\r\\n                                                                    </option>\\r\\n                                                                </select>\\r\\n                                                            </div>\\r\\n                                                        </label>\\r\\n                                                    </div>\\r\\n\\r\\n                                                    <div class=\\\"form-group\\\">\\r\\n                                                        <label>Sample ID Range</label>\\r\\n                                                        <span>From</span>\\r\\n                                                        <input type=\\\"number\\\" formControlName=\\\"from_id\\\">\\r\\n                                                        <span>To</span>\\r\\n                                                        <input type=\\\"number\\\" formControlName=\\\"to_id\\\">\\r\\n                                                    </div>\\r\\n\\r\\n                                                    <div class=\\\"form-group\\\">\\r\\n                                                        <label>Collection Start Date Range</label>\\r\\n                                                        <span>From</span>\\r\\n                                                        <input type=\\\"date\\\" formControlName=\\\"from_collection_start_date\\\">\\r\\n                                                        <span>To</span>\\r\\n                                                        <input type=\\\"date\\\" formControlName=\\\"to_collection_start_date\\\">\\r\\n                                                    </div>\\r\\n\\r\\n                                                    <div class=\\\"form-group\\\">\\r\\n                                                        <label>Collaborator Sample ID</label>\\r\\n                                                        <input id=\\\"collabSampleIdInput\\\" type=\\\"text\\\"\\r\\n                                                            formControlName=\\\"collaborator_sample_id\\\">\\r\\n                                                    </div>\\r\\n\\r\\n                                                    <div class=\\\"form-group\\\">\\r\\n                                                        <label>Peg Neg (returns associated samples)</label>\\r\\n                                                        <input type=\\\"number\\\" formControlName=\\\"peg_neg\\\">\\r\\n                                                    </div>\\r\\n                                                    <!-- <div class=\\\"form-group\\\">\\r\\n                                                                <label>Matrix</label>\\r\\n                                                                <div class=\\\"select\\\">\\r\\n                                                                    <select id=\\\"matrixSelect\\\" name=\\\"matrix\\\" formControlName=\\\"matrix\\\">\\r\\n                                                                        <option value=\\\"\\\">\\r\\n                                                                            <span class=\\\"all\\\">ALL MATRICES</span>\\r\\n                                                                        </option>\\r\\n                                                                        <option *ngFor=\\\"let matrix of matrices\\\" [value]=\\\"matrix.id\\\">{{matrix.name}}</option>\\r\\n                                                                    </select>\\r\\n                                                                </div>\\r\\n                                                            </div>\\r\\n                                \\r\\n                                                            <div class=\\\"form-group\\\">\\r\\n                                                                <label>Sample type</label>\\r\\n                                                                <div class=\\\"select\\\">\\r\\n                                                                    <select id=\\\"sampleTypeSelect\\\" name=\\\"sample_type\\\" formControlName=\\\"sample_type\\\">\\r\\n                                                                        <option value=\\\"\\\">\\r\\n                                                                            <span class=\\\"all\\\">ALL SAMPLE TYPES</span>\\r\\n                                                                        </option>\\r\\n                                                                        <option *ngFor=\\\"let sampleType of sampleTypes\\\" [value]=\\\"sampleType.id\\\">{{sampleType.name}}</option>\\r\\n                                                                    </select>\\r\\n                                                                </div>\\r\\n                                                            </div> -->\\r\\n\\r\\n                                                </section>\\r\\n\\r\\n                                                <clr-alert [clrAlertType]=\\\"'alert-danger'\\\"\\r\\n                                                    *ngIf=\\\"sampleQuerySizeErrorFlag\\\">\\r\\n                                                    <div class=\\\"alert-item\\\">\\r\\n                                                        <span class=\\\"alert-text\\\">Your query results are too large\\r\\n                                                            (greater than\\r\\n                                                            {{queryCountLimit}}). Please narrow your search.</span>\\r\\n                                                    </div>\\r\\n                                                </clr-alert>\\r\\n\\r\\n                                                <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\"\\r\\n                                                    [clrLoading]=\\\"submitLoading\\\">\\r\\n                                                    <clr-icon shape=\\\"filter\\\"></clr-icon> Filter Samples\\r\\n                                                </button>\\r\\n                                            </form>\\r\\n                                        </div>\\r\\n\\r\\n                                        <div *ngIf=\\\"sampleQueryComplete\\\">\\r\\n                                            <h4>Query returned {{samplesCount}} sample records</h4>\\r\\n                                        </div>\\r\\n                                        <!-- End sample query form -->\\r\\n\\r\\n\\r\\n                                        <div class=\\\"in-wizard-datagrid\\\">\\r\\n                                            <clr-datagrid [(clrDgSelected)]=\\\"selected\\\" [clrDgLoading]=\\\"samplesLoading\\\"\\r\\n                                                [clDgRowSelection]=\\\"true\\\" class=\\\"datagrid-compact\\\">\\r\\n\\r\\n                                                <clr-dg-action-bar>\\r\\n                                                    <div class=\\\"btn-group\\\">\\r\\n                                                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                            (click)=\\\"selectAll()\\\">\\r\\n                                                            <clr-icon shape=\\\"check\\\" size=\\\"16\\\"></clr-icon> Select All\\r\\n                                                        </button>\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"btn-group\\\">\\r\\n                                                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                            (click)=\\\"deselectAll()\\\">\\r\\n                                                            <clr-icon shape=\\\"window-close\\\" size=\\\"16\\\"></clr-icon>\\r\\n                                                            Deselect All\\r\\n                                                        </button>\\r\\n                                                    </div>\\r\\n                                                </clr-dg-action-bar>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'id'\\\">\\r\\n                                                    Sample ID\\r\\n                                                    <clr-dg-filter [clrDgFilter]=\\\"rangeFilter\\\">\\r\\n                                                        <range-filter #rangeFilter></range-filter>\\r\\n                                                    </clr-dg-filter>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'collaborator_sample_id'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Collaborator Sample ID\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'study_string'\\\">\\r\\n                                                    Study\\r\\n                                                    <clr-dg-filter [clrDgFilter]=\\\"studyFilter\\\">\\r\\n                                                        <study-filter #studyFilter></study-filter>\\r\\n                                                    </clr-dg-filter>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'collection_start_date'\\\">\\r\\n                                                    Collect Start Date\\r\\n                                                    <clr-dg-filter [clrDgFilter]=\\\"CollectionStartDateFilter\\\">\\r\\n                                                        <collection-start-date-filter\\r\\n                                                            [dateField]=\\\"'collection_start_date'\\\"\\r\\n                                                            #CollectionStartDateFilter></collection-start-date-filter>\\r\\n                                                    </clr-dg-filter>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-row *clrDgItems=\\\"let sample of allSamples\\\" [clrDgItem]=\\\"sample\\\">\\r\\n                                                    <clr-dg-cell>{{sample.id}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{sample.collaborator_sample_id}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{sample.study_string}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{sample.collection_start_date | date:'shortDate'}}\\r\\n                                                    </clr-dg-cell>\\r\\n                                                </clr-dg-row>\\r\\n\\r\\n                                                <clr-dg-footer>\\r\\n                                                    {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of\\r\\n                                                    {{pagination.totalItems}}\\r\\n                                                    samples\\r\\n                                                    <clr-dg-pagination #pagination [clrDgPageSize]=\\\"10\\\">\\r\\n                                                    </clr-dg-pagination>\\r\\n                                                </clr-dg-footer>\\r\\n                                            </clr-datagrid>\\r\\n\\r\\n                                        </div>\\r\\n                                        <p>\\r\\n                                            <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"sampleSelectErrorFlag\\\">\\r\\n                                                <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                                    <span class=\\\"alert-text\\\">Please select at least one sample to\\r\\n                                                        continue.</span>\\r\\n                                                </div>\\r\\n                                            </clr-alert>\\r\\n\\r\\n                                            <ng-template clrPageButtons>\\r\\n                                                <clr-wizard-button [type]=\\\"'custom-cancel'\\\">Cancel</clr-wizard-button>\\r\\n                                                <clr-wizard-button [type]=\\\"'custom-previous'\\\">Back</clr-wizard-button>\\r\\n                                                <clr-wizard-button [type]=\\\"'custom-next-sampleSelect'\\\">Next\\r\\n                                                </clr-wizard-button>\\r\\n                                            </ng-template>\\r\\n                                    </clr-wizard-page>\\r\\n\\r\\n                                    <clr-wizard-page (clrWizardPageCustomButton)=\\\"doCustomClick($event)\\\">\\r\\n                                        <ng-template clrPageTitle>Select Targets</ng-template>\\r\\n                                        <div class=\\\"in-wizard-datagrid\\\">\\r\\n                                            <clr-datagrid [(clrDgSelected)]=\\\"selected\\\" [clDgRowSelection]=\\\"true\\\"\\r\\n                                                class=\\\"datagrid-compact\\\">\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'name'\\\">Name</clr-dg-column>\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'code'\\\">Code</clr-dg-column>\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'type'\\\">Type</clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-row *clrDgItems=\\\"let target of allTargets\\\" [clrDgItem]=\\\"target\\\">\\r\\n                                                    <clr-dg-cell>{{target.name}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{target.code}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>\\r\\n                                                        {{target.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes }}\\r\\n                                                    </clr-dg-cell>\\r\\n                                                </clr-dg-row>\\r\\n\\r\\n                                                <clr-dg-footer>{{allTargets.length}} targets</clr-dg-footer>\\r\\n                                            </clr-datagrid>\\r\\n                                        </div>\\r\\n                                        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"targetSelectErrorFlag\\\">\\r\\n                                            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                                <span class=\\\"alert-text\\\">Please select at least one target to\\r\\n                                                    continue.</span>\\r\\n                                            </div>\\r\\n                                        </clr-alert>\\r\\n                                        <ng-template clrPageButtons>\\r\\n                                            <clr-wizard-button [type]=\\\"'custom-cancel'\\\">Cancel</clr-wizard-button>\\r\\n                                            <clr-wizard-button [type]=\\\"'custom-previous'\\\">Back</clr-wizard-button>\\r\\n                                            <clr-wizard-button [type]=\\\"'custom-next-targetSelect'\\\">Next\\r\\n                                            </clr-wizard-button>\\r\\n                                        </ng-template>\\r\\n                                    </clr-wizard-page>\\r\\n\\r\\n                                    <clr-wizard-page (clrWizardPageCustomButton)=\\\"doCustomClick($event)\\\">\\r\\n                                        <ng-template clrPageTitle>Query Summary</ng-template>\\r\\n                                        <label>Samples:</label>\\r\\n                                        <ul>\\r\\n                                            <li *ngFor=\\\"let sample of reportsQuery.samples\\\">{{sample}}</li>\\r\\n                                        </ul>\\r\\n                                        <p>\\r\\n                                            <label>Targets:</label>\\r\\n                                            <ul>\\r\\n                                                <li *ngFor=\\\"let target of reportsQuery.targets\\\">\\r\\n                                                    {{target | displayValue:'name': allTargets}}\\r\\n                                                </li>\\r\\n                                            </ul>\\r\\n\\r\\n                                            <ng-template clrPageButtons>\\r\\n                                                <clr-wizard-button [type]=\\\"'cancel'\\\">Cancel</clr-wizard-button>\\r\\n                                                <clr-wizard-button [type]=\\\"'custom-previous'\\\">Back</clr-wizard-button>\\r\\n                                                <clr-wizard-button [type]=\\\"'custom-finish'\\\">Finish</clr-wizard-button>\\r\\n                                            </ng-template>\\r\\n\\r\\n                                    </clr-wizard-page>\\r\\n                                </clr-wizard>\\r\\n\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n                            <div class=\\\"card\\\">\\r\\n                                <div class=\\\"card-header\\\">Current Query</div>\\r\\n                                <div class=\\\"card-block\\\"\\r\\n                                    *ngIf=\\\"reportsQuery.samples.length === 0 && reportsQuery.targets.length === 0\\\">\\r\\n                                    No Samples or Targets Selected\\r\\n                                </div>\\r\\n                                <div class=\\\"card-block\\\"\\r\\n                                    *ngIf=\\\"reportsQuery.samples.length > 0 || reportsQuery.targets.length > 0\\\">\\r\\n                                    <div class=\\\"card-title\\\">Samples</div>\\r\\n                                    <div class=\\\"row list-section\\\">\\r\\n                                        <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12 list\\\">\\r\\n                                            <!-- <label class=\\\"text-larger\\\">Samples:&nbsp;</label> -->\\r\\n                                            <label></label><span *ngIf=\\\"reportsQuery.samples.length === 0\\\">No Samples\\r\\n                                                Selected </span><span *ngFor=\\\"let sample of reportsQuery.samples\\\"\\r\\n                                                class=\\\"label list-item\\\">{{sample}}&nbsp;</span><br>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"card-title\\\">Targets</div>\\r\\n                                    <div class=\\\"row list-section\\\">\\r\\n                                        <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12 list\\\">\\r\\n                                            <!-- <label class=\\\"text-larger text-purple\\\">Targets:&nbsp;</label> -->\\r\\n                                            <label></label><span *ngIf=\\\"reportsQuery.targets.length === 0\\\">No Targets\\r\\n                                                Selected </span><span *ngFor=\\\"let target of reportsQuery.targets\\\"\\r\\n                                                class=\\\"label label-purple list-item\\\">{{target | displayValue:'name': allTargets}}&nbsp;</span>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n                            <div class=\\\"card\\\">\\r\\n                                <div class=\\\"card-header\\\">Report Selection</div>\\r\\n                                <div class=\\\"card-block\\\">\\r\\n\\r\\n                                    <form [formGroup]=\\\"reportSelectForm\\\">\\r\\n                                        <section class=\\\"form-block\\\">\\r\\n                                            <!-- <label>Choose Report(s)</label> -->\\r\\n                                            <div class=\\\"form-group\\\">\\r\\n                                                <label>Choose Report(s)</label>\\r\\n\\r\\n                                                <!-- <div class=\\\"checkbox\\\">\\r\\n                                                            <input type=\\\"checkbox\\\" id=\\\"inhibitionReport\\\" formControlName=\\\"inhibition_report\\\">\\r\\n                                                            <label for=\\\"inhibitionReport\\\">Inhibition Report</label><br><span\\r\\n                                                                class=\\\"text-italic\\\">Requires Sample\\r\\n                                                                selection</span>\\r\\n                                                        </div>\\r\\n                                                        <div class=\\\"checkbox\\\">\\r\\n                                                            <input type=\\\"checkbox\\\" id=\\\"resultsReportSummary\\\"\\r\\n                                                                formControlName=\\\"results_report_summary\\\">\\r\\n                                                            <label for=\\\"resultsReportSummary\\\">Results Report Summary</label><br><span\\r\\n                                                                class=\\\"text-italic\\\">Requires\\r\\n                                                                Sample and Target selection</span>\\r\\n                                                        </div>\\r\\n                                                        <div class=\\\"checkbox\\\">\\r\\n                                                            <input type=\\\"checkbox\\\" id=\\\"individualSampleReport\\\"\\r\\n                                                                formControlName=\\\"individual_sample_report\\\">\\r\\n                                                            <label for=\\\"individualSampleReport\\\">Individual Sample Report</label><br><span\\r\\n                                                                class=\\\"text-italic\\\">Requires\\r\\n                                                                Sample and Target selection</span>\\r\\n                                                        </div>\\r\\n                                                        <div class=\\\"checkbox\\\">\\r\\n                                                            <input type=\\\"checkbox\\\" id=\\\"qualityControlReport\\\"\\r\\n                                                                formControlName=\\\"quality_control_report\\\">\\r\\n                                                            <label for=\\\"qualityControlReport\\\">Quality Control Report</label><br><span\\r\\n                                                                class=\\\"text-italic\\\">Requires\\r\\n                                                                Sample selection</span>\\r\\n                                                        </div>\\r\\n                                                        <div class=\\\"checkbox\\\">\\r\\n                                                            <input type=\\\"checkbox\\\" id=\\\"controlResultsReport\\\"\\r\\n                                                                formControlName=\\\"controls_result_report\\\">\\r\\n                                                            <label for=\\\"controlResultsReport\\\">Controls Results Report</label><br><span\\r\\n                                                                class=\\\"text-italic\\\">Requires\\r\\n                                                                Sample and Target selection</span>\\r\\n                                                        </div> -->\\r\\n\\r\\n                                                <clr-checkbox formControlName=\\\"inhibition_report\\\"\\r\\n                                                    [clrDisabled]=\\\"reportsQuery.samples.length < 1\\\">\\r\\n                                                    Inhibition Report\\r\\n                                                </clr-checkbox><br><span class=\\\"text-italic\\\">Requires\\r\\n                                                    Sample selection</span>\\r\\n\\r\\n                                                <clr-checkbox formControlName=\\\"results_report_summary\\\"\\r\\n                                                    [clrDisabled]=\\\"reportsQuery.samples.length < 1 || reportsQuery.targets.length < 1\\\">\\r\\n                                                    Results Report Summary\\r\\n                                                </clr-checkbox><br><span class=\\\"text-italic\\\">Requires\\r\\n                                                    Sample and Target selection</span>\\r\\n\\r\\n                                                <div class=\\\"card\\\" *ngIf=\\\"reportSelectForm.value.results_report_summary\\\"\\r\\n                                                    formGroupName=\\\"results_report_summary_options\\\">\\r\\n                                                    <div class=\\\"card-block\\\">\\r\\n                                                        <div class=\\\"card-title\\\">\\r\\n                                                            <span class=\\\"text-smaller\\\">Results Report Summary Statistics\\r\\n                                                                Options</span>\\r\\n                                                        </div>\\r\\n                                                        <div class=\\\"card-text\\\">\\r\\n                                                            <clr-checkbox [clrInline]=\\\"true\\\"\\r\\n                                                                formControlName=\\\"sample_count\\\">\\r\\n                                                                Sample Count\\r\\n                                                            </clr-checkbox>\\r\\n                                                            <clr-checkbox [clrInline]=\\\"true\\\"\\r\\n                                                                formControlName=\\\"positive_count\\\">\\r\\n                                                                Positive Sample Count\\r\\n                                                            </clr-checkbox>\\r\\n                                                            <clr-checkbox [clrInline]=\\\"true\\\"\\r\\n                                                                formControlName=\\\"percent_positive\\\">\\r\\n                                                                Percent Positive\\r\\n                                                            </clr-checkbox>\\r\\n                                                            <clr-checkbox [clrInline]=\\\"true\\\"\\r\\n                                                                formControlName=\\\"max_concentration\\\">\\r\\n                                                                Max Concentration\\r\\n                                                            </clr-checkbox>\\r\\n                                                            <clr-checkbox [clrInline]=\\\"true\\\"\\r\\n                                                                formControlName=\\\"min_concentration\\\">\\r\\n                                                                Min Concentration\\r\\n                                                            </clr-checkbox>\\r\\n                                                            <clr-checkbox [clrInline]=\\\"true\\\"\\r\\n                                                                formControlName=\\\"median_concentration\\\">\\r\\n                                                                Median Concentration\\r\\n                                                            </clr-checkbox>\\r\\n                                                            <clr-checkbox [clrInline]=\\\"true\\\"\\r\\n                                                                formControlName=\\\"average_concentration\\\">\\r\\n                                                                Average Concentration\\r\\n                                                            </clr-checkbox>\\r\\n                                                            <clr-checkbox [clrInline]=\\\"true\\\"\\r\\n                                                                formControlName=\\\"min_concentration_positive\\\">\\r\\n                                                                Min concentration positive samples\\r\\n                                                            </clr-checkbox>\\r\\n                                                            <clr-checkbox [clrInline]=\\\"true\\\"\\r\\n                                                                formControlName=\\\"median_concentration_positive\\\">\\r\\n                                                                Median concentration positive samples\\r\\n                                                            </clr-checkbox>\\r\\n                                                            <clr-checkbox [clrInline]=\\\"true\\\"\\r\\n                                                                formControlName=\\\"average_concentration_positive\\\">\\r\\n                                                                Average concentration positive samples\\r\\n                                                            </clr-checkbox>\\r\\n                                                        </div>\\r\\n\\r\\n\\r\\n                                                    </div>\\r\\n                                                </div>\\r\\n\\r\\n                                                <clr-checkbox formControlName=\\\"individual_sample_report\\\"\\r\\n                                                    [clrDisabled]=\\\"reportsQuery.samples.length < 1 || reportsQuery.targets.length < 1\\\">\\r\\n                                                    Individual Sample Report\\r\\n                                                </clr-checkbox><br><span class=\\\"text-italic\\\">Requires\\r\\n                                                    Sample and Target selection</span>\\r\\n\\r\\n                                                <clr-checkbox formControlName=\\\"quality_control_report\\\"\\r\\n                                                    [clrDisabled]=\\\"reportsQuery.samples.length < 1\\\">\\r\\n                                                    Quality Control Report\\r\\n                                                </clr-checkbox><br><span class=\\\"text-italic\\\">Requires\\r\\n                                                    Sample selection</span>\\r\\n\\r\\n                                                <clr-checkbox formControlName=\\\"controls_result_report\\\"\\r\\n                                                    [clrDisabled]=\\\"reportsQuery.samples.length < 1 || reportsQuery.targets.length < 1\\\">\\r\\n                                                    Controls Results Report\\r\\n                                                </clr-checkbox><br><span class=\\\"text-italic\\\">Requires\\r\\n                                                    Sample and Target selection</span>\\r\\n\\r\\n\\r\\n                                            </div>\\r\\n\\r\\n                                            <button class=\\\"btn btn-primary\\\"\\r\\n                                                (click)=\\\"generateReports(reportSelectForm.value)\\\"\\r\\n                                                [clrLoading]=\\\"submitLoading\\\">Generate\\r\\n                                                Reports</button>\\r\\n                                        </section>\\r\\n                                    </form>\\r\\n\\r\\n                                    <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"inhibitionReportSuccessFlag\\\">\\r\\n                                        <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                            <span class=\\\"alert-text\\\">Request for Inhibition Report received.</span>\\r\\n                                        </div>\\r\\n                                    </clr-alert>\\r\\n\\r\\n                                    <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"resultsReportSummarySuccessFlag\\\">\\r\\n                                        <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                            <span class=\\\"alert-text\\\">Request for Results Summary Report received.</span>\\r\\n                                        </div>\\r\\n                                    </clr-alert>\\r\\n\\r\\n                                    <clr-alert [clrAlertType]=\\\"'alert-success'\\\"\\r\\n                                        *ngIf=\\\"individualSampleReportSuccessFlag\\\">\\r\\n                                        <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                            <span class=\\\"alert-text\\\">Request for Individual Sample Report\\r\\n                                                received.</span>\\r\\n                                        </div>\\r\\n                                    </clr-alert>\\r\\n\\r\\n                                    <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"qualityControlReportSuccessFlag\\\">\\r\\n                                        <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                            <span class=\\\"alert-text\\\">Request for Quality Control Report received.</span>\\r\\n                                        </div>\\r\\n                                    </clr-alert>\\r\\n\\r\\n                                    <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"controlsResultReportSuccessFlag\\\">\\r\\n                                        <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                            <span class=\\\"alert-text\\\">Request for Control Results Report received.</span>\\r\\n                                        </div>\\r\\n                                    </clr-alert>\\r\\n\\r\\n                                    <button class=\\\"btn btn-primary\\\" (click)=\\\"clearAlerts()\\\"\\r\\n                                        *ngIf=\\\"inhibitionReportSuccessFlag || resultsReportSummarySuccessFlag || individualSampleReportSuccessFlag || qualityControlReportSuccessFlag || controlsResultReportSuccessFlag\\\">Clear\\r\\n                                        All Alerts</button>\\r\\n\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <!---------- Loading spinner---------->\\r\\n                        <span class=\\\"spinner spinner-lg\\\" *ngIf=\\\"reportsLoading\\\">\\r\\n                            Generating reports...\\r\\n                        </span>\\r\\n                        <!---------- End Loading spinner---------->\\r\\n                    </div>\\r\\n\\r\\n                </clr-tab-content>\\r\\n            </clr-tab>\\r\\n            <!--End Generate Reports tab -->\\r\\n\\r\\n            <!-- View Reports tab -->\\r\\n            <clr-tab>\\r\\n                <button clrTabLink>View Reports</button>\\r\\n                <clr-tab-content>\\r\\n\\r\\n                    <div class=\\\"row\\\">\\r\\n\\r\\n                        <!-- <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\" *ngIf=\\\"fsmcResultsLoaded\\\">\\r\\n                                    There are no results for your query.\\r\\n                                </div> -->\\r\\n\\r\\n                        <!-- <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\"\\r\\n                            *ngIf=\\\" inhibitionReportLoaded || controlsResultReportLoaded || individualSampleReportLoaded || qualityControlReportLoaded || resultsReportSummaryLoaded\\\"> -->\\r\\n\\r\\n                        <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n                            <clr-tabs>\\r\\n\\r\\n                                <!--Inhibition Reports tab -->\\r\\n                                <clr-tab>\\r\\n                                    <button clrTabLink>Inhibition\\r\\n                                        Reports</button>\\r\\n                                    <clr-tab-content>\\r\\n\\r\\n\\r\\n                                        <h3>Available Inhibition Reports <button class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                (click)=\\\"retrieveAllReports()\\\">\\r\\n                                                <clr-icon shape=\\\"refresh\\\"></clr-icon> Refresh\\r\\n                                                List\\r\\n                                            </button></h3>\\r\\n\\r\\n                                        <clr-datagrid [clrDgLoading]=\\\"inhibitionReportFilesLoading\\\"\\r\\n                                            #inhibitionReportFilesDataGrid>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'created_date'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Date Created\\r\\n                                                </ng-container>\\r\\n                                                <clr-dg-filter [clrDgFilter]=\\\"dateAddedFilter\\\">\\r\\n                                                    <date-added-filter [dateField]=\\\"'created_date'\\\" #dateAddedFilter>\\r\\n                                                    </date-added-filter>\\r\\n                                                </clr-dg-filter>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'created_by'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Created by\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'status'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Status\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'name'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Report (click to retrieve)\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-row *clrDgItems=\\\"let item of inhibitionReportsList\\\"\\r\\n                                                [clrDgItem]=\\\"item\\\">\\r\\n                                                <clr-dg-cell>{{item.created_date | date:'shortDate'}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell>{{item.created_by}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell> <span class=\\\"label\\\"\\r\\n                                                        [ngClass]=\\\"{'label-danger' : item.status === 3, 'label-success':  item.status === 2, 'label-info' : item.status === 1}\\\">{{item.status | displayValue:'name':this.reportStatuses}}</span>\\r\\n                                                </clr-dg-cell>\\r\\n                                                <clr-dg-cell><a href=\\\"javascript:void(0);\\\"\\r\\n                                                        (click)=\\\"loadReport(item.file,item.name, 1)\\\">{{item.name}}</a>\\r\\n                                                </clr-dg-cell>\\r\\n                                            </clr-dg-row>\\r\\n\\r\\n                                            <clr-dg-footer>\\r\\n                                                {{inhibitionPagination.firstItem + 1}} -\\r\\n                                                {{inhibitionPagination.lastItem + 1}} of\\r\\n                                                {{inhibitionPagination.totalItems}}\\r\\n                                                results\\r\\n                                                <clr-dg-pagination #inhibitionPagination [clrDgPageSize]=\\\"10\\\">\\r\\n                                                </clr-dg-pagination>\\r\\n                                            </clr-dg-footer>\\r\\n                                        </clr-datagrid>\\r\\n\\r\\n                                        <div>\\r\\n                                            <h4>Inhibition Report</h4>\\r\\n\\r\\n                                            <clr-datagrid [clrDgLoading]=\\\"inhibitionReportLoading\\\"\\r\\n                                                #inhibitionReportDataGrid>\\r\\n\\r\\n                                                <clr-dg-action-bar>\\r\\n                                                    <div class=\\\"btn-group\\\">\\r\\n                                                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                            (click)=\\\"exportToCSV('inhibitionReport')\\\">\\r\\n                                                            <clr-icon shape=\\\"export\\\" size=\\\"16\\\"></clr-icon> Export to CSV\\r\\n                                                        </button>\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"form-group\\\">\\r\\n                                                        <form [formGroup]=\\\"reportSelectForm\\\">\\r\\n                                                            <label>Export File name (optional)</label>\\r\\n                                                            <input type=\\\"text\\\" class=\\\"filename-input\\\"\\r\\n                                                                formControlName=\\\"inhibition_report_filename\\\">\\r\\n                                                        </form>\\r\\n                                                    </div>\\r\\n                                                </clr-dg-action-bar>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'sample'\\\">\\r\\n                                                    Sample ID\\r\\n                                                    <clr-dg-filter [clrDgFilter]=\\\"rangeFilter\\\">\\r\\n                                                        <range-filter #rangeFilter></range-filter>\\r\\n                                                    </clr-dg-filter>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'collaborator_sample_id'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Collaborator Sample ID\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'study'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Study\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'analysis_batch'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Analysis Batch\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'extraction_number'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Extraction Number\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'inhibition_dna_cq_value'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        DNA Inhibtion Sample Cq\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'inhibition_dna_control_cq_value'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        DNA Inhibtion Control Cq\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'inhibition_dna_dilution_factor'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        DNA Inhibtion Dilution Factor\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'inhibition_rna_cq_value'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        RNA Inhibtion Sample Cq\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'inhibition_rna_control_cq_value'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        RNA Inhibtion Control Cq\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'inhibition_rna_dilution_factor'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        RNA Inhibtion Dilution Factor\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-row *clrDgItems=\\\"let item of inhibitionReportResults\\\"\\r\\n                                                    [clrDgItem]=\\\"item\\\">\\r\\n                                                    <clr-dg-cell>{{item.sample}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.collaborator_sample_id}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.study}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.analysis_batch}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.extraction_number}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.inhibition_dna_cq_value}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.inhibition_dna_control_cq_value}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.inhibition_dna_dilution_factor}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.inhibition_rna_cq_value}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.inhibition_rna_control_cq_value}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.inhibition_rna_dilution_factor}}</clr-dg-cell>\\r\\n                                                </clr-dg-row>\\r\\n\\r\\n                                                <clr-dg-footer>\\r\\n                                                    {{inhibitionReportListPagination.firstItem + 1}} -\\r\\n                                                    {{inhibitionReportListPagination.lastItem + 1}} of\\r\\n                                                    {{inhibitionReportListPagination.totalItems}}\\r\\n                                                    results\\r\\n                                                    <clr-dg-pagination #inhibitionReportListPagination\\r\\n                                                        [clrDgPageSize]=\\\"10\\\">\\r\\n                                                    </clr-dg-pagination>\\r\\n                                                </clr-dg-footer>\\r\\n                                            </clr-datagrid>\\r\\n                                        </div>\\r\\n\\r\\n                                    </clr-tab-content>\\r\\n                                </clr-tab>\\r\\n                                <!--End Inhibition Reports tab -->\\r\\n\\r\\n                                <!--Results Report Summary Reports tab -->\\r\\n                                <clr-tab>\\r\\n                                    <!-- <button clrTabLink (mouseout)=\\\"resizeTable('resultsReportSummary')\\\">Results Report\\r\\n                                        Summary Reports</button> -->\\r\\n                                    <button clrTabLink>Results Report\\r\\n                                        Summary Reports</button>\\r\\n                                    <clr-tab-content>\\r\\n\\r\\n                                        <h3>Available Results Report Summary Reports <button\\r\\n                                                class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"retrieveAllReports()\\\">\\r\\n                                                <clr-icon shape=\\\"refresh\\\"></clr-icon> Refresh\\r\\n                                                List\\r\\n                                            </button></h3>\\r\\n\\r\\n                                        <clr-datagrid [clrDgLoading]=\\\"resultsReportSummaryReportFilesLoading\\\"\\r\\n                                            #resultsSummaryReportFilesDataGrid\\r\\n                                            (mouseout)=\\\"resizeTable('resultsReportSummary')\\\">\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'created_date'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Date Created\\r\\n                                                </ng-container>\\r\\n                                                <clr-dg-filter [clrDgFilter]=\\\"dateAddedFilter\\\">\\r\\n                                                    <date-added-filter [dateField]=\\\"'created_date'\\\" #dateAddedFilter>\\r\\n                                                    </date-added-filter>\\r\\n                                                </clr-dg-filter>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'created_by'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Created by\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'status'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Status\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'name'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Report (click to retrieve)\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-row *clrDgItems=\\\"let item of resultsReportSummaryReportsList\\\"\\r\\n                                                [clrDgItem]=\\\"item\\\">\\r\\n                                                <clr-dg-cell>{{item.created_date | date:'shortDate'}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell>{{item.created_by}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell> <span class=\\\"label\\\"\\r\\n                                                        [ngClass]=\\\"{'label-danger' : item.status === 3, 'label-success':  item.status === 2, 'label-info' : item.status === 1}\\\">{{item.status | displayValue:'name':this.reportStatuses}}</span>\\r\\n                                                </clr-dg-cell>\\r\\n                                                <clr-dg-cell><a href=\\\"javascript:void(0);\\\"\\r\\n                                                        (click)=\\\"loadReport(item.file, item.name, 2)\\\">{{item.name}}</a>\\r\\n                                                </clr-dg-cell>\\r\\n                                            </clr-dg-row>\\r\\n\\r\\n                                            <clr-dg-footer>\\r\\n                                                {{resultsReportSummaryReportListPagination.firstItem + 1}} -\\r\\n                                                {{resultsReportSummaryReportListPagination.lastItem + 1}} of\\r\\n                                                {{resultsReportSummaryReportListPagination.totalItems}}\\r\\n                                                results\\r\\n                                                <clr-dg-pagination #resultsReportSummaryReportListPagination\\r\\n                                                    [clrDgPageSize]=\\\"10\\\">\\r\\n                                                </clr-dg-pagination>\\r\\n                                            </clr-dg-footer>\\r\\n                                        </clr-datagrid>\\r\\n\\r\\n                                        <div>\\r\\n                                            <h4>Results Report Summary Report</h4>\\r\\n\\r\\n                                            <!-- <clr-datagrid [clrDgLoading]=\\\"resultsReportSummaryLoading\\\"\\r\\n                                            #resultsReportSummaryDataGrid>\\r\\n\\r\\n                                            <clr-dg-action-bar>\\r\\n                                                <div class=\\\"btn-group\\\">\\r\\n                                                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                        (click)=\\\"exportToCSV('resultsReportSummary')\\\">\\r\\n                                                        <clr-icon shape=\\\"export\\\" size=\\\"16\\\"></clr-icon> Export to CSV\\r\\n                                                    </button>\\r\\n                                                </div>\\r\\n                                                <div class=\\\"form-group\\\">\\r\\n                                                    <form [formGroup]=\\\"reportSelectForm\\\">\\r\\n                                                        <label>Export File name (optional)</label>\\r\\n                                                        <input type=\\\"text\\\" class=\\\"filename-input\\\"\\r\\n                                                            formControlName=\\\"results_report_summary_filename\\\">\\r\\n                                                    </form>\\r\\n                                                </div>\\r\\n                                            </clr-dg-action-bar>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'target_name'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Target\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'sample_count'\\\"\\r\\n                                                *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('sample_count').value\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Sample Count\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'positive_count'\\\"\\r\\n                                                *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('positive_count').value\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Positive Count\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'percent_positive'\\\"\\r\\n                                                *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('percent_positive').value\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Percent Positive\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'max_concentration'\\\"\\r\\n                                                *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('max_concentration').value\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Max Concentration\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'min_concentration'\\\"\\r\\n                                                *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('min_concentration').value\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Min Concentration\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'median_concentration'\\\"\\r\\n                                                *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('median_concentration').value\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Median Concentration\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'average_concentration'\\\"\\r\\n                                                *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('average_concentration').value\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Average Concentration\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'min_concentration_positive'\\\"\\r\\n                                                *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('min_concentration_positive').value\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Minimum concentration of positive samples\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'median_concentration_positive'\\\"\\r\\n                                                *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('median_concentration_positive').value\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Median concentration of positive samples\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'average_concentration_positive'\\\"\\r\\n                                                *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('average_concentration_positive').value\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Average concentration of positive samples\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-row *clrDgItems=\\\"let item of resultsReportSummaryResults\\\"\\r\\n                                                [clrDgItem]=\\\"item\\\">\\r\\n                                                <clr-dg-cell>{{item.target_name}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell\\r\\n                                                    *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('sample_count').value\\\">\\r\\n                                                    {{item.sample_count}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell\\r\\n                                                    *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('positive_count').value\\\">\\r\\n                                                    {{item.positive_count}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell\\r\\n                                                    *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('percent_positive').value\\\">\\r\\n                                                    {{item.percent_positive}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell\\r\\n                                                    *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('max_concentration').value\\\">\\r\\n                                                    {{item.max_concentration}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell\\r\\n                                                    *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('min_concentration').value\\\">\\r\\n                                                    {{item.min_concentration}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell\\r\\n                                                    *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('median_concentration').value\\\">\\r\\n                                                    {{item.median_concentration}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell\\r\\n                                                    *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('average_concentration').value\\\">\\r\\n                                                    {{item.average_concentration}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell\\r\\n                                                    *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('min_concentration_positive').value\\\">\\r\\n                                                    {{item.min_concentration_positive}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell\\r\\n                                                    *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('median_concentration_positive').value\\\">\\r\\n                                                    {{item.median_concentration_positive}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell\\r\\n                                                    *ngIf=\\\"reportSelectForm.get('results_report_summary_options').get('average_concentration_positive').value\\\">\\r\\n                                                    {{item.average_concentration_positive}}</clr-dg-cell>\\r\\n                                            </clr-dg-row>\\r\\n\\r\\n                                            <clr-dg-footer>\\r\\n                                                {{resultsReportPagination.firstItem + 1}} -\\r\\n                                                {{resultsReportPagination.lastItem + 1}} of\\r\\n                                                {{resultsReportPagination.totalItems}}\\r\\n                                                results\\r\\n                                                <clr-dg-pagination #resultsReportPagination [clrDgPageSize]=\\\"10\\\">\\r\\n                                                </clr-dg-pagination>\\r\\n                                            </clr-dg-footer>\\r\\n                                        </clr-datagrid> -->\\r\\n\\r\\n                                            <clr-datagrid [clrDgLoading]=\\\"resultsReportSummaryLoading\\\"\\r\\n                                                #resultsReportSummaryDataGrid>\\r\\n\\r\\n                                                <clr-dg-action-bar>\\r\\n                                                    <div class=\\\"btn-group\\\">\\r\\n                                                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                            (click)=\\\"exportToCSV('resultsReportSummary')\\\">\\r\\n                                                            <clr-icon shape=\\\"export\\\" size=\\\"16\\\"></clr-icon> Export to CSV\\r\\n                                                        </button>\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"form-group\\\">\\r\\n                                                        <form [formGroup]=\\\"reportSelectForm\\\">\\r\\n                                                            <label>Export File name (optional)</label>\\r\\n                                                            <input type=\\\"text\\\" class=\\\"filename-input\\\"\\r\\n                                                                formControlName=\\\"results_report_summary_filename\\\">\\r\\n                                                        </form>\\r\\n                                                    </div>\\r\\n                                                </clr-dg-action-bar>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'target_name'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Target\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'sample_count'\\\"\\r\\n                                                    *ngIf=\\\"resultsReportSummary_columns.sample_count\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Sample Count\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'positive_count'\\\"\\r\\n                                                    *ngIf=\\\"resultsReportSummary_columns.positive_count\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Positive Count\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'percent_positive'\\\"\\r\\n                                                    *ngIf=\\\"resultsReportSummary_columns.percent_positive\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Percent Positive\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'max_concentration'\\\"\\r\\n                                                    *ngIf=\\\"resultsReportSummary_columns.max_concentration\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Max Concentration\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'min_concentration'\\\"\\r\\n                                                    *ngIf=\\\"resultsReportSummary_columns.min_concentration\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Min Concentration\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'median_concentration'\\\"\\r\\n                                                    *ngIf=\\\"resultsReportSummary_columns.median_concentration\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Median Concentration\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'average_concentration'\\\"\\r\\n                                                    *ngIf=\\\"resultsReportSummary_columns.average_concentration\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Average Concentration\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'min_concentration_positive'\\\"\\r\\n                                                    *ngIf=\\\"resultsReportSummary_columns.min_concentration_positive\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Minimum concentration of positive samples\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'median_concentration_positive'\\\"\\r\\n                                                    *ngIf=\\\"resultsReportSummary_columns.median_concentration_positive\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Median concentration of positive samples\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'average_concentration_positive'\\\"\\r\\n                                                    *ngIf=\\\"resultsReportSummary_columns.average_concentration_positive\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Average concentration of positive samples\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-row *clrDgItems=\\\"let item of resultsReportSummaryResults\\\"\\r\\n                                                    [clrDgItem]=\\\"item\\\">\\r\\n                                                    <clr-dg-cell>{{item.target_name}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell *ngIf=\\\"resultsReportSummary_columns.sample_count\\\">\\r\\n                                                        {{item.sample_count}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell *ngIf=\\\"resultsReportSummary_columns.positive_count\\\">\\r\\n                                                        {{item.positive_count}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell *ngIf=\\\"resultsReportSummary_columns.percent_positive\\\">\\r\\n                                                        {{item.percent_positive}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell *ngIf=\\\"resultsReportSummary_columns.max_concentration\\\">\\r\\n                                                        {{item.max_concentration}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell *ngIf=\\\"resultsReportSummary_columns.min_concentration\\\">\\r\\n                                                        {{item.min_concentration}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell\\r\\n                                                        *ngIf=\\\"resultsReportSummary_columns.median_concentration\\\">\\r\\n                                                        {{item.median_concentration}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell\\r\\n                                                        *ngIf=\\\"resultsReportSummary_columns.average_concentration\\\">\\r\\n                                                        {{item.average_concentration}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell\\r\\n                                                        *ngIf=\\\"resultsReportSummary_columns.min_concentration_positive\\\">\\r\\n                                                        {{item.min_concentration_positive}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell\\r\\n                                                        *ngIf=\\\"resultsReportSummary_columns.median_concentration_positive\\\">\\r\\n                                                        {{item.median_concentration_positive}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell\\r\\n                                                        *ngIf=\\\"resultsReportSummary_columns.average_concentration_positive\\\">\\r\\n                                                        {{item.average_concentration_positive}}</clr-dg-cell>\\r\\n                                                </clr-dg-row>\\r\\n\\r\\n                                                <clr-dg-footer>\\r\\n                                                    {{resultsReportPagination.firstItem + 1}} -\\r\\n                                                    {{resultsReportPagination.lastItem + 1}} of\\r\\n                                                    {{resultsReportPagination.totalItems}}\\r\\n                                                    results\\r\\n                                                    <clr-dg-pagination #resultsReportPagination [clrDgPageSize]=\\\"10\\\">\\r\\n                                                    </clr-dg-pagination>\\r\\n                                                </clr-dg-footer>\\r\\n                                            </clr-datagrid>\\r\\n                                        </div>\\r\\n\\r\\n                                    </clr-tab-content>\\r\\n                                </clr-tab>\\r\\n                                <!-- End Results Report Summary Reports tab -->\\r\\n\\r\\n                                <!-- Individual Sample Reports tab -->\\r\\n                                <clr-tab>\\r\\n                                    <button clrTabLink>Individual\\r\\n                                        Sample Reports</button>\\r\\n                                    <clr-tab-content class=\\\"sample-results-tab\\\">\\r\\n\\r\\n                                        <h3>Available Individual Sample Reports <button class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                (click)=\\\"retrieveAllReports()\\\">\\r\\n                                                <clr-icon shape=\\\"refresh\\\"></clr-icon> Refresh\\r\\n                                                List\\r\\n                                            </button></h3>\\r\\n\\r\\n                                        <clr-datagrid [clrDgLoading]=\\\"individualSampleReportFilesLoading\\\"\\r\\n                                            #individualSampleReportFilesDataGrid>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'created_date'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Date Created\\r\\n                                                </ng-container>\\r\\n                                                <clr-dg-filter [clrDgFilter]=\\\"dateAddedFilter\\\">\\r\\n                                                    <date-added-filter [dateField]=\\\"'created_date'\\\" #dateAddedFilter>\\r\\n                                                    </date-added-filter>\\r\\n                                                </clr-dg-filter>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'created_by'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Created by\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'status'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Status\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'name'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Report (click to retrieve)\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-row *clrDgItems=\\\"let item of individualSampleReportsList\\\"\\r\\n                                                [clrDgItem]=\\\"item\\\">\\r\\n                                                <clr-dg-cell>{{item.created_date | date:'shortDate'}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell>{{item.created_by}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell> <span class=\\\"label\\\"\\r\\n                                                        [ngClass]=\\\"{'label-danger' : item.status === 3, 'label-success':  item.status === 2, 'label-info' : item.status === 1}\\\">{{item.status | displayValue:'name':this.reportStatuses}}</span>\\r\\n                                                </clr-dg-cell>\\r\\n                                                <clr-dg-cell><a href=\\\"javascript:void(0);\\\"\\r\\n                                                        (click)=\\\"loadReport(item.file, item.name, 3)\\\">{{item.name}}</a>\\r\\n                                                </clr-dg-cell>\\r\\n                                            </clr-dg-row>\\r\\n\\r\\n                                            <clr-dg-footer>\\r\\n                                                {{indiviualSampleReportListPagination.firstItem + 1}} -\\r\\n                                                {{indiviualSampleReportListPagination.lastItem + 1}} of\\r\\n                                                {{indiviualSampleReportListPagination.totalItems}}\\r\\n                                                results\\r\\n                                                <clr-dg-pagination #indiviualSampleReportListPagination\\r\\n                                                    [clrDgPageSize]=\\\"10\\\">\\r\\n                                                </clr-dg-pagination>\\r\\n                                            </clr-dg-footer>\\r\\n                                        </clr-datagrid>\\r\\n\\r\\n                                        <div>\\r\\n                                            <h4>Individual Sample Report</h4>\\r\\n\\r\\n                                            <clr-datagrid [clrDgLoading]=\\\"individualSampleReportLoading\\\"\\r\\n                                                #individualSampleReportDataGrid>\\r\\n\\r\\n                                                <clr-dg-action-bar>\\r\\n                                                    <div class=\\\"btn-group\\\">\\r\\n                                                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                            (click)=\\\"exportToCSV('individualSampleReport')\\\">\\r\\n                                                            <clr-icon shape=\\\"export\\\" size=\\\"16\\\"></clr-icon> Export to CSV\\r\\n                                                        </button>\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"form-group\\\">\\r\\n                                                        <form [formGroup]=\\\"reportSelectForm\\\">\\r\\n                                                            <label>Export File name (optional)</label>\\r\\n                                                            <input type=\\\"text\\\" class=\\\"filename-input\\\"\\r\\n                                                                formControlName=\\\"individual_sample_report_filename\\\">\\r\\n                                                        </form>\\r\\n                                                    </div>\\r\\n                                                </clr-dg-action-bar>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'id'\\\">\\r\\n                                                    Sample ID\\r\\n                                                    <clr-dg-filter [clrDgFilter]=\\\"rangeFilter\\\">\\r\\n                                                        <range-filter #rangeFilter></range-filter>\\r\\n                                                    </clr-dg-filter>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'target_string'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Target\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'result'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Result\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'final_sample_mean_concentration'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Sample Mean Concentration (Sci)\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-row *ngFor=\\\"let item of individualSampleReportResults\\\"\\r\\n                                                    [clrDgItem]=\\\"item\\\">\\r\\n                                                    <clr-dg-cell>{{item.sample}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.target_string}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.result}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.final_sample_mean_concentration_sci}}\\r\\n                                                    </clr-dg-cell>\\r\\n                                                </clr-dg-row>\\r\\n\\r\\n                                                <clr-dg-footer>\\r\\n                                                    {{individualSamplePagination.firstItem + 1}} -\\r\\n                                                    {{individualSamplePagination.lastItem + 1}}\\r\\n                                                    of\\r\\n                                                    {{individualSamplePagination.totalItems}}\\r\\n                                                    results\\r\\n                                                    <clr-dg-pagination #individualSamplePagination [clrDgPageSize]=\\\"10\\\">\\r\\n                                                    </clr-dg-pagination>\\r\\n                                                </clr-dg-footer>\\r\\n                                            </clr-datagrid>\\r\\n\\r\\n                                        </div>\\r\\n\\r\\n                                    </clr-tab-content>\\r\\n                                </clr-tab>\\r\\n                                <!-- End Individual Sample Reports tab -->\\r\\n\\r\\n                                <!--Quality Control Reports tab -->\\r\\n                                <clr-tab>\\r\\n                                    <button clrTabLink>Quality Control\\r\\n                                        Reports</button>\\r\\n                                    <clr-tab-content>\\r\\n\\r\\n                                        <h3>Available Quality Control Reports <button class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                (click)=\\\"retrieveAllReports()\\\">\\r\\n                                                <clr-icon shape=\\\"refresh\\\"></clr-icon> Refresh\\r\\n                                                List\\r\\n                                            </button></h3>\\r\\n\\r\\n                                        <clr-datagrid [clrDgLoading]=\\\"qualityControlReportFilesLoading\\\"\\r\\n                                            #individualSampleReportFilesDataGrid>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'created_date'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Date Created\\r\\n                                                </ng-container>\\r\\n                                                <clr-dg-filter [clrDgFilter]=\\\"dateAddedFilter\\\">\\r\\n                                                    <date-added-filter [dateField]=\\\"'created_date'\\\" #dateAddedFilter>\\r\\n                                                    </date-added-filter>\\r\\n                                                </clr-dg-filter>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'created_by'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Created by\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'status'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Status\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'name'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Report (click to retrieve)\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-row *clrDgItems=\\\"let item of qualityControlReportsList\\\"\\r\\n                                                [clrDgItem]=\\\"item\\\">\\r\\n                                                <clr-dg-cell>{{item.created_date | date:'shortDate'}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell>{{item.created_by}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell> <span class=\\\"label\\\"\\r\\n                                                        [ngClass]=\\\"{'label-danger' : item.status === 3, 'label-success':  item.status === 2, 'label-info' : item.status === 1}\\\">{{item.status | displayValue:'name':this.reportStatuses}}</span>\\r\\n                                                </clr-dg-cell>\\r\\n                                                <clr-dg-cell><a href=\\\"javascript:void(0);\\\"\\r\\n                                                        (click)=\\\"loadReport(item.file, item.name, 4)\\\">{{item.name}}</a>\\r\\n                                                </clr-dg-cell>\\r\\n                                            </clr-dg-row>\\r\\n\\r\\n                                            <clr-dg-footer>\\r\\n                                                {{qcReportListPagination.firstItem + 1}} -\\r\\n                                                {{qcReportListPagination.lastItem + 1}} of\\r\\n                                                {{qcReportListPagination.totalItems}}\\r\\n                                                results\\r\\n                                                <clr-dg-pagination #qcReportListPagination [clrDgPageSize]=\\\"10\\\">\\r\\n                                                </clr-dg-pagination>\\r\\n                                            </clr-dg-footer>\\r\\n                                        </clr-datagrid>\\r\\n\\r\\n                                        <div>\\r\\n                                            <h4>Quality Control Report</h4>\\r\\n                                            <br>\\r\\n                                            <h4>Sample-level summary statistics</h4>\\r\\n                                            <clr-datagrid [clrDgLoading]=\\\"qualityControlReportLoading\\\"\\r\\n                                                #qualityControlReport_sampleQC_DataGrid>\\r\\n\\r\\n                                                <clr-dg-action-bar>\\r\\n                                                    <div class=\\\"btn-group\\\">\\r\\n                                                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                            (click)=\\\"exportToCSV('qualityControlReport_sampleQC')\\\">\\r\\n                                                            <clr-icon shape=\\\"export\\\" size=\\\"16\\\"></clr-icon> Export to CSV\\r\\n                                                        </button>\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"form-group\\\">\\r\\n                                                        <form [formGroup]=\\\"reportSelectForm\\\">\\r\\n                                                            <label>Export File name (optional)</label>\\r\\n                                                            <input type=\\\"text\\\" class=\\\"filename-input\\\"\\r\\n                                                                formControlName=\\\"quality_control_report_sampleQC_filename\\\">\\r\\n                                                        </form>\\r\\n                                                    </div>\\r\\n                                                </clr-dg-action-bar>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'metric'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Metric\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'value'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Value\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'count'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Count\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'min'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Min\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'max'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Max\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-row\\r\\n                                                    *ngFor=\\\"let item of qualityControlReportResults.sample_quality_control\\\"\\r\\n                                                    [clrDgItem]=\\\"item\\\">\\r\\n                                                    <clr-dg-cell>{{item.metric}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.value}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.count}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.min}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.max}}</clr-dg-cell>\\r\\n                                                </clr-dg-row>\\r\\n\\r\\n                                                <clr-dg-footer>\\r\\n                                                    {{qualityControlReport_sampleQCPagination.firstItem + 1}} -\\r\\n                                                    {{qualityControlReport_sampleQCPagination.lastItem + 1}} of\\r\\n                                                    {{qualityControlReport_sampleQCPagination.totalItems}}\\r\\n                                                    results\\r\\n                                                    <clr-dg-pagination #qualityControlReport_sampleQCPagination\\r\\n                                                        [clrDgPageSize]=\\\"10\\\">\\r\\n                                                    </clr-dg-pagination>\\r\\n                                                </clr-dg-footer>\\r\\n                                            </clr-datagrid>\\r\\n\\r\\n\\r\\n\\r\\n                                            <h4>Extraction-level raw values</h4>\\r\\n                                            <clr-datagrid [clrDgLoading]=\\\"qualityControlReportLoading\\\"\\r\\n                                                #qualityControlReport_EB_Raw_DataGrid>\\r\\n\\r\\n                                                <clr-dg-action-bar>\\r\\n                                                    <div class=\\\"btn-group\\\">\\r\\n                                                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                            (click)=\\\"exportToCSV('qualityControlReport_EB_Raw')\\\">\\r\\n                                                            <clr-icon shape=\\\"export\\\" size=\\\"16\\\"></clr-icon> Export to CSV\\r\\n                                                        </button>\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"form-group\\\">\\r\\n                                                        <form [formGroup]=\\\"reportSelectForm\\\">\\r\\n                                                            <label>Export File name (optional)</label>\\r\\n                                                            <input type=\\\"text\\\" class=\\\"filename-input\\\"\\r\\n                                                                formControlName=\\\"quality_control_report_EB_Raw_filename\\\">\\r\\n                                                        </form>\\r\\n                                                    </div>\\r\\n                                                </clr-dg-action-bar>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'analysis_batch'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Analysis Batch\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'extraction_number'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Extraction Number\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'extraction_volume'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Extraction Volume\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'elution_volume'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Elution Volume\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'rt_template_volume'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        RT Template Volume\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'rt_reaction_volume'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        RT Reaction Volume\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'qpcr_template_volume'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        qPCR Template Volume\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'qpcr_reaction_volume'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        qPCR Reaction Volume\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-row\\r\\n                                                    *ngFor=\\\"let item of qualityControlReportResults.extraction_raw_data\\\"\\r\\n                                                    [clrDgItem]=\\\"item\\\">\\r\\n                                                    <clr-dg-cell>{{item.analysis_batch}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.extraction_number}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.extraction_volume}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.elution_volume}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.rt_template_volume}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.rt_reaction_volume}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.qpcr_template_volume}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.qpcr_reaction_volume}}</clr-dg-cell>\\r\\n                                                </clr-dg-row>\\r\\n\\r\\n                                                <clr-dg-footer>\\r\\n                                                    {{qualityControlReport_EB_Raw_Pagination.firstItem + 1}} -\\r\\n                                                    {{qualityControlReport_EB_Raw_Pagination.lastItem + 1}} of\\r\\n                                                    {{qualityControlReport_EB_Raw_Pagination.totalItems}}\\r\\n                                                    results\\r\\n                                                    <clr-dg-pagination #qualityControlReport_EB_Raw_Pagination\\r\\n                                                        [clrDgPageSize]=\\\"10\\\">\\r\\n                                                    </clr-dg-pagination>\\r\\n                                                </clr-dg-footer>\\r\\n                                            </clr-datagrid>\\r\\n\\r\\n                                            <h4>Extraction-level summary statistics</h4>\\r\\n                                            <clr-datagrid [clrDgLoading]=\\\"qualityControlReportLoading\\\"\\r\\n                                                #qualityControlReport_EB_QC_DataGrid>\\r\\n\\r\\n                                                <clr-dg-action-bar>\\r\\n                                                    <div class=\\\"btn-group\\\">\\r\\n                                                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                            (click)=\\\"exportToCSV('qualityControlReport_EB_QC')\\\">\\r\\n                                                            <clr-icon shape=\\\"export\\\" size=\\\"16\\\"></clr-icon> Export to CSV\\r\\n                                                        </button>\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"form-group\\\">\\r\\n                                                        <form [formGroup]=\\\"reportSelectForm\\\">\\r\\n                                                            <label>Export File name (optional)</label>\\r\\n                                                            <input type=\\\"text\\\" class=\\\"filename-input\\\"\\r\\n                                                                formControlName=\\\"quality_control_report_EB_QC_filename\\\">\\r\\n                                                        </form>\\r\\n                                                    </div>\\r\\n                                                </clr-dg-action-bar>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'metric'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Metric\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'value'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Value\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'count'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Count\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-row\\r\\n                                                    *ngFor=\\\"let item of qualityControlReportResults.extraction_quality_control\\\"\\r\\n                                                    [clrDgItem]=\\\"item\\\">\\r\\n                                                    <clr-dg-cell>{{item.metric}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.value}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{item.count}}</clr-dg-cell>\\r\\n                                                </clr-dg-row>\\r\\n\\r\\n                                                <clr-dg-footer>\\r\\n                                                    {{qualityControlReport_EB_QC_Pagination.firstItem + 1}} -\\r\\n                                                    {{qualityControlReport_EB_QC_Pagination.lastItem + 1}} of\\r\\n                                                    {{qualityControlReport_EB_QC_Pagination.totalItems}}\\r\\n                                                    results\\r\\n                                                    <clr-dg-pagination #qualityControlReport_EB_QC_Pagination\\r\\n                                                        [clrDgPageSize]=\\\"10\\\">\\r\\n                                                    </clr-dg-pagination>\\r\\n                                                </clr-dg-footer>\\r\\n                                            </clr-datagrid>\\r\\n\\r\\n                                        </div>\\r\\n\\r\\n                                    </clr-tab-content>\\r\\n                                </clr-tab>\\r\\n                                <!-- End Quality Control Reports tab -->\\r\\n\\r\\n                                <!--Control Results Reports tab -->\\r\\n                                <clr-tab>\\r\\n                                    <button clrTabLink>Controls Results\\r\\n                                        Reports</button>\\r\\n                                    <clr-tab-content>\\r\\n\\r\\n                                        <h3>Available Controls Results Reports <button class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                (click)=\\\"retrieveAllReports()\\\">\\r\\n                                                <clr-icon shape=\\\"refresh\\\"></clr-icon> Refresh\\r\\n                                                List\\r\\n                                            </button></h3>\\r\\n\\r\\n                                        <clr-datagrid [clrDgLoading]=\\\"controlsResultsReportFilesLoading\\\"\\r\\n                                            #individualSampleReportFilesDataGrid>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'created_date'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Date Created\\r\\n                                                </ng-container>\\r\\n                                                <clr-dg-filter [clrDgFilter]=\\\"dateAddedFilter\\\">\\r\\n                                                    <date-added-filter [dateField]=\\\"'created_date'\\\" #dateAddedFilter>\\r\\n                                                    </date-added-filter>\\r\\n                                                </clr-dg-filter>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'created_by'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Created by\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'status'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Status\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-column [clrDgField]=\\\"'name'\\\">\\r\\n                                                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                    Report (click to retrieve)\\r\\n                                                </ng-container>\\r\\n                                            </clr-dg-column>\\r\\n\\r\\n                                            <clr-dg-row *clrDgItems=\\\"let item of controlsResultReportsList\\\"\\r\\n                                                [clrDgItem]=\\\"item\\\">\\r\\n                                                <clr-dg-cell>{{item.created_date | date:'shortDate'}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell>{{item.created_by}}</clr-dg-cell>\\r\\n                                                <clr-dg-cell> <span class=\\\"label\\\"\\r\\n                                                        [ngClass]=\\\"{'label-danger' : item.status === 3, 'label-success':  item.status === 2, 'label-info' : item.status === 1}\\\">{{item.status | displayValue:'name':this.reportStatuses}}</span>\\r\\n                                                </clr-dg-cell>\\r\\n                                                <clr-dg-cell><a href=\\\"javascript:void(0);\\\"\\r\\n                                                        (click)=\\\"loadReport(item.file, item.name, 5)\\\">{{item.name}}</a>\\r\\n                                                </clr-dg-cell>\\r\\n                                            </clr-dg-row>\\r\\n\\r\\n                                            <clr-dg-footer>\\r\\n                                                {{controlsResultsReportsListPagination.firstItem + 1}} -\\r\\n                                                {{controlsResultsReportsListPagination.lastItem + 1}} of\\r\\n                                                {{controlsResultsReportsListPagination.totalItems}}\\r\\n                                                results\\r\\n                                                <clr-dg-pagination #controlsResultsReportsListPagination\\r\\n                                                    [clrDgPageSize]=\\\"10\\\">\\r\\n                                                </clr-dg-pagination>\\r\\n                                            </clr-dg-footer>\\r\\n                                        </clr-datagrid>\\r\\n\\r\\n                                        <div>\\r\\n\\r\\n                                            <h4>Controls Result Report</h4>\\r\\n\\r\\n                                            <!--5 tables (DataGrids) -->\\r\\n                                            <h4>Extraction Negative</h4>\\r\\n\\r\\n                                            <clr-datagrid #controlsResultReport_extNeg_DataGrid\\r\\n                                                [clrDgLoading]=\\\"controlsResultReportLoading\\\">\\r\\n\\r\\n                                                <clr-dg-action-bar>\\r\\n                                                    <div class=\\\"btn-group\\\">\\r\\n                                                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                            (click)=\\\"exportToCSV('controlsResultReport_extNeg')\\\">\\r\\n                                                            <clr-icon shape=\\\"export\\\" size=\\\"16\\\"></clr-icon> Export to CSV\\r\\n                                                        </button>\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"form-group\\\">\\r\\n                                                        <form [formGroup]=\\\"reportSelectForm\\\">\\r\\n                                                            <label>Export File name (optional)</label>\\r\\n                                                            <input type=\\\"text\\\" class=\\\"filename-input\\\"\\r\\n                                                                formControlName=\\\"controls_result_report_extNeg_filename\\\">\\r\\n                                                        </form>\\r\\n                                                    </div>\\r\\n                                                </clr-dg-action-bar>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'analysis_batch'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Analysis Batch\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'extraction_number'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Extraction Number\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column\\r\\n                                                    *ngFor=\\\"let target of controlsResultReportResults.targets\\\"\\r\\n                                                    [clrDgField]=\\\"target\\\">\\r\\n                                                    {{target}}</clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-row *ngFor=\\\"let control of controlsResultReportResults.ext_neg\\\"\\r\\n                                                    [clrDgItem]=\\\"control\\\">\\r\\n                                                    <clr-dg-cell>{{control.analysis_batch}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{control.extraction_number}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell class=\\\"dynamic-column\\\"\\r\\n                                                        *ngFor=\\\"let target of controlsResultReportResults.targets\\\">\\r\\n                                                        {{control[target]}}</clr-dg-cell>\\r\\n                                                </clr-dg-row>\\r\\n\\r\\n                                                <clr-dg-footer>\\r\\n                                                    {{controlsResultReport_extneg_Pagination.firstItem + 1}} -\\r\\n                                                    {{controlsResultReport_extneg_Pagination.lastItem + 1}} of\\r\\n                                                    {{controlsResultReport_extneg_Pagination.totalItems}}\\r\\n                                                    results\\r\\n                                                    <clr-dg-pagination #controlsResultReport_extneg_Pagination\\r\\n                                                        [clrDgPageSize]=\\\"10\\\">\\r\\n                                                    </clr-dg-pagination>\\r\\n                                                </clr-dg-footer>\\r\\n                                            </clr-datagrid>\\r\\n\\r\\n                                            <h4>Extraction Positive</h4>\\r\\n\\r\\n                                            <clr-datagrid #controlsResultReport_extPos_DataGrid\\r\\n                                                [clrDgLoading]=\\\"controlsResultReportLoading\\\">\\r\\n                                                <clr-dg-action-bar>\\r\\n                                                    <div class=\\\"btn-group\\\">\\r\\n                                                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                            (click)=\\\"exportToCSV('controlsResultReport_extPos')\\\">\\r\\n                                                            <clr-icon shape=\\\"export\\\" size=\\\"16\\\"></clr-icon> Export to CSV\\r\\n                                                        </button>\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"form-group\\\">\\r\\n                                                        <form [formGroup]=\\\"reportSelectForm\\\">\\r\\n                                                            <label>Export File name (optional)</label>\\r\\n                                                            <input type=\\\"text\\\" class=\\\"filename-input\\\"\\r\\n                                                                formControlName=\\\"controls_result_report_extPos_filename\\\">\\r\\n                                                        </form>\\r\\n                                                    </div>\\r\\n                                                </clr-dg-action-bar>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'analysis_batch'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Analysis Batch\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'extraction_number'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Extraction Number\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column\\r\\n                                                    *ngFor=\\\"let target of controlsResultReportResults.targets\\\"\\r\\n                                                    [clrDgField]=\\\"target\\\">\\r\\n                                                    {{target}}</clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-row *ngFor=\\\"let control of controlsResultReportResults.ext_pos\\\"\\r\\n                                                    [clrDgItem]=\\\"control\\\">\\r\\n                                                    <clr-dg-cell>{{control.analysis_batch}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{control.extraction_number}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell class=\\\"dynamic-column\\\"\\r\\n                                                        *ngFor=\\\"let target of controlsResultReportResults.targets\\\">\\r\\n                                                        {{control[target]}}</clr-dg-cell>\\r\\n                                                </clr-dg-row>\\r\\n\\r\\n                                                <clr-dg-footer>\\r\\n                                                    {{controlsResultReport_extpos_Pagination.firstItem + 1}} -\\r\\n                                                    {{controlsResultReport_extpos_Pagination.lastItem + 1}} of\\r\\n                                                    {{controlsResultReport_extpos_Pagination.totalItems}}\\r\\n                                                    results\\r\\n                                                    <clr-dg-pagination #controlsResultReport_extpos_Pagination\\r\\n                                                        [clrDgPageSize]=\\\"10\\\">\\r\\n                                                    </clr-dg-pagination>\\r\\n                                                </clr-dg-footer>\\r\\n                                            </clr-datagrid>\\r\\n\\r\\n                                            <h4>PCR Negative</h4>\\r\\n\\r\\n                                            <clr-datagrid #controlsResultReport_pcrNeg_DataGrid\\r\\n                                                [clrDgLoading]=\\\"controlsResultReportLoading\\\">\\r\\n\\r\\n                                                <clr-dg-action-bar>\\r\\n                                                    <div class=\\\"btn-group\\\">\\r\\n                                                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                            (click)=\\\"exportToCSV('controlsResultReport_pcrNeg')\\\">\\r\\n                                                            <clr-icon shape=\\\"export\\\" size=\\\"16\\\"></clr-icon> Export to CSV\\r\\n                                                        </button>\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"form-group\\\">\\r\\n                                                        <form [formGroup]=\\\"reportSelectForm\\\">\\r\\n                                                            <label>Export File name (optional)</label>\\r\\n                                                            <input type=\\\"text\\\" class=\\\"filename-input\\\"\\r\\n                                                                formControlName=\\\"controls_result_report_pcrNeg_filename\\\">\\r\\n                                                        </form>\\r\\n                                                    </div>\\r\\n                                                </clr-dg-action-bar>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'analysis_batch'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Analysis Batch\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'extraction_number'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Extraction Number\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'pcrreplicate_batch'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        PCR Replicate Batch\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column\\r\\n                                                    *ngFor=\\\"let target of controlsResultReportResults.targets\\\"\\r\\n                                                    [clrDgField]=\\\"target\\\">\\r\\n                                                    {{target}}</clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-row *ngFor=\\\"let control of controlsResultReportResults.pcr_neg\\\"\\r\\n                                                    [clrDgItem]=\\\"control\\\">\\r\\n                                                    <clr-dg-cell>{{control.analysis_batch}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{control.extraction_number}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{control.pcrreplicate_batch}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell class=\\\"dynamic-column\\\"\\r\\n                                                        *ngFor=\\\"let target of controlsResultReportResults.targets\\\">\\r\\n                                                        {{control[target]}}</clr-dg-cell>\\r\\n                                                </clr-dg-row>\\r\\n\\r\\n                                                <clr-dg-footer>\\r\\n                                                    {{controlsResultReport_pcrneg_Pagination.firstItem + 1}} -\\r\\n                                                    {{controlsResultReport_pcrneg_Pagination.lastItem + 1}} of\\r\\n                                                    {{controlsResultReport_pcrneg_Pagination.totalItems}}\\r\\n                                                    results\\r\\n                                                    <clr-dg-pagination #controlsResultReport_pcrneg_Pagination\\r\\n                                                        [clrDgPageSize]=\\\"10\\\">\\r\\n                                                    </clr-dg-pagination>\\r\\n                                                </clr-dg-footer>\\r\\n                                            </clr-datagrid>\\r\\n\\r\\n                                            <h4>PCR Positive</h4>\\r\\n\\r\\n                                            <clr-datagrid #controlsResultReport_pcrPos_DataGrid\\r\\n                                                [clrDgLoading]=\\\"controlsResultReportLoading\\\">\\r\\n\\r\\n                                                <clr-dg-action-bar>\\r\\n                                                    <div class=\\\"btn-group\\\">\\r\\n                                                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                            (click)=\\\"exportToCSV('controlsResultReport_pcrPos')\\\">\\r\\n                                                            <clr-icon shape=\\\"export\\\" size=\\\"16\\\"></clr-icon> Export to CSV\\r\\n                                                        </button>\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"form-group\\\">\\r\\n                                                        <form [formGroup]=\\\"reportSelectForm\\\">\\r\\n                                                            <label>Export File name (optional)</label>\\r\\n                                                            <input type=\\\"text\\\" class=\\\"filename-input\\\"\\r\\n                                                                formControlName=\\\"controls_result_report_pcrPos_filename\\\">\\r\\n                                                        </form>\\r\\n                                                    </div>\\r\\n                                                </clr-dg-action-bar>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'analysis_batch'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Analysis Batch\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'extraction_number'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        Extraction Number\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'pcrreplicate_batch'\\\">\\r\\n                                                    <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                                        PCR Replicate Batch\\r\\n                                                    </ng-container>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column\\r\\n                                                    *ngFor=\\\"let target of controlsResultReportResults.targets\\\"\\r\\n                                                    [clrDgField]=\\\"target\\\">\\r\\n                                                    {{target}}</clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-row *ngFor=\\\"let control of controlsResultReportResults.pcr_pos\\\"\\r\\n                                                    [clrDgItem]=\\\"control\\\">\\r\\n                                                    <clr-dg-cell>{{control.analysis_batch}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{control.extraction_number}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{control.pcrreplicate_batch}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell class=\\\"dynamic-column\\\"\\r\\n                                                        *ngFor=\\\"let target of controlsResultReportResults.targets\\\">\\r\\n                                                        {{control[target]}}</clr-dg-cell>\\r\\n                                                </clr-dg-row>\\r\\n\\r\\n                                                <clr-dg-footer>\\r\\n                                                    {{controlsResultReport_pcrpos_Pagination.firstItem + 1}} -\\r\\n                                                    {{controlsResultReport_pcrpos_Pagination.lastItem + 1}} of\\r\\n                                                    {{controlsResultReport_pcrpos_Pagination.totalItems}}\\r\\n                                                    results\\r\\n                                                    <clr-dg-pagination #controlsResultReport_pcrpos_Pagination\\r\\n                                                        [clrDgPageSize]=\\\"10\\\">\\r\\n                                                    </clr-dg-pagination>\\r\\n                                                </clr-dg-footer>\\r\\n                                            </clr-datagrid>\\r\\n\\r\\n                                            <h4>Pegnegs</h4>\\r\\n\\r\\n                                            <clr-datagrid #controlsResultReport_pegneg_DataGrid\\r\\n                                                [clrDgLoading]=\\\"controlsResultReportLoading\\\">\\r\\n\\r\\n                                                <clr-dg-action-bar>\\r\\n                                                    <div class=\\\"btn-group\\\">\\r\\n                                                        <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                                            (click)=\\\"exportToCSV('controlsResultReport_pegneg')\\\">\\r\\n                                                            <clr-icon shape=\\\"export\\\" size=\\\"16\\\"></clr-icon> Export to CSV\\r\\n                                                        </button>\\r\\n                                                    </div>\\r\\n                                                    <div class=\\\"form-group\\\">\\r\\n                                                        <form [formGroup]=\\\"reportSelectForm\\\">\\r\\n                                                            <label>Export File name (optional)</label>\\r\\n                                                            <input type=\\\"text\\\" class=\\\"filename-input\\\"\\r\\n                                                                formControlName=\\\"controls_result_report_pegneg_filename\\\">\\r\\n                                                        </form>\\r\\n                                                    </div>\\r\\n                                                </clr-dg-action-bar>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'id'\\\">\\r\\n                                                    Sample/PegNeg ID\\r\\n                                                    <clr-dg-filter [clrDgFilter]=\\\"rangeFilter\\\">\\r\\n                                                        <range-filter #rangeFilter></range-filter>\\r\\n                                                    </clr-dg-filter>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column [clrDgField]=\\\"'collection_start_date'\\\">\\r\\n                                                    Collect Start Date\\r\\n                                                    <clr-dg-filter [clrDgFilter]=\\\"CollectionStartDateFilter\\\">\\r\\n                                                        <collection-start-date-filter\\r\\n                                                            [dateField]=\\\"'collection_start_date'\\\"\\r\\n                                                            #CollectionStartDateFilter>\\r\\n                                                        </collection-start-date-filter>\\r\\n                                                    </clr-dg-filter>\\r\\n                                                </clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-column\\r\\n                                                    *ngFor=\\\"let target of controlsResultReportResults.targets\\\"\\r\\n                                                    [clrDgField]=\\\"target\\\">\\r\\n                                                    {{target}}</clr-dg-column>\\r\\n\\r\\n                                                <clr-dg-row *ngFor=\\\"let control of controlsResultReportResults.peg_neg\\\"\\r\\n                                                    [clrDgItem]=\\\"control\\\">\\r\\n                                                    <clr-dg-cell>{{control.id}}</clr-dg-cell>\\r\\n                                                    <clr-dg-cell>{{control.collection_start_date | date:'shortDate'}}\\r\\n                                                    </clr-dg-cell>\\r\\n                                                    <clr-dg-cell class=\\\"dynamic-column\\\"\\r\\n                                                        *ngFor=\\\"let target of controlsResultReportResults.targets\\\">\\r\\n                                                        {{control[target]}}</clr-dg-cell>\\r\\n                                                </clr-dg-row>\\r\\n\\r\\n                                                <clr-dg-footer>\\r\\n                                                    {{controlsResultReport_pegneg_Pagination.firstItem + 1}} -\\r\\n                                                    {{controlsResultReport_pegneg_Pagination.lastItem + 1}} of\\r\\n                                                    {{controlsResultReport_pegneg_Pagination.totalItems}}\\r\\n                                                    results\\r\\n                                                    <clr-dg-pagination #controlsResultReport_pegneg_Pagination\\r\\n                                                        [clrDgPageSize]=\\\"10\\\">\\r\\n                                                    </clr-dg-pagination>\\r\\n                                                </clr-dg-footer>\\r\\n                                            </clr-datagrid>\\r\\n\\r\\n                                        </div>\\r\\n\\r\\n                                    </clr-tab-content>\\r\\n                                </clr-tab>\\r\\n                                <!--End Control Results Reports tab -->\\r\\n\\r\\n                            </clr-tabs>\\r\\n\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                </clr-tab-content>\\r\\n            </clr-tab>\\r\\n            <!-- End View Reports tab -->\\r\\n        </clr-tabs>\\r\\n    </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/reports/reports.component.html\n// module id = ./src/app/reports/reports.component.html\n// module chunks = main","module.exports = \".text-larger {\\n  font-size: larger; }\\n\\n.text-purple {\\n  color: purple; }\\n\\n.text-italic {\\n  font-style: italic; }\\n\\n.text-smaller {\\n  font-size: smaller; }\\n\\n.list {\\n  width: 95%;\\n  display: -webkit-flex;\\n  /* Safari */\\n  -webkit-flex-wrap: wrap;\\n  /* Safari 6.1+ */\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -ms-flex-wrap: wrap;\\n      flex-wrap: wrap;\\n  margin: 2px; }\\n\\n.list-item {\\n  margin: 0.25em; }\\n\\n.list-section {\\n  margin-bottom: 1em; }\\n\\n.filename-input {\\n  width: 35em; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/reports/reports.component.scss\n// module id = ./src/app/reports/reports.component.scss\n// module chunks = main","import { Component, OnInit, AfterViewInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, FormArray, Validators, PatternValidator } from \"@angular/forms/\";\r\n\r\nimport { ISample } from '../samples/sample';\r\nimport { SampleService } from '../samples/sample.service';\r\nimport { ITarget } from '../targets/target';\r\nimport { TargetService } from '../targets/target.service';\r\nimport { Wizard, WizardPage, BUTTON_GROUP_DIRECTIVES, Datagrid } from \"clarity-angular\";\r\n\r\nimport { IMatrix } from '../SHARED/matrix';\r\nimport { ISampleType } from '../SHARED/sample-type';\r\nimport { IStudy } from '../studies/study';\r\n\r\nimport { MatrixService } from '../SHARED/matrix.service';\r\nimport { StudyService } from '../studies/study.service';\r\nimport { SampleTypeService } from '../SHARED/sample-type.service';\r\nimport { PcrReplicateService } from '../pcr-replicates/pcr-replicate.service';\r\nimport { FinalSampleMeanConcentrationService } from '../results/final-sample-mean-concentration.service';\r\n\r\nimport { APP_SETTINGS } from '../app.settings';\r\nimport { APP_UTILITIES } from '../app.utilities';\r\nimport { InhibitionService } from 'app/inhibitions/inhibition.service';\r\nimport { QualityControlReportService } from 'app/reports/quality-control-report.service';\r\nimport { ControlResultsReportService } from './control-results-report.service';\r\nimport { ReportFileService } from './report-file.service';\r\nimport { ReportTypesService } from './report-types.service';\r\nimport { ReportStatusService } from './report-status.service';\r\n\r\n// import { FinalSampleMeanConcentrationService } from '../final-sample-mean-concentration.service';\r\n\r\n@Component({\r\n  selector: 'app-reports',\r\n  templateUrl: './reports.component.html',\r\n  styleUrls: ['./reports.component.scss']\r\n})\r\nexport class ReportsComponent implements OnInit {\r\n  @ViewChild(\"reportsQueryWizard\") reportsQueryWizard: Wizard;\r\n  @ViewChild(\"inhibitionReportDataGrid\") inhibitionReportDataGrid: Datagrid;\r\n  @ViewChild(\"resultsReportSummaryDataGrid\") resultsReportSummaryDataGrid: Datagrid;\r\n  @ViewChild(\"individualSampleReportDataGrid\") individualSampleReportDataGrid: Datagrid;\r\n  @ViewChild(\"qualityControlReport_sampleQC_DataGrid\") qualityControlReport_sampleQC_DataGrid: Datagrid;\r\n  @ViewChild(\"qualityControlReport_EB_Raw_DataGrid\") qualityControlReport_EB_Raw_DataGrid: Datagrid;\r\n  @ViewChild(\"qualityControlReport_EB_QC_DataGrid\") qualityControlReport_EB_QC_DataGrid: Datagrid;\r\n  @ViewChild(\"controlsResultReport_extNeg_DataGrid\") controlsResultReport_extNeg_DataGrid: Datagrid;\r\n  @ViewChild(\"controlsResultReport_extPos_DataGrid\") controlsResultReport_extPos_DataGrid: Datagrid;\r\n  @ViewChild(\"controlsResultReport_pcrNeg_DataGrid\") controlsResultReport_pcrNeg_DataGrid: Datagrid;\r\n  @ViewChild(\"controlsResultReport_pcrPos_DataGrid\") controlsResultReport_pcrPos_DataGrid: Datagrid;\r\n  @ViewChild(\"controlsResultReport_pegneg_DataGrid\") controlsResultReport_pegneg_DataGrid: Datagrid;\r\n\r\n  allSamples: ISample[] = [];\r\n  allTargets: ITarget[] = [];\r\n  sampleTypes: ISampleType[];\r\n  matrices: IMatrix[];\r\n  studies: IStudy[];\r\n  samplesLoading: boolean = false;\r\n  errorMessage: string;\r\n  samplesCount: null;\r\n  sampleQueryComplete: boolean = false;\r\n\r\n  selected = [];\r\n  reportsQueryWizardActive: boolean = false;\r\n\r\n  reportsQuery = {\r\n    samples: [],\r\n    targets: [],\r\n    summary_stats: []\r\n  }\r\n\r\n  reportTypes = [];\r\n  reportStatuses = [];\r\n\r\n  submitLoading: boolean = false;\r\n\r\n  sampleSelectErrorFlag: boolean = false;\r\n  targetSelectErrorFlag: boolean = false;\r\n\r\n  nucleicAcidTypes = [];\r\n\r\n  sampleQueryForm: FormGroup;\r\n  reportSelectForm: FormGroup;\r\n\r\n  sampleQuerySizeErrorFlag = false;\r\n  reportsLoading = false;\r\n\r\n  // request success flag each report type\r\n  inhibitionReportSuccessFlag = false;\r\n  resultsReportSummarySuccessFlag = false;\r\n  individualSampleReportSuccessFlag = false;\r\n  qualityControlReportSuccessFlag = false;\r\n  controlsResultReportSuccessFlag = false;\r\n\r\n  // loading variables for each report list\r\n  inhibitionReportFilesLoading = false;\r\n  resultsReportSummaryReportFilesLoading = false;\r\n  individualSampleReportFilesLoading = false;\r\n  qualityControlReportFilesLoading = false;\r\n  controlsResultsReportFilesLoading = false;\r\n\r\n  // loading variables for each report type\r\n  inhibitionReportLoading = false;\r\n  controlsResultReportLoading = false;\r\n  individualSampleReportLoading = false;\r\n  qualityControlReportLoading = false;\r\n  resultsReportSummaryLoading = false;\r\n\r\n  inhibitionReportLoaded = false;\r\n  controlsResultReportLoaded = false;\r\n  individualSampleReportLoaded = false;\r\n  qualityControlReportLoaded = false;\r\n  resultsReportSummaryLoaded = false;\r\n\r\n  // arrays to contain each report list\r\n  inhibitionReportsList = [];\r\n  resultsReportSummaryReportsList = [];\r\n  individualSampleReportsList = [];\r\n  qualityControlReportsList = [];\r\n  controlsResultReportsList = [];\r\n\r\n  // columns list for report lists\r\n  reportListColumns = [\r\n    { fieldName: 'created_date', colName: \"Created Date\" },\r\n    { fieldName: 'created_by', colName: \"Created By\" },\r\n    { fieldName: 'status', colName: \"Status\" },\r\n    { fieldName: 'name', colName: \"Name\" },\r\n    { fieldName: 'link', colName: \"Link\" },\r\n  ]\r\n\r\n  // arrays to contain each report's results\r\n  inhibitionReportResults = [];\r\n  resultsReportSummaryResults = [];\r\n  individualSampleReportResults = [];\r\n  qualityControlReportResults = { \"sample_quality_control\": [], \"extraction_raw_data\": [], \"extraction_quality_control\": [] };\r\n  controlsResultReportResults = { \"ext_neg\": [], \"ext_pos\": [], \"pcr_neg\": [], \"pcr_pos\": [], \"peg_neg\": [], \"targets\": [] };\r\n\r\n  inhibitionColumns = [\r\n    { fieldName: 'sample', colName: \"Sample\" },\r\n    { fieldName: 'collaborator_sample_id', colName: \"Collaborator Sample ID\" },\r\n    { fieldName: 'study', colName: \"Study\" },\r\n    { fieldName: 'analysis_batch', colName: \"Analysis Batch\" },\r\n    { fieldName: 'extraction_number', colName: \"Extraction Number\" },\r\n    { fieldName: 'inhibition_dna_cq_value', colName: \"DNA Inhibtion Sample Cq\" },\r\n    { fieldName: 'inhibition_dna_control_cq_value', colName: \"DNA Inhibtion Control Cq\" },\r\n    { fieldName: 'inhibition_dna_dilution_factor', colName: \"DNA Inhibtion Dilution Factor\" },\r\n    { fieldName: 'inhibition_rna_cq_value', colName: \"RNA Inhibtion Sample Cq\" },\r\n    { fieldName: 'inhibition_rna_control_cq_value', colName: \"RNA Inhibtion Control Cq\" },\r\n    { fieldName: 'inhibition_rna_dilution_factor', colName: \"RNA Inhibtion Dilution Factor\" },\r\n  ]\r\n\r\n  resultsReportSummaryColumns = [\r\n    { fieldName: 'target_name', colName: \"Target\" },\r\n    { fieldName: 'sample_count', colName: \"Sample Count\" },\r\n    { fieldName: 'positive_count', colName: \"Positive Sample Count\" },\r\n    { fieldName: 'percent_positive', colName: \"Percent Positive\" },\r\n    { fieldName: 'max_concentration', colName: \"Maximum Concentration\" },\r\n    { fieldName: 'min_concentration', colName: \"Minimum Concentration\" },\r\n    { fieldName: 'median_concentration', colName: \"Median Concentration\" },\r\n    { fieldName: 'average_concentration', colName: \"Average Concentration\" },\r\n    { fieldName: 'min_concentration_positive', colName: \"Minimum concentration of positive samples\" },\r\n    { fieldName: 'median_concentration_positive', colName: \"Median concentration of positive samples\" },\r\n    { fieldName: 'average_concentration_positive', colName: \"Average concentration of positive samples\" },\r\n  ]\r\n\r\n  individualSampleReportColumns = [\r\n    { fieldName: 'sample', colName: \"Sample\" },\r\n    { fieldName: 'target_string', colName: \"Target\" },\r\n    { fieldName: 'result', colName: \"Result\" },\r\n    { fieldName: 'final_sample_mean_concentration_sci', colName: \"Sample Mean Concentration (Sci)\" },\r\n  ]\r\n\r\n  qualityControlReport_sampleQC_Columns = [\r\n    { fieldName: 'metric', colName: \"Metric\" },\r\n    { fieldName: 'value', colName: \"Value\" },\r\n    { fieldName: 'count', colName: \"Count\" },\r\n    { fieldName: 'min', colName: \"Min\" },\r\n    { fieldName: 'max', colName: \"Max\" },\r\n  ]\r\n\r\n  qualityControlReport_EB_Raw_Columns = [\r\n    { fieldName: 'analysis_batch', colName: \"Analysis Batch\" },\r\n    { fieldName: 'extraction_number', colName: \"Extraction Number\" },\r\n    { fieldName: 'extraction_volume', colName: \"Extraction Volume\" },\r\n    { fieldName: 'elution_volume', colName: \"Elution Volume\" },\r\n    { fieldName: 'rt_template_volume', colName: \"RT Template Volume\" },\r\n    { fieldName: 'rt_reaction_volume', colName: \"RT Reaction Volume\" },\r\n    { fieldName: 'qpcr_template_volume', colName: \"qPCR Template Volume\" },\r\n    { fieldName: 'qpcr_reaction_volume', colName: \"qPCR Reaction Volume\" },\r\n  ]\r\n\r\n  qualityControlReport_EB_QC_Columns = [\r\n    { fieldName: 'metric', colName: \"Metric\" },\r\n    { fieldName: 'value', colName: \"Value\" },\r\n    { fieldName: 'count', colName: \"Count\" }\r\n  ]\r\n\r\n  controlsResultReport_extNeg_Columns = [\r\n    { fieldName: 'analysis_batch', colName: \"Analysis Batch\" },\r\n    { fieldName: 'extraction_number', colName: \"Extraction Number\" }\r\n    // array.push the target columns to this array\r\n  ]\r\n  controlsResultReport_extPos_Columns = [\r\n    { fieldName: 'analysis_batch', colName: \"Analysis Batch\" },\r\n    { fieldName: 'extraction_number', colName: \"Extraction Number\" }\r\n    // array.push the target columns to this array\r\n  ]\r\n  controlsResultReport_pcrNeg_Columns = [\r\n    { fieldName: 'analysis_batch', colName: \"Analysis Batch\" },\r\n    { fieldName: 'extraction_number', colName: \"Extraction Number\" },\r\n    { fieldName: 'pcrreplicate_batch', colName: \"PCR Replicate Batch\" }\r\n    // array.push the target columns to this array\r\n  ]\r\n  controlsResultReport_pcrPos_Columns = [\r\n    { fieldName: 'analysis_batch', colName: \"Analysis Batch\" },\r\n    { fieldName: 'extraction_number', colName: \"Extraction Number\" },\r\n    { fieldName: 'pcrreplicate_batch', colName: \"PCR Replicate Batch\" }\r\n    // array.push the target columns to this array\r\n  ]\r\n  controlsResultReport_pegNeg_Columns = [\r\n    { fieldName: 'id', colName: \"Sample (PegNeg) ID\" },\r\n    { fieldName: 'collection_start_date', colName: \"Collection Start Date\" }\r\n    // array.push the target columns to this array\r\n  ]\r\n\r\n\r\n  resultsReportSummary_options = [\r\n    'sample_count',\r\n    'positive_count',\r\n    'percent_positive',\r\n    'max_concentration',\r\n    'min_concentration',\r\n    'median_concentration',\r\n    'average_concentration',\r\n    'min_concentration_positive',\r\n    'median_concentration_positive',\r\n    'average_concentration_positive'\r\n  ]\r\n\r\n  resultsReportSummary_columns = {\r\n    sample_count: false,\r\n    positive_count: false,\r\n    percent_positive: false,\r\n    max_concentration: false,\r\n    min_concentration: false,\r\n    median_concentration: false,\r\n    average_concentration: false,\r\n    min_concentration_positive: false,\r\n    median_concentration_positive: false,\r\n    average_concentration_positive: false\r\n  }\r\n\r\n\r\n  buildSampleQueryForm() {\r\n    this.sampleQueryForm = this.formBuilder.group({\r\n      study: null,\r\n      from_id: null,\r\n      to_id: null,\r\n      from_collection_start_date: null,\r\n      to_collection_start_date: null,\r\n      collaborator_sample_id: null,\r\n      sample_type: null,\r\n      matrix: null,\r\n      record_type: null,\r\n      peg_neg: null\r\n    })\r\n  }\r\n\r\n  buildReportSelectForm() {\r\n    this.reportSelectForm = this.formBuilder.group({\r\n      inhibition_report: false,\r\n      inhibition_report_filename: 'LIDE_InhibitionReport' + APP_UTILITIES.TODAY + '.csv',\r\n      results_report_summary: false,\r\n      results_report_summary_filename: 'LIDE_ResultsReportSummary' + APP_UTILITIES.TODAY + '.csv',\r\n      results_report_summary_options: this.formBuilder.group({\r\n        sample_count: false,\r\n        positive_count: false,\r\n        percent_positive: false,\r\n        max_concentration: false,\r\n        min_concentration: false,\r\n        median_concentration: false,\r\n        average_concentration: false,\r\n        min_concentration_positive: false,\r\n        median_concentration_positive: false,\r\n        average_concentration_positive: false\r\n      }),\r\n      individual_sample_report: false,\r\n      individual_sample_report_filename: 'LIDE_IndividualSampleReport' + APP_UTILITIES.TODAY + '.csv',\r\n      quality_control_report: false,\r\n      quality_control_report_sampleQC_filename: 'LIDE_SampleQCReport' + APP_UTILITIES.TODAY + '.csv',\r\n      quality_control_report_EB_Raw_filename: 'LIDE_RawExtractionBatchQCReport' + APP_UTILITIES.TODAY + '.csv',\r\n      quality_control_report_EB_QC_filename: 'LIDE_ExtractionBatchQCReport' + APP_UTILITIES.TODAY + '.csv',\r\n      controls_result_report: false,\r\n      controls_result_report_extNeg_filename: 'LIDE_ControlsReport_ExtNeg' + APP_UTILITIES.TODAY + '.csv',\r\n      controls_result_report_extPos_filename: 'LIDE_ControlsReport_ExtPos' + APP_UTILITIES.TODAY + '.csv',\r\n      controls_result_report_pcrNeg_filename: 'LIDE_ControlsReport_PCRNeg' + APP_UTILITIES.TODAY + '.csv',\r\n      controls_result_report_pcrPos_filename: 'LIDE_ControlsReport_PCRPos' + APP_UTILITIES.TODAY + '.csv',\r\n      controls_result_report_pegneg_filename: 'LIDE_ControlsReport_PegNeg' + APP_UTILITIES.TODAY + '.csv'\r\n    })\r\n  }\r\n\r\n  constructor(\r\n    private _sampleService: SampleService,\r\n    private _targetService: TargetService,\r\n    private _finalSampleMeanConcentrationService: FinalSampleMeanConcentrationService,\r\n    private _qualityControlReportService: QualityControlReportService,\r\n    private _controlResultsReportService: ControlResultsReportService,\r\n    private _reportFileService: ReportFileService,\r\n    private _reportTypesService: ReportTypesService,\r\n    private _reportStatusService: ReportStatusService,\r\n    private _studyService: StudyService,\r\n    private _sampleTypeService: SampleTypeService,\r\n    private _matrixService: MatrixService,\r\n    private _pcrReplicateService: PcrReplicateService,\r\n    private _inhibitionService: InhibitionService,\r\n    private formBuilder: FormBuilder\r\n  ) {\r\n    this.buildSampleQueryForm();\r\n    this.buildReportSelectForm();\r\n  }\r\n\r\n  openReportsQueryWizard() {\r\n    this.reportsQuery.samples = [];\r\n    this.reportsQuery.targets = [];\r\n    this.reportsQueryWizardActive = !this.reportsQueryWizardActive\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n\r\n    this.nucleicAcidTypes = APP_SETTINGS.NUCLEIC_ACID_TYPES;\r\n\r\n    // on init, call getTargets function of the TargetService, set results to allTargets var\r\n    this._targetService.getTargets()\r\n      .subscribe(targets => {\r\n        this.allTargets = targets\r\n        this.allTargets.sort(function (a, b) {\r\n          if (a.name < b.name) { return -1; }\r\n          if (a.name > b.name) { return 1; }\r\n          return 0;\r\n        });\r\n      },\r\n        error => this.errorMessage = <any>error);\r\n\r\n    // on init, call getSampleTypes function of the SampleTypeService, set results to the sampleTypes var\r\n    this._sampleTypeService.getSampleTypes()\r\n      .subscribe(sampleTypes => this.sampleTypes = sampleTypes,\r\n        error => this.errorMessage = error);\r\n\r\n    // on init, call getMatrices function of the MatrixService, set results to the matrices var\r\n    this._matrixService.getMatrices()\r\n      .subscribe(matrices => this.matrices = matrices,\r\n        error => this.errorMessage = error);\r\n\r\n    // on init, call getReportTypes function of the ReportTypesService, set results to the reportTypes var\r\n    this._reportTypesService.getReportTypes()\r\n      .subscribe(reportTypes => this.reportTypes = reportTypes,\r\n        error => this.errorMessage = error);\r\n\r\n    // on init, call getReportStatuses function of the ReportStatusService, set results to the reportStatuses var\r\n    this._reportStatusService.getReportStatuses()\r\n      .subscribe(reportStatuses => this.reportStatuses = reportStatuses,\r\n        error => this.errorMessage = error);\r\n\r\n    // on init, call getStudies function of the StudyService, set results to the studies var\r\n    this._studyService.getStudies()\r\n      .subscribe(\r\n        studies => {\r\n          this.studies = studies\r\n          this.studies.sort(function (a, b) {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n          });\r\n        },\r\n        error => this.errorMessage = error);\r\n\r\n    this.retrieveAllReports();\r\n\r\n    // auto-retrieve report lists every 60 seconds\r\n    // setInterval(() => {\r\n    //   this.retrieveAllReports();\r\n    // }, 60000);\r\n\r\n  }\r\n\r\n  retrieveAllReports() {\r\n\r\n    // set loadig variables to true\r\n    this.inhibitionReportFilesLoading = true;\r\n    this.resultsReportSummaryReportFilesLoading = true;\r\n    this.individualSampleReportFilesLoading = true;\r\n    this.qualityControlReportFilesLoading = true;\r\n    this.controlsResultsReportFilesLoading = true;\r\n\r\n    //clear out the lists\r\n    this.inhibitionReportsList = [];\r\n    this.resultsReportSummaryReportsList = [];\r\n    this.individualSampleReportsList = [];\r\n    this.qualityControlReportsList = [];\r\n    this.controlsResultReportsList = [];\r\n\r\n    // retrieve all the currently available reports from the report files endpoint\r\n    this._reportFileService.getReportFiles()\r\n      .subscribe(\r\n        reportfiles => {\r\n          // split the reponse into the respective report lists\r\n          for (let reportfile of reportfiles) {\r\n            switch (reportfile.report_type) {\r\n              case 1:\r\n                this.inhibitionReportsList.push(reportfile);\r\n                break;\r\n              case 2:\r\n                this.resultsReportSummaryReportsList.push(reportfile);\r\n                break;\r\n              case 3:\r\n                this.individualSampleReportsList.push(reportfile);\r\n                break;\r\n              case 4:\r\n                this.qualityControlReportsList.push(reportfile);\r\n                break;\r\n              case 5:\r\n                this.controlsResultReportsList.push(reportfile);\r\n                break;\r\n              default:\r\n            }\r\n          }\r\n          this.inhibitionReportFilesLoading = false;\r\n          this.resultsReportSummaryReportFilesLoading = false;\r\n          this.individualSampleReportFilesLoading = false;\r\n          this.qualityControlReportFilesLoading = false;\r\n          this.controlsResultsReportFilesLoading = false;\r\n          console.log(\"Reports Retrieved\");\r\n        },\r\n        error => this.errorMessage = error);\r\n  }\r\n\r\n  resetFlags() {\r\n    this.sampleQuerySizeErrorFlag = false;\r\n    this.sampleQueryComplete = false;\r\n    this.errorMessage = '';\r\n  }\r\n\r\n  deselectAll() {\r\n    this.selected = [];\r\n  }\r\n\r\n  selectAll() {\r\n    this.selected = this.allSamples;\r\n  }\r\n\r\n  resizeTable(tab) {\r\n\r\n    switch (tab) {\r\n      case 'inhibitionReport':\r\n        this.inhibitionReportDataGrid.resize();\r\n        break;\r\n      case 'resultsReportSummary':\r\n        this.resultsReportSummaryDataGrid.resize();\r\n        break;\r\n      case 'individualSampleReport':\r\n        this.individualSampleReportDataGrid.resize();\r\n        break;\r\n      case 'qualityControlReport':\r\n        this.qualityControlReport_sampleQC_DataGrid.resize();\r\n        this.qualityControlReport_EB_Raw_DataGrid.resize();\r\n        this.qualityControlReport_EB_QC_DataGrid.resize();\r\n        break;\r\n      case 'controlsResultReport':\r\n        this.controlsResultReport_extNeg_DataGrid.resize();\r\n        this.controlsResultReport_extPos_DataGrid.resize();\r\n        this.controlsResultReport_pcrNeg_DataGrid.resize();\r\n        this.controlsResultReport_pcrPos_DataGrid.resize();\r\n        this.controlsResultReport_pegneg_DataGrid.resize();\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  resizeTableByID(tab) {\r\n\r\n    switch (tab) {\r\n      case 1:\r\n        this.inhibitionReportDataGrid.resize();\r\n        break;\r\n      case 2:\r\n        this.resultsReportSummaryDataGrid.resize();\r\n        break;\r\n      case 3:\r\n        this.individualSampleReportDataGrid.resize();\r\n        break;\r\n      case 4:\r\n        this.qualityControlReport_sampleQC_DataGrid.resize();\r\n        this.qualityControlReport_EB_Raw_DataGrid.resize();\r\n        this.qualityControlReport_EB_QC_DataGrid.resize();\r\n        break;\r\n      case 5:\r\n        this.controlsResultReport_extNeg_DataGrid.resize();\r\n        this.controlsResultReport_extPos_DataGrid.resize();\r\n        this.controlsResultReport_pcrNeg_DataGrid.resize();\r\n        this.controlsResultReport_pcrPos_DataGrid.resize();\r\n        this.controlsResultReport_pegneg_DataGrid.resize();\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  public doCustomClick(buttonType: string): void {\r\n\r\n    this.sampleSelectErrorFlag = false;\r\n    this.targetSelectErrorFlag = false;\r\n    if (\"custom-next-sampleSelect\" === buttonType) {\r\n      if (this.selected.length < 1) {\r\n        this.sampleSelectErrorFlag = true;\r\n      } else {\r\n        this.sampleSelectErrorFlag = false;\r\n\r\n        for (let sample of this.selected) {\r\n          this.reportsQuery.samples.push(sample.id);\r\n        }\r\n        this.selected = [];\r\n        this.reportsQueryWizard.next();\r\n      }\r\n    }\r\n\r\n\r\n    if (\"custom-next-targetSelect\" === buttonType) {\r\n      // if (this.selected.length < 1) {\r\n      //   this.targetSelectErrorFlag = true;\r\n      // } else {\r\n      //   this.targetSelectErrorFlag = false;\r\n\r\n      //   for (let target of this.selected) {\r\n      //     this.reportsQuery.targets.push(target.id);\r\n      //   }\r\n      //   this.reportsQueryWizard.next();\r\n      // }\r\n\r\n      for (let target of this.selected) {\r\n        this.reportsQuery.targets.push(target.id);\r\n      }\r\n      this.reportsQueryWizard.next();\r\n    }\r\n\r\n\r\n    if (\"custom-previous\" === buttonType) {\r\n      this.selected = [];\r\n      this.reportsQueryWizard.previous();\r\n    }\r\n\r\n    if (\"custom-cancel\" === buttonType) {\r\n      this.reportsQueryWizard.cancel();\r\n      this.selected = [];\r\n      this.reportsQuery.samples = [];\r\n      this.reportsQuery.targets = [];\r\n      this.reportsQueryWizard.reset();\r\n    }\r\n\r\n    if (\"custom-finish\" === buttonType) {\r\n\r\n      this.reportsQueryWizard.cancel();\r\n      this.selected = [];\r\n      this.reportsQueryWizard.reset();\r\n    }\r\n  }\r\n\r\n\r\n  exportToCSV(tableType) {\r\n\r\n    switch (tableType) {\r\n      case 'inhibitionReport':\r\n        APP_UTILITIES.generateCSV({\r\n          filename: this.reportSelectForm.get('inhibition_report_filename').value,\r\n          data: this.inhibitionReportResults,\r\n          headers: this.inhibitionColumns\r\n        });\r\n        break;\r\n      case 'resultsReportSummary':\r\n        APP_UTILITIES.generateCSV({\r\n          filename: this.reportSelectForm.get('results_report_summary_filename').value,\r\n          data: this.resultsReportSummaryResults,\r\n          headers: this.resultsReportSummaryColumns\r\n        });\r\n        break;\r\n      case 'individualSampleReport':\r\n        APP_UTILITIES.generateCSV({\r\n          filename: this.reportSelectForm.get('individual_sample_report_filename').value,\r\n          data: this.individualSampleReportResults,\r\n          headers: this.individualSampleReportColumns\r\n        });\r\n        break;\r\n      case 'qualityControlReport_sampleQC':\r\n        APP_UTILITIES.generateCSV({\r\n          filename: this.reportSelectForm.get('quality_control_report_sampleQC_filename').value,\r\n          data: this.qualityControlReportResults.sample_quality_control,\r\n          headers: this.qualityControlReport_sampleQC_Columns\r\n        });\r\n        break;\r\n      case 'qualityControlReport_EB_Raw':\r\n        APP_UTILITIES.generateCSV({\r\n          filename: this.reportSelectForm.get('quality_control_report_EB_Raw_filename').value,\r\n          data: this.qualityControlReportResults.extraction_raw_data,\r\n          headers: this.qualityControlReport_EB_Raw_Columns\r\n        });\r\n        break;\r\n      case 'qualityControlReport_EB_QC':\r\n        APP_UTILITIES.generateCSV({\r\n          filename: this.reportSelectForm.get('quality_control_report_EB_QC_filename').value,\r\n          data: this.qualityControlReportResults.extraction_quality_control,\r\n          headers: this.qualityControlReport_EB_QC_Columns\r\n        });\r\n        break;\r\n      case 'controlsResultReport_extNeg':\r\n        // add the target name rows to the controlsResultReport_extNeg_Columns array using the target array\r\n        for (let target of this.controlsResultReportResults.targets) {\r\n          this.controlsResultReport_extNeg_Columns.push({ fieldName: target, colName: target })\r\n        }\r\n        APP_UTILITIES.generateCSV({\r\n          filename: this.reportSelectForm.get('controls_result_report_extNeg_filename').value,\r\n          data: this.controlsResultReportResults.ext_neg,\r\n          headers: this.controlsResultReport_extNeg_Columns\r\n        });\r\n        break;\r\n      case 'controlsResultReport_extPos':\r\n        // add the target name rows to the controlsResultReport_extPos_Columns array using the target array\r\n        for (let target of this.controlsResultReportResults.targets) {\r\n          this.controlsResultReport_extPos_Columns.push({ fieldName: target, colName: target })\r\n        }\r\n        APP_UTILITIES.generateCSV({\r\n          filename: this.reportSelectForm.get('controls_result_report_extPos_filename').value,\r\n          data: this.controlsResultReportResults.ext_pos,\r\n          headers: this.controlsResultReport_extPos_Columns\r\n        });\r\n        break;\r\n      case 'controlsResultReport_pcrNeg':\r\n        // add the target name rows to the controlsResultReport_pcrNeg_Columns array using the target array\r\n        for (let target of this.controlsResultReportResults.targets) {\r\n          this.controlsResultReport_pcrNeg_Columns.push({ fieldName: target, colName: target })\r\n        }\r\n        APP_UTILITIES.generateCSV({\r\n          filename: this.reportSelectForm.get('controls_result_report_pcrNeg_filename').value,\r\n          data: this.controlsResultReportResults.pcr_neg,\r\n          headers: this.controlsResultReport_pcrNeg_Columns\r\n        });\r\n        break;\r\n      case 'controlsResultReport_pcrPos':\r\n        // add the target name rows to the controlsResultReport_pcrPos_Columns array using the target array\r\n        for (let target of this.controlsResultReportResults.targets) {\r\n          this.controlsResultReport_pcrPos_Columns.push({ fieldName: target, colName: target })\r\n        }\r\n        APP_UTILITIES.generateCSV({\r\n          filename: this.reportSelectForm.get('controls_result_report_pcrPos_filename').value,\r\n          data: this.controlsResultReportResults.pcr_pos,\r\n          headers: this.controlsResultReport_pcrPos_Columns\r\n        });\r\n        break;\r\n      case 'controlsResultReport_pegneg':\r\n        // add the target name rows to the controlsResultReport_pegNeg_Columns array using the target array\r\n        for (let target of this.controlsResultReportResults.targets) {\r\n          this.controlsResultReport_pegNeg_Columns.push({ fieldName: target, colName: target })\r\n        }\r\n        APP_UTILITIES.generateCSV({\r\n          filename: this.reportSelectForm.get('controls_result_report_pegneg_filename').value,\r\n          data: this.controlsResultReportResults.peg_neg,\r\n          headers: this.controlsResultReport_pegNeg_Columns\r\n        });\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  loadReport(fileURL, fileName, report_type) {\r\n\r\n    let trimmedFileName = fileName.replace(\".json\", \"\");\r\n\r\n    switch (report_type) {\r\n      case 1:\r\n        this.inhibitionReportLoading = true;\r\n        this.reportSelectForm.get('inhibition_report_filename').setValue(trimmedFileName);\r\n        break;\r\n      case 2:\r\n        this.resultsReportSummaryLoading = true;\r\n        this.reportSelectForm.get('results_report_summary_filename').setValue(trimmedFileName);\r\n        break;\r\n      case 3:\r\n        this.individualSampleReportLoading = true;\r\n        this.reportSelectForm.get('individual_sample_report_filename').setValue(trimmedFileName);\r\n        break;\r\n      case 4:\r\n        this.qualityControlReportLoading = true;\r\n        this.reportSelectForm.get('quality_control_report_sampleQC_filename').setValue(trimmedFileName + '(Sample)');\r\n        this.reportSelectForm.get('quality_control_report_EB_Raw_filename').setValue(trimmedFileName + '(RawExtractionBatch)');\r\n        this.reportSelectForm.get('quality_control_report_EB_QC_filename').setValue(trimmedFileName + '(ExtractionBatch)');\r\n        break;\r\n      case 5:\r\n        this.controlsResultReportLoading = true;\r\n        this.reportSelectForm.get('controls_result_report_extNeg_filename').setValue(trimmedFileName + '(ExtNeg)');\r\n        this.reportSelectForm.get('controls_result_report_extPos_filename').setValue(trimmedFileName + '(ExtPos)');\r\n        this.reportSelectForm.get('controls_result_report_pcrNeg_filename').setValue(trimmedFileName + '(PCRNeg)');\r\n        this.reportSelectForm.get('controls_result_report_pcrPos_filename').setValue(trimmedFileName + '(PCRPos)');\r\n        this.reportSelectForm.get('controls_result_report_pegneg_filename').setValue(trimmedFileName + '(PegNeg)');\r\n        break;\r\n      default:\r\n    }\r\n\r\n    this._reportFileService.retrieveReport(fileURL)\r\n      .subscribe(\r\n        (reportResults) => {\r\n\r\n          switch (report_type) {\r\n            case 1:\r\n              this.inhibitionReportResults = reportResults;\r\n              this.inhibitionReportLoading = false;\r\n              this.inhibitionReportLoaded = true;\r\n              break;\r\n            case 2:\r\n\r\n              for (let option of this.resultsReportSummary_options) {\r\n                this.resultsReportSummary_columns[option] = false;\r\n              }\r\n              // special treatment for the resultsReportSummary: determine which columns to show on table\r\n              // based on the structure of the first item in the response array\r\n              for (let option of this.resultsReportSummary_options) {\r\n                if (reportResults[0].hasOwnProperty(option)) {\r\n                  this.resultsReportSummary_columns[option] = true;\r\n                }\r\n              }\r\n              // alternative method for detecting presence/non-presence of the field (less safe)\r\n              // for (let option of this.resultsReportSummary_options) {\r\n              //   if (reportResults[0][option] !== undefined) {\r\n              //     this.resultsReportSummary_columns[option] = true;\r\n              //   }\r\n              // }\r\n\r\n              this.resultsReportSummaryResults = reportResults;\r\n              this.resultsReportSummaryLoading = false;\r\n              this.resultsReportSummaryLoaded = true;\r\n              break;\r\n            case 3:\r\n              this.individualSampleReportResults = reportResults;\r\n              this.individualSampleReportLoading = false;\r\n              this.individualSampleReportLoaded = true;\r\n              break;\r\n            case 4:\r\n              this.qualityControlReportResults = reportResults;\r\n              this.qualityControlReportLoading = false;\r\n              this.qualityControlReportLoaded = true;\r\n              break;\r\n            case 5:\r\n              this.controlsResultReportResults = reportResults;\r\n              this.controlsResultReportLoading = false;\r\n              this.controlsResultReportLoaded = true;\r\n              break;\r\n            default:\r\n          }\r\n          this.submitLoading = false;\r\n          this.resizeTableByID(report_type);\r\n        },\r\n        error => {\r\n          this.errorMessage = error;\r\n          this.submitLoading = false;\r\n        }\r\n      );\r\n  }\r\n\r\n  onSubmitSampleQuery(formValue) {\r\n\r\n    this.resetFlags();\r\n\r\n    this.submitLoading = true;\r\n\r\n    // set functional limit for amount of samples to display in the table at once\r\n    const countLimit = 2000;\r\n\r\n    this._sampleService.querySamplesCount(formValue)\r\n      .subscribe(\r\n        (count) => {\r\n\r\n          // if count exceeds limit, show error message\r\n          if (count.count >= countLimit) {\r\n            this.sampleQuerySizeErrorFlag = true;\r\n          } else if (count.count < countLimit) {\r\n\r\n            this.samplesLoading = true;\r\n\r\n            formValue.slim = null;\r\n\r\n            // if sample query count does not exceed functional limit, query for actual results, and set results to the allSamples var\r\n            this._sampleService.querySamples(formValue)\r\n              .subscribe(\r\n                (samples) => {\r\n                  this.samplesCount = count.count;\r\n                  this.sampleQueryComplete = true;\r\n                  this.allSamples = samples\r\n                  this.samplesLoading = false;\r\n                  this.submitLoading = false;\r\n                },\r\n                error => {\r\n                  this.errorMessage = error;\r\n                  this.submitLoading = false;\r\n                  this.samplesLoading = false;\r\n                }\r\n              );\r\n          }\r\n        },\r\n        error => {\r\n          this.errorMessage = error;\r\n          this.submitLoading = false;\r\n        }\r\n      );\r\n  }\r\n\r\n  clearAlerts() {\r\n    this.inhibitionReportSuccessFlag = false;\r\n    this.resultsReportSummarySuccessFlag = false;\r\n    this.individualSampleReportSuccessFlag = false;\r\n    this.qualityControlReportSuccessFlag = false;\r\n    this.controlsResultReportSuccessFlag = false;\r\n  }\r\n\r\n  generateReports(reportSelectFormValue) {\r\n\r\n    if (reportSelectFormValue.inhibition_report) {\r\n      this.submitLoading = true;\r\n      // begin call for inhibition report\r\n      this._inhibitionService.getInhibitionReport(this.reportsQuery)\r\n        .subscribe(\r\n          (success) => {\r\n            this.submitLoading = false;\r\n            this.inhibitionReportSuccessFlag = true;\r\n          },\r\n          error => {\r\n            this.errorMessage = error;\r\n            this.inhibitionReportLoading = false;\r\n            this.inhibitionReportLoaded = false;\r\n            this.submitLoading = false;\r\n          }\r\n        );\r\n    }\r\n    if (reportSelectFormValue.controls_result_report) {\r\n      this.submitLoading = true;\r\n      this._controlResultsReportService.getControlResultsReport(this.reportsQuery)\r\n        .subscribe(\r\n          (success) => {\r\n            this.controlsResultReportSuccessFlag = true;\r\n            this.submitLoading = false;\r\n          },\r\n          error => {\r\n            this.errorMessage = error;\r\n            this.controlsResultReportLoading = false;\r\n            this.controlsResultReportLoaded = false;\r\n            this.submitLoading = false;\r\n          }\r\n        );\r\n    }\r\n    if (reportSelectFormValue.individual_sample_report) {\r\n      this.submitLoading = true;\r\n      this._finalSampleMeanConcentrationService.queryFinalSampleMeanConcentrationsResults(this.reportsQuery)\r\n        .subscribe(\r\n          (success) => {\r\n            this.individualSampleReportSuccessFlag = true;\r\n            this.submitLoading = false;\r\n          },\r\n          error => {\r\n            this.errorMessage = <any>error\r\n            this.individualSampleReportLoading = false;\r\n            this.submitLoading = false;\r\n          }\r\n        );\r\n    }\r\n    if (reportSelectFormValue.quality_control_report) {\r\n      this.submitLoading = true;\r\n      let sampleArray = {\r\n        \"samples\": this.reportsQuery.samples\r\n      }\r\n\r\n      this._qualityControlReportService.getQualityControlReport(sampleArray)\r\n        .subscribe(\r\n          (success) => {\r\n            this.qualityControlReportSuccessFlag = true;\r\n            this.submitLoading = false;\r\n          },\r\n          error => {\r\n            this.errorMessage = <any>error\r\n            this.qualityControlReportLoading = false;\r\n            this.submitLoading = false;\r\n          }\r\n        );\r\n    }\r\n    if (reportSelectFormValue.results_report_summary) {\r\n      this.submitLoading = true;\r\n      this.reportsQuery.summary_stats = [];\r\n\r\n      let options = this.reportSelectForm.get('results_report_summary_options').value;\r\n\r\n      Object.keys(options).forEach(item => {\r\n        console.log(item);\r\n        if (options[item]) {\r\n          this.reportsQuery.summary_stats.push(item);\r\n        }\r\n      });\r\n\r\n      // just updated 6/11/19 - not yet available on backend\r\n      this._finalSampleMeanConcentrationService.getSummaryStatistics(this.reportsQuery)\r\n        .subscribe(\r\n          (success) => {\r\n            this.resultsReportSummarySuccessFlag = true;\r\n            this.submitLoading = false;\r\n          },\r\n          error => {\r\n            this.errorMessage = error;\r\n            this.resultsReportSummaryLoading = false;\r\n            this.resultsReportSummaryLoaded = false;\r\n            this.submitLoading = false;\r\n          }\r\n        );\r\n    }\r\n\r\n    // disappear all the success flags and alerts after 30 seconds\r\n    setTimeout(() => {\r\n      this.inhibitionReportSuccessFlag = false;\r\n      this.resultsReportSummarySuccessFlag = false;\r\n      this.individualSampleReportSuccessFlag = false;\r\n      this.qualityControlReportSuccessFlag = false;\r\n      this.controlsResultReportSuccessFlag = false;\r\n    }, 30000);\r\n\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/reports/reports.component.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\n\r\n@Injectable()\r\nexport class FinalSampleMeanConcentrationService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  public queryFinalSampleMeanConcentrations(queryObject): Observable<any> {\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    let queryString = '';\r\n    queryString += '?sample=';\r\n    for (let sample of queryObject.samples) {\r\n      queryString += ((sample.toString()) + ',')\r\n    }\r\n    queryString = queryString.slice(0, -1);\r\n    queryString += '&target=';\r\n    for (let target of queryObject.targets) {\r\n      queryString += ((target.toString()) + ',')\r\n    }\r\n    queryString = queryString.slice(0, -1);\r\n\r\n    return this._http.get(APP_SETTINGS.FINALSAMPLEMEANCONCENTRATIONS_URL + queryString, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n\r\n  }\r\n\r\n  public queryFinalSampleMeanConcentrationsResults(queryObject): Observable<any> {\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    let queryString = '';\r\n    queryString += '?sample=';\r\n    for (let sample of queryObject.samples) {\r\n      queryString += ((sample.toString()) + ',')\r\n    }\r\n    queryString = queryString.slice(0, -1);\r\n    queryString += '&target=';\r\n    for (let target of queryObject.targets) {\r\n      queryString += ((target.toString()) + ',')\r\n    }\r\n    queryString = queryString.slice(0, -1);\r\n\r\n    return this._http.get(APP_SETTINGS.FINALSAMPLEMEANCONCENTRATIONS_URL + 'results/' + queryString, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  getSummaryStatistics(queryObject): Observable<any> {\r\n    let queryString = '';\r\n    queryString += '?sample=';\r\n    for (let sample of queryObject.samples) {\r\n      queryString += ((sample.toString()) + ',')\r\n    }\r\n    queryString = queryString.slice(0, -1);\r\n    queryString += '&target=';\r\n    for (let target of queryObject.targets) {\r\n      queryString += ((target.toString()) + ',')\r\n    }\r\n    queryString = queryString.slice(0, -1);\r\n\r\n    if (queryObject.summary_stats.length > 0) {\r\n      queryString += '&statistic=';\r\n      for (let stat of queryObject.summary_stats) {\r\n        queryString += ((stat.toString()) + ',')\r\n      }\r\n      queryString = queryString.slice(0, -1);\r\n    }\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.FINALSAMPLEMEANCONCENTRATIONS_URL + 'summary_statistics/' + queryString, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/results/final-sample-mean-concentration.service.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-xs-12\\\">\\r\\n        <h3>Results</h3>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n        <p>\\r\\n            <button class=\\\"btn btn-outline\\\" (click)=\\\"openResultsQueryWizard()\\\">\\r\\n                <clr-icon shape=\\\"search\\\"></clr-icon> Open Results Query Builder\\r\\n            </button>\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n\\r\\n        <clr-wizard #resultsQueryWizard [(clrWizardOpen)]=\\\"resultsQueryWizardActive\\\">\\r\\n            <clr-wizard-title>Results Query Builder</clr-wizard-title>\\r\\n\\r\\n            <clr-wizard-button [type]=\\\"'cancel'\\\">Cancel</clr-wizard-button>\\r\\n            <clr-wizard-button [type]=\\\"'previous'\\\">Back</clr-wizard-button>\\r\\n            <clr-wizard-button [type]=\\\"'next'\\\">Next</clr-wizard-button>\\r\\n            <clr-wizard-button [type]=\\\"'finish'\\\">Finish</clr-wizard-button>\\r\\n\\r\\n            <clr-wizard-page (clrWizardPageCustomButton)=\\\"doCustomClick($event)\\\">\\r\\n                <ng-template clrPageTitle>Select Samples</ng-template>\\r\\n\\r\\n                <!-- Begin sample query form -->\\r\\n                <div class=\\\"card-text\\\">\\r\\n                    <form class=\\\"form compact\\\" [formGroup]=\\\"sampleQueryForm\\\"\\r\\n                        (ngSubmit)=\\\"onSubmitSampleQuery(sampleQueryForm.value)\\\">\\r\\n                        <section class=\\\"form-block\\\">\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label [ngClass]=\\\"{'required': sampleQueryForm.get('study').enabled}\\\">Study</label>\\r\\n                                <label for=\\\"studySelect\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                    class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                                    [class.invalid]=\\\"sampleQueryForm.get('study').invalid && (sampleQueryForm.get('study').dirty || sampleQueryForm.get('study').touched)\\\">\\r\\n                                    <div class=\\\"select\\\">\\r\\n                                        <select id=\\\"studySelect\\\" name=\\\"study\\\" formControlName=\\\"study\\\">\\r\\n                                            <option value=\\\"\\\">\\r\\n                                                <span class=\\\"all\\\">ALL STUDIES</span>\\r\\n                                            </option>\\r\\n                                            <option *ngFor=\\\"let study of studies\\\" [value]=\\\"study.id\\\">{{study.name}}\\r\\n                                            </option>\\r\\n                                        </select>\\r\\n                                    </div>\\r\\n                                </label>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label>Sample ID Range</label>\\r\\n                                <span>From</span>\\r\\n                                <input type=\\\"number\\\" formControlName=\\\"from_id\\\">\\r\\n                                <span>To</span>\\r\\n                                <input type=\\\"number\\\" formControlName=\\\"to_id\\\">\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label>Collection Start Date Range</label>\\r\\n                                <span>From</span>\\r\\n                                <input type=\\\"date\\\" formControlName=\\\"from_collection_start_date\\\">\\r\\n                                <span>To</span>\\r\\n                                <input type=\\\"date\\\" formControlName=\\\"to_collection_start_date\\\">\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label>Collaborator Sample ID</label>\\r\\n                                <input id=\\\"collabSampleIdInput\\\" type=\\\"text\\\" formControlName=\\\"collaborator_sample_id\\\">\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label>Peg Neg (returns associated samples)</label>\\r\\n                                <input type=\\\"number\\\" formControlName=\\\"peg_neg\\\">\\r\\n                            </div>\\r\\n                            <!-- <div class=\\\"form-group\\\">\\r\\n                                <label>Matrix</label>\\r\\n                                <div class=\\\"select\\\">\\r\\n                                    <select id=\\\"matrixSelect\\\" name=\\\"matrix\\\" formControlName=\\\"matrix\\\">\\r\\n                                        <option value=\\\"\\\">\\r\\n                                            <span class=\\\"all\\\">ALL MATRICES</span>\\r\\n                                        </option>\\r\\n                                        <option *ngFor=\\\"let matrix of matrices\\\" [value]=\\\"matrix.id\\\">{{matrix.name}}</option>\\r\\n                                    </select>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label>Sample type</label>\\r\\n                                <div class=\\\"select\\\">\\r\\n                                    <select id=\\\"sampleTypeSelect\\\" name=\\\"sample_type\\\" formControlName=\\\"sample_type\\\">\\r\\n                                        <option value=\\\"\\\">\\r\\n                                            <span class=\\\"all\\\">ALL SAMPLE TYPES</span>\\r\\n                                        </option>\\r\\n                                        <option *ngFor=\\\"let sampleType of sampleTypes\\\" [value]=\\\"sampleType.id\\\">{{sampleType.name}}</option>\\r\\n                                    </select>\\r\\n                                </div>\\r\\n                            </div> -->\\r\\n\\r\\n                        </section>\\r\\n\\r\\n                        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"sampleQuerySizeErrorFlag\\\">\\r\\n                            <div class=\\\"alert-item\\\">\\r\\n                                <span class=\\\"alert-text\\\">Your query results are too large (greater than\\r\\n                                    {{queryCountLimit}}). Please narrow your search.</span>\\r\\n                            </div>\\r\\n                        </clr-alert>\\r\\n\\r\\n                        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [clrLoading]=\\\"submitLoading\\\">\\r\\n                            <clr-icon shape=\\\"filter\\\"></clr-icon> Filter Samples\\r\\n                        </button>\\r\\n                    </form>\\r\\n                </div>\\r\\n\\r\\n                <div *ngIf=\\\"sampleQueryComplete\\\">\\r\\n                    <h4>Query returned {{samplesCount}} sample records</h4>\\r\\n                </div>\\r\\n                <!-- End sample query form -->\\r\\n\\r\\n\\r\\n                <div class=\\\"in-wizard-datagrid\\\">\\r\\n                    <clr-datagrid [(clrDgSelected)]=\\\"selected\\\" [clrDgLoading]=\\\"samplesLoading\\\" [clDgRowSelection]=\\\"true\\\"\\r\\n                        class=\\\"datagrid-compact\\\">\\r\\n\\r\\n                        <clr-dg-action-bar>\\r\\n                            <div class=\\\"btn-group\\\">\\r\\n                                <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"selectAll()\\\">\\r\\n                                    <clr-icon shape=\\\"check\\\" size=\\\"16\\\"></clr-icon> Select All\\r\\n                                </button>\\r\\n                            </div>\\r\\n                            <div class=\\\"btn-group\\\">\\r\\n                                <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"deselectAll()\\\">\\r\\n                                    <clr-icon shape=\\\"window-close\\\" size=\\\"16\\\"></clr-icon> Deselect All\\r\\n                                </button>\\r\\n                            </div>\\r\\n                        </clr-dg-action-bar>\\r\\n\\r\\n                        <clr-dg-column [clrDgField]=\\\"'id'\\\">\\r\\n                            Sample ID\\r\\n                            <clr-dg-filter [clrDgFilter]=\\\"rangeFilter\\\">\\r\\n                                <range-filter #rangeFilter></range-filter>\\r\\n                            </clr-dg-filter>\\r\\n                        </clr-dg-column>\\r\\n\\r\\n                        <clr-dg-column [clrDgField]=\\\"'collaborator_sample_id'\\\">\\r\\n                            <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                Collaborator Sample ID\\r\\n                            </ng-container>\\r\\n                        </clr-dg-column>\\r\\n\\r\\n                        <clr-dg-column [clrDgField]=\\\"'study_string'\\\">\\r\\n                            Study\\r\\n                            <clr-dg-filter [clrDgFilter]=\\\"studyFilter\\\">\\r\\n                                <study-filter #studyFilter></study-filter>\\r\\n                            </clr-dg-filter>\\r\\n                        </clr-dg-column>\\r\\n\\r\\n\\r\\n                        <clr-dg-column [clrDgField]=\\\"'collection_start_date'\\\">\\r\\n                            Collect Start Date\\r\\n                            <clr-dg-filter [clrDgFilter]=\\\"CollectionStartDateFilter\\\">\\r\\n                                <collection-start-date-filter [dateField]=\\\"'collection_start_date'\\\"\\r\\n                                    #CollectionStartDateFilter></collection-start-date-filter>\\r\\n                            </clr-dg-filter>\\r\\n                        </clr-dg-column>\\r\\n\\r\\n                        <clr-dg-row *clrDgItems=\\\"let sample of allSamples\\\" [clrDgItem]=\\\"sample\\\">\\r\\n                            <clr-dg-cell>{{sample.id}}</clr-dg-cell>\\r\\n                            <clr-dg-cell>{{sample.collaborator_sample_id}}</clr-dg-cell>\\r\\n                            <clr-dg-cell>{{sample.study_string}}</clr-dg-cell>\\r\\n                            <clr-dg-cell>{{sample.collection_start_date | date:'shortDate'}}</clr-dg-cell>\\r\\n                        </clr-dg-row>\\r\\n\\r\\n                        <clr-dg-footer>\\r\\n                            {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{pagination.totalItems}}\\r\\n                            samples\\r\\n                            <clr-dg-pagination #pagination [clrDgPageSize]=\\\"10\\\"></clr-dg-pagination>\\r\\n                        </clr-dg-footer>\\r\\n                    </clr-datagrid>\\r\\n\\r\\n                </div>\\r\\n                <p>\\r\\n                    <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"sampleSelectErrorFlag\\\">\\r\\n                        <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                            <span class=\\\"alert-text\\\">Please select at least one sample to continue.</span>\\r\\n                        </div>\\r\\n                    </clr-alert>\\r\\n\\r\\n                    <ng-template clrPageButtons>\\r\\n                        <clr-wizard-button [type]=\\\"'custom-cancel'\\\">Cancel</clr-wizard-button>\\r\\n                        <clr-wizard-button [type]=\\\"'custom-previous'\\\">Back</clr-wizard-button>\\r\\n                        <clr-wizard-button [type]=\\\"'custom-next-sampleSelect'\\\">Next</clr-wizard-button>\\r\\n                    </ng-template>\\r\\n            </clr-wizard-page>\\r\\n\\r\\n            <clr-wizard-page (clrWizardPageCustomButton)=\\\"doCustomClick($event)\\\">\\r\\n                <ng-template clrPageTitle>Select Targets</ng-template>\\r\\n                <div class=\\\"in-wizard-datagrid\\\">\\r\\n                    <clr-datagrid [(clrDgSelected)]=\\\"selected\\\" [clDgRowSelection]=\\\"true\\\" class=\\\"datagrid-compact\\\">\\r\\n\\r\\n                        <clr-dg-column [clrDgField]=\\\"'name'\\\">Name</clr-dg-column>\\r\\n                        <clr-dg-column [clrDgField]=\\\"'code'\\\">Code</clr-dg-column>\\r\\n                        <clr-dg-column [clrDgField]=\\\"'type'\\\">Type</clr-dg-column>\\r\\n\\r\\n                        <clr-dg-row *clrDgItems=\\\"let target of allTargets\\\" [clrDgItem]=\\\"target\\\">\\r\\n                            <clr-dg-cell>{{target.name}}</clr-dg-cell>\\r\\n                            <clr-dg-cell>{{target.code}}</clr-dg-cell>\\r\\n                            <clr-dg-cell>{{target.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes }}\\r\\n                            </clr-dg-cell>\\r\\n                        </clr-dg-row>\\r\\n\\r\\n                        <clr-dg-footer>{{allTargets.length}} targets</clr-dg-footer>\\r\\n                    </clr-datagrid>\\r\\n                </div>\\r\\n                <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"targetSelectErrorFlag\\\">\\r\\n                    <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                        <span class=\\\"alert-text\\\">Please select at least one target to continue.</span>\\r\\n                    </div>\\r\\n                </clr-alert>\\r\\n                <ng-template clrPageButtons>\\r\\n                    <clr-wizard-button [type]=\\\"'custom-cancel'\\\">Cancel</clr-wizard-button>\\r\\n                    <clr-wizard-button [type]=\\\"'custom-previous'\\\">Back</clr-wizard-button>\\r\\n                    <clr-wizard-button [type]=\\\"'custom-next-targetSelect'\\\">Next</clr-wizard-button>\\r\\n                </ng-template>\\r\\n            </clr-wizard-page>\\r\\n\\r\\n            <clr-wizard-page (clrWizardPageCustomButton)=\\\"doCustomClick($event)\\\">\\r\\n                <ng-template clrPageTitle>Query Summary</ng-template>\\r\\n                <label>Samples:</label>\\r\\n                <ul class=\\\"list\\\">\\r\\n                    <li *ngFor=\\\"let sample of resultsQuery.samples\\\">{{sample}}</li>\\r\\n                </ul>\\r\\n                <p>\\r\\n                    <label>Targets:</label>\\r\\n                    <ul class=\\\"list\\\">\\r\\n                        <li *ngFor=\\\"let target of resultsQuery.targets\\\">{{target | displayValue:'name': allTargets}}\\r\\n                        </li>\\r\\n                    </ul>\\r\\n\\r\\n                    <ng-template clrPageButtons>\\r\\n                        <clr-wizard-button [type]=\\\"'cancel'\\\">Cancel</clr-wizard-button>\\r\\n                        <clr-wizard-button [type]=\\\"'custom-previous'\\\">Back</clr-wizard-button>\\r\\n                        <clr-wizard-button [type]=\\\"'custom-finish'\\\">Finish</clr-wizard-button>\\r\\n                    </ng-template>\\r\\n\\r\\n            </clr-wizard-page>\\r\\n        </clr-wizard>\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-8 col-sm-12\\\">\\r\\n\\r\\n        <span><label>Note: Sample Mean Concentration may not not yet be calculated if sample/target combination is\\r\\n                missing\\r\\n                valid controls or all replicates. Click 'Details' to view full business rules and replicate details\\r\\n                explanations.</label>\\r\\n            <button class=\\\"btn btn-outline btn-sm\\\" (click)=\\\"showBusinessRulesModal = true\\\">Details</button></span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <!---------- Loading spinner---------->\\r\\n    <span class=\\\"spinner spinner-lg\\\" *ngIf=\\\"sampleResultsLoading\\\">\\r\\n        Loading...\\r\\n    </span>\\r\\n    <br>\\r\\n    <span *ngIf=\\\"sampleResultsLoading\\\">Calculating and loading of results may take a while. </span>\\r\\n    <!---------- End Loading spinner---------->\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\r\\n    <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\" *ngIf=\\\"fsmcResultsLoaded && fsmcResults.length === 0\\\">\\r\\n        There are no results for your query.\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\"\\r\\n        *ngIf=\\\"fsmcResultsLoaded && sampleResultsLoaded && fsmcResults.length > 0 && sampleResults.length >0\\\">\\r\\n\\r\\n        <clr-tabs>\\r\\n\\r\\n            <!--Full results tab -->\\r\\n            <clr-tab>\\r\\n                <button clrTabLink>Full Results</button>\\r\\n                <clr-tab-content active>\\r\\n\\r\\n                    <clr-datagrid [clrDgLoading]=\\\"fsmcResultsLoading\\\">\\r\\n\\r\\n                        <clr-dg-action-bar>\\r\\n                            <div class=\\\"btn-group\\\">\\r\\n                                <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"exportToCSV('fsmc')\\\">\\r\\n                                    <clr-icon shape=\\\"export\\\" size=\\\"16\\\"></clr-icon> Export to CSV\\r\\n                                </button>\\r\\n                            </div>\\r\\n                        </clr-dg-action-bar>\\r\\n\\r\\n                        <clr-dg-column [clrDgField]=\\\"'sample'\\\">\\r\\n                            Sample ID\\r\\n                            <clr-dg-filter [clrDgFilter]=\\\"rangeFilter\\\">\\r\\n                                <range-filter #rangeFilter></range-filter>\\r\\n                            </clr-dg-filter>\\r\\n                        </clr-dg-column>\\r\\n\\r\\n                        <clr-dg-column [clrDgField]=\\\"'collaborator_sample_id'\\\">\\r\\n                            <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                Collaborator Sample ID\\r\\n                            </ng-container>\\r\\n                        </clr-dg-column>\\r\\n\\r\\n                        <clr-dg-column [clrDgField]=\\\"'collection_start_date'\\\">\\r\\n                            Collect Start Date\\r\\n                            <clr-dg-filter [clrDgFilter]=\\\"CollectionStartDateFilter\\\">\\r\\n                                <collection-start-date-filter [dateField]=\\\"'collection_start_date'\\\"\\r\\n                                    #CollectionStartDateFilter>\\r\\n                                </collection-start-date-filter>\\r\\n                            </clr-dg-filter>\\r\\n                        </clr-dg-column>\\r\\n\\r\\n                        <clr-dg-column [clrDgField]=\\\"'target'\\\">\\r\\n                            Target\\r\\n                            <clr-dg-filter [clrDgFilter]=\\\"targetFilter\\\">\\r\\n                                <target-filter #targetFilter></target-filter>\\r\\n                            </clr-dg-filter>\\r\\n                        </clr-dg-column>\\r\\n\\r\\n                        <clr-dg-column [clrDgField]=\\\"'sample_mean_concentration'\\\">\\r\\n                            <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                Sample Mean Concentration\\r\\n                            </ng-container>\\r\\n                        </clr-dg-column>\\r\\n\\r\\n                        <clr-dg-column>\\r\\n                            <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                Valid Replicates\\r\\n                            </ng-container>\\r\\n                        </clr-dg-column>\\r\\n\\r\\n                        <clr-dg-column>\\r\\n                            <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                Invalid by reason\\r\\n                            </ng-container>\\r\\n                        </clr-dg-column>\\r\\n\\r\\n                        <clr-dg-row *clrDgItems=\\\"let fsmc of fsmcResults\\\" [clrDgItem]=\\\"fsmc\\\">\\r\\n                            <clr-dg-cell>{{fsmc.sample}}</clr-dg-cell>\\r\\n                            <clr-dg-cell>{{fsmc.collaborator_sample_id}}</clr-dg-cell>\\r\\n                            <clr-dg-cell>{{fsmc.collection_start_date | date:'shortDate'}}</clr-dg-cell>\\r\\n                            <clr-dg-cell>{{fsmc.target | displayValue:'name': allTargets }}</clr-dg-cell>\\r\\n                            <!-- <clr-dg-cell>{{fsmc.final_sample_mean_concentration_sci}}</clr-dg-cell> -->\\r\\n                            <clr-dg-cell>\\r\\n                                {{fsmc.final_sample_mean_concentration_sci === \\\"\\\" ? \\\"No Result\\\" : fsmc.final_sample_mean_concentration_sci}}\\r\\n                            </clr-dg-cell>\\r\\n                            <clr-dg-cell>\\r\\n                                <a class=\\\"label label-blue clickable\\\"\\r\\n                                    *ngIf=\\\"fsmc.sample_target_replicates.positive_concentration_count > 0\\\"\\r\\n                                    (click)=\\\"openReplicateDetails('positive_concentrations', fsmc)\\\">Positive\\r\\n                                    Concentrations&nbsp;<span\\r\\n                                        class=\\\"badge\\\">{{fsmc.sample_target_replicates.positive_concentration_count}}</span></a>\\r\\n                                <br>\\r\\n                                <a class=\\\"label label-blue clickable\\\"\\r\\n                                    *ngIf=\\\"fsmc.sample_target_replicates.negative_concentration_count > 0\\\"\\r\\n                                    (click)=\\\"openReplicateDetails('negative_concentrations', fsmc)\\\">Negative\\r\\n                                    Concentrations&nbsp;<span\\r\\n                                        class=\\\"badge\\\">{{fsmc.sample_target_replicates.negative_concentration_count}}</span></a>\\r\\n                            </clr-dg-cell>\\r\\n                            <clr-dg-cell>\\r\\n                                <a class=\\\"label label-blue clickable\\\"\\r\\n                                    *ngIf=\\\"fsmc.sample_target_replicates.qpcr_results_missing_count > 0\\\"\\r\\n                                    (click)=\\\"openReplicateDetails('qpcr_results_missing', fsmc)\\\">Missing qPCR\\r\\n                                    Values&nbsp;<span\\r\\n                                        class=\\\"badge\\\">{{fsmc.sample_target_replicates.qpcr_results_missing_count}}</span></a>\\r\\n                                <br>\\r\\n                                <a class=\\\"label label-blue clickable\\\"\\r\\n                                    *ngIf=\\\"fsmc.sample_target_replicates.concentration_calc_values_missing_count > 0\\\"\\r\\n                                    (click)=\\\"openReplicateDetails('concentration_calc_values_missing', fsmc)\\\">Calculation\\r\\n                                    Values\\r\\n                                    Missing&nbsp;<span\\r\\n                                        class=\\\"badge\\\">{{fsmc.sample_target_replicates.concentration_calc_values_missing_count}}</span></a>\\r\\n                                <br>\\r\\n                                <a class=\\\"label label-blue clickable\\\"\\r\\n                                    *ngIf=\\\"fsmc.sample_target_replicates.controls_invalid_count > 0\\\"\\r\\n                                    (click)=\\\"openReplicateDetails('controls_invalids', fsmc)\\\">Invalid per\\r\\n                                    controls&nbsp;<span\\r\\n                                        class=\\\"badge\\\">{{fsmc.sample_target_replicates.controls_invalid_count}}</span></a>\\r\\n                                <br>\\r\\n                                <a class=\\\"label label-blue clickable\\\"\\r\\n                                    *ngIf=\\\"fsmc.sample_target_replicates.invalid_override_invalid_count > 0\\\"\\r\\n                                    (click)=\\\"openReplicateDetails('invalid_override_invalids', fsmc)\\\">Invalid due to manual\\r\\n                                    override&nbsp;<span\\r\\n                                        class=\\\"badge\\\">{{fsmc.sample_target_replicates.invalid_override_invalid_count}}</span></a>\\r\\n                            </clr-dg-cell>\\r\\n                        </clr-dg-row>\\r\\n\\r\\n                        <clr-dg-footer>\\r\\n                            {{fsmcPagination.firstItem + 1}} - {{fsmcPagination.lastItem + 1}} of\\r\\n                            {{fsmcPagination.totalItems}}\\r\\n                            results\\r\\n                            <clr-dg-pagination #fsmcPagination [clrDgPageSize]=\\\"10\\\"></clr-dg-pagination>\\r\\n                        </clr-dg-footer>\\r\\n                    </clr-datagrid>\\r\\n\\r\\n\\r\\n\\r\\n                </clr-tab-content>\\r\\n            </clr-tab>\\r\\n            <!-- End Full results tab -->\\r\\n\\r\\n            <!--View 2 results tab -->\\r\\n            <clr-tab>\\r\\n                <button clrTabLink (mouseout)=\\\"resizeTable()\\\">Sample Rows FSMC</button>\\r\\n                <clr-tab-content class=\\\"sample-results-tab\\\" (mouseover)=\\\"resizeTable()\\\">\\r\\n\\r\\n                    <clr-datagrid #sampleRowDataGrid [clrDgLoading]=\\\"sampleResultsLoading\\\">\\r\\n\\r\\n                        <clr-dg-action-bar>\\r\\n                            <div class=\\\"btn-group\\\">\\r\\n                                <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                    (click)=\\\"exportToCSV('sampleRows')\\\">\\r\\n                                    <clr-icon shape=\\\"export\\\" size=\\\"16\\\"></clr-icon> Export to CSV\\r\\n                                </button>\\r\\n                                <!-- <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"resizeTable()\\\">\\r\\n                                    <clr-icon shape=\\\"export\\\" size=\\\"16\\\"></clr-icon> Resize\\r\\n                                </button> -->\\r\\n                            </div>\\r\\n                        </clr-dg-action-bar>\\r\\n\\r\\n                        <clr-dg-column [clrDgField]=\\\"'id'\\\">\\r\\n                            Sample ID\\r\\n                            <clr-dg-filter [clrDgFilter]=\\\"rangeFilter\\\">\\r\\n                                <range-filter #rangeFilter></range-filter>\\r\\n                            </clr-dg-filter>\\r\\n                        </clr-dg-column>\\r\\n\\r\\n                        <clr-dg-column [clrDgField]=\\\"'collaborator_sample_id'\\\">\\r\\n                            <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                                Collaborator Sample ID\\r\\n                            </ng-container>\\r\\n                        </clr-dg-column>\\r\\n\\r\\n                        <clr-dg-column [clrDgField]=\\\"'collection_start_date'\\\">\\r\\n                            Collect Start Date\\r\\n                            <clr-dg-filter [clrDgFilter]=\\\"CollectionStartDateFilter\\\">\\r\\n                                <collection-start-date-filter [dateField]=\\\"'collection_start_date'\\\"\\r\\n                                    #CollectionStartDateFilter>\\r\\n                                </collection-start-date-filter>\\r\\n                            </clr-dg-filter>\\r\\n                        </clr-dg-column>\\r\\n\\r\\n                        <clr-dg-column *ngFor=\\\"let fsmc of sampleResults[0].final_sample_mean_concentrations\\\"\\r\\n                            [clrDgField]=\\\"fsmc.target_string\\\">{{fsmc.target_string}}</clr-dg-column>\\r\\n\\r\\n                        <clr-dg-row *ngFor=\\\"let sample of sampleResults\\\" [clrDgItem]=\\\"sample\\\">\\r\\n                            <clr-dg-cell>{{sample.id}}</clr-dg-cell>\\r\\n                            <clr-dg-cell>{{sample.collaborator_sample_id}}</clr-dg-cell>\\r\\n                            <clr-dg-cell>{{sample.collection_start_date | date:'shortDate'}}</clr-dg-cell>\\r\\n                            <clr-dg-cell class=\\\"dynamic-column\\\"\\r\\n                                *ngFor=\\\"let fsmc of sample.final_sample_mean_concentrations\\\">\\r\\n                                {{fsmc.final_sample_mean_concentration}}</clr-dg-cell>\\r\\n                        </clr-dg-row>\\r\\n\\r\\n                        <clr-dg-footer>\\r\\n                            {{sampleRowPagination.firstItem + 1}} - {{sampleRowPagination.lastItem + 1}} of\\r\\n                            {{sampleRowPagination.totalItems}}\\r\\n                            results\\r\\n                            <clr-dg-pagination #sampleRowPagination [clrDgPageSize]=\\\"10\\\"></clr-dg-pagination>\\r\\n                        </clr-dg-footer>\\r\\n                    </clr-datagrid>\\r\\n\\r\\n                </clr-tab-content>\\r\\n            </clr-tab>\\r\\n            <!-- End View 2 results tab -->\\r\\n\\r\\n            <!--View 3 results tab -->\\r\\n            <clr-tab>\\r\\n                <button clrTabLink (mouseout)=\\\"resizeTable()\\\">Target Rows FSMC</button>\\r\\n                <clr-tab-content (mouseover)=\\\"resizeTable()\\\">\\r\\n                    <clr-datagrid #targetRowDataGrid [clrDgLoading]=\\\"sampleResultsLoading\\\">\\r\\n\\r\\n                        <clr-dg-action-bar>\\r\\n                            <div class=\\\"btn-group\\\">\\r\\n                                <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                                    (click)=\\\"exportToCSV('targetRows')\\\">\\r\\n                                    <clr-icon shape=\\\"export\\\" size=\\\"16\\\"></clr-icon> Export to CSV\\r\\n                                </button>\\r\\n                            </div>\\r\\n                        </clr-dg-action-bar>\\r\\n\\r\\n                        <!-- Columns -->\\r\\n                        <clr-dg-column [clrDgField]=\\\"'titles'\\\"></clr-dg-column>\\r\\n                        <clr-dg-column *ngFor=\\\"let sample of sampleResults\\\" [clrDgField]=\\\"sample.id\\\">{{sample.id}}\\r\\n                        </clr-dg-column>\\r\\n                        <!-- End Columns -->\\r\\n\\r\\n                        <!-- Rows -->\\r\\n                        <clr-dg-row>\\r\\n                            <clr-dg-cell><strong>Collaborator Sample ID</strong></clr-dg-cell>\\r\\n                            <clr-dg-cell *ngFor=\\\"let sample of sampleResults\\\">{{sample.collaborator_sample_id}}\\r\\n                            </clr-dg-cell>\\r\\n                        </clr-dg-row>\\r\\n\\r\\n                        <clr-dg-row>\\r\\n                            <clr-dg-cell><strong>Collection Start Date</strong></clr-dg-cell>\\r\\n                            <clr-dg-cell *ngFor=\\\"let sample of sampleResults\\\">\\r\\n                                {{sample.collection_start_date | date:'shortDate'}}</clr-dg-cell>\\r\\n                        </clr-dg-row>\\r\\n\\r\\n                        <clr-dg-row\\r\\n                            *ngFor=\\\"let fsmc of sampleResults[0].final_sample_mean_concentrations, let i = index\\\">\\r\\n                            <clr-dg-cell>{{fsmc.target_string}}</clr-dg-cell>\\r\\n                            <clr-dg-cell *ngFor=\\\"let sample of sampleResults\\\">\\r\\n                                {{sample.final_sample_mean_concentrations[i].final_sample_mean_concentration}}\\r\\n                            </clr-dg-cell>\\r\\n                        </clr-dg-row>\\r\\n                        <!-- End Rows -->\\r\\n\\r\\n                        <clr-dg-footer>\\r\\n                            {{targetRowPagination.firstItem + 1}} - {{targetRowPagination.lastItem + 1}} of\\r\\n                            {{targetRowPagination.totalItems}}\\r\\n                            results\\r\\n                            <clr-dg-pagination #targetRowPagination [clrDgPageSize]=\\\" 10\\\">\\r\\n                            </clr-dg-pagination>\\r\\n                        </clr-dg-footer>\\r\\n                    </clr-datagrid>\\r\\n                </clr-tab-content>\\r\\n            </clr-tab>\\r\\n            <!-- End View 3 results tab -->\\r\\n\\r\\n        </clr-tabs>\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<!-- business rules Modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showBusinessRulesModal\\\" [clrModalSize]=\\\"'xl'\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n        <span>Business Rules & Replicate Details Explanation</span>\\r\\n    </h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-12\\\">\\r\\n                <div>\\r\\n                    <h4>Business Rules</h4>\\r\\n                    All replicate records are considered invalid by default. They are only made valid if all\\r\\n                    of the\\r\\n                    following checks pass:\\r\\n                    <p>1.All the parent controls (Peg Neg, Ext Neg, RT Neg, PCR Neg) for this replicate have\\r\\n                        been\\r\\n                        entered\\r\\n                        into the database\\r\\n                        <p>2. The replicate’s related Peg Neg’s replicates with same target as this data\\r\\n                            replicate are\\r\\n                            all\\r\\n                            valid (if no related Peg Neg, this check does not apply), if even a single one\\r\\n                            of the Peg\\r\\n                            Neg\\r\\n                            replicates is invalid then the data replicate is set to invalid.\\r\\n                            <p>3. The replicate's parent replicate batch negative controls (Ext Neg, RT Neg,\\r\\n                                PCR Neg)\\r\\n                                are all\\r\\n                                valid, if even a single one of the controls is invalid then the data\\r\\n                                replicate is set to\\r\\n                                invalid.\\r\\n                                <p>4. The replicate’s CQ value and GC/reaction are greater than or equal to\\r\\n                                    zero.\\r\\n                                    <p>Alternately, the user has the option to manually override the\\r\\n                                        system-determined\\r\\n                                        validity.\\r\\n                                        <hr>\\r\\n                                        <h4>Replicate details explanation</h4>\\r\\n                                        <h5>Complete Replicates</h5>\\r\\n                                        <span class=\\\"label label-blue\\\">Positive concentrations</span> replicates\\r\\n                                        that are fully complete with all\\r\\n                                        necessary values - concentration has been calculated and is a\\r\\n                                        positive number indicating presence of target.<br>\\r\\n                                        <span class=\\\"label label-blue\\\">Negative concentrations</span> replicates\\r\\n                                        that are fully complete with all\\r\\n                                        necessary values - concentration has been calculated and is 0,\\r\\n                                        indicating absence of target.\\r\\n\\r\\n                                        <h5>Incomplete Replicates</h5>\\r\\n                                        <span class=\\\"label label-blue\\\">Missing qPCR Values</span> replicates\\r\\n                                        with Cq value and/or GC/Reaction\\r\\n                                        missing, which most likely means the qPCR results text file\\r\\n                                        containing that replicate was not uploaded.<br>\\r\\n                                        <span class=\\\"label label-blue\\\">Calculation Values\\r\\n                                            Missing</span>replicates where concentration is not\\r\\n                                        calculated because of one of the critical concentration calculation\\r\\n                                        values are missing.<br>\\r\\n                                        <span class=\\\"label label-blue\\\">Invalid per controls</span> replicates\\r\\n                                        that are invalid because associated\\r\\n                                        controls are invalid/noncompliant.<br>\\r\\n\\r\\n                                        <button class=\\\"btn btn-info\\\"\\r\\n                                            (click)=\\\"showBusinessRulesModal = !showBusinessRulesModal\\\">Close</button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</clr-modal>\\r\\n\\r\\n<!-- replicate details Modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showReplicateDetailsModal\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n        <span>{{replicateCategoryString}}</span>\\r\\n    </h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-12\\\">\\r\\n                <div>\\r\\n                    <clr-tree-node *ngFor=\\\"let replicate of replicateDetailArray\\\">\\r\\n                        <span>AB {{replicate.analysis_batch}}, Extraction {{replicate.extraction_number}}, Replicate\\r\\n                            {{replicate.replicate_number}}\\r\\n                        </span>\\r\\n\\r\\n                        <ng-template [clrIfExpanded]=\\\"false\\\">\\r\\n                            <clr-tree-node>\\r\\n                                <div class=\\\"extraction-row\\\">\\r\\n\\r\\n                                    <div>\\r\\n                                        <table class=\\\"table table-vertical table-compact \\\">\\r\\n                                            <tbody>\\r\\n                                                <tr>\\r\\n                                                    <th><span class=\\\"text-bold\\\">Replicate Concentration</span></th>\\r\\n                                                    <td>{{replicate.replicate_concentration}}</td>\\r\\n                                                </tr>\\r\\n                                                <tr>\\r\\n                                                    <th>GC/Reaction</th>\\r\\n                                                    <td>{{replicate.gc_reaction}}</td>\\r\\n                                                </tr>\\r\\n                                                <tr>\\r\\n                                                    <th>Cq value</th>\\r\\n                                                    <td>{{replicate.cq_value}}</td>\\r\\n                                                </tr>\\r\\n                                                <tr>\\r\\n                                                    <th>Volume Extracted</th>\\r\\n                                                    <td>{{replicate.calculation_values.extraction_volume}} µL</td>\\r\\n                                                </tr>\\r\\n                                                <tr>\\r\\n                                                    <th>Volume Eluted</th>\\r\\n                                                    <td>{{replicate.calculation_values.elution_volume}} µL</td>\\r\\n                                                </tr>\\r\\n                                                <tr>\\r\\n                                                    <th>Final Concentrated Sample Volume</th>\\r\\n                                                    <td>{{replicate.calculation_values.final_concentrated_sample_volume}}\\r\\n                                                    </td>\\r\\n                                                </tr>\\r\\n                                                <tr>\\r\\n                                                    <th>Inhibition Dilution Factor</th>\\r\\n                                                    <td>{{replicate.calculation_values.inhibition_dilution_factor}}</td>\\r\\n                                                </tr>\\r\\n                                                <tr>\\r\\n                                                    <th>qPCR Reaction Volume</th>\\r\\n                                                    <td>{{replicate.calculation_values.qpcr_reaction_volume}} µL</td>\\r\\n                                                </tr>\\r\\n                                                <tr>\\r\\n                                                    <th>qPCR Template Volume</th>\\r\\n                                                    <td>{{replicate.calculation_values.qpcr_template_volume}} µL</td>\\r\\n                                                </tr>\\r\\n                                                <tr>\\r\\n                                                    <th>Sample Dilution Factor</th>\\r\\n                                                    <td>{{replicate.calculation_values.sample_dilution_factor}}</td>\\r\\n                                                </tr>\\r\\n                                                <tr>\\r\\n                                                    <th>Dissolution Volume</th>\\r\\n                                                    <td>{{replicate.calculation_values.dissolution_volume}}</td>\\r\\n                                                </tr>\\r\\n                                                <tr>\\r\\n                                                    <th>Post Dilution Volume</th>\\r\\n                                                    <td>{{replicate.calculation_values.post_dilution_volume}}</td>\\r\\n                                                </tr>\\r\\n                                                <tr>\\r\\n                                                    <th>Total Volume or Mass Sampled</th>\\r\\n                                                    <td>{{replicate.calculation_values.total_volume_or_mass_sampled}}\\r\\n                                                    </td>\\r\\n                                                </tr>\\r\\n                                                <tr>\\r\\n                                                    <th>Matrix Code</th>\\r\\n                                                    <td>{{replicate.calculation_values.matrix_code}}\\r\\n                                                    </td>\\r\\n                                                </tr>\\r\\n                                            </tbody>\\r\\n                                        </table>\\r\\n                                        <ul>\\r\\n                                            <li *ngIf=\\\"replicate.missing_calculation_values.inhibition_dilution_factor\\\">\\r\\n                                                Missing Inhibition Dilution Factor <span>(Inhibition\\r\\n                                                    {{replicate.inhibition.id}}, AB\\r\\n                                                    {{replicate.inhibition.analysis_batch}}, Extraction\\r\\n                                                    {{replicate.inhibition.extraction_number}}, Sample\\r\\n                                                    {{replicate.inhibition.sample}}\\r\\n                                                    ({{replicate.inhibition.nucleic_acid_type}})</span></li>\\r\\n                                            <li\\r\\n                                                *ngIf=\\\"replicate.missing_calculation_values.final_concentrated_sample_volume\\\">\\r\\n                                                Missing Final Concentrated Sample Volume</li>\\r\\n                                            <li *ngIf=\\\"replicate.missing_calculation_values.sample_dissolution_volume\\\">\\r\\n                                                Missing Dissolution Volume</li>\\r\\n                                            <li *ngIf=\\\"replicate.missing_calculation_values.sample_post_dilution_value\\\">\\r\\n                                                Missing Post-dilution volume\\r\\n                                            </li>\\r\\n                                        </ul>\\r\\n                                        <hr>\\r\\n                                        <ul>\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.cq_value_missing\\\">Cq value is missing\\r\\n                                            </li>\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.gc_reaction_missing\\\">GC/reaction value\\r\\n                                                is missing\\r\\n                                            </li>\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.peg_neg_invalid\\\">PEG NEG is invalid\\r\\n                                            </li>\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.peg_neg_not_extracted\\\">PEG NEG not\\r\\n                                                extracted\\r\\n                                            </li>\\r\\n\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.peg_neg_reps_invalid\\\">PEG NEG\\r\\n                                                Replicates\\r\\n                                                Invalid\\r\\n                                                <clr-tree-node><span>Invalid PEG NEG Replicates</span>\\r\\n                                                    <ng-template [clrIfExpanded]=\\\"false\\\">\\r\\n                                                        <clr-tree-node>\\r\\n                                                            <ul>\\r\\n                                                                <li\\r\\n                                                                    *ngFor=\\\"let item of replicate.invalid_reasons.peg_neg_reps_invalid_list\\\">\\r\\n                                                                    AB {{item.analysis_batch}}, Extraction\\r\\n                                                                    {{item.extraction_number}}, Replicate\\r\\n                                                                    {{item.replicate_number}}, Sample {{item.sample}},\\r\\n                                                                    {{item.target | displayValue:'name': allTargets}}\\r\\n                                                                </li>\\r\\n                                                            </ul>\\r\\n                                                        </clr-tree-node>\\r\\n                                                    </ng-template>\\r\\n                                                </clr-tree-node>\\r\\n                                            </li>\\r\\n\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.peg_neg_reps_missing\\\">PEG NEG\\r\\n                                                Replicates\\r\\n                                                Missing\\r\\n                                                <clr-tree-node><span>Missing PEG NEG Replicates</span>\\r\\n                                                    <ng-template [clrIfExpanded]=\\\"false\\\">\\r\\n                                                        <clr-tree-node>\\r\\n                                                            <ul>\\r\\n                                                                <li\\r\\n                                                                    *ngFor=\\\"let item of replicate.invalid_reasons.peg_neg_reps_missing_list\\\">\\r\\n                                                                    AB {{item.analysis_batch}}, Extraction\\r\\n                                                                    {{item.extraction_number}}, Replicate\\r\\n                                                                    {{item.replicate_number}}, Sample {{item.sample}},\\r\\n                                                                    {{item.target | displayValue:'name': allTargets}}\\r\\n                                                                </li>\\r\\n                                                            </ul>\\r\\n                                                        </clr-tree-node>\\r\\n                                                    </ng-template>\\r\\n                                                </clr-tree-node>\\r\\n                                            </li>\\r\\n\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.peg_neg_replicates_missing\\\">PEG NEG is\\r\\n                                                missing\\r\\n                                                <clr-tree-node><span>Missing PEG NEGs</span>\\r\\n                                                    <ng-template [clrIfExpanded]=\\\"false\\\">\\r\\n                                                        <clr-tree-node>\\r\\n                                                            <ul>\\r\\n                                                                <li\\r\\n                                                                    *ngFor=\\\"let item of replicate.invalid_reasons.peg_neg_replicates_missing_list\\\">\\r\\n                                                                    AB {{item.analysis_batch}}, Extraction\\r\\n                                                                    {{item.extraction_number}}, Replicate\\r\\n                                                                    {{item.replicate_number}}, Sample {{item.sample}},\\r\\n                                                                    {{item.target | displayValue:'name': allTargets}}\\r\\n                                                                </li>\\r\\n                                                            </ul>\\r\\n                                                        </clr-tree-node>\\r\\n                                                    </ng-template>\\r\\n                                                </clr-tree-node>\\r\\n                                            </li>\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.ext_neg_missing\\\">Ext Negative is\\r\\n                                                missing</li>\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.ext_neg_invalid\\\">Ext Negative\\r\\n                                                is invalid</li>\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.rt_neg_missing\\\">RT Negative is missing\\r\\n                                            </li>\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.rt_neg_invalid\\\">RT Negative is invalid\\r\\n                                            </li>\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.pcr_neg_missing\\\">PCR Negative is\\r\\n                                                missing</li>\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.pcr_neg_invalid\\\">PCR Negative is\\r\\n                                                invalid</li>\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.ext_rt_pos_rna_invalid\\\">Ext/RT Pos RNA\\r\\n                                                is\\r\\n                                                invalid</li>\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.ext_rt_pos_rna_missing\\\">Ext\\r\\n                                                Pos RNA/RT is missing</li>\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.ext_pos_dna_missing\\\">Ext\\r\\n                                                Pos DNA is missing</li>\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.ext_pos_dna_invalid\\\">Ext\\r\\n                                                Pos DNA is invalid</li>\\r\\n\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.sibling_pcr_rep_controls_missing\\\">\\r\\n                                                Controls\\r\\n                                                for sibling PCR\\r\\n                                                Replicates in Extraction are missing\\r\\n                                                <clr-tree-node><span>Missing Replicates</span>\\r\\n                                                    <ng-template [clrIfExpanded]=\\\"false\\\">\\r\\n                                                        <clr-tree-node>\\r\\n                                                            <ul>\\r\\n                                                                <li\\r\\n                                                                    *ngFor=\\\"let item of replicate.invalid_reasons.sibling_pcr_rep_controls_missing_list\\\">\\r\\n                                                                    AB {{item.analysis_batch}}, Extraction\\r\\n                                                                    {{item.extraction_number}}, Replicate\\r\\n                                                                    {{item.replicate_number}},\\r\\n                                                                    {{item.target | displayValue:'name': allTargets}}\\r\\n                                                                </li>\\r\\n                                                            </ul>\\r\\n                                                        </clr-tree-node>\\r\\n                                                    </ng-template>\\r\\n                                                </clr-tree-node>\\r\\n                                            </li>\\r\\n\\r\\n                                            <li *ngIf=\\\"replicate.invalid_reasons.sibling_pcr_rep_controls_invalid\\\">\\r\\n                                                Controls\\r\\n                                                for sibling PCR\\r\\n                                                Replicates in Extraction are invalid\\r\\n                                                <clr-tree-node><span>Invalid Replicates</span>\\r\\n                                                    <ng-template [clrIfExpanded]=\\\"false\\\">\\r\\n                                                        <clr-tree-node>\\r\\n                                                            <ul>\\r\\n                                                                <li\\r\\n                                                                    *ngFor=\\\"let item of replicate.invalid_reasons.sibling_pcr_rep_controls_invalid_list\\\">\\r\\n                                                                    AB {{item.analysis_batch}}, Extraction\\r\\n                                                                    {{item.extraction_number}}, Replicate\\r\\n                                                                    {{item.replicate_number}},\\r\\n                                                                    {{item.target | displayValue:'name': allTargets}}\\r\\n                                                                </li>\\r\\n                                                            </ul>\\r\\n                                                        </clr-tree-node>\\r\\n                                                    </ng-template>\\r\\n                                                </clr-tree-node>\\r\\n                                            </li>\\r\\n\\r\\n                                        </ul>\\r\\n\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </clr-tree-node>\\r\\n                        </ng-template>\\r\\n                    </clr-tree-node>\\r\\n\\r\\n                    <button class=\\\"btn btn-info\\\"\\r\\n                        (click)=\\\"showReplicateDetailsModal = !showReplicateDetailsModal\\\">Close</button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</clr-modal>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/results/results.component.html\n// module id = ./src/app/results/results.component.html\n// module chunks = main","module.exports = \".dilution-factor-input {\\n  width: 5em; }\\n\\n.in-wizard-datagrid {\\n  max-width: 650px; }\\n\\n.text-bold {\\n  font-weight: bold; }\\n\\n.dynamic-column {\\n  width: 10em; }\\n\\n.sample-results-tab {\\n  width: 100%; }\\n\\na {\\n  cursor: pointer; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/results/results.component.scss\n// module id = ./src/app/results/results.component.scss\n// module chunks = main","import { Component, OnInit, AfterViewInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, FormArray, Validators, PatternValidator } from \"@angular/forms/\";\r\n\r\nimport { ISample } from '../samples/sample';\r\nimport { SampleService } from '../samples/sample.service';\r\nimport { ITarget } from '../targets/target';\r\nimport { TargetService } from '../targets/target.service';\r\nimport { Wizard, WizardPage, BUTTON_GROUP_DIRECTIVES, Datagrid } from \"clarity-angular\";\r\n\r\nimport { IMatrix } from '../SHARED/matrix';\r\nimport { ISampleType } from '../SHARED/sample-type';\r\nimport { IStudy } from '../studies/study';\r\n\r\nimport { MatrixService } from '../SHARED/matrix.service';\r\nimport { StudyService } from '../studies/study.service';\r\nimport { SampleTypeService } from '../SHARED/sample-type.service';\r\nimport { PcrReplicateService } from '../pcr-replicates/pcr-replicate.service';\r\n\r\nimport { APP_SETTINGS } from '../app.settings';\r\nimport { APP_UTILITIES } from '../app.utilities';\r\n\r\nimport { FinalSampleMeanConcentrationService } from './final-sample-mean-concentration.service';\r\n// import { sample } from 'rxjs/operators';\r\n// import { sampleTime } from 'rxjs/operator/sampleTime';\r\n\r\n@Component({\r\n  selector: 'app-results',\r\n  templateUrl: './results.component.html',\r\n  styleUrls: ['./results.component.scss']\r\n})\r\nexport class ResultsComponent implements OnInit, AfterViewInit {\r\n  @ViewChild(\"resultsQueryWizard\") resultsQueryWizard: Wizard;\r\n  @ViewChild(\"sampleRowDataGrid\") sampleRowDataGrid: Datagrid;\r\n  @ViewChild(\"targetRowDataGrid\") targetRowDataGrid: Datagrid;\r\n  allSamples: ISample[] = [];\r\n  allTargets: ITarget[] = [];\r\n  sampleTypes: ISampleType[];\r\n  matrices: IMatrix[];\r\n  studies: IStudy[];\r\n  samplesLoading: boolean = false;\r\n  errorMessage: string;\r\n  samplesCount: null;\r\n  sampleQueryComplete: boolean = false;\r\n\r\n  fsmcResultsLoading: boolean = false;\r\n  fsmcResultsLoaded: boolean = false;\r\n\r\n  sampleResultsLoading: boolean = false;\r\n  sampleResultsLoaded: boolean = false;\r\n\r\n  resultsQueryWizardActive: boolean = false;\r\n\r\n  submitLoading: boolean = false;\r\n\r\n  sampleSelectErrorFlag: boolean = false;\r\n  targetSelectErrorFlag: boolean = false;\r\n\r\n  selected = [];\r\n  fsmcResults = [];\r\n  //sampleResults:ISample[] = [];\r\n\r\n  sampleResults = [];\r\n\r\n  nucleicAcidTypes = [];\r\n\r\n  sampleQueryForm: FormGroup;\r\n\r\n  sampleQuerySizeErrorFlag = false;\r\n\r\n  showReplicateDetailsModal: boolean = false;\r\n  showBusinessRulesModal: boolean = false;\r\n\r\n  replicateDetailArray = [];\r\n  missingInhibitions = [];\r\n\r\n  replicateCategoryString;\r\n\r\n  resultsQuery = {\r\n    samples: [],\r\n    targets: []\r\n  }\r\n\r\n  fsmcColumns = [\r\n    { fieldName: 'sample', colName: \"Sample\" },\r\n    { fieldName: 'collaborator_sample_id', colName: \"Collaborator Sample ID\" },\r\n    { fieldName: 'collection_start_date', colName: \"Collection Start Date\" },\r\n    { fieldName: 'target_string', colName: \"Target\" },\r\n    { fieldName: 'final_sample_mean_concentration', colName: \"Sample Mean Concentration\" },\r\n    { fieldName: 'final_sample_mean_concentration_sci', colName: \"Sample Mean Concentration (Sci)\" }\r\n  ]\r\n\r\n  sampleRowColumns = [\r\n    { fieldName: 'id', colName: \"Sample\" },\r\n    { fieldName: 'collaborator_sample_id', colName: \"Collaborator Sample ID\" },\r\n    { fieldName: 'collection_start_date', colName: \"Collection Start Date\" }\r\n    // array.push the target columns to this array\r\n  ]\r\n\r\n  targetRowColumns = [\r\n    { fieldName: 'target_string', colName: \"Target\" },\r\n    // array.push the sample columns to this array\r\n  ]\r\n\r\n  buildSampleQueryForm() {\r\n    this.sampleQueryForm = this.formBuilder.group({\r\n      study: null,\r\n      from_id: null,\r\n      to_id: null,\r\n      from_collection_start_date: null,\r\n      to_collection_start_date: null,\r\n      collaborator_sample_id: null,\r\n      sample_type: null,\r\n      matrix: null,\r\n      record_type: null,\r\n      peg_neg: null\r\n    })\r\n  }\r\n\r\n  constructor(\r\n    private _sampleService: SampleService,\r\n    private _targetService: TargetService,\r\n    private _finalSampleMeanConcentrationService: FinalSampleMeanConcentrationService,\r\n    private _studyService: StudyService,\r\n    private _sampleTypeService: SampleTypeService,\r\n    private _matrixService: MatrixService,\r\n    private _pcrReplicateService: PcrReplicateService,\r\n    private formBuilder: FormBuilder\r\n  ) {\r\n    this.buildSampleQueryForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    this.nucleicAcidTypes = APP_SETTINGS.NUCLEIC_ACID_TYPES;\r\n\r\n    // on init, call getTargets function of the TargetService, set results to allTargets var\r\n    this._targetService.getTargets()\r\n      .subscribe(\r\n        (targets) => {\r\n          this.allTargets = targets;\r\n          this.allTargets.sort(function (a, b) {\r\n            if (a.name < b.name) { return -1 };\r\n            if (a.name > b.name) { return 1 };\r\n            return 0;\r\n          });\r\n        },\r\n        error => { this.errorMessage = <any>error });\r\n\r\n\r\n    // on init, call getSampleTypes function of the SampleTypeService, set results to the sampleTypes var\r\n    this._sampleTypeService.getSampleTypes()\r\n      .subscribe(sampleTypes => this.sampleTypes = sampleTypes,\r\n        error => this.errorMessage = error);\r\n\r\n    // on init, call getMatrices function of the MatrixService, set results to the matrices var\r\n    this._matrixService.getMatrices()\r\n      .subscribe(matrices => this.matrices = matrices,\r\n        error => this.errorMessage = error);\r\n\r\n    // on init, call getStudies function of the StudyService, set results to the studies var\r\n    this._studyService.getStudies()\r\n      .subscribe(\r\n        studies => {\r\n          this.studies = studies\r\n          this.studies.sort(function (a, b) {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n          });\r\n        },\r\n        error => this.errorMessage = error);\r\n\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n\r\n\r\n\r\n  }\r\n\r\n  deselectAll() {\r\n    this.selected = [];\r\n  }\r\n\r\n  selectAll() {\r\n    this.selected = this.allSamples;\r\n  }\r\n\r\n  openResultsQueryWizard() {\r\n    this.resultsQuery.samples = [];\r\n    this.resultsQuery.targets = [];\r\n    this.resultsQueryWizardActive = !this.resultsQueryWizardActive\r\n  }\r\n\r\n  exportToCSV(tableType) {\r\n    const filename = 'LIDE_Results_Report' + APP_UTILITIES.TODAY + '.csv';\r\n\r\n    switch (tableType) {\r\n      case 'fsmc':\r\n        APP_UTILITIES.generateCSV({ filename: filename, data: this.fsmcResults, headers: this.fsmcColumns });\r\n        break;\r\n      case 'sampleRows':\r\n\r\n        // add the target name rows to the sampleRowColumns array using one of the FSMC arrays\r\n        for (let fsmc of this.sampleResults[0].final_sample_mean_concentrations) {\r\n          this.sampleRowColumns.push({ fieldName: fsmc.target_string, colName: fsmc.target_string })\r\n        }\r\n        // flatten fsmc values into the sample record for export purposes\r\n        for (let sample of this.sampleResults) {\r\n          for (let fsmc of sample.final_sample_mean_concentrations) {\r\n            sample[fsmc.target_string] = fsmc.final_sample_mean_concentration\r\n          }\r\n        }\r\n        APP_UTILITIES.generateCSV({ filename: filename, data: this.sampleResults, headers: this.sampleRowColumns });\r\n        break;\r\n      case 'targetRows':\r\n\r\n        this.targetRowColumns = [\r\n          { fieldName: 'target_string', colName: \"\" }]\r\n\r\n        for (let sample of this.sampleResults) {\r\n          this.targetRowColumns.push({ fieldName: sample.id.toString(), colName: sample.id.toString() })\r\n        }\r\n        // tslint:disable-next-line:max-line-length\r\n        let targetRowArray = [{ 'target': 'collaborator_sample_id', 'target_string': 'Collaborator Sample ID' }, { 'target': 'collection_start_date', 'target_string': 'Collection Start Date' }];\r\n        for (let fsmc of this.sampleResults[0].final_sample_mean_concentrations) {\r\n          // initiate the targetRowArray\r\n          targetRowArray.push({ 'target': fsmc.target, 'target_string': fsmc.target_string })\r\n        }\r\n\r\n        for (let target of targetRowArray) {\r\n          for (let sample of this.sampleResults) {\r\n\r\n            let sampleID = sample.id.toString();\r\n            if (target.target === 'collaborator_sample_id') {\r\n              target[sampleID] = sample.collaborator_sample_id;\r\n            }\r\n            if (target.target === 'collection_start_date') {\r\n              target[sampleID] = sample.collection_start_date;\r\n            }\r\n\r\n            for (let fsmc of sample.final_sample_mean_concentrations) {\r\n              if (fsmc.target === target.target) {\r\n                target[sampleID] = fsmc.final_sample_mean_concentration;\r\n              }\r\n            }\r\n          }\r\n          delete target.target;\r\n        }\r\n        console.log(targetRowArray);\r\n        APP_UTILITIES.generateCSV({ filename: filename, data: targetRowArray, headers: this.targetRowColumns });\r\n        break;\r\n      default:\r\n        this.replicateCategoryString = 'Replicates'\r\n    }\r\n\r\n\r\n  }\r\n\r\n  resetFlags() {\r\n    this.sampleQuerySizeErrorFlag = false;\r\n    this.sampleQueryComplete = false;\r\n    this.errorMessage = '';\r\n  }\r\n\r\n  resizeTable() {\r\n    this.sampleRowDataGrid.resize();\r\n    this.targetRowDataGrid.resize();\r\n  }\r\n\r\n  openReplicateDetails(category, fsmc) {\r\n    switch (category) {\r\n      case 'positive_concentrations':\r\n        this.replicateCategoryString = 'Replicates with Positive Concentrations'\r\n        break;\r\n      case 'negative_concentrations':\r\n        this.replicateCategoryString = 'Replicates with Negative Concentrations'\r\n        break;\r\n      case 'qpcr_results_missing':\r\n        this.replicateCategoryString = 'Missing qPCR Values'\r\n        break;\r\n      case 'concentration_calc_values_missing':\r\n        this.replicateCategoryString = 'Concentration Calculation Values Missing'\r\n        break;\r\n      case 'controls_invalids':\r\n        this.replicateCategoryString = 'Made invalid by non-compliant controls'\r\n        break;\r\n      case 'invalid_override_invalids':\r\n        this.replicateCategoryString = 'Made invalid by manual override'\r\n        break;\r\n      default:\r\n        this.replicateCategoryString = 'Replicates'\r\n    }\r\n\r\n    this.replicateDetailArray = [];\r\n    let replicateIDArray = [];\r\n\r\n    for (let rep of fsmc.sample_target_replicates[category]) {\r\n      replicateIDArray.push(rep.id);\r\n    }\r\n\r\n    this._pcrReplicateService.getPCRReplicates(replicateIDArray)\r\n      .subscribe(\r\n        (replicates) => {\r\n          this.replicateDetailArray = replicates;\r\n          // attach the AB and Extraction info to the complete PCR replicate record for display purposes\r\n          for (let replicate of this.replicateDetailArray) {\r\n            for (let rep of fsmc.sample_target_replicates[category]) {\r\n              if (rep.id === replicate.id) {\r\n                replicate.analysis_batch = rep.analysis_batch;\r\n                replicate.extraction_number = rep.extraction_number;\r\n                replicate.replicate_number = rep.replicate_number;\r\n              }\r\n            }\r\n          }\r\n          this.showReplicateDetailsModal = true;\r\n        },\r\n        error => {\r\n          this.errorMessage = error;\r\n          this.submitLoading = false;\r\n        }\r\n      );\r\n\r\n  }\r\n\r\n  public doCustomClick(buttonType: string): void {\r\n\r\n    this.sampleSelectErrorFlag = false;\r\n    this.targetSelectErrorFlag = false;\r\n    if (\"custom-next-sampleSelect\" === buttonType) {\r\n      if (this.selected.length < 1) {\r\n        this.sampleSelectErrorFlag = true;\r\n      } else {\r\n        this.sampleSelectErrorFlag = false;\r\n\r\n        for (let sample of this.selected) {\r\n          this.resultsQuery.samples.push(sample.id);\r\n        }\r\n        this.selected = [];\r\n        this.resultsQueryWizard.next();\r\n      }\r\n    }\r\n\r\n\r\n    if (\"custom-next-targetSelect\" === buttonType) {\r\n      if (this.selected.length < 1) {\r\n        this.targetSelectErrorFlag = true;\r\n      } else {\r\n        this.targetSelectErrorFlag = false;\r\n\r\n        for (let target of this.selected) {\r\n          this.resultsQuery.targets.push(target.id);\r\n        }\r\n        this.resultsQueryWizard.next();\r\n      }\r\n    }\r\n\r\n\r\n    if (\"custom-previous\" === buttonType) {\r\n      this.selected = [];\r\n      this.resultsQueryWizard.previous();\r\n    }\r\n\r\n    if (\"custom-cancel\" === buttonType) {\r\n      this.resultsQueryWizard.cancel();\r\n      this.selected = [];\r\n      this.resultsQuery.samples = [];\r\n      this.resultsQuery.targets = [];\r\n      this.resultsQueryWizard.reset();\r\n    }\r\n\r\n    if (\"custom-finish\" === buttonType) {\r\n\r\n      this.fsmcResultsLoaded = false;\r\n      this.fsmcResultsLoading = true;\r\n      this.sampleResultsLoaded = false;\r\n      this.sampleResultsLoading = true;\r\n\r\n      this.resultsQueryWizard.cancel();\r\n\r\n      this._finalSampleMeanConcentrationService.queryFinalSampleMeanConcentrations(this.resultsQuery)\r\n        .subscribe(\r\n          (fsmcResults) => {\r\n            this.fsmcResults = fsmcResults;\r\n            this.fsmcResultsLoaded = true;\r\n            this.fsmcResultsLoading = false;\r\n\r\n            // sample-based FSMC query\r\n            this._sampleService.queryFinalSampleMeanConcentrations(this.resultsQuery)\r\n              .subscribe(\r\n                (sampleResults) => {\r\n                  this.sampleResults = sampleResults;\r\n                  for (let samp of this.sampleResults) {\r\n                    samp.final_sample_mean_concentrations.sort(function (a, b) {\r\n                      if (a.target_string < b.target_string) { return -1; }\r\n                      if (a.target_string > b.target_string) { return 1; }\r\n                      return 0;\r\n                    });\r\n                  }\r\n                  this.sampleResultsLoaded = true;\r\n                  this.sampleResultsLoading = false;\r\n                },\r\n                error => {\r\n                  this.errorMessage = <any>error\r\n                  this.sampleResultsLoading = false;\r\n                }\r\n              );\r\n\r\n\r\n            this.selected = [];\r\n            this.resultsQuery.samples = [];\r\n            this.resultsQuery.targets = [];\r\n            this.resultsQueryWizard.reset();\r\n\r\n\r\n          },\r\n          error => {\r\n            this.errorMessage = <any>error\r\n            this.fsmcResultsLoading = false;\r\n          }\r\n        );\r\n\r\n\r\n    }\r\n  }\r\n\r\n  onSubmitSampleQuery(formValue) {\r\n\r\n    this.resetFlags();\r\n\r\n    this.submitLoading = true;\r\n\r\n    // set functional limit for amount of samples to display in the table at once\r\n    const countLimit = 2000;\r\n\r\n    this._sampleService.querySamplesCount(formValue)\r\n      .subscribe(\r\n        (count) => {\r\n\r\n          // if count exceeds limit, show error message\r\n          if (count.count >= countLimit) {\r\n            this.sampleQuerySizeErrorFlag = true;\r\n          } else if (count.count < countLimit) {\r\n\r\n            this.samplesLoading = true;\r\n\r\n            formValue.slim = null;\r\n\r\n            // if sample query count does not exceed functional limit, query for actual results, and set results to the allSamples var\r\n            this._sampleService.querySamples(formValue)\r\n              .subscribe(\r\n                (samples) => {\r\n                  this.samplesCount = count.count;\r\n                  this.sampleQueryComplete = true;\r\n                  this.allSamples = samples\r\n                  this.samplesLoading = false;\r\n                  this.submitLoading = false;\r\n                },\r\n                error => {\r\n                  this.errorMessage = error;\r\n                  this.submitLoading = false;\r\n                  this.samplesLoading = false;\r\n                }\r\n              );\r\n          }\r\n        },\r\n        error => {\r\n          this.errorMessage = error;\r\n          this.submitLoading = false;\r\n        }\r\n      );\r\n\r\n  }\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/results/results.component.ts","module.exports = \"<button class=\\\"btn btn-primary\\\" (click)=\\\"printLabelPDF()\\\"><clr-icon shape=\\\"printer\\\"></clr-icon> Download Labels PDF</button>\\r\\n<div #sampleLabel id=\\\"sampleLabel\\\">\\r\\n\\r\\n  <div>\\r\\n    <table #labelTable1 class=\\\"table\\\" *ngIf=\\\"labelAliquots.length > 0\\\">      \\r\\n      <!-- R 1.1  -->  <!-- 1   18  35  52  69 -->\\r\\n      <tr> \\r\\n        <td>{{labelAliquots[0]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[0]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[17]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[17]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[34]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[34]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[51]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[51]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[68]?.aliquot_string|| \\\"\\\"}}<br/>{{labelAliquots[68]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n      </tr>\\r\\n      <!-- R 2.1  -->  <!-- 2   19  36  53  70 -->\\r\\n      <tr> \\r\\n        <td>{{labelAliquots[1]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[1]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[18]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[18]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[35]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[35]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[52]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[52]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[69]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[69]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n      </tr>\\r\\n      <!-- R 3.1  -->  <!-- 3   20  37  54  71 -->\\r\\n      <tr> \\r\\n        <td>{{labelAliquots[2]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[2]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[19]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[19]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[36]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[36]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[53]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[53]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[70]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[70]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n      </tr>\\r\\n      <!-- R 4.1  -->  <!-- 4   21  38  55  72 -->\\r\\n      <tr> \\r\\n        <td>{{labelAliquots[3]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[3]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[20]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[20]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[37]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[37]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[54]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[54]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[71]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[71]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n      </tr>\\r\\n      <!-- R 5.1  -->  <!-- 5   22  39  56  73 -->\\r\\n      <tr> \\r\\n        <td>{{labelAliquots[4]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[4]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[21]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[21]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[38]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[38]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[55]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[55]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[72]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[72]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n      </tr>\\r\\n      <!-- R 6.1  -->  <!-- 6   23  40  57  74 -->\\r\\n      <tr> \\r\\n        <td>{{labelAliquots[5]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[5]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[22]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[22]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[39]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[39]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[56]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[56]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[73]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[73]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n      </tr>\\r\\n      <!-- R 7.1  -->  <!-- 7   24  41  58  75 -->\\r\\n      <tr> \\r\\n        <td>{{labelAliquots[6]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[6]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[23]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[23]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[40]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[40]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[57]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[57]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[74]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[74]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n      </tr>\\r\\n      <!-- R 8.1  -->  <!-- 8   25  42  59  76 -->\\r\\n      <tr> \\r\\n        <td>{{labelAliquots[7]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[7]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[24]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[24]?.collaborator_sample_id|| \\\"\\\"}}</td>\\r\\n        <td>{{labelAliquots[41]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[41]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[58]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[58]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[75]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[75]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n      </tr>\\r\\n      <!-- R 9.1  -->  <!-- 9   26  43  60  77 -->\\r\\n      <tr> \\r\\n        <td>{{labelAliquots[8]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[8]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[25]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[25]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[42]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[42]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[59]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[59]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[76]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[76]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n      </tr>\\r\\n      <!-- R 10.1 -->  <!-- 10  27  44  61  78 -->\\r\\n      <tr> \\r\\n        <td>{{labelAliquots[9]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[9]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[26]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[26]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[43]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[43]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[60]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[60]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[77]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[77]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n      </tr>\\r\\n      <!-- R 11.1 -->  <!-- 11  28  45  62  79 -->\\r\\n      <tr> \\r\\n        <td>{{labelAliquots[10]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[10]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[27]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[27]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[44]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[44]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[61]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[61]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[78]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[78]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n      </tr>\\r\\n      <!-- R 12.1 -->  <!-- 12  29  46  63  80 -->\\r\\n      <tr> \\r\\n        <td>{{labelAliquots[11]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[11]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[28]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[28]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[45]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[45]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[62]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[62]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[79]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[79]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n      </tr>\\r\\n      <!-- R 13.1 -->  <!-- 13  30  47  64  81 -->\\r\\n      <tr> \\r\\n        <td>{{labelAliquots[12]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[12]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[29]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[29]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[46]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[46]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[63]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[63]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[80]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[80]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n      </tr>\\r\\n      <!-- R 14.1 -->  <!-- 14  31  48  65  82 -->\\r\\n      <tr> \\r\\n        <td>{{labelAliquots[13]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[13]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[30]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[30]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[47]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[47]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[64]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[64]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[81]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[81]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n      </tr>\\r\\n      <!-- R 15.1 -->  <!-- 15  32  49  66  83 -->\\r\\n      <tr> \\r\\n        <td>{{labelAliquots[14]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[14]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[31]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[31]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[48]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[48]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[65]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[65]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[82]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[82]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n      </tr>\\r\\n      <!-- R 16.1 -->  <!-- 16  33  50  67  84 -->\\r\\n      <tr> \\r\\n        <td>{{labelAliquots[15]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[15]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[32]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[32]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[49]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[49]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[66]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[66]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[83]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[83]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n      </tr>\\r\\n      <!-- R 17.1 -->  <!-- 17  34  51  68  85 -->\\r\\n      <tr> \\r\\n        <td>{{labelAliquots[16]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[16]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[33]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[33]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[50]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[50]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[67]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[67]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        <td>{{labelAliquots[84]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[84]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n      </tr>\\r\\n    </table>\\r\\n    <!-- end first page -->\\r\\n    <!-- start if second page -->\\r\\n    <div *ngIf=\\\"labelAliquots.length > 85\\\">\\r\\n      <br/>\\r\\n      <div style=\\\"text-align:center;\\\"> ------------------ Next Page ------------------ </div>\\r\\n      <table #labelTable2 class=\\\"table\\\">\\r\\n        <!-- would stop here , unless they are skipping. then length would be more than 85. -->\\r\\n        <!-- R 1.2 -->  <!-- 86\\t103\\t120\\t137\\t154 -->\\r\\n        <tr> \\r\\n          <td>{{labelAliquots[85]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[85]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[102]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[102]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[119]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[119]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[136]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[136]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[153]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[153]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        </tr>\\r\\n        <!-- R 2.2 --> <!-- 87\\t104\\t121\\t138\\t155 -->\\r\\n        <tr> \\r\\n          <td>{{labelAliquots[86]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[86]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[103]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[103]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[120]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[120]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[137]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[137]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[154]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[154]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        </tr>\\r\\n        <!-- R 3.2 -->  <!-- 88\\t105\\t122\\t139\\t156 -->\\r\\n        <tr> \\r\\n          <td>{{labelAliquots[87]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[87]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[104]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[104]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[121]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[121]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[138]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[138]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[155]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[155]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        </tr>\\r\\n        <!-- R 4.2 -->  <!-- 89\\t106\\t123\\t140\\t157 -->\\r\\n        <tr> \\r\\n          <td>{{labelAliquots[88]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[88]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[105]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[105]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[122]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[122]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[139]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[139]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[156]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[156]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        </tr>\\r\\n        <!-- R 5.2 -->  <!-- 90\\t107\\t124\\t141\\t158 -->\\r\\n        <tr> \\r\\n          <td>{{labelAliquots[89]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[89]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[106]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[106]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[123]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[123]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[140]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[140]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[157]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[157]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        </tr>\\r\\n        <!-- R 6.2 -->  <!-- 91\\t108\\t125\\t142\\t159 -->\\r\\n        <tr> \\r\\n          <td>{{labelAliquots[90]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[90]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[107]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[107]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[124]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[124]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[141]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[141]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[158]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[158]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        </tr>\\r\\n        <!-- R 7.2 -->  <!-- 92\\t109\\t126\\t143\\t160 -->\\r\\n        <tr> \\r\\n          <td>{{labelAliquots[91]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[91]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[108]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[108]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[125]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[125]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[142]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[142]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[159]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[159]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        </tr>\\r\\n        <!-- R 8.2 -->  <!-- 93\\t110\\t127\\t144\\t161 -->\\r\\n        <tr> \\r\\n          <td>{{labelAliquots[92]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[92]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[109]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[109]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[126]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[126]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[143]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[143]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[160]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[160]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        </tr>\\r\\n        <!-- R 9.2 -->  <!-- 94\\t111\\t128\\t145\\t162 -->\\r\\n        <tr> \\r\\n          <td>{{labelAliquots[93]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[93]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[110]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[110]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[127]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[127]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[144]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[144]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[161]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[161]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        </tr>\\r\\n        <!-- R 10.2 -->  <!-- 95\\t112\\t129\\t146\\t163 -->\\r\\n        <tr> \\r\\n          <td>{{labelAliquots[94]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[94]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[111]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[111]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[128]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[128]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[145]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[145]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[162]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[162]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        </tr>\\r\\n        <!-- R 11.2 -->  <!-- 96\\t113\\t130\\t147\\t164 -->\\r\\n        <tr> \\r\\n          <td>{{labelAliquots[95]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[95]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[112]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[112]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[129]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[129]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[146]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[146]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[163]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[163]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        </tr>\\r\\n        <!-- R 12.2 -->  <!-- 97\\t114\\t131\\t148\\t165 -->\\r\\n        <tr> \\r\\n          <td>{{labelAliquots[96]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[96]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[113]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[113]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[130]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[130]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[147]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[147]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[164]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[164]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        </tr>\\r\\n        <!-- R 13.2 -->  <!-- 98\\t115\\t132\\t149\\t166 -->\\r\\n        <tr> \\r\\n          <td>{{labelAliquots[97]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[97]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[114]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[114]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[131]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[131]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[148]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[148]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[165]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[165]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        </tr>\\r\\n        <!-- R 14.2 -->  <!-- 99\\t116\\t133\\t150\\t167 -->\\r\\n        <tr> \\r\\n          <td>{{labelAliquots[98]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[98]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[115]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[115]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[132]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[132]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[149]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[149]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[166]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[166]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        </tr>\\r\\n        <!-- R 15.2 -->  <!-- 100\\t117\\t134\\t151\\t168 -->\\r\\n        <tr> \\r\\n          <td>{{labelAliquots[99]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[99]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[116]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[116]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[133]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[133]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[150]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[150]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[167]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[167]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        </tr>\\r\\n        <!-- R 16.2 -->  <!-- 101\\t118\\t135\\t152\\t169 -->\\r\\n        <tr> \\r\\n          <td>{{labelAliquots[100]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[100]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[117]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[117]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[134]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[134]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[151]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[151]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[168]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[168]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        </tr>\\r\\n        <!-- R 17.2 -->  <!-- 102\\t119\\t136\\t153\\t170 -->\\r\\n        <tr> \\r\\n          <td>{{labelAliquots[101]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[101]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[118]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[118]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[135]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[135]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[152]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[152]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          <td>{{labelAliquots[169]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[169]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n        </tr>          \\r\\n      </table>\\r\\n    </div> \\r\\n    <!-- end if second page -->\\r\\n    <!-- start if third page -->\\r\\n    <div *ngIf=\\\"labelAliquots.length > 170\\\">\\r\\n        <br/>\\r\\n        <div style=\\\"text-align:center;\\\"> ------------------ Next Page ------------------ </div>\\r\\n        <table #labelTable3 class=\\\"table\\\">          \\r\\n          <!-- R 1.3 -->  <!-- 171\\t188\\t205\\t222\\t239 -->\\r\\n          <tr> \\r\\n            <td>{{labelAliquots[170]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[170]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[187]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[187]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[204]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[204]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[221]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[221]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[238]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[238]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          </tr>\\r\\n          <!-- R 2.3 --> <!-- 172\\t189\\t206\\t223\\t240 -->\\r\\n          <tr> \\r\\n            <td>{{labelAliquots[171]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[171]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[188]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[188]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[205]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[205]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[222]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[222]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[239]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[239]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          </tr>\\r\\n          <!-- R 3.3 -->  <!-- 173\\t190\\t207\\t224\\t241 -->\\r\\n          <tr> \\r\\n            <td>{{labelAliquots[172]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[172]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[189]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[189]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[206]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[206]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[223]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[223]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[240]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[240]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          </tr> \\r\\n          <!-- R 4.3 -->  <!-- 174\\t191\\t208\\t225\\t242 -->\\r\\n          <tr> \\r\\n            <td>{{labelAliquots[173]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[173]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[190]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[190]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[207]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[207]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[224]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[224]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[241]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[241]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          </tr>\\r\\n          <!-- R 5.3 -->  <!-- 175\\t192\\t209\\t226\\t243 -->\\r\\n          <tr> \\r\\n            <td>{{labelAliquots[174]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[174]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[191]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[191]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[208]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[208]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[225]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[225]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[242]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[242]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          </tr>\\r\\n          <!-- R 6.3 -->  <!-- 176\\t193\\t210\\t227\\t244 -->\\r\\n          <tr> \\r\\n            <td>{{labelAliquots[175]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[175]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[192]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[192]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[209]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[209]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[226]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[226]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[243]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[243]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          </tr>\\r\\n          <!-- R 7.3 -->  <!-- 177\\t194\\t211\\t228\\t245 -->\\r\\n          <tr> \\r\\n            <td>{{labelAliquots[176]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[176]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[193]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[193]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[210]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[210]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[227]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[227]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[244]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[244]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          </tr>   \\r\\n          <!-- R 8.3 -->  <!-- 178\\t195\\t212\\t229\\t246 -->\\r\\n          <tr> \\r\\n            <td>{{labelAliquots[177]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[177]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[194]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[194]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[211]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[211]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[228]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[228]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[245]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[245]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          </tr>\\r\\n          <!-- R 9.3 -->  <!-- 179\\t196\\t213\\t230\\t247 -->\\r\\n          <tr> \\r\\n            <td>{{labelAliquots[178]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[178]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[195]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[195]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[212]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[212]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[229]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[229]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[246]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[246]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          </tr>\\r\\n          <!-- R 10.3 -->  <!-- 180\\t197\\t214\\t231\\t248 -->\\r\\n          <tr> \\r\\n            <td>{{labelAliquots[179]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[179]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[196]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[196]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[213]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[213]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[230]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[230]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[247]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[247]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          </tr>\\r\\n          <!-- R 11.3 -->  <!-- 181\\t198\\t215\\t232\\t249 -->\\r\\n          <tr> \\r\\n            <td>{{labelAliquots[180]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[180]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[197]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[197]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[214]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[214]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[231]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[231]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[248]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[248]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          </tr> \\r\\n          <!-- R 12.3 -->  <!-- 182\\t199\\t216\\t233\\t250 -->\\r\\n          <tr> \\r\\n            <td>{{labelAliquots[181]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[181]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[198]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[198]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[215]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[215]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[232]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[232]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[249]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[249]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          </tr>\\r\\n          <!-- R 13.3 -->  <!-- 183\\t200\\t217\\t234\\t251 -->\\r\\n          <tr> \\r\\n            <td>{{labelAliquots[182]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[182]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[199]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[199]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[216]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[216]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[233]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[233]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[250]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[250]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          </tr>\\r\\n          <!-- R 14.3 -->  <!-- 184\\t201\\t218\\t235\\t252 -->\\r\\n          <tr> \\r\\n            <td>{{labelAliquots[183]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[183]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[200]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[200]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[217]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[217]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[234]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[234]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[251]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[251]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          </tr>\\r\\n          <!-- R 15.3 -->  <!-- 185\\t202\\t219\\t236\\t253 -->\\r\\n          <tr> \\r\\n            <td>{{labelAliquots[184]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[184]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[201]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[201]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[218]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[218]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[235]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[235]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[252]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[252]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          </tr>\\r\\n          <!-- R 16.3 -->  <!-- 186\\t203\\t220\\t237\\t254 -->\\r\\n          <tr> \\r\\n            <td>{{labelAliquots[185]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[185]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[202]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[202]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[219]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[219]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[236]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[236]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[253]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[253]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          </tr>\\r\\n          <!-- R 17.3 -->  <!-- 187\\t204\\t221\\t238\\t255 -->\\r\\n          <tr> \\r\\n            <td>{{labelAliquots[186]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[186]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[203]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[203]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[220]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[220]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[237]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[237]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n            <td>{{labelAliquots[254]?.aliquot_string || \\\" \\\"}}<br/>{{labelAliquots[254]?.collaborator_sample_id || \\\" \\\"}}</td>\\r\\n          </tr>          \\r\\n        </table>\\r\\n      </div> <!-- end if second page -->\\r\\n  </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/samples/sample-label/sample-label.component.html\n// module id = ./src/app/samples/sample-label/sample-label.component.html\n// module chunks = main","module.exports = \"table tr td {\\n  border: 1px solid #ccc;\\n  border-spacing: 0;\\n  height: 48.6458px;\\n  width: 20%; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/samples/sample-label/sample-label.component.scss\n// module id = ./src/app/samples/sample-label/sample-label.component.scss\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\nimport { SampleService } from '../../samples/sample.service';\r\n\r\ndeclare let jsPDF: any;\r\n\r\n// function for aligning the text in each pdf.textEx( add text with placement settings )\r\nvar splitRegex = /\\r\\n|\\r|\\n/g;\r\njsPDF.API.textEx = function (text: any, x: number, y: number, hAlign?: string, vAlign?: string) {\r\n\tvar fontSize = this.internal.getFontSize()\r\n\t\t/ this.internal.scaleFactor;\r\n\r\n\t// As defined in jsPDF source code\r\n\tvar lineHeightProportion = 1.15;\r\n\r\n\tvar splittedText: string[];\r\n\tvar lineCount: number = 1;\r\n\tif (vAlign === 'middle' || vAlign === 'bottom'\r\n\t\t|| hAlign === 'center' || hAlign === 'right') {\r\n\r\n\t\tsplittedText = typeof text === 'string'\r\n\t\t\t? text.split(splitRegex)\r\n\t\t\t: text;\r\n\r\n\t\tlineCount = splittedText.length || 1;\r\n\t}\r\n\r\n\t// Align the top\r\n\ty += fontSize * (2 - lineHeightProportion);\r\n\r\n\tif (vAlign === 'middle') y -= (lineCount / 2) * fontSize;\r\n\telse if (vAlign === 'bottom') y -= lineCount * fontSize;\r\n\r\n\r\n\tif (hAlign === 'center'\r\n\t\t|| hAlign === 'right') {\r\n\r\n\t\tvar alignSize = fontSize;\r\n\t\tif (hAlign === 'center') alignSize *= 0.5;\r\n\r\n\t\tif (lineCount > 1) {\r\n\t\t\tfor (var iLine = 0; iLine < splittedText.length; iLine++) {\r\n\t\t\t\tthis.text(splittedText[iLine],\r\n\t\t\t\t\tx - this.getStringUnitWidth(splittedText[iLine]) * alignSize,\r\n\t\t\t\t\ty);\r\n\t\t\t\ty += fontSize;\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tx -= this.getStringUnitWidth(text) * alignSize;\r\n\t}\r\n\r\n\tthis.text(text, x, y);\r\n\treturn this;\r\n};\r\n@Component({\r\n\tselector: 'sample-label',\r\n\ttemplateUrl: './sample-label.component.html',\r\n\tstyleUrls: ['./sample-label.component.scss']\r\n})\r\nexport class SampleLabelComponent implements OnInit {\r\n\tpublic labelAliquots: Array<any>;\r\n\tprivate labelSkips: number;\r\n\tprivate xyArray_inches: Array<object>;\r\n\r\n\tconstructor(private _sampleServices: SampleService) {\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.labelAliquots = [];\r\n\t\tthis.labelSkips = 0;\r\n\t\tthis.xyArray_inches = this.loadArray();\r\n\t\t// when they click 'createLabelPDF' from Samples, the label parts ([0] is spacesToSkip, [1] is this.aliquotLabelTextArray)\r\n\t\t// are stored in the sample.service.ts and subscribed to from here \r\n\t\tthis._sampleServices.LabelParts.subscribe(lp => {\r\n\t\t\tthis.labelAliquots = [];\r\n\t\t\tthis.labelSkips = lp[0];\r\n\r\n\t\t\t// account for any skipped cells (push in empty objects into labelAliquots)\r\n\t\t\tlet x = 0;\r\n\t\t\twhile (x < this.labelSkips) {\r\n\t\t\t\tthis.labelAliquots.push({ \"aliquot_string\": \"\", \"collaborator_sample_id\": \"\" });\r\n\t\t\t\tx++;\r\n\t\t\t}\r\n\r\n\t\t\t// if include is true, add it to the array for this preview table of labels\r\n\t\t\tlp[1].forEach(label => {\r\n\t\t\t\tif (label.include)\r\n\t\t\t\t\tthis.labelAliquots.push(label);\r\n\t\t\t});\r\n\r\n\t\t\t// for testing purposes only\r\n\t\t\t//this.labelAliquots = this.fakeLabelArray();\r\n\t\t});\r\n\t} // end ngOnInit()\r\n\r\n\t// print the labels\r\n\tpublic printLabelPDF() {\r\n\t\tlet pdf = new jsPDF('p', 'in', 'letter');\r\n\t\tpdf.setFontSize(8);\r\n\t\tpdf.setFontType(\"normal\");\r\n\r\n\t\t//if there are more than 85, need to break it up into 2 pages. if more than 170, need 3 pages\r\n\t\tlet page1: Array<any> = [];\r\n\t\tlet page2: Array<any> = [];\r\n\t\tlet page3: Array<any> = [];\r\n\r\n\t\t//let clonedAliquots = this.labelAliquots.map(x => Object.assign({}, x));\r\n\t\tif (this.labelAliquots.length > 170) {\r\n\t\t\t// need to break this up into 85 each (3 separate arrays to build 3 separate pages)\r\n\t\t\tpage1 = this.labelAliquots.slice(0, 85);\r\n\t\t\tpage2 = this.labelAliquots.slice(85, 170);\r\n\t\t\tpage3 = this.labelAliquots.slice(170);\r\n\t\t} else if (this.labelAliquots.length > 85) {\r\n\t\t\t// need to break this up into 85 each (2 separate arrays to build 2 separate pages)\r\n\t\t\tpage1 = this.labelAliquots.slice(0, 85);\r\n\t\t\tpage2 = this.labelAliquots.slice(85);\r\n\t\t} else {\r\n\t\t\t// only 1 page\r\n\t\t\tpage1 = this.labelAliquots;\r\n\t\t};\r\n\r\n\t\tpage1.forEach((aliquot, index) => {\r\n\t\t\tlet labelString = `${aliquot.aliquot_string}\\n${aliquot.collaborator_sample_id}`;\r\n\t\t\tpdf.textEx(labelString, this.xyArray_inches[index][\"x\"], this.xyArray_inches[index][\"y\"], 'center', 'middle');\r\n\t\t});\r\n\t\tif (page2.length > 0) {\r\n\t\t\tpdf.addPage();\r\n\t\t\tpage2.forEach((aliquot, index) => {\r\n\t\t\t\tlet labelString = `${aliquot.aliquot_string}\\n${aliquot.collaborator_sample_id}`;\r\n\t\t\t\tpdf.textEx(labelString, this.xyArray_inches[index][\"x\"], this.xyArray_inches[index][\"y\"], 'center', 'middle');\r\n\t\t\t});\r\n\t\t};\r\n\t\tif (page3.length > 0) {\r\n\t\t\tpdf.addPage();\r\n\t\t\tpage3.forEach((aliquot, index) => {\r\n\t\t\t\tlet labelString = `${aliquot.aliquot_string}\\n${aliquot.collaborator_sample_id}`;\r\n\t\t\t\tpdf.textEx(labelString, this.xyArray_inches[index][\"x\"], this.xyArray_inches[index][\"y\"], 'center', 'middle');\r\n\t\t\t});\r\n\t\t};\r\n\t\tpdf.save(\"aliquot_labels.pdf\");\r\n\t}\r\n\r\n\t// array containing the x,y locations of every label from 1 to 85 going down each column and then starting from top of next\r\n\tprivate loadArray(): Array<object> {\r\n\t\treturn [\r\n\t\t\t{ x: 1.49, y: 0.50 },\r\n\t\t\t{ x: 1.49, y: 1.125 },\r\n\t\t\t{ x: 1.49, y: 1.75 },\r\n\t\t\t{ x: 1.49, y: 2.375 },\r\n\t\t\t{ x: 1.49, y: 3 },\r\n\t\t\t{ x: 1.49, y: 3.625 },\r\n\t\t\t{ x: 1.49, y: 4.25 },\r\n\t\t\t{ x: 1.49, y: 4.875 },\r\n\t\t\t{ x: 1.49, y: 5.5 },\r\n\t\t\t{ x: 1.49, y: 6.125 },\r\n\t\t\t{ x: 1.49, y: 6.75 },\r\n\t\t\t{ x: 1.49, y: 7.375 },\r\n\t\t\t{ x: 1.49, y: 8 },\r\n\t\t\t{ x: 1.49, y: 8.625 },\r\n\t\t\t{ x: 1.49, y: 9.25 },\r\n\t\t\t{ x: 1.49, y: 9.875 },\r\n\t\t\t{ x: 1.49, y: 10.5 },\r\n\r\n\t\t\t{ x: 2.86, y: 0.5 },\r\n\t\t\t{ x: 2.86, y: 1.125 },\r\n\t\t\t{ x: 2.86, y: 1.75 },\r\n\t\t\t{ x: 2.86, y: 2.375 },\r\n\t\t\t{ x: 2.86, y: 3 },\r\n\t\t\t{ x: 2.86, y: 3.625 },\r\n\t\t\t{ x: 2.86, y: 4.25 },\r\n\t\t\t{ x: 2.86, y: 4.875 },\r\n\t\t\t{ x: 2.86, y: 5.5 },\r\n\t\t\t{ x: 2.86, y: 6.125 },\r\n\t\t\t{ x: 2.86, y: 6.75 },\r\n\t\t\t{ x: 2.86, y: 7.375 },\r\n\t\t\t{ x: 2.86, y: 8 },\r\n\t\t\t{ x: 2.86, y: 8.625 },\r\n\t\t\t{ x: 2.86, y: 9.25 },\r\n\t\t\t{ x: 2.86, y: 9.875 },\r\n\t\t\t{ x: 2.86, y: 10.5 },\r\n\r\n\t\t\t{ x: 4.30, y: 0.5 },\r\n\t\t\t{ x: 4.30, y: 1.125 },\r\n\t\t\t{ x: 4.30, y: 1.75 },\r\n\t\t\t{ x: 4.30, y: 2.375 },\r\n\t\t\t{ x: 4.30, y: 3 },\r\n\t\t\t{ x: 4.30, y: 3.625 },\r\n\t\t\t{ x: 4.30, y: 4.25 },\r\n\t\t\t{ x: 4.30, y: 4.875 },\r\n\t\t\t{ x: 4.30, y: 5.5 },\r\n\t\t\t{ x: 4.30, y: 6.18 },\r\n\t\t\t{ x: 4.30, y: 6.75 },\r\n\t\t\t{ x: 4.30, y: 7.375 },\r\n\t\t\t{ x: 4.30, y: 8 },\r\n\t\t\t{ x: 4.30, y: 8.625 },\r\n\t\t\t{ x: 4.30, y: 9.25 },\r\n\t\t\t{ x: 4.30, y: 9.875 },\r\n\t\t\t{ x: 4.30, y: 10.5 },\r\n\r\n\t\t\t{ x: 5.73, y: 0.5 },\r\n\t\t\t{ x: 5.73, y: 1.125 },\r\n\t\t\t{ x: 5.73, y: 1.75 },\r\n\t\t\t{ x: 5.73, y: 2.375 },\r\n\t\t\t{ x: 5.73, y: 3 },\r\n\t\t\t{ x: 5.73, y: 3.625 },\r\n\t\t\t{ x: 5.73, y: 4.25 },\r\n\t\t\t{ x: 5.73, y: 4.875 },\r\n\t\t\t{ x: 5.73, y: 5.5 },\r\n\t\t\t{ x: 5.73, y: 6.18 },\r\n\t\t\t{ x: 5.73, y: 6.75 },\r\n\t\t\t{ x: 5.73, y: 7.375 },\r\n\t\t\t{ x: 5.73, y: 8 },\r\n\t\t\t{ x: 5.73, y: 8.625 },\r\n\t\t\t{ x: 5.73, y: 9.25 },\r\n\t\t\t{ x: 5.73, y: 9.875 },\r\n\t\t\t{ x: 5.73, y: 10.5 },\r\n\r\n\t\t\t{ x: 7.10, y: 0.5 },\r\n\t\t\t{ x: 7.10, y: 1.125 },\r\n\t\t\t{ x: 7.10, y: 1.75 },\r\n\t\t\t{ x: 7.10, y: 2.375 },\r\n\t\t\t{ x: 7.10, y: 3 },\r\n\t\t\t{ x: 7.10, y: 3.625 },\r\n\t\t\t{ x: 7.10, y: 4.25 },\r\n\t\t\t{ x: 7.10, y: 4.875 },\r\n\t\t\t{ x: 7.10, y: 5.5 },\r\n\t\t\t{ x: 7.10, y: 6.18 },\r\n\t\t\t{ x: 7.10, y: 6.75 },\r\n\t\t\t{ x: 7.10, y: 7.375 },\r\n\t\t\t{ x: 7.10, y: 8 },\r\n\t\t\t{ x: 7.10, y: 8.625 },\r\n\t\t\t{ x: 7.10, y: 9.25 },\r\n\t\t\t{ x: 7.10, y: 9.875 },\r\n\t\t\t{ x: 7.10, y: 10.5 }\r\n\t\t]\r\n\t}\r\n\t// for testing only\r\n\tprivate fakeLabelArray(): Array<any> {\r\n\t\tlet fakeLabelArr: Array<any> = [];\r\n\t\tlet x = 0;\r\n\t\twhile (x < this.labelSkips) {\r\n\t\t\tfakeLabelArr.push({ \"aliquot_string\": \"\", \"collaborator_sample_id\": \"\" });\r\n\t\t\tx++;\r\n\t\t}\r\n\t\tlet i = 0;\r\n\t\twhile (i < 174) {\r\n\t\t\tfakeLabelArr.push({ \"aliquot_string\": `test ${i + 1}`, \"collaborator_sample_id\": i + 1 });\r\n\t\t\ti++;\r\n\t\t}\r\n\t\treturn fakeLabelArr;\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/samples/sample-label/sample-label.component.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\nimport { ISample } from './sample';\r\nimport { IInhibition } from '../inhibitions/inhibition';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n@Injectable()\r\nexport class SampleService {\r\n  // subject for label parts needed by modal\r\n  private _LabelParts: Subject<Array<any>> = new Subject<Array<any>>();\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  private extractData(res: Response) {\r\n    let body = res.json();\r\n    return body.data || {};\r\n  }\r\n\r\n  public getSamples(): Observable<ISample[]> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.SAMPLES_URL, options)\r\n      .map((response: Response) => <ISample[]>response.json())\r\n      // .do(data => console.log('Samples data: ' + JSON.stringify(data)))\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public getSamplerNames(): Observable<any> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.SAMPLES_URL + 'get_sampler_names/', options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      // .do(data => console.log('Samples data: ' + JSON.stringify(data)))\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  // get sample-inhibition objects, i.e. inhibitions per sample\r\n  getSampleInhibitions(sampleList: number[]): Observable<any[]> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.SAMPLE_INHIBITIONS_URL + '?id=' + sampleList, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  getRecentPegnegs(): Observable<any[]> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.SAMPLES_URL + 'get_recent_pegnegs/', options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n\r\n  public querySamplesCount(queryFormValue): Observable<any> {\r\n\r\n    let queryString = '?';\r\n\r\n    if (queryFormValue.id !== null && queryFormValue.id !== '' && queryFormValue.id !== undefined) {\r\n      queryString = queryString + '&id=' + queryFormValue.id.toString();\r\n    }\r\n    if (queryFormValue.from_id !== null && queryFormValue.from_id !== '' && queryFormValue.from_id !== undefined) {\r\n      queryString = queryString + '&from_id=' + queryFormValue.from_id.toString();\r\n    }\r\n    if (queryFormValue.to_id !== null && queryFormValue.to_id !== '' && queryFormValue.to_id !== undefined) {\r\n      queryString = queryString + '&to_id=' + queryFormValue.to_id.toString();\r\n    }\r\n    if (queryFormValue.study !== null && queryFormValue.study !== '' && queryFormValue.study !== undefined) {\r\n      queryString = queryString + '&study=' + queryFormValue.study.toString();\r\n    }\r\n    if (queryFormValue.matrix !== null && queryFormValue.matrix !== '' && queryFormValue.matrix !== undefined) {\r\n      queryString = queryString + '&matrix=' + queryFormValue.matrix.toString();\r\n    }\r\n    if (queryFormValue.sample_type !== null && queryFormValue.sample_type !== '' && queryFormValue.sanple_type !== undefined) {\r\n      queryString = queryString + '&sample_type=' + queryFormValue.sample_type.toString();\r\n    }\r\n    // tslint:disable-next-line:max-line-length\r\n    if (queryFormValue.collaborator_sample_id !== null && queryFormValue.collaborator_sample_id !== '' && queryFormValue.collaborator_sample_id !== undefined) {\r\n      queryString = queryString + '&collaborator_sample_id=' + queryFormValue.collaborator_sample_id.toString();\r\n    }\r\n    // tslint:disable-next-line:max-line-length\r\n    if (queryFormValue.from_collection_start_date !== null && queryFormValue.from_collection_start_date !== \"\" && queryFormValue.from_collection_start_date !== undefined) {\r\n      queryString = queryString + '&from_collection_start_date=' + queryFormValue.from_collection_start_date.toString();\r\n    }\r\n    // tslint:disable-next-line:max-line-length\r\n    if (queryFormValue.to_collection_start_date !== null && queryFormValue.to_collection_start_date !== \"\" && queryFormValue.to_collection_start_date !== undefined) {\r\n      queryString = queryString + '&to_collection_start_date=' + queryFormValue.to_collection_start_date.toString();\r\n    }\r\n    if (queryFormValue.record_type !== null && queryFormValue.record_type !== '' && queryFormValue.record_type !== undefined) {\r\n      queryString = queryString + '&record_type=' + queryFormValue.record_type.toString();\r\n    }\r\n    if (queryFormValue.peg_neg !== null && queryFormValue.peg_neg !== '' && queryFormValue.peg_neg !== undefined) {\r\n      queryString = queryString + '&peg_neg=' + queryFormValue.peg_neg.toString();\r\n    }\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.SAMPLES_URL + 'get_count/' + queryString, options)\r\n      .map((response: Response) => <ISample[]>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public querySamples(queryFormValue): Observable<ISample[]> {\r\n\r\n    let queryString = '?';\r\n\r\n    if (queryFormValue.hasOwnProperty('slim')) {\r\n      queryString = queryString + '&slim'\r\n    }\r\n    if (queryFormValue.id !== null && queryFormValue.id !== '' && queryFormValue.id !== undefined) {\r\n      queryString = queryString + '&id=' + queryFormValue.id.toString();\r\n    }\r\n    if (queryFormValue.from_id !== null && queryFormValue.from_id !== '' && queryFormValue.from_id !== undefined) {\r\n      queryString = queryString + '&from_id=' + queryFormValue.from_id.toString();\r\n    }\r\n    if (queryFormValue.to_id !== null && queryFormValue.to_id !== '' && queryFormValue.to_id !== undefined) {\r\n      queryString = queryString + '&to_id=' + queryFormValue.to_id.toString();\r\n    }\r\n    if (queryFormValue.study !== null && queryFormValue.study !== '' && queryFormValue.study !== undefined) {\r\n      queryString = queryString + '&study=' + queryFormValue.study.toString();\r\n    }\r\n    if (queryFormValue.matrix !== null && queryFormValue.matrix !== '' && queryFormValue.matrix !== undefined) {\r\n      queryString = queryString + '&matrix=' + queryFormValue.matrix.toString();\r\n    }\r\n    if (queryFormValue.sample_type !== null && queryFormValue.sample_type !== '' && queryFormValue.sanple_type !== undefined) {\r\n      queryString = queryString + '&sample_type=' + queryFormValue.sample_type.toString();\r\n    }\r\n    // tslint:disable-next-line:max-line-length\r\n    if (queryFormValue.collaborator_sample_id !== null && queryFormValue.collaborator_sample_id !== '' && queryFormValue.collaborator_sample_id !== undefined) {\r\n      queryString = queryString + '&collaborator_sample_id=' + queryFormValue.collaborator_sample_id.toString();\r\n    }\r\n    // tslint:disable-next-line:max-line-length\r\n    if (queryFormValue.from_collection_start_date !== null && queryFormValue.from_collection_start_date !== \"\" && queryFormValue.from_collection_start_date !== undefined) {\r\n      queryString = queryString + '&from_collection_start_date=' + queryFormValue.from_collection_start_date.toString();\r\n    }\r\n    // tslint:disable-next-line:max-line-length\r\n    if (queryFormValue.to_collection_start_date !== null && queryFormValue.to_collection_start_date !== \"\" && queryFormValue.to_collection_start_date !== undefined) {\r\n      queryString = queryString + '&to_collection_start_date=' + queryFormValue.to_collection_start_date.toString();\r\n    }\r\n    if (queryFormValue.record_type !== null && queryFormValue.record_type !== '' && queryFormValue.record_type !== undefined) {\r\n      queryString = queryString + '&record_type=' + queryFormValue.record_type.toString();\r\n    }\r\n    if (queryFormValue.peg_neg !== null && queryFormValue.peg_neg !== '' && queryFormValue.peg_neg !== undefined) {\r\n      queryString = queryString + '&peg_neg=' + queryFormValue.peg_neg.toString();\r\n    }\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS\r\n    });\r\n\r\n\r\n    return this._http.get(APP_SETTINGS.SAMPLES_URL + queryString, options)\r\n      .map((response: Response) => <ISample[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  public getSampleSelection(sampleList: number[]): Observable<ISample[]> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.SAMPLES_URL + '?id=' + sampleList, options)\r\n      .map((response: Response) => <ISample[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  public queryFinalSampleMeanConcentrations(queryObject): Observable<any> {\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    let queryString = '';\r\n    queryString += '?sample=';\r\n    for (let sample of queryObject.samples) {\r\n      queryString += ((sample.toString()) + ',')\r\n    }\r\n    queryString = queryString.slice(0, -1);\r\n    queryString += '&target=';\r\n    for (let target of queryObject.targets) {\r\n      queryString += ((target.toString()) + ',')\r\n    }\r\n    queryString = queryString.slice(0, -1);\r\n\r\n    return this._http.get(APP_SETTINGS.SAMPLES_URL + 'finalsamplemeanconcentrations/' + queryString, options)\r\n      .map((response: Response) => <any[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  public create(formValue: ISample): Observable<ISample> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.post(APP_SETTINGS.SAMPLES_URL, formValue, options)\r\n      .map((response: Response) => <ISample[]>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  public delete(id: number): Observable<ISample> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.delete(APP_SETTINGS.SAMPLES_URL + id, options)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public update(formValue: ISample): Observable<ISample> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.put(APP_SETTINGS.SAMPLES_URL + formValue.id + '/', formValue, options)\r\n      .map(this.extractData)\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  public read(sampleID: number): Observable<ISample> {\r\n\r\n    let options = new RequestOptions({\r\n      headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS\r\n    });\r\n\r\n    return this._http.get(APP_SETTINGS.SAMPLES_URL + sampleID + '/?format=json', options)\r\n      .map(this.extractData)\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  // getter,setter for label parts needed by modal\r\n  public get LabelParts(): Observable<any> { return this._LabelParts.asObservable(); }\r\n  public setLabelParts(labelArr: any) {\r\n    this._LabelParts.next(labelArr);\r\n  }\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/samples/sample.service.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-xs-12\\\">\\r\\n        <h3>Samples</h3>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<!--Add sample card -->\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-8 col-md-12 col-sm-12 col-xs-12\\\" *ngIf=\\\"showHideAdd\\\">\\r\\n        <!-- begin card-->\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-block\\\">\\r\\n                <div class=\\\"card-title\\\">Add Sample\\r\\n                    <clr-signpost>\\r\\n                        <clr-icon shape=\\\"info-standard\\\" clrSignpostTrigger></clr-icon>\\r\\n                        <clr-signpost-content *clrIfOpen>\\r\\n                            <p>Select a matrix to activate inputs and begin. Invalid inputs for the selected matrix will\\r\\n                                remain disabled.\\r\\n                            </p>\\r\\n                        </clr-signpost-content>\\r\\n                    </clr-signpost>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"card-text\\\">\\r\\n                    <!-- begin form -->\\r\\n                    <form class=\\\"form compact\\\" [formGroup]=\\\"addSampleForm\\\"\\r\\n                        (ngSubmit)=\\\"onSubmitSample('add', addSampleForm.value)\\\">\\r\\n                        <section class=\\\"form-block\\\">\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label class=\\\"required\\\">Matrix</label>\\r\\n                                <label for=\\\"matrixSelect\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                    class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                                    [class.invalid]=\\\"addSampleForm.get('matrix').invalid && (addSampleForm.get('matrix').dirty || addSampleForm.get('matrix').touched)\\\">\\r\\n                                    <div class=\\\"select\\\">\\r\\n                                        <select id=\\\"matrixSelect\\\" name=\\\"matrix\\\" formControlName=\\\"matrix\\\"\\r\\n                                            (change)=\\\"onMatrixSelect($event.target.value)\\\">\\r\\n                                            <option *ngFor=\\\"let matrix of matrices\\\" [value]=\\\"matrix.id\\\">{{matrix.name}}\\r\\n                                            </option>\\r\\n                                        </select>\\r\\n                                    </div>\\r\\n                                </label>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label [ngClass]=\\\"{'required': addSampleForm.get('study').enabled}\\\">Study</label>\\r\\n                                <label for=\\\"studySelect\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                    class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                                    [class.invalid]=\\\"addSampleForm.get('study').invalid && (addSampleForm.get('study').dirty || addSampleForm.get('study').touched)\\\">\\r\\n                                    <div class=\\\"select\\\">\\r\\n                                        <select id=\\\"studySelect\\\" name=\\\"study\\\" formControlName=\\\"study\\\">\\r\\n                                            <option *ngFor=\\\"let study of studies\\\" [value]=\\\"study.id\\\">{{study.name}}\\r\\n                                            </option>\\r\\n                                        </select>\\r\\n                                    </div>\\r\\n                                </label>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label [ngClass]=\\\"{'required': addSampleForm.get('sample_type').enabled}\\\">Sample\\r\\n                                    type</label>\\r\\n                                <label for=\\\"sampleTypeSelect\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                    class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                                    [class.invalid]=\\\"addSampleForm.get('sample_type').invalid && (addSampleForm.get('sample_type').dirty || addSampleForm.get('sample_type').touched)\\\">\\r\\n                                    <div class=\\\"select\\\">\\r\\n                                        <select id=\\\"sampleTypeSelect\\\" name=\\\"sample_type\\\" formControlName=\\\"sample_type\\\">\\r\\n                                            <option *ngFor=\\\"let sampleType of sampleTypes\\\" [value]=\\\"sampleType.id\\\">\\r\\n                                                {{sampleType.name}}</option>\\r\\n                                        </select>\\r\\n                                    </div>\\r\\n                                </label>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label\\r\\n                                    [ngClass]=\\\"{'required': addSampleForm.get('collaborator_sample_id').enabled}\\\">Collaborator\\r\\n                                    Sample ID</label>\\r\\n                                <label for=\\\"collabSampleIdInput\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                    class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                                    [class.invalid]=\\\"addSampleForm.get('collaborator_sample_id').invalid && (addSampleForm.get('collaborator_sample_id').dirty || addSampleForm.get('collaborator_sample_id').touched)\\\">\\r\\n                                    <input id=\\\"collabSampleIdInput\\\" type=\\\"text\\\"\\r\\n                                        formControlName=\\\"collaborator_sample_id\\\">\\r\\n                                    <span class=\\\"tooltip-content\\\">Collaborator ID is required.</span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label>Filtered</label>\\r\\n                                <div class=\\\"toggle-switch\\\">\\r\\n                                    <input type=\\\"checkbox\\\" id=\\\"filteredToggle\\\" formControlName=\\\"filter_flag\\\">\\r\\n                                    <label for=\\\"filteredToggle\\\">{{this.addSampleForm.controls.filter_flag.value ? \\\"Yes\\\" :\\r\\n                                        \\\"No\\\"}}\\r\\n                                    </label>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label>Secondary Concentration</label>\\r\\n                                <div class=\\\"toggle-switch\\\">\\r\\n                                    <input type=\\\"checkbox\\\" id=\\\"secondaryConcToggle\\\"\\r\\n                                        formControlName=\\\"secondary_concentration_flag\\\">\\r\\n                                    <label for=\\\"secondaryConcToggle\\\">{{this.addSampleForm.controls.secondary_concentration_flag.value\\r\\n                                        ? \\\"Yes\\\" : \\\"No\\\"}}</label>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"studySiteNameInput\\\">Study Site Name</label>\\r\\n                                <input id=\\\"studySiteNameInput\\\" type=\\\"text\\\" formControlName=\\\"study_site_name\\\">\\r\\n                            </div>\\r\\n\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"sampleDescInput\\\">Sample Description</label>\\r\\n                                <textarea id=\\\"sampleDescInput\\\" rows=\\\"2\\\" formControlName=\\\"sample_description\\\"\\r\\n                                    style=\\\"max-width:25em\\\"></textarea>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"sampleNotesInput\\\">Sample Notes</label>\\r\\n                                <textarea id=\\\"sampleNotesInput\\\" rows=\\\"2\\\" formControlName=\\\"sample_notes\\\"\\r\\n                                    style=\\\"max-width:25em\\\"></textarea>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"arrivalDateInput\\\">Arrival Date</label>\\r\\n                                <input type=\\\"date\\\" id=\\\"arrivalStartDateInput\\\" formControlName=\\\"arrival_date\\\">\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"arrivalNotesInput\\\">Arrival Notes</label>\\r\\n                                <textarea id=\\\"arrivalNotesInput\\\" rows=\\\"2\\\" formControlName=\\\"arrival_notes\\\"\\r\\n                                    style=\\\"max-width:25em\\\"></textarea>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"samplerNameInput\\\"\\r\\n                                    [ngClass]=\\\"{'required': addSampleForm.get('sampler_name').enabled}\\\">Sampler\\r\\n                                    Name\\r\\n                                </label>\\r\\n                                <input id=\\\"samplerNameInput\\\" list=\\\"samplerNames\\\" name=\\\"samplerName\\\" type=\\\"text\\\"\\r\\n                                    formControlName=\\\"sampler_name\\\">\\r\\n                                <datalist id=\\\"samplerNames\\\">\\r\\n                                    <option *ngFor=\\\"let item of samplerNames\\\" (click)=\\\"selectName(item)\\\"\\r\\n                                        value=\\\"{{item}}\\\">\\r\\n                                </datalist>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"collectStartDateInput\\\"\\r\\n                                    [ngClass]=\\\"{'required': addSampleForm.get('collection_start_date').enabled}\\\">Collection\\r\\n                                    Start Date</label>\\r\\n                                <input type=\\\"date\\\" id=\\\"collectStartDateInput\\\" formControlName=\\\"collection_start_date\\\">\\r\\n                            </div>\\r\\n\\r\\n                            <!--begin variable display section-->\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"collectStartTime\\\">Collection Start Time (HH:MM)</label>\\r\\n                                <label for=\\\"collectStartTime\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                    class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                                    [class.invalid]=\\\"addSampleForm.get('collection_start_time').invalid && (addSampleForm.get('collection_start_time').dirty || addSampleForm.get('collection_start_time').touched)\\\">\\r\\n                                    <input id=\\\"collectStartTime\\\" type=\\\"text\\\" formControlName=\\\"collection_start_time\\\">\\r\\n                                    <span class=\\\"tooltip-content\\\">Must follow format HH:MM</span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"collectEndDateInput\\\">Collection End Date</label>\\r\\n                                <input type=\\\"date\\\" id=\\\"collectEndDateInput\\\" formControlName=\\\"collection_end_date\\\">\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label>Collection End Time (HH:MM)</label>\\r\\n                                <label for=\\\"collectEndTime\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                    class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                                    [class.invalid]=\\\"addSampleForm.get('collection_end_time').invalid && (addSampleForm.get('collection_end_time').dirty || addSampleForm.get('collection_end_time').touched)\\\">\\r\\n                                    <input id=\\\"collectEndTime\\\" type=\\\"text\\\" formControlName=\\\"collection_end_time\\\">\\r\\n                                    <span class=\\\"tooltip-content\\\">Must follow format HH:MM</span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"imrInput\\\">Initial Meter Reading</label>\\r\\n                                <label for=\\\"imrInput\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                    class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                                    [class.invalid]=\\\"addSampleForm.get('meter_reading_initial').invalid && (addSampleForm.get('meter_reading_initial').dirty || addSampleForm.get('meter_reading_initial').touched)\\\">\\r\\n                                    <input type=\\\"number\\\" id=\\\"imrInput\\\" formControlName=\\\"meter_reading_initial\\\">\\r\\n                                    <span class=\\\"tooltip-content\\\">Must be greater than 0 and less than Final Meter\\r\\n                                        Reading</span>\\r\\n                                </label>\\r\\n                                <div class=\\\"select\\\">\\r\\n                                    <select id=\\\"meter_reading_initialUnitSelect\\\" formControlName=\\\"meter_reading_unit\\\">\\r\\n                                        <option *ngFor=\\\"let unit of units\\\" [value]=\\\"unit.id\\\">{{unit.symbol}}</option>\\r\\n                                    </select>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label>Final Meter Reading</label>\\r\\n                                <label for=\\\"fmrInput\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                    class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                                    [class.invalid]=\\\"addSampleForm.get('meter_reading_final').invalid && (addSampleForm.get('meter_reading_final').dirty || addSampleForm.get('meter_reading_final').touched)\\\">\\r\\n                                    <input id=\\\"fmrInput\\\" type=\\\"number\\\" formControlName=\\\"meter_reading_final\\\">\\r\\n                                    <span class=\\\"tooltip-content\\\">Must be greater than 0 and greater than Initial Meter\\r\\n                                        Reading</span>\\r\\n                                </label>\\r\\n                                <label\\r\\n                                    *ngIf=\\\"this.units\\\">{{addSampleForm.get('meter_reading_unit').value | displayValue:'symbol':this.units}}</label>\\r\\n\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"tvsInput\\\">Total Volume (or mass) Sampled</label>\\r\\n                                <input type=\\\"text\\\" id=\\\"tvsInput\\\" formControlName=\\\"total_volume_sampled_initial\\\"\\r\\n                                    (ngModelChange)=\\\"addLeadingZero($event, addSampleForm.get('total_volume_sampled_initial'))\\\">\\r\\n                                <div class=\\\"select\\\">\\r\\n                                    <select id=\\\"tvsUnitSelect\\\" formControlName=\\\"total_volume_sampled_unit_initial\\\">\\r\\n                                        <option *ngFor=\\\"let unit of units\\\" [value]=\\\"unit.id\\\">{{unit.symbol}}</option>\\r\\n                                    </select>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"volPostDiluteInput\\\">Volume After Dilution </label>\\r\\n                                <input id=\\\"volPostDiluteInput\\\" type=\\\"text\\\" formControlName=\\\"post_dilution_volume\\\">\\r\\n                                <span>µL</span>\\r\\n                                <span>(req. for Solid Manure and Forage, Sediment, Soil)</span>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label [ngClass]=\\\"{'required': addSampleForm.get('filter_type').enabled}\\\">Filter\\r\\n                                    Type</label>\\r\\n                                <label for=\\\"filterSelect\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                    class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                                    [class.invalid]=\\\"addSampleForm.get('filter_type').invalid && (addSampleForm.get('filter_type').dirty || addSampleForm.get('filter_type').touched)\\\">\\r\\n                                    <div class=\\\"select\\\">\\r\\n                                        <select id=\\\"filterSelect\\\" name=\\\"filterType\\\" formControlName=\\\"filter_type\\\">\\r\\n                                            <option *ngFor=\\\"let filterType of filterTypes\\\" [value]=\\\"filterType.id\\\">\\r\\n                                                {{filterType.name}}</option>\\r\\n                                        </select>\\r\\n                                    </div>\\r\\n                                </label>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"filterBornOnDateInput\\\">Filter Born-on Date</label>\\r\\n                                <input type=\\\"date\\\" id=\\\"filterBornOnDateInput\\\" formControlName=\\\"filter_born_on_date\\\">\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"dissVolInput\\\">Dissolution Volume</label>\\r\\n                                <input id=\\\"dissVolInput\\\" type=\\\"text\\\" formControlName=\\\"dissolution_volume\\\">\\r\\n                                <span>mL</span>\\r\\n                                <span>(req. for air)</span>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"eluteNotesInput\\\">Elution Notes</label>\\r\\n                                <textarea id=\\\"eluteNotesInput\\\" rows=\\\"2\\\" formControlName=\\\"elution_notes\\\"\\r\\n                                    style=\\\"max-width:25em\\\"></textarea>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"techInitInput\\\">Tech Intials</label>\\r\\n                                <input id=\\\"techInitInput\\\" type=\\\"text\\\" formControlName=\\\"technician_initials\\\">\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"eluteVolInput\\\">Eluent/Backflush Volume Used</label>\\r\\n                                <input id=\\\"eluteVolInput\\\" type=\\\"text\\\" formControlName=\\\"sample_volume_initial\\\">\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label>Peg Neg</label>\\r\\n                                <label for=\\\"pegNegSelect\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                    class=\\\"tooltip tooltip-validation tooltip-sm\\\">\\r\\n                                    <div class=\\\"select\\\">\\r\\n                                        <select id=\\\"pegNegSelect\\\" name=\\\"peg_neg\\\" formControlName=\\\"peg_neg\\\">\\r\\n                                            <option value=\\\"\\\">NO PEGNEG ASSOCIATION</option>\\r\\n                                            <option *ngFor=\\\"let pegneg of pegnegs\\\" [value]=\\\"pegneg.id\\\">ID:{{pegneg.id}} Date:{{pegneg.collection_start_date\\r\\n                                                | date:'shortDate'}}</option>\\r\\n                                        </select>\\r\\n                                    </div>\\r\\n                                    20 most recent pegnegs shown by default.\\r\\n                                </label>\\r\\n                            </div>\\r\\n\\r\\n                            <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"sampleVolumeErrorFlag\\\"\\r\\n                                (clrAlertClosedChange)=\\\"onClosesampleVolumeError()\\\">\\r\\n                                <div class=\\\"alert-item\\\">\\r\\n                                    <span class=\\\"alert-text\\\">Please provide a sample volume using meter readings and\\r\\n                                        units\\r\\n                                        or total volume sampled and units.</span>\\r\\n                                </div>\\r\\n                            </clr-alert>\\r\\n\\r\\n                            <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showSampleCreateError\\\">\\r\\n                                <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                    <span class=\\\"alert-text\\\">Submission error. Sample not submitted.</span>\\r\\n                                    <span>{{errorMessage}}</span>\\r\\n                                    <div class=\\\"alert-actions\\\">\\r\\n                                        <a class=\\\"alert-action\\\" (click)=\\\"onSubmitSample('add', addSampleForm.value)\\\">Try\\r\\n                                            again\\r\\n                                        </a>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </clr-alert>\\r\\n\\r\\n                            <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showSampleCreateSuccess\\\"\\r\\n                                [clrAlertClosable]=\\\"false\\\">\\r\\n                                <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                    <span class=\\\"alert-text\\\">Sample successfully submitted. ID: {{createdSampleID}}\\r\\n                                    </span>\\r\\n                                    <div class=\\\"alert-actions\\\">\\r\\n                                        <a class=\\\"alert-action\\\"\\r\\n                                            (click)=\\\"showHideAdd = false; showSampleCreateSuccess = false; resetFlags()\\\">Close</a>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </clr-alert>\\r\\n\\r\\n                            <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"addSampleForm.invalid\\\"\\r\\n                                [clrLoading]=\\\"submitLoading\\\">Submit</button>\\r\\n                            <button class=\\\"btn btn-info\\\"\\r\\n                                (click)=\\\"showHideAdd = !showHideAdd; resetFlags()\\\">Close</button>\\r\\n                        </section>\\r\\n                        <!--<p>Form value: {{ addSampleForm.value | json }}</p>\\r\\n                        <p>Form status: {{ addSampleForm.status | json }}</p> -->\\r\\n                    </form>\\r\\n                    <!-- end form -->\\r\\n\\r\\n                    <div class=\\\"form-group\\\" class=\\\"pegneg-list-update\\\">\\r\\n                        <label class=\\\"text-bold\\\"><b><i>Update Pegneg selection list</i></b></label>\\r\\n                        <label>\\r\\n                            <label>&nbsp;&nbsp;From:</label><input type=\\\"date\\\"\\r\\n                                [formControl]=\\\"pegnegFromDate\\\"><label>To:</label><input type=\\\"date\\\"\\r\\n                                [formControl]=\\\"pegnegToDate\\\"><button class=\\\"btn btn-link\\\"\\r\\n                                [clrLoading]=\\\"pegnegListLoading\\\" (click)=\\\"updatePegnegList()\\\">Update</button>\\r\\n                        </label>\\r\\n\\r\\n                    </div>\\r\\n\\r\\n                    <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"pegnegQuerySizeErrorFlag\\\">\\r\\n                        <div class=\\\"alert-item\\\">\\r\\n                            <span class=\\\"alert-text\\\">Pegneg results too large. Please narrow your date range.</span>\\r\\n                        </div>\\r\\n                    </clr-alert>\\r\\n\\r\\n                    <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"pegnegQueryBlankFlag\\\">\\r\\n                        <div class=\\\"alert-item\\\">\\r\\n                            <span class=\\\"alert-text\\\">No pegneg results. Please expand your date range.</span>\\r\\n                        </div>\\r\\n                    </clr-alert>\\r\\n\\r\\n                </div>\\r\\n            </div>\\r\\n            <!-- end card -->\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<!--Add peg neg card -->\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-8 col-md-12 col-sm-12 col-xs-12\\\" *ngIf=\\\"showHideAddPegNeg\\\">\\r\\n        <!-- begin card-->\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-block\\\">\\r\\n                <div class=\\\"card-title\\\">Add Peg Neg\\r\\n                    <clr-signpost>\\r\\n                        <clr-icon shape=\\\"info-standard\\\" clrSignpostTrigger></clr-icon>\\r\\n                        <clr-signpost-content *clrIfOpen>\\r\\n                            <p>Create a peg neg control record. Associate with a sample in the Add Sample form.\\r\\n                            </p>\\r\\n                        </clr-signpost-content>\\r\\n                    </clr-signpost>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"card-text\\\">\\r\\n                    <!-- begin form -->\\r\\n                    <form class=\\\"form compact\\\" [formGroup]=\\\"addPegNegForm\\\"\\r\\n                        (ngSubmit)=\\\"onSubmitSample('addPegNeg', addPegNegForm.value)\\\">\\r\\n                        <section class=\\\"form-block\\\">\\r\\n\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label>Filtered</label>\\r\\n                                <div class=\\\"toggle-switch\\\">\\r\\n                                    <input type=\\\"checkbox\\\" id=\\\"filteredToggle\\\" formControlName=\\\"filter_flag\\\">\\r\\n                                    <label for=\\\"filteredToggle\\\">{{this.addPegNegForm.controls.filter_flag.value ? \\\"Yes\\\" :\\r\\n                                        \\\"No\\\"}}\\r\\n                                    </label>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label>Secondary Concentration</label>\\r\\n                                <div class=\\\"toggle-switch\\\">\\r\\n                                    <input type=\\\"checkbox\\\" id=\\\"secondaryConcToggle\\\"\\r\\n                                        formControlName=\\\"secondary_concentration_flag\\\">\\r\\n                                    <label for=\\\"secondaryConcToggle\\\">{{this.addPegNegForm.controls.secondary_concentration_flag.value\\r\\n                                        ? \\\"Yes\\\" : \\\"No\\\"}}</label>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"pegnegDescInput\\\">Description</label>\\r\\n                                <textarea id=\\\"pegnegDescInput\\\" rows=\\\"2\\\" formControlName=\\\"sample_description\\\"\\r\\n                                    style=\\\"max-width:25em\\\"></textarea>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"pegnegNotesInput\\\">Notes</label>\\r\\n                                <textarea id=\\\"pegnegNotesInput\\\" rows=\\\"2\\\" formControlName=\\\"sample_notes\\\"\\r\\n                                    style=\\\"max-width:25em\\\"></textarea>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"samplerNameInput\\\"\\r\\n                                    [ngClass]=\\\"{'required': addPegNegForm.get('sampler_name').enabled}\\\">Sampler\\r\\n                                    Name\\r\\n                                </label>\\r\\n                                <input id=\\\"samplerNameInput\\\" list=\\\"samplerNames\\\" name=\\\"samplerName\\\" type=\\\"text\\\"\\r\\n                                    formControlName=\\\"sampler_name\\\">\\r\\n                                <datalist id=\\\"samplerNames\\\">\\r\\n                                    <option *ngFor=\\\"let item of samplerNames\\\" (click)=\\\"selectName(item)\\\"\\r\\n                                        value=\\\"{{item}}\\\">\\r\\n                                </datalist>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"collectStartDateInput\\\"\\r\\n                                    [ngClass]=\\\"{'required': addPegNegForm.get('collection_start_date').enabled}\\\">Collection\\r\\n                                    Start Date</label>\\r\\n                                <input type=\\\"date\\\" id=\\\"collectStartDateInput\\\" formControlName=\\\"collection_start_date\\\">\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"imrInput\\\">Initial Meter Reading</label>\\r\\n                                <input type=\\\"text\\\" id=\\\"imrInput\\\" formControlName=\\\"meter_reading_initial\\\">\\r\\n                                <div class=\\\"select\\\">\\r\\n                                    <select id=\\\"meter_reading_initialUnitSelect\\\" formControlName=\\\"meter_reading_unit\\\">\\r\\n                                        <option *ngFor=\\\"let unit of units\\\" [value]=\\\"unit.id\\\">{{unit.symbol}}</option>\\r\\n                                    </select>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"fmrInput\\\">Final Meter Reading</label>\\r\\n                                <input type=\\\"text\\\" id=\\\"fmrInput\\\" formControlName=\\\"meter_reading_final\\\">\\r\\n                                <label\\r\\n                                    *ngIf=\\\"this.units\\\">{{addPegNegForm.get('meter_reading_unit').value | displayValue:'symbol':this.units}}</label>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"tvsInput\\\">Total Volume/Mass Sampled</label>\\r\\n                                <input type=\\\"text\\\" id=\\\"tvsInput\\\" formControlName=\\\"total_volume_sampled_initial\\\">\\r\\n                                <div class=\\\"select\\\">\\r\\n                                    <select id=\\\"tvsUnitSelect\\\" formControlName=\\\"total_volume_sampled_unit_initial\\\">\\r\\n                                        <option *ngFor=\\\"let unit of units\\\" [value]=\\\"unit.id\\\">{{unit.symbol}}</option>\\r\\n                                    </select>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"filterBornOnDateInput\\\">Filter Born-on Date</label>\\r\\n                                <input type=\\\"date\\\" id=\\\"filterBornOnDateInput\\\" formControlName=\\\"filter_born_on_date\\\">\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"dissVolInput\\\">Dissolution Volume</label>\\r\\n                                <input id=\\\"dissVolInput\\\" type=\\\"text\\\" formControlName=\\\"dissolution_volume\\\">\\r\\n                                <span>mL</span>\\r\\n                                <span>(req. for air)</span>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"eluteNotesInput\\\">Elution Notes</label>\\r\\n                                <textarea id=\\\"eluteNotesInput\\\" rows=\\\"2\\\" formControlName=\\\"elution_notes\\\"\\r\\n                                    style=\\\"max-width:25em\\\"></textarea>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"techInitInput\\\">Tech Intials</label>\\r\\n                                <input id=\\\"techInitInput\\\" type=\\\"text\\\" formControlName=\\\"technician_initials\\\">\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"eluteVolInput\\\">Eluent/Backflush Volume Used</label>\\r\\n                                <input id=\\\"eluteVolInput\\\" type=\\\"text\\\" formControlName=\\\"sample_volume_initial\\\">\\r\\n                            </div>\\r\\n\\r\\n                            <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"sampleVolumeErrorFlag\\\"\\r\\n                                (clrAlertClosedChange)=\\\"onClosesampleVolumeError()\\\">\\r\\n                                <div class=\\\"alert-item\\\">\\r\\n                                    <span class=\\\"alert-text\\\">Please provide a sample volume using meter readings and\\r\\n                                        units\\r\\n                                        or total volume sampled and units.</span>\\r\\n                                </div>\\r\\n                            </clr-alert>\\r\\n\\r\\n                            <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showSampleCreateError\\\">\\r\\n                                <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                    <span class=\\\"alert-text\\\">Submission error. Pegneg (sample record) not\\r\\n                                        submitted.</span>\\r\\n                                    <span>{{errorMessage}}</span>\\r\\n                                    <div class=\\\"alert-actions\\\">\\r\\n                                        <a class=\\\"alert-action\\\"\\r\\n                                            (click)=\\\"onSubmitSample('addPegNeg', addPegNegForm.value)\\\">Try\\r\\n                                            again\\r\\n                                        </a>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </clr-alert>\\r\\n\\r\\n                            <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showSampleCreateSuccess\\\"\\r\\n                                [clrAlertClosable]=\\\"false\\\">\\r\\n                                <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                    <span class=\\\"alert-text\\\">Pegneg (sample record) successfully submitted. ID:\\r\\n                                        {{createdSampleID}}</span>\\r\\n                                    <div class=\\\"alert-actions\\\">\\r\\n                                        <a class=\\\"alert-action\\\"\\r\\n                                            (click)=\\\"showHideAddPegNeg = false; showSampleCreateSuccess = false; resetFlags();\\\">Close</a>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </clr-alert>\\r\\n\\r\\n                            <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"addPegNegForm.invalid\\\"\\r\\n                                [clrLoading]=\\\"submitLoading\\\">Submit</button>\\r\\n                            <button class=\\\"btn btn-info\\\"\\r\\n                                (click)=\\\"showHideAddPegNeg = !showHideAddPegNeg; resetFlags();\\\">Close</button>\\r\\n                        </section>\\r\\n                    </form>\\r\\n                    <!-- end form -->\\r\\n\\r\\n                </div>\\r\\n            </div>\\r\\n            <!-- end card -->\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<!-- edit sample modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideEdit\\\" [clrModalSize]=\\\"'lg'\\\">\\r\\n    <h3 class=\\\"modal-title\\\">Edit Sample</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-12\\\">\\r\\n                <form id=\\\"editSampleForm\\\" class=\\\"compact\\\" [formGroup]=\\\"editSampleForm\\\"\\r\\n                    (ngSubmit)=\\\"onSubmitSample('edit', editSampleForm.value)\\\">\\r\\n                    <section class=\\\"form-block\\\">\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"sampleId\\\">Sample ID</label>\\r\\n                            <input type=\\\"text\\\" id=\\\"sampleId\\\" size=\\\"35\\\" formControlName=\\\"id\\\" readonly>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"required\\\">Matrix</label>\\r\\n                            <label for=\\\"matrixSelect\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                                [class.invalid]=\\\"editSampleForm.get('matrix').invalid && (editSampleForm.get('matrix').dirty || editSampleForm.get('matrix').touched)\\\">\\r\\n                                <div class=\\\"select\\\">\\r\\n                                    <select id=\\\"matrixSelect\\\" name=\\\"matrix\\\" formControlName=\\\"matrix\\\"\\r\\n                                        (change)=\\\"onMatrixSelect($event.target.value)\\\">\\r\\n                                        <option *ngFor=\\\"let matrix of matrices\\\" [value]=\\\"matrix.id\\\">{{matrix.name}}\\r\\n                                        </option>\\r\\n                                    </select>\\r\\n                                </div>\\r\\n                            </label>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"required\\\">Study</label>\\r\\n                            <label for=\\\"studySelect\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                                [class.invalid]=\\\"editSampleForm.get('study').invalid && (editSampleForm.get('study').dirty || editSampleForm.get('study').touched)\\\">\\r\\n                                <div class=\\\"select\\\">\\r\\n                                    <select id=\\\"studySelect\\\" name=\\\"study\\\" formControlName=\\\"study\\\">\\r\\n                                        <option value=\\\"\\\">\\r\\n                                            <span class=\\\"all\\\">NO STUDY ASSOCIATION</span>\\r\\n                                        </option>\\r\\n                                        <option *ngFor=\\\"let study of studies\\\" [value]=\\\"study.id\\\">{{study.name}}</option>\\r\\n                                    </select>\\r\\n                                </div>\\r\\n                            </label>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"required\\\">Sample type</label>\\r\\n                            <label for=\\\"sampleTypeSelect\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                                [class.invalid]=\\\"editSampleForm.get('sample_type').invalid && (editSampleForm.get('sample_type').dirty || editSampleForm.get('sample_type').touched)\\\">\\r\\n                                <div class=\\\"select\\\">\\r\\n                                    <select id=\\\"sampleTypeSelect\\\" name=\\\"sample_type\\\" formControlName=\\\"sample_type\\\">\\r\\n                                        <option *ngFor=\\\"let sampleType of sampleTypes\\\" [value]=\\\"sampleType.id\\\">\\r\\n                                            {{sampleType.name}}</option>\\r\\n                                    </select>\\r\\n                                </div>\\r\\n                            </label>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"required\\\">Collaborator Sample ID</label>\\r\\n                            <label for=\\\"collabSampleIdInput\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                                [class.invalid]=\\\"editSampleForm.get('collaborator_sample_id').invalid && (editSampleForm.get('collaborator_sample_id').dirty || editSampleForm.get('collaborator_sample_id').touched)\\\">\\r\\n                                <input id=\\\"collabSampleIdInput\\\" type=\\\"text\\\" formControlName=\\\"collaborator_sample_id\\\">\\r\\n                                <span class=\\\"tooltip-content\\\">Collaborator ID is required.</span>\\r\\n                            </label>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"required\\\">Filtered</label>\\r\\n                            <div class=\\\"toggle-switch\\\">\\r\\n                                <input type=\\\"checkbox\\\" id=\\\"filteredToggle\\\" formControlName=\\\"filter_flag\\\">\\r\\n                                <label\\r\\n                                    for=\\\"filteredToggle\\\">{{this.editSampleForm.controls.filter_flag.value ? \\\"Yes\\\" : \\\"No\\\"}}</label>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"required\\\">Secondary Concentration</label>\\r\\n                            <div class=\\\"toggle-switch\\\">\\r\\n                                <input type=\\\"checkbox\\\" id=\\\"secondaryConcToggle\\\"\\r\\n                                    formControlName=\\\"secondary_concentration_flag\\\">\\r\\n                                <label for=\\\"secondaryConcToggle\\\">{{this.editSampleForm.controls.secondary_concentration_flag.value\\r\\n                                    ? \\\"Yes\\\" : \\\"No\\\"}}</label>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"studySiteNameInput\\\">Study Site Name</label>\\r\\n                            <input id=\\\"studySiteNameInput\\\" type=\\\"text\\\" formControlName=\\\"study_site_name\\\">\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"sampleDescInput\\\">Sample Description</label>\\r\\n                            <textarea id=\\\"sampleDescInput\\\" rows=\\\"2\\\" formControlName=\\\"sample_description\\\"\\r\\n                                style=\\\"max-width:25em\\\"></textarea>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"sampleDescInput\\\">Sample Notes</label>\\r\\n                            <textarea id=\\\"sampleDescInput\\\" rows=\\\"2\\\" formControlName=\\\"sample_notes\\\"\\r\\n                                style=\\\"max-width:25em\\\"></textarea>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"collectStartDateInput\\\" class=\\\"required\\\">Arrival Date</label>\\r\\n                            <input type=\\\"date\\\" id=\\\"collectStartDateInput\\\" formControlName=\\\"arrival_date\\\">\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"sampleDescInput\\\">Arrival Notes</label>\\r\\n                            <textarea id=\\\"sampleDescInput\\\" rows=\\\"2\\\" formControlName=\\\"arrival_notes\\\"\\r\\n                                style=\\\"max-width:25em\\\"></textarea>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"samplerNameInput\\\">Sampler Name</label>\\r\\n                            <input id=\\\"samplerNameInput\\\" list=\\\"samplerNames\\\" name=\\\"samplerName\\\" type=\\\"text\\\"\\r\\n                                formControlName=\\\"sampler_name\\\">\\r\\n                            <datalist id=\\\"samplerNames\\\">\\r\\n                                <option *ngFor=\\\"let item of samplerNames\\\" (click)=\\\"selectName(item)\\\" value=\\\"{{item}}\\\">\\r\\n                            </datalist>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"collectStartDateInput\\\" class=\\\"required\\\">Collection Start Date</label>\\r\\n                            <input type=\\\"date\\\" id=\\\"collectStartDateInput\\\" formControlName=\\\"collection_start_date\\\">\\r\\n                        </div>\\r\\n\\r\\n                        <!--begin variable display section-->\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"collectStartTime\\\">Collection Start Time (HH:MM)</label>\\r\\n                            <input id=\\\"collectStartTime\\\" type=\\\"text\\\" formControlName=\\\"collection_start_time\\\">\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"collectEndDateInput\\\">Collection End Date</label>\\r\\n                            <input type=\\\"date\\\" id=\\\"collectEndDateInput\\\" formControlName=\\\"collection_end_date\\\">\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"collectEndTime\\\">Collection End Time (HH:MM)</label>\\r\\n                            <input id=\\\"collectEndTime\\\" type=\\\"text\\\" formControlName=\\\"collection_end_time\\\">\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"imrInput\\\">Initial Meter Reading</label>\\r\\n                            <input type=\\\"text\\\" id=\\\"imrInput\\\" formControlName=\\\"meter_reading_initial\\\">\\r\\n                            <div class=\\\"select\\\">\\r\\n                                <select id=\\\"imrSelect\\\" formControlName=\\\"meter_reading_unit\\\">\\r\\n                                    <option *ngFor=\\\"let unit of units\\\" [value]=\\\"unit.id\\\">{{unit.symbol}}</option>\\r\\n                                </select>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"fmrInput\\\">Final Meter Reading</label>\\r\\n                            <input type=\\\"text\\\" id=\\\"fmrInput\\\" formControlName=\\\"meter_reading_final\\\">\\r\\n                            <label *ngIf=\\\"sampleSelected\\\">\\r\\n                                <label\\r\\n                                    *ngIf=\\\"this.units\\\">{{editSampleForm.get('meter_reading_unit').value | displayValue:'symbol':this.units}}</label>\\r\\n                            </label>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"tvsInput\\\">Total Volume (or mass) Sampled</label>\\r\\n                            <input type=\\\"text\\\" id=\\\"tvsInput\\\" formControlName=\\\"total_volume_or_mass_sampled\\\">\\r\\n                            <!-- <span>L</span> -->\\r\\n                            <span\\r\\n                                *ngIf=\\\"selectedSample\\\">{{selectedSample.total_volume_sampled_unit_initial | displayValue:'symbol':this.units}}</span>\\r\\n                            <!-- <div class=\\\"select\\\">\\r\\n                                <select id=\\\"tvsUnitSelect\\\" formControlName=\\\"total_volume_sampled_unit_initial\\\" readonly>\\r\\n                                    <option *ngFor=\\\"let unit of units\\\" [value]=\\\"unit.id\\\">{{unit.symbol}}</option>\\r\\n                                </select>\\r\\n                            </div> -->\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"volPostDiluteInput\\\">Volume After Dilution </label>\\r\\n                            <input id=\\\"volPostDiluteInput\\\" type=\\\"text\\\" formControlName=\\\"post_dilution_volume\\\">\\r\\n                            <span>µL</span>\\r\\n                            <span>(req. for Solid Manure and Forage, Sediment, Soil)</span>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label>Filter Type</label>\\r\\n                            <label for=\\\"filterSelect\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                                [class.invalid]=\\\"editSampleForm.get('filter_type').invalid && (editSampleForm.get('filter_type').dirty || editSampleForm.get('filter_type').touched)\\\">\\r\\n                                <div class=\\\"select\\\">\\r\\n                                    <select id=\\\"filterSelect\\\" name=\\\"filterType\\\" formControlName=\\\"filter_type\\\">\\r\\n                                        <option *ngFor=\\\"let filterType of filterTypes\\\" [value]=\\\"filterType.id\\\">\\r\\n                                            {{filterType.name}}</option>\\r\\n                                    </select>\\r\\n                                </div>\\r\\n                            </label>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"filterBornOnDateInput\\\">Collection Start Date</label>\\r\\n                            <input type=\\\"date\\\" id=\\\"filterBornOnDateInput\\\" formControlName=\\\"filter_born_on_date\\\">\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"dissVolInput\\\">Dissolution Volume</label>\\r\\n                            <input id=\\\"dissVolInput\\\" type=\\\"text\\\" formControlName=\\\"dissolution_volume\\\">\\r\\n                            <span>mL</span>\\r\\n                            <span>(req. for air)</span>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"eluteNotesInput\\\">Elution Notes</label>\\r\\n                            <textarea id=\\\"eluteNotesInput\\\" rows=\\\"2\\\" formControlName=\\\"elution_notes\\\"\\r\\n                                style=\\\"max-width:25em\\\"></textarea>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"techInitInput\\\">Tech Intials</label>\\r\\n                            <input id=\\\"techInitInput\\\" type=\\\"text\\\" formControlName=\\\"technician_initials\\\">\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"eluteVolInput\\\">Eluent/Backflush Volume Used</label>\\r\\n                            <input id=\\\"eluteVolInput\\\" type=\\\"text\\\" formControlName=\\\"sample_volume_initial\\\">\\r\\n                        </div>\\r\\n\\r\\n\\r\\n                        <div>\\r\\n                            <label *ngIf=\\\"selectedSamplePegneg\\\">Current Associated Peg Neg:&nbsp;&nbsp;ID:{{selectedSamplePegneg.id}}&nbsp;Date:{{selectedSamplePegneg.collection_start_date\\r\\n                                | date:'shortDate'}}</label>\\r\\n                        </div>\\r\\n\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label>Update Peg Neg</label>\\r\\n                            <label for=\\\"pegNegSelect\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                                class=\\\"tooltip tooltip-validation tooltip-sm\\\">\\r\\n                                <div class=\\\"select\\\">\\r\\n                                    <select id=\\\"pegNegSelect\\\" name=\\\"peg_neg\\\" formControlName=\\\"peg_neg\\\">\\r\\n                                        <option value=\\\"\\\">NO PEGNEG ASSOCIATION</option>\\r\\n                                        <option *ngFor=\\\"let pegneg of pegnegs\\\" [value]=\\\"pegneg.id\\\">ID:{{pegneg.id}} Date:{{pegneg.collection_start_date\\r\\n                                            | date:'shortDate'}}</option>\\r\\n                                    </select>\\r\\n                                </div>\\r\\n                                20 most recent pegnegs shown by default.\\r\\n                            </label>\\r\\n                        </div>\\r\\n\\r\\n                        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showSampleEditError\\\">\\r\\n                            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                <span class=\\\"alert-text\\\">Submission error. Sample not updated.</span>\\r\\n                                <span>{{errorMessage}}</span>\\r\\n                                <div class=\\\"alert-actions\\\">\\r\\n                                    <a class=\\\"alert-action\\\" (click)=\\\"onSubmitSample('add', editSampleForm.value)\\\">Try\\r\\n                                        again</a>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </clr-alert>\\r\\n\\r\\n                        <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showSampleEditSuccess\\\">\\r\\n                            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                <span class=\\\"alert-text\\\">Sample successfully updated</span>\\r\\n                                <div class=\\\"alert-actions\\\">\\r\\n                                    <a class=\\\"alert-action\\\"\\r\\n                                        (click)=\\\"showHideEdit = false; showSampleEditSuccess = false; resetFlags();\\\">Close</a>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </clr-alert>\\r\\n\\r\\n                        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"editSampleForm.invalid\\\">Save\\r\\n                            Edits</button>\\r\\n                        <button class=\\\"btn btn-info\\\"\\r\\n                            (click)=\\\"showHideEdit = !showHideEdit; resetFlags();\\\">Close</button>\\r\\n                    </section>\\r\\n                    <!--<p>Form value: {{ editSampleForm.value | json }}</p>\\r\\n                    <p>Form status: {{ editSampleForm.status | json }}</p> -->\\r\\n                </form>\\r\\n\\r\\n\\r\\n                <div class=\\\"form-group\\\" class=\\\"pegneg-list-update\\\">\\r\\n                    <label class=\\\"text-bold\\\"><b><i>Update Pegneg selection list</i></b></label>\\r\\n                    <label>\\r\\n                        <label>&nbsp;&nbsp;From:</label><input type=\\\"date\\\"\\r\\n                            [formControl]=\\\"pegnegFromDate\\\"><label>To:</label><input type=\\\"date\\\"\\r\\n                            [formControl]=\\\"pegnegToDate\\\"><button class=\\\"btn btn-link\\\" [clrLoading]=\\\"pegnegListLoading\\\"\\r\\n                            (click)=\\\"updatePegnegList()\\\">Update</button>\\r\\n                    </label>\\r\\n\\r\\n                </div>\\r\\n\\r\\n                <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"pegnegQuerySizeErrorFlag\\\">\\r\\n                    <div class=\\\"alert-item\\\">\\r\\n                        <span class=\\\"alert-text\\\">Pegneg results too large. Please narrow your date range.</span>\\r\\n                    </div>\\r\\n                </clr-alert>\\r\\n\\r\\n                <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"pegnegQueryBlankFlag\\\">\\r\\n                    <div class=\\\"alert-item\\\">\\r\\n                        <span class=\\\"alert-text\\\">No pegneg results. Please expand your date range.</span>\\r\\n                    </div>\\r\\n                </clr-alert>\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n    </div>\\r\\n</clr-modal>\\r\\n<!-- end edit sample modal -->\\r\\n\\r\\n<!-- delete Sample Modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideDelete\\\">\\r\\n    <h3 class=\\\"modal-title\\\"><clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon> Delete Sample</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12\\\">\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showSampleDeleteError\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Submission error. Sample not deleted.</span>\\r\\n              <div class=\\\"alert-actions\\\">\\r\\n                <a class=\\\"alert-action\\\" (click)=\\\"submitDelete()\\\">Try again</a>\\r\\n              </div>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showSampleDeleteSuccess\\\">\\r\\n            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n              <span class=\\\"alert-text\\\">Sample successfully deleted.</span>\\r\\n            </div>\\r\\n          </clr-alert>\\r\\n\\r\\n          <div *ngIf=\\\"!showSampleDeleteSuccess\\\">\\r\\n            <p>Are you sure you want to delete the sample <b>{{selectedSampleId}}</b> ?</p>\\r\\n\\r\\n            <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)=\\\"submitDelete()\\\" [clrLoading]=\\\"submitLoading\\\">Delete</button>\\r\\n            <button class=\\\"btn btn-info\\\" (click)=\\\"showHideDelete = !showHideDelete\\\">Close</button>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </clr-modal>\\r\\n<!-- end delete sample modal -->\\r\\n\\r\\n<!-- begin analysis batch modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideABModal\\\">\\r\\n    <h3 class=\\\"modal-title\\\">Create Analysis Batch</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-12\\\">\\r\\n\\r\\n                <form id=\\\"createABForm\\\" class=\\\"compact\\\" [formGroup]=\\\"createABForm\\\"\\r\\n                    (ngSubmit)=\\\"onSubmitAB(createABForm.value)\\\">\\r\\n                    <section class=\\\"form-block\\\">\\r\\n\\r\\n                        <clr-stack-label>You have selected the following samples for inclusion in a new Analysis Batch:\\r\\n                        </clr-stack-label>\\r\\n\\r\\n                        <ul class=\\\"list compact\\\">\\r\\n                            <li *ngFor=\\\"let sample of selected\\\">Sample {{sample.id}} ({{sample.study_string}})</li>\\r\\n                        </ul>\\r\\n                        <p>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"abNameInput\\\">Name</label>\\r\\n                                <input id=\\\"abNameInput\\\" type=\\\"text\\\" formControlName=\\\"name\\\">\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"abDescInput\\\">Analysis Batch Description</label>\\r\\n                                <textarea id=\\\"abDescInput\\\" rows=\\\"2\\\" formControlName=\\\"analysis_batch_description\\\"\\r\\n                                    style=\\\"max-width:25em\\\"></textarea>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"abNotesInput\\\">Analysis Batch Notes</label>\\r\\n                                <textarea id=\\\"abNotesInput\\\" rows=\\\"2\\\" formControlName=\\\"analysis_batch_notes\\\"\\r\\n                                    style=\\\"max-width:25em\\\"></textarea>\\r\\n                            </div>\\r\\n\\r\\n                            <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showABCreateError\\\">\\r\\n                                <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                    <span class=\\\"alert-text\\\">Submission error. Analysis Batch not created.</span>\\r\\n                                    <span>{{errorMessage}}</span>\\r\\n                                    <div class=\\\"alert-actions\\\">\\r\\n                                        <a class=\\\"alert-action\\\" (click)=\\\"onSubmitAB(createABForm.value)\\\">Try again</a>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </clr-alert>\\r\\n\\r\\n                            <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showABCreateSuccess\\\">\\r\\n                                <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                    <span class=\\\"alert-text\\\">Analysis Batch successfully created. ID:\\r\\n                                        {{createdABID}}</span>\\r\\n                                    <div class=\\\"alert-actions\\\">\\r\\n                                        <a class=\\\"alert-action\\\"\\r\\n                                            (click)=\\\"showHideABModal = false; showABCreateSuccess = false; resetFlags();\\\">Close</a>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </clr-alert>\\r\\n\\r\\n                            <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"createABForm.invalid\\\"\\r\\n                                [clrLoading]=\\\"submitLoading\\\">Submit</button>\\r\\n                            <button class=\\\"btn btn-info\\\"\\r\\n                                (click)=\\\"showHideABModal= !showHideABModal; resetFlags();\\\">Close</button>\\r\\n\\r\\n                    </section>\\r\\n                </form>\\r\\n\\r\\n            </div>\\r\\n            <!--<div class=\\\"col-lg-6\\\">\\r\\n            </div>-->\\r\\n        </div>\\r\\n    </div>\\r\\n    <!--<div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline\\\" (click)=\\\"showHideEdit = !showHideEdit\\\">Close</button>\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\"  [disabled]=\\\"editSampleForm.invalid\\\">Save Edits</button>\\r\\n    </div>-->\\r\\n</clr-modal>\\r\\n<!-- end analysis batch modal -->\\r\\n\\r\\n<!-- begin Add FCSV modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"addFCSVModalActive\\\" [clrModalSize]=\\\"'xl'\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n        <clr-icon shape=\\\"plus\\\" size=\\\"26\\\"></clr-icon>&nbsp;Add Final Concentrated Sample Volume (FCSV)\\r\\n    </h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-12\\\">\\r\\n                <form class=\\\"compact\\\" [formGroup]=\\\"createFCSVForm\\\"\\r\\n                    (ngSubmit)=\\\"onSubmitFCSV('add', createFCSVForm.value)\\\">\\r\\n                    <section class=\\\"form-block\\\">\\r\\n\\r\\n                        <div formArrayName=\\\"fcsv_array\\\">\\r\\n                            <div class=\\\"row\\\">\\r\\n                                <div class=\\\"col-lg-2 col-md-2 col-sm-12 col-xs-12\\\">\\r\\n                                </div>\\r\\n                                <div class=\\\"col-lg-2 col-md-2 col-sm-12 col-xs-12\\\">\\r\\n                                    <label class=\\\"text-bold required\\\">FCSV*</label>\\r\\n                                </div>\\r\\n                                <div class=\\\"col-lg-2 col-md-2 col-sm-12 col-xs-12\\\">\\r\\n                                    <label class=\\\"text-bold required\\\">Concentration Type*</label>\\r\\n                                </div>\\r\\n                                <div class=\\\"col-lg-4 col-md-4 col-sm-12 col-xs-12\\\">\\r\\n                                    <label class=\\\"text-bold\\\">Notes</label>\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group row\\\" *ngFor=\\\"let fcsv of fcsvArray.controls, let i = index\\\"\\r\\n                                [formGroupName]=\\\"i\\\">\\r\\n                                <div class=\\\"col-lg-2 col-md-2 col-sm-12 col-xs-12\\\">\\r\\n                                    <label>Sample {{fcsv.controls.sample.value}}</label>\\r\\n                                </div>\\r\\n                                <div class=\\\"col-lg-2 col-md-2 col-sm-12 col-xs-12\\\">\\r\\n                                    <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"FCSV\\\" size=\\\"10\\\"\\r\\n                                        class=\\\"fcsv-input\\\" formControlName=\\\"final_concentrated_sample_volume\\\">\\r\\n                                    <div class=\\\"select\\\">\\r\\n                                        <select id=\\\"fcsvUnitSelect\\\" formControlName=\\\"fcsv_units\\\">\\r\\n                                            <option *ngFor=\\\"let unit of units\\\" [value]=\\\"unit.id\\\">{{unit.symbol}}\\r\\n                                            </option>\\r\\n                                        </select>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                                <div class=\\\"col-lg-2 col-md-2 col-sm-12 col-xs-12 select\\\">\\r\\n                                    <select formControlName=\\\"concentration_type\\\">\\r\\n                                        <option *ngFor=\\\"let type of concentrationTypes\\\" [value]=\\\"type.id\\\">{{type.name}}\\r\\n                                        </option>\\r\\n                                    </select>\\r\\n                                </div>\\r\\n                                <div class=\\\"col-lg-4 col-md-4 col-sm-12 col-xs-12\\\">\\r\\n                                    <input class=\\\"form-control\\\" type=\\\"text\\\" placeholder=\\\"FCSV Notes\\\" size=\\\"35\\\"\\r\\n                                        formControlName=\\\"notes\\\">\\r\\n                                </div>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group row\\\">\\r\\n                                <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-xs-12\\\">\\r\\n                                    <label>Update units for all samples</label>\\r\\n                                    <div class=\\\"select\\\">\\r\\n                                        <select id=\\\"fcsvUnitSelectBulk\\\"\\r\\n                                            (change)=\\\"onFCSVUnitSelectBulk($event.target.value)\\\">\\r\\n                                            <option [value]=\\\"null\\\"></option>\\r\\n                                            <option *ngFor=\\\"let unit of units\\\" [value]=\\\"unit.id\\\">{{unit.symbol}}\\r\\n                                            </option>\\r\\n                                        </select>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <br>\\r\\n                            <label>Note: FCSV is converted to milliliters (mL) for storage and results calculation.\\r\\n                            </label>\\r\\n\\r\\n                        </div>\\r\\n\\r\\n                        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"fcsvValuesMissingFlag\\\">\\r\\n                            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                <span class=\\\"alert-text\\\">Values missing. Each sample selected must have a final\\r\\n                                    concentrated\\r\\n                                    sample volume value, input units, and a concentration type selected.</span>\\r\\n                            </div>\\r\\n                        </clr-alert>\\r\\n\\r\\n                        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showFCSVCreateError\\\">\\r\\n                            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                <span class=\\\"alert-text\\\">Submission error. FCSV records not submitted.</span>\\r\\n                                <span>{{errorMessage}}</span>\\r\\n                                <div class=\\\"alert-actions\\\">\\r\\n                                    <a class=\\\"alert-action\\\" (click)=\\\"onSubmitFCSV(editFCSVForm.value)\\\">Try again</a>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </clr-alert>\\r\\n\\r\\n                        <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showFCSVCreateSuccess\\\">\\r\\n                            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                <span class=\\\"alert-text\\\">FCSV records successfully submitted.</span>\\r\\n                                <div class=\\\"alert-actions\\\">\\r\\n                                    <a class=\\\"alert-action\\\"\\r\\n                                        (click)=\\\"editFCSVModalActive = false; showFCSVCreateSuccess = false; resetFlags();\\\">Close</a>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </clr-alert>\\r\\n\\r\\n                        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"createFCSVForm.invalid\\\"\\r\\n                            [clrLoading]=\\\"submitLoading\\\">Submit</button>\\r\\n                        <button class=\\\"btn btn-info\\\"\\r\\n                            (click)=\\\"addFCSVModalActive = !addFCSVModalActive; resetFlags();\\\">Close</button>\\r\\n\\r\\n                    </section>\\r\\n\\r\\n                </form>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</clr-modal>\\r\\n<!-- end Add FCSV modal -->\\r\\n\\r\\n\\r\\n<!-- begin Edit FCSV modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"editFCSVModalActive\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n        <clr-icon shape=\\\"note\\\" size=\\\"26\\\"></clr-icon>&nbsp;Edit Final Concentrated Sample Volume\\r\\n    </h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-12\\\">\\r\\n\\r\\n                <form id=\\\"editFCSVForm\\\" class=\\\"compact\\\" [formGroup]=\\\"editFCSVForm\\\"\\r\\n                    (ngSubmit)=\\\"onSubmitFCSV('edit',editFCSVForm.value)\\\">\\r\\n                    <section class=\\\"form-block\\\">\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"fcsv\\\">FCSV</label>\\r\\n                            <input id=\\\"fcsv\\\" type=\\\"text\\\" formControlName=\\\"final_concentrated_sample_volume\\\" size=\\\"5\\\">\\r\\n                            <span>mL</span>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label>Concentration Type</label>\\r\\n                            <label for=\\\"concentrationTypeSelect\\\">\\r\\n                                <div class=\\\"select\\\">\\r\\n                                    <select id=\\\"concentrationTypeSelect\\\" formControlName=\\\"concentration_type\\\">\\r\\n                                        <option *ngFor=\\\"let type of concentrationTypes\\\" [value]=\\\"type.id\\\">{{type.name}}\\r\\n                                        </option>\\r\\n                                    </select>\\r\\n                                </div>\\r\\n                            </label>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label for=\\\"fcsvNotesInput\\\">Notes</label>\\r\\n                            <textarea id=\\\"fcsvNotesInput\\\" rows=\\\"2\\\" formControlName=\\\"notes\\\" style=\\\"max-width:25em\\\"\\r\\n                                formControlName=\\\"notes\\\"></textarea>\\r\\n                        </div>\\r\\n\\r\\n                        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showFCSVEditError\\\">\\r\\n                            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                <span class=\\\"alert-text\\\">Submission error. FCSV not edited.</span>\\r\\n                                <span>{{errorMessage}}</span>\\r\\n                                <div class=\\\"alert-actions\\\">\\r\\n                                    <a class=\\\"alert-action\\\" (click)=\\\"onSubmitFCSV(editFCSVForm.value)\\\">Try again</a>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </clr-alert>\\r\\n\\r\\n                        <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showFCSVEditSuccess\\\">\\r\\n                            <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                <span class=\\\"alert-text\\\">FCSV successfully updated.</span>\\r\\n                                <div class=\\\"alert-actions\\\">\\r\\n                                    <a class=\\\"alert-action\\\"\\r\\n                                        (click)=\\\"editFCSVModalActive = false; showFCSVEditSuccess = false; resetFlags();\\\">Close</a>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </clr-alert>\\r\\n\\r\\n                        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"editFCSVForm.invalid\\\"\\r\\n                            [clrLoading]=\\\"submitLoading\\\">Submit</button>\\r\\n                        <button class=\\\"btn btn-info\\\"\\r\\n                            (click)=\\\"editFCSVModalActive = !editFCSVModalActive; resetFlags();\\\">Close</button>\\r\\n                    </section>\\r\\n                </form>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</clr-modal>\\r\\n<!-- end Edit FCSV modal -->\\r\\n\\r\\n<!-- begin freezer location assignment modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"freezerLocationAssignModalActive\\\" [clrModalSize]=\\\"'lg'\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n        <clr-icon shape=\\\"thermometer\\\"></clr-icon> Freezer Location Assignment\\r\\n    </h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <!-- <div class=\\\"row\\\"> -->\\r\\n        <!-- <div class=\\\"col-lg-12 \\\"> -->\\r\\n        <div *ngIf=\\\"this.selectedStudy\\\">\\r\\n            <h4>\\r\\n                <span>\\r\\n                    <span>Assigning freezer locations for {{selected.length}} sample\\r\\n                        <span *ngIf=\\\"selected.length > 1\\\">s</span>\\r\\n                    </span> from the study\\r\\n                    <span style=\\\"font-weight:bold;\\\">{{selectedStudy | displayValue:'name':this.studies}}</span>\\r\\n                </span>\\r\\n            </h4>\\r\\n        </div>\\r\\n        <!-- <div *ngIf=\\\"showLastOccupiedSpot\\\" class=\\\"last-spot-border\\\">\\r\\n                    <label for=\\\"lastOccupiedSpot\\\" style=\\\"font-weight:bold;\\\">Last occupied freezer location</label>\\r\\n                    <div id=\\\"lastOccupiedSpot\\\">\\r\\n                        <span class=\\\"spinner spinner-inline\\\" *ngIf=\\\"lastOccupiedSpotLoading\\\">Loading...</span>\\r\\n                        <span *ngIf=\\\"showLastOccupiedSpot\\\">\\r\\n                            <span>\\r\\n                                Rack\\r\\n                                <b>{{lastOccupiedSpot.rack}}</b> | Box\\r\\n                                <b>{{lastOccupiedSpot.box}}</b> | Row\\r\\n                                <b>{{lastOccupiedSpot.row}}</b> | Spot\\r\\n                                <b>{{lastOccupiedSpot.spot}}</b>\\r\\n                            </span>\\r\\n                        </span>\\r\\n                        <span *ngIf=\\\"showLastOccupiedSpotError\\\">\\r\\n                            <clr-icon shape=\\\"error-standard\\\"></clr-icon> Not Available</span>\\r\\n                    </div>\\r\\n                </div> -->\\r\\n        <form id=\\\"freezeForm\\\" [formGroup]=\\\"freezeForm\\\" (ngSubmit)=\\\"onSubmitFreezerLocation(freezeForm.value)\\\">\\r\\n            <section class=\\\"form-block\\\">\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"freezer\\\" class=\\\"required\\\">Select Freezer</label>\\r\\n                    <select id=\\\"freezerSelect\\\" name=\\\"freezer\\\" formControlName=\\\"freezer\\\">\\r\\n                        <option *ngFor=\\\"let freezer of freezers\\\" [value]=\\\"freezer.id\\\">{{freezer.id}}</option>\\r\\n                    </select>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"aliquotCount\\\" class=\\\"required\\\">Aliquots per Sample</label>\\r\\n                    <input id=\\\"aliquotCount\\\" type=\\\"number\\\" min=\\\"1\\\" formControlName=\\\"aliquots_per_sample\\\"\\r\\n                        class=\\\"input-small-number\\\">\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label>Frozen</label>\\r\\n                    <div class=\\\"toggle-switch\\\">\\r\\n                        <input type=\\\"checkbox\\\" id=\\\"frozenToggle\\\" formControlName=\\\"frozen\\\">\\r\\n                        <label for=\\\"frozenToggle\\\">{{this.freezeForm.controls.frozen.value ? \\\"Yes\\\" : \\\"No\\\"}}</label>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"totalAliquots\\\">Total Number Aliquots\\r\\n                        <clr-tooltip>\\r\\n                            <clr-icon clrTooltipTrigger shape=\\\"info-circle\\\" size=\\\"24\\\"></clr-icon>\\r\\n                            <clr-tooltip-content clrPosition=\\\"top-right\\\" clrSize=\\\"md\\\" *clrIfOpen>\\r\\n                                <span>Sample count multiplied by Aliquots per sample</span>\\r\\n                            </clr-tooltip-content>\\r\\n                        </clr-tooltip>\\r\\n                    </label>\\r\\n                    <label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                        [class.invalid]=\\\"this.freezeForm.get('total_aliquots').value > maxAliquots\\\">\\r\\n                        <input id=\\\"name\\\" type=\\\"number\\\" class=\\\"form-control\\\" formControlName=\\\"total_aliquots\\\" readonly\\r\\n                            min=\\\"0\\\" max=\\\"{{maxAliquots}}\\\">\\r\\n                        <span class=\\\"tooltip-content\\\">Must be less than max aliquots. Adjust aliquots per sample or\\r\\n                            number of samples. </span>\\r\\n                    </label>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"totalAliquots\\\">Max Aliquots for this action\\r\\n                        <clr-tooltip>\\r\\n                            <clr-icon clrTooltipTrigger shape=\\\"info-circle\\\" size=\\\"24\\\"></clr-icon>\\r\\n                            <clr-tooltip-content clrPosition=\\\"top-right\\\" clrSize=\\\"md\\\" *clrIfOpen>\\r\\n                                <span>The maximum number of aliquots you can assign in this single action</span>\\r\\n                            </clr-tooltip-content>\\r\\n                        </clr-tooltip>\\r\\n                    </label>\\r\\n                    <span>{{maxAliquots}}</span>\\r\\n                    <!-- <input id=\\\"totalAliquots\\\" type=\\\"number\\\" formControlName=\\\"total_aliquots\\\" readonly> -->\\r\\n                </div>\\r\\n\\r\\n            </section>\\r\\n            <hr>\\r\\n\\r\\n            <section>\\r\\n                <clr-tree-node>\\r\\n                    <clr-icon shape=\\\"info-standard\\\" class=\\\"is-solid\\\"></clr-icon>\\r\\n                    Instructions\\r\\n                    <ng-template clrIfExpanded>\\r\\n                        <ng-container>\\r\\n                            <clr-tree-node>\\r\\n                                <!-- <label>Choose starting location for aliquots. Maximum value is displayed to the right of\\r\\n                                    each input. Next available box is always shown. If the study of the current sample\\r\\n                                    selection\\r\\n                                    has any aliquots already stored, current box for the study is shown. Select share of\\r\\n                                    total aliquots for each box. Suggested starting locations (based on current freezer\\r\\n                                    status)\\r\\n                                    are provided but can be changed. Note that sample-aliquot sets are not split across\\r\\n                                    boxes.\\r\\n                                    In order to enforce this, the maximum share of total for the box may be less\\r\\n                                    than spots available in that box.\\r\\n                                </label> -->\\r\\n                                <label>If the study of the current sample\\r\\n                                    selection\\r\\n                                    has any aliquots already stored, current box for the study is shown first and the\\r\\n                                    next aliquots for that study will be placed in the next available space. Share of\\r\\n                                    total aliquots for each box is automated. Sample-aliquot sets are prevented from\\r\\n                                    being split across boxes. In order to enforce this, the maximum share of total for\\r\\n                                    the box may be less\\r\\n                                    than spots available in that box. For Next Available Box, suggested starting\\r\\n                                    locations (based on current freezer\\r\\n                                    status) for rack and box are provided but can be changed.\\r\\n                                </label>\\r\\n                            </clr-tree-node>\\r\\n                        </ng-container>\\r\\n                    </ng-template>\\r\\n                </clr-tree-node>\\r\\n            </section>\\r\\n\\r\\n            <section *ngIf=\\\"noCurrentBoxFlag\\\">\\r\\n                <label>{{noCurrentBoxMessage}} </label>\\r\\n            </section>\\r\\n            <section class=\\\"form-block\\\" *ngIf=\\\"!noCurrentBoxFlag\\\">\\r\\n                <label>\\r\\n                    <span class=\\\"box-section-label\\\">Current Box&nbsp;</span>|\\r\\n                    <span>&nbsp;Available spots: {{this.freezeForm.get('available_spots_in_box').value}}</span>\\r\\n\\r\\n                </label>\\r\\n                <div class=\\\"form-group row\\\">\\r\\n                    <div class=\\\"col-lg-2 col-md-2 col-sm-12 col-xs-12\\\">\\r\\n                        <label class=\\\"required\\\">Share of Total</label>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-lg-10 col-md-10 col-sm-12 col-xs-12\\\">\\r\\n                        <!-- <input type=\\\"number\\\" formControlName=\\\"aliquot_count_share\\\" class=\\\"input-small-number\\\" min=\\\"0\\\"\\r\\n                            max=\\\"{{this.freezeForm.get('available_spots_in_box').value}}\\\">\\r\\n                        <span class=\\\"max-size-indicator\\\">Max {{currentBoxShareMax}}</span> -->\\r\\n\\r\\n                        <label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                            class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                            [class.invalid]=\\\"freezeForm.get('aliquot_count_share').value > currentBoxShareMax \\\">\\r\\n                            <input id=\\\"name\\\" type=\\\"number\\\" class=\\\"form-control\\\" formControlName=\\\"aliquot_count_share\\\"\\r\\n                                min=\\\"0\\\" max=\\\"{{this.freezeForm.get('available_spots_in_box').value}}\\\" readonly>\\r\\n                            <span class=\\\"tooltip-content\\\">Must be less than max. </span>\\r\\n                        </label>\\r\\n                        <!-- <span class=\\\"max-size-indicator\\\">Max {{currentBoxShareMax}} ({{currentBoxSetMax}} sets of\\r\\n                            {{this.freezeForm.get('aliquots_per_sample').value}})</span> -->\\r\\n                        <!-- <span class=\\\"max-size-indicator\\\">({{currentBoxSetCount}} sets of\\r\\n                                {{this.freezeForm.get('aliquots_per_sample').value}})</span> -->\\r\\n                    </div>\\r\\n\\r\\n                </div>\\r\\n                <div class=\\\"form-group row\\\">\\r\\n                    <div class=\\\"col-lg-3 col-md-3 col-sm-12 col-xs-12\\\">\\r\\n                        <label for=\\\"rack\\\" class=\\\"required\\\">Rack</label>\\r\\n                        <input id=\\\"rack\\\" type=\\\"number\\\" min=\\\"1\\\" max=\\\"{{currentFreezerDimensions.racks}}\\\"\\r\\n                            formControlName=\\\"rack\\\" readonly>\\r\\n                        <!-- <span class=\\\"max-size-indicator\\\">Max {{currentFreezerDimensions.racks}}</span> -->\\r\\n                    </div>\\r\\n                    <div class=\\\"col-lg-3 col-md-3 col-sm-12 col-xs-12\\\">\\r\\n                        <label for=\\\"box\\\" class=\\\"required\\\">Box</label>\\r\\n                        <input id=\\\"box\\\" type=\\\"number\\\" min=\\\"1\\\" max=\\\"{{currentFreezerDimensions.boxes}}\\\"\\r\\n                            formControlName=\\\"box\\\" readonly>\\r\\n                        <!-- <span class=\\\"max-size-indicator\\\">Max {{currentFreezerDimensions.boxes}}</span> -->\\r\\n                    </div>\\r\\n                    <div class=\\\"col-lg-3 col-md-3 col-sm-12 col-xs-12\\\">\\r\\n                        <label for=\\\"row\\\" class=\\\"required\\\">Row</label>\\r\\n                        <input id=\\\"row\\\" type=\\\"number\\\" min=\\\"1\\\" max=\\\"{{currentFreezerDimensions.rows}}\\\"\\r\\n                            formControlName=\\\"row\\\" readonly>\\r\\n                        <!-- <span class=\\\"max-size-indicator\\\">Max {{currentFreezerDimensions.rows}}</span> -->\\r\\n                    </div>\\r\\n                    <div class=\\\"col-lg-3 col-md-3 col-sm-12 col-xs-12\\\">\\r\\n                        <label for=\\\"spot\\\" class=\\\"required\\\">Spot</label>\\r\\n                        <input id=\\\"spot\\\" type=\\\"number\\\" min=\\\"1\\\" max=\\\"{{currentFreezerDimensions.spots}}\\\"\\r\\n                            formControlName=\\\"spot\\\" readonly>\\r\\n                        <!-- <span class=\\\"max-size-indicator\\\">Max {{currentFreezerDimensions.spots}}</span> -->\\r\\n                    </div>\\r\\n                </div>\\r\\n            </section>\\r\\n\\r\\n            <section class=\\\"form-block\\\" formGroupName=\\\"next_empty_box\\\">\\r\\n                <label>\\r\\n                    <span class=\\\"box-section-label\\\">Next Available Box&nbsp;</span>|\\r\\n                    <span>&nbsp;Available spots:\\r\\n                        {{this.freezeForm.get('next_empty_box').get('available_spots_in_box').value}}\\r\\n                    </span>\\r\\n                </label>\\r\\n                <div class=\\\"form-group row\\\">\\r\\n                    <div class=\\\"col-lg-2 col-md-2 col-sm-12 col-xs-12\\\">\\r\\n                        <label class=\\\"required\\\">Share of Total</label>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-lg-10 col-md-10 col-sm-12 col-xs-12\\\">\\r\\n                        <!-- <input type=\\\"number\\\" formControlName=\\\"aliquot_count_share\\\" class=\\\"input-small-number\\\">\\r\\n                        <span class=\\\"max-size-indicator\\\">Max {{nextBoxShareMax}}</span> -->\\r\\n\\r\\n                        <label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                            class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                            [class.invalid]=\\\"this.freezeForm.get('next_empty_box').get('aliquot_count_share').value > nextBoxShareMax\\\">\\r\\n                            <input id=\\\"name\\\" type=\\\"number\\\" class=\\\"form-control\\\" formControlName=\\\"aliquot_count_share\\\"\\r\\n                                min=\\\"0\\\" max=\\\"{{nextBoxShareMax}}\\\" readonly>\\r\\n                            <span class=\\\"tooltip-content\\\">Must be less than max. </span>\\r\\n                        </label>\\r\\n                        <!-- <span class=\\\"max-size-indicator\\\">Max {{nextBoxShareMax}} ({{nextBoxSetMax}} sets of\\r\\n                            {{this.freezeForm.get('aliquots_per_sample').value}})</span> -->\\r\\n                        <!-- <span class=\\\"max-size-indicator\\\">({{nextBoxSetMax}} sets of\\r\\n                            {{this.freezeForm.get('aliquots_per_sample').value}})</span> -->\\r\\n\\r\\n                    </div>\\r\\n\\r\\n                </div>\\r\\n                <div class=\\\"form-group row\\\">\\r\\n                    <div class=\\\"col-lg-3 col-md-3 col-sm-12 col-xs-12\\\">\\r\\n                        <label for=\\\"rack\\\" class=\\\"required\\\">Rack</label>\\r\\n                        <input id=\\\"rack\\\" type=\\\"number\\\" min=\\\"1\\\" max=\\\"{{currentFreezerDimensions.racks}}\\\"\\r\\n                            formControlName=\\\"rack\\\">\\r\\n                        <span class=\\\"max-size-indicator\\\">Max {{currentFreezerDimensions.racks}}</span>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-lg-3 col-md-3 col-sm-12 col-xs-12\\\">\\r\\n                        <label for=\\\"box\\\" class=\\\"required\\\">Box</label>\\r\\n                        <input id=\\\"box\\\" type=\\\"number\\\" min=\\\"1\\\" max=\\\"{{currentFreezerDimensions.boxes}}\\\"\\r\\n                            formControlName=\\\"box\\\">\\r\\n                        <span class=\\\"max-size-indicator\\\">Max {{currentFreezerDimensions.boxes}}</span>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-lg-3 col-md-3 col-sm-12 col-xs-12\\\">\\r\\n                        <label for=\\\"row\\\" class=\\\"required\\\">Row</label>\\r\\n                        <input id=\\\"row\\\" type=\\\"number\\\" min=\\\"1\\\" max=\\\"{{currentFreezerDimensions.rows}}\\\"\\r\\n                            formControlName=\\\"row\\\" readonly>\\r\\n                        <!-- <span class=\\\"max-size-indicator\\\">Max {{currentFreezerDimensions.rows}}</span> -->\\r\\n                    </div>\\r\\n                    <div class=\\\"col-lg-3 col-md-3 col-sm-12 col-xs-12\\\">\\r\\n                        <label for=\\\"spot\\\" class=\\\"required\\\">Spot</label>\\r\\n                        <input id=\\\"spot\\\" type=\\\"number\\\" min=\\\"1\\\" max=\\\"{{currentFreezerDimensions.spots}}\\\"\\r\\n                            formControlName=\\\"spot\\\" readonly>\\r\\n                        <!-- <span class=\\\"max-size-indicator\\\">Max {{currentFreezerDimensions.spots}}</span> -->\\r\\n                    </div>\\r\\n                </div>\\r\\n            </section>\\r\\n            <section class=\\\"form-block\\\">\\r\\n\\r\\n                <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"freezeErrorFlag\\\">\\r\\n                    <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                        <span class=\\\"alert-text\\\">Submission error. Aliquot records not recorded.</span>\\r\\n                        <span>{{errorMessage}}</span>\\r\\n                        <div class=\\\"alert-actions\\\">\\r\\n                            <a class=\\\"alert-action\\\" (click)=\\\"onSubmitFreezerLocation(freezeForm.value)\\\">Try again</a>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </clr-alert>\\r\\n\\r\\n                <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"aliquotCountErrorFlag\\\">\\r\\n                    <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                        <span class=\\\"alert-text\\\">The aliquot share count exceeds total number of aliquots expected.\\r\\n                            Please\\r\\n                            adjust and submit again.</span>\\r\\n                        <!-- <div class=\\\"alert-actions\\\">\\r\\n                            <a class=\\\"alert-action\\\" (click)=\\\"onSubmitFreezerLocation(freezeForm.value)\\\">Try again</a>\\r\\n                        </div> -->\\r\\n                    </div>\\r\\n                </clr-alert>\\r\\n\\r\\n                <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"freezeSuccessFlag\\\">\\r\\n                    <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                        <span class=\\\"alert-text\\\">Sample aliquot records and locations successfully submitted.</span>\\r\\n                        <div class=\\\"alert-actions\\\">\\r\\n                            <a class=\\\"alert-action\\\"\\r\\n                                (click)=\\\"freezerLocationAssignModalActive = false; freezeSuccessFlag = false; resetFlags();\\\">Close</a>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </clr-alert>\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-outline\\\"\\r\\n                    (click)=\\\"freezerLocationAssignModalActive = !freezerLocationAssignModalActive; resetFlags()\\\">Close</button>\\r\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [disabled]=\\\"freezeForm.invalid\\\"\\r\\n                    [clrLoading]=\\\"submitLoading\\\">Submit</button>\\r\\n\\r\\n            </section>\\r\\n        </form>\\r\\n        <!-- </div> -->\\r\\n        <!-- </div> -->\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n\\r\\n    </div>\\r\\n</clr-modal>\\r\\n<!-- end freezer location assignment modal-->\\r\\n\\r\\n<!-- begin freezer location lookup modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideFreezerLocationLookupModal\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n        <clr-icon shape=\\\"thermometer\\\"></clr-icon> Freezer Location Lookup\\r\\n    </h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-12\\\" *ngIf=\\\"selected.length > 0\\\">\\r\\n                <div *ngFor=\\\"let sample of selected\\\">\\r\\n                    <h4 *ngIf=\\\"sample.aliquots.length === 0\\\">No aliquots recorded for Sample {{sample.id}}</h4>\\r\\n                    <table class=\\\"table table-compact\\\" style=\\\"width: 15em\\\" *ngIf=\\\"sample.aliquots.length > 0\\\">\\r\\n                        <thead>\\r\\n                            <tr>\\r\\n                                <th class=\\\"left\\\">Aliquot</th>\\r\\n                                <th class=\\\"left\\\">Freezer</th>\\r\\n                                <th class=\\\"left\\\">Rack</th>\\r\\n                                <th class=\\\"left\\\">Box</th>\\r\\n                                <th class=\\\"left\\\">Row</th>\\r\\n                                <th class=\\\"left\\\">Spot</th>\\r\\n                            </tr>\\r\\n                        </thead>\\r\\n                        <tbody>\\r\\n                            <tr *ngFor=\\\"let aliquot of sample.aliquots\\\">\\r\\n                                <td class=\\\"left\\\">{{aliquot.aliquot_string}}</td>\\r\\n\\r\\n                                <td class=\\\"left\\\">\\r\\n                                    <span *ngIf=\\\"aliquot.freezer_location\\\">{{aliquot.freezer_location.freezer}}</span>\\r\\n                                </td>\\r\\n                                <td class=\\\"left\\\">\\r\\n                                    <span *ngIf=\\\"aliquot.freezer_location\\\">{{aliquot.freezer_location.rack}}</span>\\r\\n                                </td>\\r\\n                                <td class=\\\"left\\\">\\r\\n                                    <span *ngIf=\\\"aliquot.freezer_location\\\">{{aliquot.freezer_location.box}}</span>\\r\\n                                </td>\\r\\n                                <td class=\\\"left\\\">\\r\\n                                    <span *ngIf=\\\"aliquot.freezer_location\\\">{{aliquot.freezer_location.row}}</span>\\r\\n                                </td>\\r\\n                                <td class=\\\"left\\\">\\r\\n                                    <span *ngIf=\\\"aliquot.freezer_location\\\">{{aliquot.freezer_location.spot}}</span>\\r\\n                                </td>\\r\\n\\r\\n                            </tr>\\r\\n                        </tbody>\\r\\n\\r\\n                        <!-- <tbody>\\r\\n                            <tr *ngFor=\\\"let aliquot of sample.aliquots\\\">\\r\\n                                <td class=\\\"left\\\">{{aliquot.aliquot_string}}</td>\\r\\n\\r\\n                                <td class=\\\"left\\\">\\r\\n                                    <span\\r\\n                                        *ngIf=\\\"sample.aliquots[0]\\\">{{sample.aliquots[0].freezer_location.freezer}}</span>\\r\\n                                </td>\\r\\n                                <td class=\\\"left\\\">\\r\\n                                    <span *ngIf=\\\"sample.aliquots[0]\\\">{{sample.aliquots[0].freezer_location.rack}}</span>\\r\\n                                </td>\\r\\n                                <td class=\\\"left\\\">\\r\\n                                    <span *ngIf=\\\"sample.aliquots[0]\\\">{{sample.aliquots[0].freezer_location.box}}</span>\\r\\n                                </td>\\r\\n                                <td class=\\\"left\\\">\\r\\n                                    <span *ngIf=\\\"sample.aliquots[0]\\\">{{sample.aliquots[0].freezer_location.row}}</span>\\r\\n                                </td>\\r\\n                                <td class=\\\"left\\\">\\r\\n                                    <span *ngIf=\\\"sample.aliquots[0]\\\">{{sample.aliquots[0].freezer_location.spot}}</span>\\r\\n                                </td>\\r\\n\\r\\n                            </tr>\\r\\n                        </tbody> -->\\r\\n                    </table>\\r\\n                </div>\\r\\n\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\"></div>\\r\\n</clr-modal>\\r\\n<!-- end freezer location lookup modal-->\\r\\n\\r\\n<!-- begin inhibition lookup modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideInhibitionModal\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n        <clr-icon shape=\\\"view-list\\\"></clr-icon> View Sample Inhibitions: Sample {{selectedSampleId}}\\r\\n    </h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-12\\\">\\r\\n\\r\\n                <div *ngIf=\\\"selectedSampleInhibitionArray.length === 0\\\">\\r\\n                    <h4>There are no inhibitions associated with this sample.</h4>\\r\\n                </div>\\r\\n\\r\\n                <div *ngIf=\\\"selectedSampleInhibitionArray.length > 0\\\">\\r\\n                    <div *ngFor=\\\"let inhibition of selectedSampleInhibitionArray; let i = index\\\">\\r\\n                        <label for=\\\"inhibitionTable\\\">Inhibition {{i+1}}</label>\\r\\n                        <table class=\\\"table table-vertical table-compact\\\" id=\\\"inhibitionTable\\\">\\r\\n                            <tbody>\\r\\n                                <tr>\\r\\n                                    <th>Inhibition Date</th>\\r\\n                                    <td>{{inhibition.inhibition_date | date:'shortDate' }}</td>\\r\\n                                </tr>\\r\\n                                <tr>\\r\\n                                    <th>Dilution Factor</th>\\r\\n                                    <td>{{inhibition.dilution_factor == null ? \\\"Not Calculated\\\": inhibition.dilution_factor}}\\r\\n                                    </td>\\r\\n                                </tr>\\r\\n                                <tr>\\r\\n                                    <th>Inhibition Type</th>\\r\\n                                    <td>{{inhibition.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes}}\\r\\n                                    </td>\\r\\n                                </tr>\\r\\n                            </tbody>\\r\\n                        </table>\\r\\n                        <p>\\r\\n                    </div>\\r\\n\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\"></div>\\r\\n</clr-modal>\\r\\n<!-- end inhibition location lookup modal-->\\r\\n\\r\\n<!-- begin freezer choice modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideFreezerChoiceModal\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n        <clr-icon shape=\\\"thermometer\\\"></clr-icon> Freezer\\r\\n    </h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-12\\\">\\r\\n                <div>\\r\\n                    <h4>Sample Aliquot Freezer Location</h4>\\r\\n                </div>\\r\\n                <br>\\r\\n                <div>\\r\\n                    <button class=\\\"btn btn-primary\\\" (click)=\\\"assignFreezerLocation(selected)\\\">\\r\\n                        <clr-icon shape=\\\"plus\\\"></clr-icon> Create\\r\\n                    </button>\\r\\n                    <button class=\\\"btn btn-primary\\\" (click)=\\\"lookupFreezerLocation()\\\">\\r\\n                        <clr-icon shape=\\\"search\\\"></clr-icon> Lookup\\r\\n                    </button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\"></div>\\r\\n</clr-modal>\\r\\n<!-- end freezer location assignment modal-->\\r\\n\\r\\n<!-- begin freeze warning modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideFreezeWarningModal\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n        <clr-icon shape=\\\"warning-standard\\\" class=\\\"is-error\\\" size=\\\"36\\\"></clr-icon> Multiple Studies Error\\r\\n    </h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <p>The selected set of samples is associated with more than one study. Please adjust selection.</p>\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline\\\" (click)=\\\"showHideFreezeWarningModal = false\\\">Return</button>\\r\\n    </div>\\r\\n</clr-modal>\\r\\n<!-- end freeze warning modal -->\\r\\n\\r\\n<!-- begin FCSV exists warning modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideFCSVExistsErrorModal\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n        <clr-icon shape=\\\"warning-standard\\\" class=\\\"is-error\\\" size=\\\"36\\\"></clr-icon> Existing FCSV Error\\r\\n    </h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <p>One or more samples in your selection already has a final concentrated sample volume recorded. Please adjust\\r\\n            selection.</p>\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline\\\" (click)=\\\"showHideFCSVExistsErrorModal = false\\\">Return</button>\\r\\n    </div>\\r\\n</clr-modal>\\r\\n<!-- end FCSV exists warning modal -->\\r\\n\\r\\n<!-- begin print modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHidePrintModal\\\" [clrModalSize]=\\\"'xl'\\\">\\r\\n    <h3 class=\\\"modal-title\\\">Print Aliquot Labels</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-12\\\">\\r\\n\\r\\n                <form [formGroup]=\\\"skipLabelForm\\\">\\r\\n                    <section>\\r\\n                        <div>\\r\\n                            <label>Number of labels to skip:</label>\\r\\n                            <input type=\\\"number\\\" formControlName=\\\"count\\\" min=\\\"1\\\" class=\\\"input-small-number\\\">\\r\\n                        </div>\\r\\n\\r\\n                    </section>\\r\\n                </form>\\r\\n                <form>\\r\\n                    <section class=\\\"form-block\\\">\\r\\n                        <label>Select aliquots to print for each selected sample.</label>\\r\\n                        <div class=\\\"form-group\\\" *ngFor=\\\"let sample of selected\\\">\\r\\n                            <label for=\\\"\\\">Sample {{sample.id}}</label>\\r\\n\\r\\n                            <div *ngIf=\\\"sample.aliquots.length === 0\\\">\\r\\n                                <clr-icon shape=\\\"times-circle\\\"></clr-icon> No aliquots recorded for this sample\\r\\n                            </div>\\r\\n\\r\\n                            <div *ngIf=\\\"sample.aliquots.length > 0\\\">\\r\\n\\r\\n                                <div class=\\\"checkbox-inline\\\" *ngFor=\\\"let aliquot of sample.aliquots\\\">\\r\\n                                    <input type=\\\"checkbox\\\" checked [attr.id]=\\\"'aliquot' + aliquot.aliquot_string\\\"\\r\\n                                        [value]=\\\"aliquot.aliquot_string\\\" (change)=\\\"includeExcludeLabel($event.target)\\\">\\r\\n                                    <label\\r\\n                                        [attr.for]=\\\"'aliquot' + aliquot.aliquot_string\\\">{{aliquot.aliquot_string}}</label>\\r\\n                                    <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>\\r\\n                                </div>\\r\\n\\r\\n\\r\\n                            </div>\\r\\n                            <!-- <select name=\\\"aliquot_select\\\" (change)=\\\"onAliquotSelect(sample.id, $event.target.value)\\\">\\r\\n                                        <option [value]=\\\"\\\">Select</option>\\r\\n                                        <option *ngFor=\\\"let aliquot of sample.aliquots\\\" [value]=\\\"aliquot.id\\\">{{aliquot.aliquot_string}}</option>\\r\\n                                    </select> -->\\r\\n                        </div>\\r\\n\\r\\n                    </section>\\r\\n                </form>\\r\\n\\r\\n            </div>\\r\\n            <!--<div class=\\\"col-lg-6\\\">\\r\\n            </div>-->\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline\\\"\\r\\n            (click)=\\\"showHidePrintModal = !showHidePrintModal; resetFlags();\\\">Close</button>\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"createLabelPDF()\\\">\\r\\n            <clr-icon shape=\\\"list\\\"></clr-icon> Preview & Print Labels\\r\\n        </button>\\r\\n    </div>\\r\\n</clr-modal>\\r\\n<!-- end print modal -->\\r\\n\\r\\n<!-- begin Missing FCSV Error Modal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideMissingFCSVErrorModal\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n        <clr-icon shape=\\\"warning-standard\\\" class=\\\"is-error\\\" size=\\\"36\\\"></clr-icon> Missing FCSV Error\\r\\n    </h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <p>One or more samples in your selection lacks a value for final concentrated sample volume where one is\\r\\n            required.\\r\\n            FCSV is a prerequisite to creation and storage of aliquots for samples with the matrix water, wastewater, or\\r\\n            forage/sediment/soil. Please add an FCSV for samples of those matrices in your selection and try again. </p>\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline\\\" (click)=\\\"showHideMissingFCSVErrorModal = false\\\">Return</button>\\r\\n    </div>\\r\\n</clr-modal>\\r\\n<!-- end  Missing FCSV Error Modal-->\\r\\n\\r\\n<!-- begin Multiple SamplesErrorModal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showHideMultipleSamplesErrorModal\\\">\\r\\n    <h3 class=\\\"modal-title\\\">\\r\\n        <clr-icon shape=\\\"warning-standard\\\" class=\\\"is-error\\\" size=\\\"36\\\"></clr-icon> Multiple Samples Error\\r\\n    </h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <p>You many only freeze one sample at a time. Please reduce your selection to one sample and try again. </p>\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline\\\"\\r\\n            (click)=\\\"showHideMultipleSamplesErrorModal = false\\\">Return</button>\\r\\n    </div>\\r\\n</clr-modal>\\r\\n<!-- end freeze warning modal -->\\r\\n\\r\\n<!-- begin SampleLabelModal -->\\r\\n<clr-modal [(clrModalOpen)]=\\\"showLabelModal\\\" [clrModalSize]=\\\"'xl'\\\">\\r\\n    <h3 class=\\\"modal-title\\\">Sample Label Preview</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <sample-label #sampleLabel></sample-label>\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-outline\\\"\\r\\n            (click)=\\\"showLabelModal = !showLabelModal; resetFlags()\\\">Close</button>\\r\\n    </div>\\r\\n</clr-modal>\\r\\n<!-- end SampleLabelModal -->\\r\\n\\r\\n<!-- Begin Sample query form -->\\r\\n<div class=\\\"card-text\\\">\\r\\n    <form class=\\\"form compact\\\" [formGroup]=\\\"sampleQueryForm\\\" (ngSubmit)=\\\"onSubmitSampleQuery(sampleQueryForm.value)\\\">\\r\\n        <section class=\\\"form-block\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label [ngClass]=\\\"{'required': addSampleForm.get('study').enabled}\\\">Study</label>\\r\\n                <label for=\\\"studySelect\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\"\\r\\n                    class=\\\"tooltip tooltip-validation tooltip-sm\\\"\\r\\n                    [class.invalid]=\\\"addSampleForm.get('study').invalid && (addSampleForm.get('study').dirty || addSampleForm.get('study').touched)\\\">\\r\\n                    <div class=\\\"select\\\">\\r\\n                        <select id=\\\"studySelect\\\" name=\\\"study\\\" formControlName=\\\"study\\\">\\r\\n                            <option value=\\\"\\\">\\r\\n                                <span class=\\\"all\\\">ALL STUDIES</span>\\r\\n                            </option>\\r\\n                            <option *ngFor=\\\"let study of studies\\\" [value]=\\\"study.id\\\">{{study.name}}</option>\\r\\n                        </select>\\r\\n                    </div>\\r\\n                </label>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Sample ID Range</label>\\r\\n                <span>From</span>\\r\\n                <input type=\\\"number\\\" formControlName=\\\"from_id\\\">\\r\\n                <span>To</span>\\r\\n                <input type=\\\"number\\\" formControlName=\\\"to_id\\\">\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Collection Start Date Range</label>\\r\\n                <span>From</span>\\r\\n                <input type=\\\"date\\\" formControlName=\\\"from_collection_start_date\\\">\\r\\n                <span>To</span>\\r\\n                <input type=\\\"date\\\" formControlName=\\\"to_collection_start_date\\\">\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Collaborator Sample ID</label>\\r\\n                <input id=\\\"collabSampleIdInput\\\" type=\\\"text\\\" formControlName=\\\"collaborator_sample_id\\\">\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Matrix</label>\\r\\n                <div class=\\\"select\\\">\\r\\n                    <select id=\\\"matrixSelect\\\" name=\\\"matrix\\\" formControlName=\\\"matrix\\\">\\r\\n                        <option value=\\\"\\\">\\r\\n                            <span class=\\\"all\\\">ALL MATRICES</span>\\r\\n                        </option>\\r\\n                        <option *ngFor=\\\"let matrix of matrices\\\" [value]=\\\"matrix.id\\\">{{matrix.name}}</option>\\r\\n                    </select>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Sample type</label>\\r\\n                <div class=\\\"select\\\">\\r\\n                    <select id=\\\"sampleTypeSelect\\\" name=\\\"sample_type\\\" formControlName=\\\"sample_type\\\">\\r\\n                        <option value=\\\"\\\">\\r\\n                            <span class=\\\"all\\\">ALL SAMPLE TYPES</span>\\r\\n                        </option>\\r\\n                        <option *ngFor=\\\"let sampleType of sampleTypes\\\" [value]=\\\"sampleType.id\\\">{{sampleType.name}}\\r\\n                        </option>\\r\\n                    </select>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label>Peg Neg (returns associated samples)</label>\\r\\n                <input type=\\\"number\\\" formControlName=\\\"peg_neg\\\">\\r\\n            </div>\\r\\n\\r\\n        </section>\\r\\n\\r\\n        <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"sampleQuerySizeErrorFlag\\\">\\r\\n            <div class=\\\"alert-item\\\">\\r\\n                <span class=\\\"alert-text\\\">Your query results are too large (greater than {{queryCountLimit}}). Please\\r\\n                    narrow\\r\\n                    your search.</span>\\r\\n            </div>\\r\\n        </clr-alert>\\r\\n\\r\\n        <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [clrLoading]=\\\"submitLoading\\\">Filter Samples</button>\\r\\n    </form>\\r\\n</div>\\r\\n<!-- End Sample query form -->\\r\\n\\r\\n<div *ngIf=\\\"sampleQueryComplete\\\">\\r\\n    <h4>Query returned {{samplesCount}} sample records</h4>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n<!-- begin samples table -->\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\">\\r\\n\\r\\n        <clr-datagrid [(clrDgSelected)]=\\\"selected\\\" [clrDgLoading]=\\\"samplesLoading\\\" [clDgRowSelection]=\\\"true\\\">\\r\\n\\r\\n            <clr-dg-action-bar>\\r\\n                <div class=\\\"btn-group\\\">\\r\\n                    <button class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"addSample()\\\">\\r\\n                        <clr-icon shape=\\\"plus\\\"></clr-icon> Add Sample\\r\\n                    </button>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                        [disabled]=\\\"selected.length == 0 || selected.length > 1\\\" (click)=\\\"editSample(selected[0])\\\">\\r\\n                        <clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit Sample\\r\\n                    </button>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                        [disabled]=\\\"selected.length == 0 || selected.length > 1\\\" (click)=\\\"deleteSample(selected[0])\\\">\\r\\n                        <clr-icon shape=\\\"trash\\\" size=\\\"16\\\"></clr-icon> Delete Sample\\r\\n                    </button>\\r\\n                    <button class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"showHideAddPegNeg = !showHideAddPegNeg\\\">\\r\\n                        <clr-icon shape=\\\"plus\\\"></clr-icon> Add Peg Neg\\r\\n                    </button>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"selected.length < 1\\\"\\r\\n                        (click)=\\\"createAB(selected)\\\">\\r\\n                        <clr-icon shape=\\\"plus\\\"></clr-icon> Create Analysis Batch\\r\\n                    </button>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"selected.length < 1\\\"\\r\\n                        (click)=\\\"createFCSV(selected)\\\">\\r\\n                        <clr-icon shape=\\\"plus\\\"></clr-icon> Add FCSV\\r\\n                    </button>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                        [disabled]=\\\"selected.length == 0 || selected.length > 1\\\" (click)=\\\"editFCSV(selected)\\\">\\r\\n                        <clr-icon shape=\\\"note-edit\\\"></clr-icon> Edit FCSV\\r\\n                    </button>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"selected.length < 1\\\"\\r\\n                        (click)=\\\"openFreezerChoice()\\\">\\r\\n                        <clr-icon shape=\\\"thermometer\\\"></clr-icon> Freezer\\r\\n                    </button>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\"\\r\\n                        [disabled]=\\\"selected.length == 0 || selected.length > 1\\\" (click)=\\\"openInhibitionModal(selected)\\\"\\r\\n                        [clrLoading]=\\\"sampleInhibitionsLoadingFlag\\\">\\r\\n                        <clr-icon shape=\\\"view-list\\\"></clr-icon> View Inhibitions\\r\\n                    </button>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"selected.length < 1\\\"\\r\\n                        (click)=\\\"openPrintLabelModal(selected)\\\">\\r\\n                        <clr-icon shape=\\\"printer\\\"></clr-icon> Print Labels\\r\\n                    </button>\\r\\n                    <!-- <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"selected.length == 0 || selected.length > 1\\\">\\r\\n                        <clr-icon shape=\\\"trash\\\"></clr-icon> Delete Sample</button> -->\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"deselectAll()\\\">\\r\\n                        <clr-icon shape=\\\"window-close\\\" size=\\\"16\\\"></clr-icon> Deselect All\\r\\n                    </button>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"exportToCSV()\\\">\\r\\n                        <clr-icon shape=\\\"export\\\" size=\\\"16\\\"></clr-icon> Export to CSV\\r\\n                    </button>\\r\\n\\r\\n\\r\\n                </div>\\r\\n            </clr-dg-action-bar>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'id'\\\">\\r\\n                Sample ID\\r\\n                <clr-dg-filter [clrDgFilter]=\\\"rangeFilter\\\">\\r\\n                    <range-filter #rangeFilter></range-filter>\\r\\n                </clr-dg-filter>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'analysisbatches'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Analysis Batches\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'collaborator_sample_id'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Collaborator Sample ID\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'study_string'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Study\\r\\n                </ng-container>\\r\\n                <clr-dg-filter [clrDgFilter]=\\\"studyFilter\\\">\\r\\n                    <study-filter #studyFilter></study-filter>\\r\\n                </clr-dg-filter>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'sample_type_string'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Sample Type\\r\\n                </ng-container>\\r\\n                <clr-dg-filter [clrDgFilter]=\\\"sampleTypeFilter\\\">\\r\\n                    <sample-type-filter #sampleTypeFilter></sample-type-filter>\\r\\n                </clr-dg-filter>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'record_type_string'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Record Type\\r\\n                </ng-container>\\r\\n                <clr-dg-filter [clrDgFilter]=\\\"recordTypeFilter\\\">\\r\\n                    <record-type-filter #recordTypeFilter></record-type-filter>\\r\\n                </clr-dg-filter>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column style=\\\"width:20em\\\" [clrDgField]=\\\"'sample_description'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Sample Description\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'matrix_string'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Matrix\\r\\n                </ng-container>\\r\\n                <clr-dg-filter [clrDgFilter]=\\\"matrixTypeFilter\\\">\\r\\n                    <matrix-type-filter #matrixTypeFilter></matrix-type-filter>\\r\\n                </clr-dg-filter>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'filter_flag'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Filtered\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'secondary_concentration_flag'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    2° Conc\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'fcsv'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    FCSV (mL)\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'fcsv_concentration_type_string'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    FCSV Type\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'fcsv_notes'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    FCSV Notes\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'total_volume_or_mass_sampled'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Total Volume Sampled (L)\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'meter_reading_initial'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    IMR\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'meter_reading_final'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    FMR\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'dissolution_volume'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Dissolution Volume (mL)\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'post_dilution_volume'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Volume After Dilution (uL)\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'filter_type_string'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Filter Type\\r\\n                </ng-container>\\r\\n                <clr-dg-filter [clrDgFilter]=\\\"filterTypeFilter\\\">\\r\\n                    <filter-type-filter #filterTypeFilter></filter-type-filter>\\r\\n                </clr-dg-filter>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'filter_born_on_date'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Filter Born On Date\\r\\n                </ng-container>\\r\\n                <clr-dg-filter [clrDgFilter]=\\\"filterBornOnDateFilter\\\">\\r\\n                    <filter-born-on-date-filter [dateField]=\\\"'filter_born_on_date'\\\" #filterBornOnDateFilter>\\r\\n                    </filter-born-on-date-filter>\\r\\n                </clr-dg-filter>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'collection_start_date'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Collect Start Date\\r\\n                </ng-container>\\r\\n                <clr-dg-filter [clrDgFilter]=\\\"CollectionStartDateFilter\\\">\\r\\n                    <collection-start-date-filter [dateField]=\\\"'collection_start_date'\\\" #CollectionStartDateFilter>\\r\\n                    </collection-start-date-filter>\\r\\n                </clr-dg-filter>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'collection_end_date'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Collect End Date\\r\\n                </ng-container>\\r\\n                <clr-dg-filter [clrDgFilter]=\\\"collectionEndDateFilter\\\">\\r\\n                    <collection-end-date-filter [dateField]=\\\"'collection_end_date'\\\" #collectionEndDateFilter>\\r\\n                    </collection-end-date-filter>\\r\\n                </clr-dg-filter>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'study_site_name'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Study Site Name\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'sampler_name'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Sampler Name\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column style=\\\"width:20em\\\" [clrDgField]=\\\"'sample_notes'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Sample Notes\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'created_by'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: true}\\\">\\r\\n                    Added by\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'created_date'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Date Added\\r\\n                </ng-container>\\r\\n                <clr-dg-filter [clrDgFilter]=\\\"dateAddedFilter\\\">\\r\\n                    <date-added-filter [dateField]=\\\"'created_date'\\\" #dateAddedFilter></date-added-filter>\\r\\n                </clr-dg-filter>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'modified_by'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: true}\\\">\\r\\n                    Updated by\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'modified_date'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Date Updated\\r\\n                </ng-container>\\r\\n                <clr-dg-filter [clrDgFilter]=\\\"dateUpdatedFilter\\\">\\r\\n                    <date-updated-filter [dateField]=\\\"'modified_date'\\\" #dateUpdatedFilter></date-updated-filter>\\r\\n                </clr-dg-filter>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-placeholder>No samples</clr-dg-placeholder>\\r\\n\\r\\n            <clr-dg-row *clrDgItems=\\\"let sample of allSamples\\\" [clrDgItem]=\\\"sample\\\">\\r\\n                <clr-dg-cell>{{sample.id}}</clr-dg-cell>\\r\\n                <clr-dg-cell>\\r\\n                    <span *ngFor=\\\"let ab of sample.analysisbatches\\\">&#8226;&nbsp;{{ab}}\\r\\n                        <br>\\r\\n                    </span>\\r\\n                </clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.collaborator_sample_id}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.study_string}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.sample_type_string}}</clr-dg-cell>\\r\\n                <!-- <clr-dg-cell>{{sample.record_type | displayValue:'name':this.recordTypes}}</clr-dg-cell> -->\\r\\n                <clr-dg-cell>{{sample.record_type_string}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.sample_description}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.matrix_string}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.filter_flag? \\\"Yes\\\" : \\\"No\\\"}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.secondary_concentration_flag ? \\\"Yes\\\" : \\\"No\\\"}}</clr-dg-cell>\\r\\n                <clr-dg-cell>\\r\\n                    <span\\r\\n                        *ngIf=\\\"sample.finalconcentratedsamplevolume\\\">{{sample.finalconcentratedsamplevolume.final_concentrated_sample_volume | number : '1.2-6' }}</span>\\r\\n                </clr-dg-cell>\\r\\n                <clr-dg-cell>\\r\\n                    <span\\r\\n                        *ngIf=\\\"sample.finalconcentratedsamplevolume\\\">{{sample.finalconcentratedsamplevolume.concentration_type_string}}</span>\\r\\n                </clr-dg-cell>\\r\\n                <clr-dg-cell>\\r\\n                    <span\\r\\n                        *ngIf=\\\"sample.finalconcentratedsamplevolume\\\">{{sample.finalconcentratedsamplevolume.notes}}</span>\\r\\n                </clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.total_volume_or_mass_sampled | number : '1.2-6' }}</clr-dg-cell>\\r\\n                <clr-dg-cell *ngIf=\\\"this.units\\\">{{sample.meter_reading_initial | number : '1.2-6' }} {{sample.meter_reading_unit\\r\\n                    | displayValue:'symbol':this.units}}</clr-dg-cell>\\r\\n                <clr-dg-cell *ngIf=\\\"this.units\\\">{{sample.meter_reading_final | number : '1.2-6' }} {{sample.meter_reading_unit\\r\\n                    | displayValue:'symbol':this.units}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.dissolution_volume | number : '1.2-6' }}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.post_dilution_volume | number : '1.2-6' }}</clr-dg-cell>\\r\\n                <clr-dg-cell *ngIf=\\\"this.filterTypes\\\">{{sample.filter_type_string}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.filter_born_on_date | date:'shortDate'}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.collection_start_date | date:'shortDate'}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.collection_end_date | date:'shortDate'}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.study_site_name}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.sampler_name}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.sample_notes}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.created_by}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.created_date | date:'shortDate'}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.modified_by }}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{sample.modified_date | date:'shortDate'}}</clr-dg-cell>\\r\\n            </clr-dg-row>\\r\\n\\r\\n            <clr-dg-footer>\\r\\n                {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{pagination.totalItems}} samples\\r\\n                <clr-dg-pagination #pagination [clrDgPageSize]=\\\"20\\\"></clr-dg-pagination>\\r\\n            </clr-dg-footer>\\r\\n        </clr-datagrid>\\r\\n    </div>\\r\\n</div>\\r\\n<!-- end samples table -->\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/samples/samples.component.html\n// module id = ./src/app/samples/samples.component.html\n// module chunks = main","module.exports = \".datagrid .datagrid-column, .datagrid .datagrid-cell .no-padding {\\n  padding: 0px; }\\n\\n.ten {\\n  min-width: 4em; }\\n\\n.input-small-number {\\n  width: 5em; }\\n\\n.last-spot-border {\\n  border-style: solid;\\n  padding: 5px;\\n  border-radius: 5px; }\\n\\n.fcsv-input {\\n  width: 5em; }\\n\\n.text-bold {\\n  font-style: bold !important; }\\n\\n.suggestions {\\n  position: relative;\\n  background-color: #f1f1f1;\\n  min-width: 160px;\\n  -webkit-box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\\n          box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\\n  z-index: 1; }\\n\\n.suggestions a {\\n  color: black;\\n  padding: 12px 16px;\\n  text-decoration: none;\\n  display: block; }\\n\\n.box-section-label {\\n  font-style: bold !important;\\n  font-size: larger; }\\n\\n.max-size-indicator {\\n  font-style: italic !important; }\\n\\n.suggestions a:hover {\\n  background-color: #ddd; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/samples/samples.component.scss\n// module id = ./src/app/samples/samples.component.scss\n// module chunks = main","import { Component, OnInit, Input, ViewChildren, QueryList } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, FormArray, Validators, PatternValidator } from '@angular/forms';\r\n\r\nimport { ISample } from './sample';\r\nimport { IFreezer } from '../aliquots/freezer';\r\nimport { IFinalConcentratedSampleVolume } from '../fcsv/final-concentrated-sample-volume';\r\nimport { ISampleType } from '../SHARED/sample-type';\r\nimport { IFilterType } from '../SHARED/filter-type';\r\nimport { IConcentrationType } from '../concentration-types/concentration-type';\r\nimport { IMatrix } from '../SHARED/matrix';\r\nimport { IStudy } from '../studies/study';\r\nimport { IUnit } from '../units/unit';\r\nimport { IUser } from '../SHARED/user';\r\n\r\nimport { SampleService } from './sample.service';\r\nimport { FreezerService } from '../aliquots/freezer.service';\r\nimport { FreezerLocationsService } from '../aliquots/freezer-locations.service';\r\nimport { AliquotService } from 'app/aliquots/aliquot.service';\r\nimport { FinalConcentratedSampleVolumeService } from '../fcsv/final-concentrated-sample-volume.service';\r\nimport { SampleTypeService } from '../SHARED/sample-type.service';\r\nimport { FilterTypeService } from '../SHARED/filter-type.service'\r\nimport { ConcentrationTypeService } from '../concentration-types/concentration-types.service';\r\nimport { MatrixService } from '../SHARED/matrix.service';\r\nimport { StudyService } from '../studies/study.service';\r\nimport { UnitService } from '../units/unit.service';\r\nimport { UserService } from '../SHARED/user.service';\r\n\r\nimport { AnalysisBatchService } from '../analysis-batches/analysis-batch.service';\r\n\r\nimport { StudyFilter } from '../FILTERS/study-filter/study-filter.component'\r\n\r\nimport { DatagridColumn } from \"clarity-angular\";\r\n\r\nimport { APP_UTILITIES } from '../app.utilities';\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\n@Component({\r\n  selector: 'app-samples',\r\n  templateUrl: './samples.component.html',\r\n  styleUrls: ['./samples.component.scss']\r\n})\r\nexport class SamplesComponent implements OnInit {\r\n  allSamples: ISample[];\r\n  pegnegs: ISample[] = [];\r\n  freezers: IFreezer[];\r\n  sampleTypes: ISampleType[];\r\n  filterTypes: IFilterType[];\r\n  recordTypes;\r\n  concentrationTypes: IConcentrationType[];\r\n  matrices: IMatrix[];\r\n  studies: IStudy[];\r\n  units: IUnit[];\r\n  users: IUser[];\r\n  errorMessage: string;\r\n  selectedSample: ISample;\r\n  showHideAdd: boolean = false;\r\n  showHideAddPegNeg: boolean = false;\r\n  showHideEdit: boolean = false;\r\n  showHideABModal: boolean = false;\r\n  addFCSVModalActive: boolean = false;\r\n  editFCSVModalActive: boolean = false;\r\n  freezerLocationAssignModalActive: boolean = false;\r\n  showHidePrintModal: boolean = false;\r\n  showHideFreezeWarningModal: boolean = false;\r\n  showHideFreezerChoiceModal: boolean = false;\r\n  showHideFreezerLocationLookupModal: boolean = false;\r\n  showHideMultipleSamplesErrorModal: boolean = false;\r\n  showHideInhibitionModal: boolean = false;\r\n  showLabelModal: boolean = false;\r\n  sampleSelected: boolean = false;\r\n  displayConfig: Object = {};\r\n  selectedSampleId;\r\n  // following 3 vars hold the 'value' property for the corresponding html select dropdowns - needed to update dropdown for editSample form\r\n  matrixStoredValue: String;\r\n  sampleTypeStoredValue: number;\r\n  studyStoredValue;\r\n  // var to hold the currently selected matrix; used to determine which inputs to show\r\n  matrixSelected: IMatrix;\r\n  //unitValue;\r\n\r\n  public showHideDelete: boolean;\r\n  public showSampleDeleteError: boolean;\r\n  public showSampleDeleteSuccess: boolean;\r\n\r\n  pegnegFromDate: FormControl;\r\n  pegnegToDate: FormControl;\r\n\r\n  samplesCount: null;\r\n  sampleQueryComplete: boolean = false;\r\n\r\n  samplesLoading: boolean = false;\r\n\r\n  onlyOneStudySelected: boolean;\r\n  submitLoading: boolean = false;\r\n\r\n  selected: ISample[] = [];\r\n\r\n  submitted: boolean = false;\r\n\r\n  showSampleCreateError: boolean = false;\r\n  showSampleCreateSuccess: boolean = false;\r\n\r\n  showSampleEditError: boolean = false;\r\n  showSampleEditSuccess: boolean = false;\r\n\r\n  showABCreateError: boolean = false;\r\n  showABCreateSuccess: boolean = false;\r\n\r\n  showFCSVCreateError: boolean = false;\r\n  showFCSVCreateSuccess: boolean = false;\r\n\r\n  showFCSVEditError: boolean = false;\r\n  showFCSVEditSuccess: boolean = false;\r\n\r\n  freezeErrorFlag: boolean = false;\r\n  freezeSuccessFlag: boolean = false;\r\n\r\n  selectedStudy;\r\n\r\n  sampleVolumeErrorFlag: boolean = false;\r\n\r\n  showHideFCSVExistsErrorModal = false;\r\n\r\n  addSampleForm: FormGroup;\r\n\r\n  selectedSampleInhibitionArray = [];\r\n\r\n  createdSampleID;\r\n  createdABID;\r\n  createdFCSVID;\r\n\r\n  createFCSVForm: FormGroup;\r\n  fcsvArray: FormArray;\r\n  fcsvValuesMissingFlag: boolean = false;\r\n\r\n  sampleInhibitionsLoadingFlag: boolean = false;\r\n\r\n  lastOccupiedSpot;\r\n  showLastOccupiedSpot;\r\n  showLastOccupiedSpotError: boolean = false;\r\n  lastOccupiedSpotLoading;\r\n\r\n  noCurrentBoxFlag: boolean = false;\r\n  noCurrentBoxMessage: string = '';\r\n\r\n  aliquotCountErrorFlag: boolean = false;\r\n\r\n  freezeForm: FormGroup;\r\n\r\n  currentBoxSetMax;\r\n  currentBoxSetCount;\r\n  currentBoxShareMax;\r\n  nextBoxSetMax;\r\n  nextBoxSetCount;\r\n  nextBoxShareMax;\r\n\r\n  maxAliquots;\r\n\r\n  initialMeterReading = 2;\r\n\r\n  queryCountLimit;\r\n\r\n  currentFreezerDimensions = {\r\n    \"racks\": null,\r\n    \"boxes\": null,\r\n    \"rows\": null,\r\n    \"spots\": null,\r\n  }\r\n\r\n  samplerNames: string[] = [];\r\n\r\n  showHideMissingFCSVErrorModal: boolean = false;\r\n  // aliquotLabelTextArray = [{\"aliquot_string\": \"\", \"collaborator_sample_id\": \"\"}]\r\n  aliquotLabelTextArray = [];\r\n\r\n  sampleQueryForm: FormGroup;\r\n\r\n  sampleQuerySizeErrorFlag = false;\r\n\r\n  pegnegQuerySizeErrorFlag = false;\r\n  pegnegQueryBlankFlag = false;\r\n  pegnegListLoading = false;\r\n  selectedSamplePegneg;\r\n\r\n  nucleicAcidTypes = [];\r\n\r\n  exportColumns = [\r\n    { fieldName: 'id', colName: \"Sample ID\" },\r\n    { fieldName: 'analysisbatches', colName: \"Analysis Batches\" },\r\n    { fieldName: 'collaborator_sample_id', colName: \"Collaborator Sample ID\" },\r\n    { fieldName: 'study_string', colName: \"Study\" },\r\n    { fieldName: 'sample_type_string', colName: \"Sample Type\" },\r\n    { fieldName: 'record_type_string', colName: \"Record Type\" },\r\n    { fieldName: 'sample_description', colName: \"Sample Description\" },\r\n    { fieldName: 'matrix_string', colName: \"Matrix\" },\r\n    { fieldName: 'filter_flag', colName: \"Filtered\" },\r\n    { fieldName: 'secondary_concentration_flag', colName: \"Secondary Concentration\" },\r\n    { fieldName: 'fcsv', colName: \"FCSV (mL)\" },\r\n    { fieldName: 'fcsv_concentration_type_string', colName: \"FCSV Type\" },\r\n    { fieldName: 'fcsv_notes', colName: \"FCSV Notes\" },\r\n    { fieldName: 'total_volume_or_mass_sampled', colName: \"Total Volume Sampled (L)\" },\r\n    { fieldName: 'meter_reading_initial', colName: \"IMR\" },\r\n    { fieldName: 'meter_reading_final', colName: \"FMR\" },\r\n    { fieldName: 'dissolution_volume', colName: \"Dissolution Volume (mL)\" },\r\n    { fieldName: 'post_dilution_volume', colName: \"Volume After Dilution (uL)\" },\r\n    { fieldName: 'filter_type_string', colName: \"Filter Type\" },\r\n    { fieldName: 'filter_born_on_date', colName: \"Filter Born On Date\" },\r\n    { fieldName: 'collection_start_date', colName: \"Collect Start Date\" },\r\n    { fieldName: 'collection_end_date', colName: \"Collect End Date\" },\r\n    { fieldName: 'study_site_name', colName: \"Study Site Name\" },\r\n    { fieldName: 'sampler_name', colName: \"Sampler Name\" },\r\n    { fieldName: 'sample_notes', colName: \"Sample Notes\" },\r\n    { fieldName: 'created_by', colName: \"Added by\" },\r\n    { fieldName: 'created_date', colName: \"Date Added\" },\r\n    { fieldName: 'modified_by ', colName: \"Updated by\" },\r\n    { fieldName: 'modified_date', colName: \"Date Updated\" }\r\n  ]\r\n\r\n  // edit sample form\r\n  editSampleForm = new FormGroup({\r\n    // the following controls apply to every sample record, regardless of matrix selected\r\n    id: new FormControl(null),\r\n    sample_type: new FormControl(null, Validators.required),\r\n    matrix: new FormControl({ value: null, disabled: false }, Validators.required),\r\n    filter_type: new FormControl(null), // required when not disabled\r\n    study: new FormControl(null, Validators.required),  // study name, maps to study id\r\n    study_site_name: new FormControl(''),\r\n    collaborator_sample_id: new FormControl('', Validators.required),\r\n    sampler_name: new FormControl(''),\r\n    sample_notes: new FormControl(''),\r\n    sample_description: new FormControl(''),\r\n    arrival_date: new FormControl(''),\r\n    arrival_notes: new FormControl(''),\r\n    collection_start_date: new FormControl(null, Validators.required),\r\n\r\n    // the following controls have variable display needs based on the matrix selected\r\n    collection_start_time: new FormControl(null),\r\n    collection_end_date: new FormControl(null),\r\n    collection_end_time: new FormControl(null),\r\n\r\n    meter_reading_initial: new FormControl(null),\r\n    meter_reading_final: new FormControl(null),\r\n    meter_reading_unit: new FormControl(null),\r\n\r\n    total_volume_sampled_initial: new FormControl(null),\r\n    total_volume_sampled_unit_initial: new FormControl(null),\r\n\r\n    total_volume_or_mass_sampled: new FormControl(null),\r\n\r\n    sample_volume_initial: new FormControl(null),\r\n\r\n    filter_born_on_date: new FormControl(null),\r\n    filter_flag: new FormControl(false), // radio button\r\n    secondary_concentration_flag: new FormControl(false), // radio button\r\n    elution_notes: new FormControl(''),\r\n    technician_initials: new FormControl(''),\r\n    dissolution_volume: new FormControl(null), // required when not disabled\r\n    post_dilution_volume: new FormControl(null), // required when not disabled\r\n    peg_neg: new FormControl(null)\r\n  });\r\n\r\n  addPegNegForm = new FormGroup({\r\n    // the following controls apply to every sample record, regardless of matrix selected\r\n    sample_type: new FormControl(null),\r\n    matrix: new FormControl(null),\r\n    filter_type: new FormControl(null),\r\n    study: new FormControl(null),\r\n    study_site_name: new FormControl(''),\r\n    collaborator_sample_id: new FormControl(''),\r\n    sampler_name: new FormControl(''),\r\n    sample_notes: new FormControl(''),\r\n    sample_description: new FormControl(''),\r\n    arrival_date: new FormControl(null),\r\n    arrival_notes: new FormControl(''),\r\n    collection_start_date: new FormControl(null, Validators.required),\r\n    meter_reading_initial: new FormControl(null),\r\n    meter_reading_final: new FormControl(null),\r\n    meter_reading_unit: new FormControl(null),\r\n    total_volume_sampled_initial: new FormControl(null),\r\n    total_volume_sampled_unit_initial: new FormControl(null),\r\n    total_volume_or_mass_sampled: new FormControl(null),\r\n    sample_volume_initial: new FormControl(null),\r\n    filter_born_on_date: new FormControl(null),\r\n    filter_flag: new FormControl(false), // radio button\r\n    secondary_concentration_flag: new FormControl(false), // radio button\r\n    elution_notes: new FormControl(''),\r\n    technician_initials: new FormControl(''),\r\n    dissolution_volume: new FormControl(null),\r\n    record_type: new FormControl(2)\r\n  });\r\n\r\n  skipLabelForm = new FormGroup({\r\n    count: new FormControl(\"0\")\r\n  })\r\n\r\n  createABForm = new FormGroup({\r\n    new_samples: new FormControl([]),\r\n    name: new FormControl(''),\r\n    analysis_batch_description: new FormControl(''),\r\n    analysis_batch_notes: new FormControl('')\r\n  });\r\n\r\n  editFCSVForm = new FormGroup({\r\n    id: new FormControl(null),\r\n    sample: new FormControl(null),\r\n    concentration_type: new FormControl(null),\r\n    final_concentrated_sample_volume: new FormControl(null),\r\n    notes: new FormControl('')\r\n  });\r\n\r\n  @ViewChildren(DatagridColumn) columns: QueryList<DatagridColumn>;\r\n\r\n  buildFreezeForm() {\r\n    this.freezeForm = this.formBuilder.group({\r\n      freezer: [1, Validators.required],\r\n      frozen: [true, Validators.required],\r\n      aliquots_per_sample: 3,\r\n      total_aliquots: null,\r\n      available_spots_in_box: null,\r\n      aliquot_count_share: [{ value: 0 }, [Validators.required, Validators.min(0), Validators.max(this.currentBoxShareMax)]],\r\n      rack: [{ value: null }, [Validators.required, Validators.min(1)]],\r\n      box: [{ value: null }, [Validators.required, Validators.min(1)]],\r\n      row: [{ value: null }, [Validators.required, Validators.min(1)]],\r\n      spot: [{ value: null }, [Validators.required, Validators.min(1)]],\r\n      next_empty_box: this.formBuilder.group({\r\n        aliquot_count_share: [{ value: 0 }, [Validators.min(0), Validators.max(this.nextBoxShareMax)]],\r\n        available_spots_in_box: null,\r\n        rack: [{ value: null }, [Validators.required, Validators.min(1)]],\r\n        box: [{ value: null }, [Validators.required, Validators.min(1)]],\r\n        row: [{ value: null }, [Validators.required, Validators.min(1)]],\r\n        spot: [{ value: null }, [Validators.required, Validators.min(1)]],\r\n      })\r\n    })\r\n  };\r\n\r\n  buildAddSampleForm() {\r\n    this.addSampleForm = this.formBuilder.group({\r\n      // the following controls apply to every sample record, regardless of matrix selected\r\n      matrix: [{ value: null, disabled: false }, Validators.required],\r\n      sample_type: [{ value: null, disabled: true }, Validators.required],\r\n      filter_type: [{ value: null, disabled: true }, Validators.required], // required when not disabled\r\n      study: [{ value: null, disabled: true }, Validators.required],  // study name, maps to study id\r\n      study_site_name: [{ value: '', disabled: true }],\r\n      collaborator_sample_id: [{ value: null, disabled: true }, Validators.required],\r\n      sampler_name: [{ value: '', disabled: true }],\r\n      sample_notes: [{ value: '', disabled: true }],\r\n      sample_description: [{ value: '', disabled: true }],\r\n      arrival_date: [{ value: null, disabled: true }],\r\n      arrival_notes: [{ value: '', disabled: true }],\r\n      collection_start_date: [{ value: null, disabled: true }, Validators.required],\r\n\r\n      // the following controls have variable display needs based on the matrix selected\r\n      collection_start_time: [{ value: null, disabled: false }, Validators.pattern('\\\\d\\\\d:\\\\d\\\\d')],\r\n      collection_end_date: [{ value: null, disabled: true }],\r\n      collection_end_time: [{ value: null, disabled: true }, Validators.pattern('\\\\d\\\\d:\\\\d\\\\d')],\r\n      meter_reading_initial: [{ value: null, disabled: true }, [Validators.min(0), this.validateInitialMeterReading.bind(this)]],\r\n      meter_reading_final: [{ value: null, disabled: true }, [Validators.min(0), this.validateFinalMeterReading.bind(this)]],\r\n      meter_reading_unit: [{ value: null, disabled: true }],\r\n      // total_volume_sampled_initial is the intital volume entered, before conversion based on unit selection\r\n      total_volume_sampled_initial: [{ value: null, disabled: true }],\r\n      total_volume_sampled_unit_initial: [{ value: null, disabled: true }],\r\n      sample_volume_initial: [{ value: null, disabled: true }],\r\n      filter_born_on_date: [{ value: null, disabled: true }],\r\n      filter_flag: [{ value: false, disabled: true }], // radio button\r\n      secondary_concentration_flag: [{ value: false, disabled: true }], // radio button\r\n      technician_initials: [{ value: '', disabled: true }],\r\n      elution_notes: [{ value: '', disabled: true }],\r\n      dissolution_volume: [{ value: null, disabled: true }],\r\n      post_dilution_volume: [{ value: null, disabled: true }],\r\n      peg_neg: null\r\n\r\n    })\r\n  }\r\n\r\n  buildCreateFCSVForm() {\r\n    this.createFCSVForm = this.formBuilder.group({\r\n      fcsv_array: this.formBuilder.array([\r\n        this.formBuilder.group({\r\n          sample: null,\r\n          concentration_type: [null, Validators.required],\r\n          final_concentrated_sample_volume: [null, Validators.required],\r\n          fcsv_units: [5, Validators.required],\r\n          notes: ''\r\n        })\r\n      ])\r\n    })\r\n    this.fcsvArray = this.createFCSVForm.get('fcsv_array') as FormArray;\r\n  }\r\n\r\n  buildSampleQueryForm() {\r\n    this.sampleQueryForm = this.formBuilder.group({\r\n      study: null,\r\n      from_id: null,\r\n      to_id: null,\r\n      from_collection_start_date: null,\r\n      to_collection_start_date: null,\r\n      collaborator_sample_id: null,\r\n      sample_type: null,\r\n      matrix: null,\r\n      record_type: null,\r\n      peg_neg: null\r\n    })\r\n  }\r\n\r\n  constructor(private _sampleService: SampleService,\r\n    private _finalConcentratedSampleVolumeService: FinalConcentratedSampleVolumeService,\r\n    private _studyService: StudyService,\r\n    private _sampleTypeService: SampleTypeService,\r\n    private _freezerService: FreezerService,\r\n    private _freezerLocationsService: FreezerLocationsService,\r\n    private _aliquotService: AliquotService,\r\n    private _filterTypeService: FilterTypeService,\r\n    private _concentrationTypeService: ConcentrationTypeService,\r\n    private _matrixService: MatrixService,\r\n    private _unitService: UnitService,\r\n    private _userService: UserService,\r\n    private _analysisBatchService: AnalysisBatchService,\r\n    private formBuilder: FormBuilder\r\n  ) {\r\n    this.buildSampleQueryForm();\r\n    this.buildAddSampleForm();\r\n    this.buildCreateFCSVForm();\r\n    this.buildFreezeForm();\r\n\r\n    this.pegnegFromDate = new FormControl();\r\n    this.pegnegToDate = new FormControl();\r\n  }\r\n\r\n  validateFinalMeterReading = (control: FormControl) => {\r\n    let value = control.value;\r\n    if (this.addSampleForm.get('meter_reading_initial').value === null) { return null };\r\n    if (value <= this.addSampleForm.get('meter_reading_initial').value) {\r\n      return {\r\n        value: {\r\n          value: value\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  validateInitialMeterReading = (control: FormControl) => {\r\n    let value = control.value;\r\n    if (this.addSampleForm.get('meter_reading_final').value === null) { return null };\r\n    if (value >= this.addSampleForm.get('meter_reading_final').value) {\r\n      return {\r\n        value: {\r\n          value: value\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getTime(date?: Date) {\r\n    return date != null ? date.getTime() : 0;\r\n  }\r\n\r\n  isInArray(value, array) {\r\n    return array.indexOf(value) > -1;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.showHideDelete = false;\r\n\r\n    this.queryCountLimit = APP_SETTINGS.QUERY_COUNT_LIMIT;\r\n\r\n    this.nucleicAcidTypes = APP_SETTINGS.NUCLEIC_ACID_TYPES;\r\n\r\n    //this.samplesLoading = true;\r\n\r\n    // on init, get sample form config object from App Utilities and set to local displayConfig var\r\n    this.displayConfig = APP_UTILITIES.SAMPLE_FORM_CONFIG;\r\n\r\n    // on init, get sample record types object from App Settings and set to local recordTypes var\r\n    this.recordTypes = APP_SETTINGS.SAMPLE_RECORD_TYPES;\r\n\r\n    // on init call call populatePegnegList();\r\n    this.populatePegnegList();\r\n\r\n    // on init call getSamplerNames of the SampleService, set results to the samplerNames var\r\n    this._sampleService.getSamplerNames()\r\n      .subscribe(\r\n        (samplerNamesResponse) => {\r\n          this.samplerNames = samplerNamesResponse.sampler_names;\r\n        },\r\n        error => {\r\n          this.errorMessage = error\r\n        });\r\n\r\n    // on init, call getFreezers function of the FreezerService, set results to the freezers var\r\n    this._freezerService.getFreezers()\r\n      .subscribe(\r\n        (freezers) => {\r\n          this.freezers = freezers;\r\n        },\r\n        error => {\r\n          this.errorMessage = error\r\n        });\r\n\r\n    // on init, call getSampleTypes function of the SampleTypeService, set results to the sampleTypes var\r\n    this._sampleTypeService.getSampleTypes()\r\n      .subscribe(sampleTypes => this.sampleTypes = sampleTypes,\r\n        error => this.errorMessage = error);\r\n\r\n    // on init, call getFilterTypes function of the SampleTypeService, set results to the sampleTypes var\r\n    this._filterTypeService.getFilterTypes()\r\n      .subscribe(filterTypes => this.filterTypes = filterTypes,\r\n        error => this.errorMessage = error);\r\n\r\n    // on init, call getConcentrationTypes function of the ConcentrationTypeService, set results to the sampleTypes var\r\n    this._concentrationTypeService.getConcentrationTypes()\r\n      .subscribe(concentrationTypes => this.concentrationTypes = concentrationTypes,\r\n        error => this.errorMessage = error);\r\n\r\n    // on init, call getMatrices function of the MatrixService, set results to the matrices var\r\n    this._matrixService.getMatrices()\r\n      .subscribe(matrices => this.matrices = matrices,\r\n        error => this.errorMessage = error);\r\n\r\n    // on init, call getStudies function of the StudyService, set results to the studies var\r\n    this._studyService.getStudies()\r\n      .subscribe(\r\n        studies => {\r\n          this.studies = studies\r\n          this.studies.sort(function (a, b) {\r\n            if (a.name < b.name) { return -1; }\r\n            if (a.name > b.name) { return 1; }\r\n            return 0;\r\n          });\r\n        },\r\n        error => this.errorMessage = error);\r\n\r\n    // on init, call getUnits function of the UnitService, set results to the units var\r\n    this._unitService.getUnits()\r\n      .subscribe(units => this.units = units,\r\n        error => this.errorMessage = error);\r\n\r\n    // on init, call getUsers function of the UserService, set results to the units var\r\n    this._userService.getUsers()\r\n      .subscribe(users => this.users = users,\r\n        error => this.errorMessage = error);\r\n\r\n    this.freezeForm.get('freezer').valueChanges.subscribe(val => {\r\n      // set the maxes for freezer location inputs\r\n      for (let freezer of this.freezers) {\r\n        if (freezer.id === Number(val)) {\r\n          this.currentFreezerDimensions = {\r\n            \"racks\": freezer.racks,\r\n            \"boxes\": freezer.boxes,\r\n            \"rows\": freezer.rows,\r\n            \"spots\": freezer.spots\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    this.freezeForm.get('aliquots_per_sample').valueChanges.subscribe(val => {\r\n      const sampleCount = this.selected.length;\r\n      const totalAliquots = sampleCount * val;\r\n      this.freezeForm.get('total_aliquots').setValue(totalAliquots);\r\n\r\n      // get aliquots per sample and available spots in box; calculate and update currentBoxShareMax\r\n      const aliquotsPerSample = this.freezeForm.get('aliquots_per_sample').value;\r\n\r\n      const availableSpotsInCurrentBox = this.freezeForm.get('available_spots_in_box').value;\r\n      this.currentBoxSetMax = (Math.trunc(availableSpotsInCurrentBox / aliquotsPerSample));\r\n      this.currentBoxShareMax = (Math.trunc(availableSpotsInCurrentBox / aliquotsPerSample)) * aliquotsPerSample;\r\n\r\n      this.currentBoxSetCount = (Math.trunc(totalAliquots / aliquotsPerSample));\r\n\r\n      const availableSpotsInNextBox = this.freezeForm.get('next_empty_box').get('available_spots_in_box').value;\r\n      this.nextBoxSetMax = (Math.trunc(availableSpotsInNextBox / aliquotsPerSample));\r\n      this.nextBoxShareMax = this.nextBoxSetMax * aliquotsPerSample;\r\n\r\n      this.maxAliquots = this.currentBoxShareMax + this.nextBoxShareMax;\r\n\r\n      // tslint:disable-next-line:max-line-length\r\n      this.freezeForm.get('aliquot_count_share').setValidators([Validators.required, Validators.min(0), Validators.max(this.currentBoxShareMax)]);\r\n      // tslint:disable-next-line:max-line-length\r\n      this.freezeForm.get('next_empty_box').get('aliquot_count_share').setValidators([Validators.min(0), Validators.max(this.nextBoxShareMax)]);\r\n\r\n      this.freezeForm.get('total_aliquots').setValidators([Validators.min(0), Validators.max(this.maxAliquots)]);\r\n\r\n      this.freezeForm.get('aliquot_count_share').setValue(Math.min(this.currentBoxShareMax, totalAliquots));\r\n      this.freezeForm.get('next_empty_box').get('aliquot_count_share').setValue(Math.max(0, (totalAliquots - this.currentBoxShareMax)));\r\n\r\n    });\r\n\r\n  }\r\n\r\n  populatePegnegList() {\r\n    this._sampleService.getRecentPegnegs()\r\n      .subscribe(\r\n        (pegnegs) => {\r\n          this.pegnegs = pegnegs\r\n          this.pegnegs.sort(function (a, b) {\r\n            const c: Date = new Date(a.collection_start_date);\r\n            const d: Date = new Date(b.collection_start_date);\r\n            return (d.getTime()) - (c.getTime());\r\n          });\r\n        },\r\n        error => {\r\n          this.errorMessage = error\r\n        }\r\n      );\r\n  }\r\n\r\n  // onUnitChange(unitValue) {\r\n  //   // sets the var unitValue used for meter reading unit display\r\n  //   this.unitValue = parseInt(unitValue, 10);\r\n  // }\r\n\r\n  deselectAll() {\r\n    this.selected = [];\r\n  }\r\n\r\n  exportToCSV() {\r\n    const hiddenColumns = this.gethiddenColumns();\r\n    let slaveArray = [];\r\n    let exportData = slaveArray.concat(this.allSamples);\r\n\r\n    // new attempt\r\n    for (let item of exportData) {\r\n      for (let column of hiddenColumns) {\r\n        delete item[column.field]\r\n      }\r\n    }\r\n\r\n    // for (let i = 0; i < exportData.length; i++) {\r\n    //   for (let column of hiddenColumns) {\r\n    //     delete exportData[i][column.field]\r\n    //   }\r\n    // }\r\n\r\n\r\n\r\n    // loop through the exportData array\r\n    // for (let i = 0; i < exportData.length; i++) {\r\n    //   /// on each item, loop through the hiddenColumns array\r\n    //   for (let column of hiddenColumns) {\r\n\r\n    //     // if the property name of the exportData item matches the hiddenColumn field name, remove it\r\n    //     let propertyName = Object.getOwnPropertyNames(exportData[i])[i];\r\n    //     if (propertyName === column.field) {\r\n    //       delete exportData[i][propertyName];\r\n    //     }\r\n    //   }\r\n    // }\r\n\r\n    const filename = 'LIDE_Sample_Data_Report_' + APP_UTILITIES.TODAY + '.csv';\r\n    APP_UTILITIES.generateCSV({ filename: filename, data: exportData, headers: this.exportColumns });\r\n  }\r\n\r\n  gethiddenColumns() {\r\n    return this.columns.filter(column => column.hidden);\r\n  }\r\n\r\n  updatePegnegList() {\r\n\r\n    this.pegnegs = [];\r\n\r\n    const countLimit = 40;\r\n\r\n    let pegnegQuery = {\r\n      study: null,\r\n      from_id: null,\r\n      to_id: null,\r\n      collaborator_sample_id: null,\r\n      sample_type: null,\r\n      matrix: null,\r\n      from_collection_start_date: this.pegnegFromDate.value,\r\n      to_collection_start_date: this.pegnegToDate.value,\r\n      record_type: 2\r\n    }\r\n\r\n    this._sampleService.querySamplesCount(pegnegQuery)\r\n      .subscribe(\r\n        (count) => {\r\n\r\n          this.pegnegListLoading = true;\r\n          // if count exceeds limit, show error message\r\n          if (count.count >= countLimit) {\r\n            this.pegnegQuerySizeErrorFlag = true;\r\n            this.samplesLoading = false;\r\n          } else if (count.count < countLimit) {\r\n\r\n\r\n            // if sample query count does not exceed functional limit, query for actual results, and set results to the allSamples var\r\n            this._sampleService.querySamples(pegnegQuery)\r\n              .subscribe(\r\n                (samples) => {\r\n\r\n                  this.sampleQueryComplete = true;\r\n                  this.pegnegs = samples\r\n                  this.pegnegListLoading = false;\r\n\r\n                  // sort pegnegs by date order\r\n                  this.pegnegs.sort(function (a, b) {\r\n                    const c: Date = new Date(a.collection_start_date);\r\n                    const d: Date = new Date(b.collection_start_date);\r\n                    return (d.getTime()) - (c.getTime());\r\n                  });\r\n\r\n                  if (this.pegnegs.length === 0) {\r\n                    this.pegnegQueryBlankFlag = true;\r\n                  }\r\n                },\r\n                error => {\r\n                  this.errorMessage = error;\r\n                  this.pegnegListLoading = false;\r\n                }\r\n              );\r\n          }\r\n        },\r\n        error => {\r\n          this.errorMessage = error;\r\n          this.pegnegListLoading = false;\r\n        }\r\n      );\r\n\r\n  }\r\n\r\n  // callback for the create analysis batch button\r\n  createAB(selectedSampleArray) {\r\n\r\n    // grab just IDs of the selected samples\r\n    let sampleIDs = [];\r\n    for (let sample of selectedSampleArray) {\r\n      sampleIDs.push(sample.id);\r\n    }\r\n\r\n    this.createABForm.setValue({\r\n      new_samples: sampleIDs,\r\n      name: '',\r\n      analysis_batch_description: '',\r\n      analysis_batch_notes: ''\r\n    })\r\n    // show the AB modal if not showing already\r\n    if (this.showHideABModal === false) {\r\n      this.showHideABModal = true;\r\n    }\r\n  }\r\n\r\n  onFCSVUnitSelectBulk(unitID) {\r\n    for (let control of this.fcsvArray.controls) {\r\n      control.get('fcsv_units').setValue(unitID);\r\n    }\r\n\r\n  }\r\n\r\n  createFCSV(selectedSamples) {\r\n    // reset the fcsvArray controls to a blank array so it doesnt get populated twice\r\n    this.fcsvArray.controls = [];\r\n\r\n    // check if any of the samples selected already have FCSV\r\n    for (let sample of selectedSamples) {\r\n      if (sample.finalconcentratedsamplevolume != null) {\r\n        this.showHideFCSVExistsErrorModal = true;\r\n        return;\r\n      }\r\n    }\r\n\r\n    for (let sample of selectedSamples) {\r\n      let formGroup: FormGroup = this.formBuilder.group({\r\n        sample: sample.id,\r\n        concentration_type: null,\r\n        final_concentrated_sample_volume: null,\r\n        fcsv_units: 5,\r\n        notes: ''\r\n      })\r\n      this.fcsvArray.push(formGroup);\r\n    }\r\n    // show the add FCSV modal modal if not showing already\r\n    if (this.addFCSVModalActive === false) {\r\n      this.addFCSVModalActive = true;\r\n    }\r\n  }\r\n\r\n  editFCSV(selection) {\r\n\r\n    const selectedSample = selection[0];\r\n\r\n    this.editFCSVForm.setValue({\r\n      id: null,\r\n      sample: selectedSample.id,\r\n      concentration_type: selectedSample.finalconcentratedsamplevolume.concentration_type,\r\n      final_concentrated_sample_volume: selectedSample.finalconcentratedsamplevolume.final_concentrated_sample_volume,\r\n      notes: selectedSample.finalconcentratedsamplevolume.notes\r\n    })\r\n\r\n    // show the edit FCSV modal modal if not showing already\r\n    if (this.editFCSVModalActive === false) {\r\n      this.editFCSVModalActive = true;\r\n    }\r\n\r\n  }\r\n\r\n  openFreezerChoice() {\r\n    this.showHideFreezerChoiceModal = true;\r\n  }\r\n\r\n  lookupFreezerLocation() {\r\n    this.showHideFreezerChoiceModal = false;\r\n    this.showHideFreezerLocationLookupModal = true;\r\n\r\n  }\r\n\r\n  lookupMatrixTypeID(code) {\r\n    for (let matrix of this.matrices) {\r\n      if (code === matrix.code) {\r\n        return matrix.id;\r\n      }\r\n    }\r\n  }\r\n\r\n  // lookupFreezerDimensions(freezerID, dimension) {\r\n  //   for (let freezer of this.freezers) {\r\n  //     if (freezer.id === freezerID) {\r\n  //       return freezer[dimension];\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n\r\n  includeExcludeLabel(event) {\r\n\r\n    if (event.checked === false) {\r\n      for (let aliquot of this.aliquotLabelTextArray) {\r\n        if (event.value === aliquot.aliquot_string) {\r\n          aliquot.include = false;\r\n        }\r\n      }\r\n    } else if (event.checked === true) {\r\n      for (let aliquot of this.aliquotLabelTextArray) {\r\n        if (event.value === aliquot.aliquot_string) {\r\n          aliquot.include = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createLabelPDF() {\r\n    let spacesToSkip = Number(this.skipLabelForm.value.count);\r\n    let labelParts: Array<any> = [];\r\n    labelParts.push(spacesToSkip);\r\n    labelParts.push(this.aliquotLabelTextArray);\r\n    // first skip down number of spaces from spacesToSkip variable, then loop through this.aliquotLabelTextArray and if include === true,\r\n    // place the aliquot_string value centered on one line, and the collaborator_sample_id below it on the next line. Important to check for include === true. \r\n    this._sampleService.setLabelParts(labelParts);\r\n    this.showLabelModal = true;\r\n  }\r\n\r\n  openPrintLabelModal(selectedSampleArray) {\r\n    this.aliquotLabelTextArray = [];\r\n    for (let sample of selectedSampleArray) {\r\n      for (let aliquot of sample.aliquots) {\r\n        this.aliquotLabelTextArray.push({\r\n          \"include\": true,\r\n          \"aliquot_string\": aliquot.aliquot_string,\r\n          \"collaborator_sample_id\": sample.collaborator_sample_id\r\n        });\r\n      }\r\n    }\r\n\r\n    // show the print modal if not showing already\r\n    if (this.showHidePrintModal === false) {\r\n      this.showHidePrintModal = true;\r\n    }\r\n\r\n  }\r\n\r\n  openInhibitionModal(selected) {\r\n    this.sampleInhibitionsLoadingFlag = true;\r\n\r\n    const selectedSampleID = selected[0].id;\r\n\r\n    this.selectedSampleId = selectedSampleID;\r\n\r\n    this._sampleService.getSampleInhibitions(selectedSampleID)\r\n      .subscribe(\r\n        (sampleInhibitions) => {\r\n          this.selectedSampleInhibitionArray = sampleInhibitions[0].inhibitions;\r\n          this.showHideInhibitionModal = true;\r\n          this.sampleInhibitionsLoadingFlag = false;\r\n        },\r\n        error => {\r\n          this.errorMessage = error\r\n          this.sampleInhibitionsLoadingFlag = false;\r\n        });\r\n\r\n\r\n    // show the print modal if not showing already\r\n    if (this.showHideInhibitionModal === false) {\r\n      this.showHideInhibitionModal = true;\r\n    }\r\n  }\r\n\r\n\r\n  addSample() {\r\n    if (this.showHideAdd === false) {\r\n      this.showHideAdd = true;\r\n    }\r\n  }\r\n\r\n\r\n  // show delete Sample type modal\r\n  public deleteSample(selectedSample){\r\n    console.log(selectedSample);\r\n    this.showSampleDeleteSuccess = false; //reset this\r\n    this.showSampleDeleteError = false; //reset this too\r\n    this.selectedSampleId = selectedSample.id;\r\n    // show the delete Filter form if not showing already\r\n    if (this.showHideDelete === false) {\r\n      this.showHideDelete = true;\r\n    }    \r\n  }\r\n\r\n  \r\n  public submitDelete(){\r\n    this._sampleService.delete(this.selectedSampleId)\r\n    .subscribe(\r\n      () => {\r\n      this.selectedSample = undefined;\r\n      this.submitLoading = false;\r\n      this.showSampleDeleteSuccess = true;\r\n    },\r\n    error => {\r\n      this.errorMessage = <any>error;\r\n      this.submitLoading = false;\r\n      this.showSampleDeleteError = true;\r\n    }\r\n    );\r\n  }\r\n\r\n\r\n  editSample(selectedSample) {\r\n\r\n    this.selectedSamplePegneg = null;\r\n    this.selectedSample = selectedSample;\r\n\r\n    if (selectedSample.peg_neg) {\r\n\r\n      this._sampleService.getSampleSelection(selectedSample.peg_neg)\r\n        .subscribe(\r\n          (pegnegArray) => {\r\n            this.selectedSamplePegneg = pegnegArray[0];\r\n\r\n\r\n            this.editSampleForm.setValue({\r\n              id: selectedSample.id,\r\n              matrix: selectedSample.matrix,\r\n              study: selectedSample.study,\r\n              sample_type: selectedSample.sample_type,\r\n              collaborator_sample_id: selectedSample.collaborator_sample_id,\r\n              filter_flag: selectedSample.filter_flag,\r\n              secondary_concentration_flag: selectedSample.secondary_concentration_flag,\r\n              study_site_name: selectedSample.study_site_name,\r\n              sample_description: selectedSample.sample_description,\r\n              sampler_name: selectedSample.sampler_name,\r\n              sample_notes: selectedSample.sample_notes,\r\n              arrival_date: selectedSample.arrival_date,\r\n              arrival_notes: selectedSample.arrival_notes,\r\n              collection_start_date: selectedSample.collection_start_date,\r\n              collection_start_time: selectedSample.collection_start_time,\r\n              collection_end_date: selectedSample.collection_end_date,\r\n              collection_end_time: selectedSample.collection_end_time,\r\n              meter_reading_initial: selectedSample.meter_reading_initial,\r\n              meter_reading_final: selectedSample.meter_reading_final,\r\n              meter_reading_unit: selectedSample.meter_reading_unit,\r\n              total_volume_sampled_initial: selectedSample.total_volume_sampled_initial,\r\n              total_volume_sampled_unit_initial: selectedSample.total_volume_sampled_unit_initial,\r\n              total_volume_or_mass_sampled: selectedSample.total_volume_or_mass_sampled,\r\n              post_dilution_volume: selectedSample.post_dilution_volume,\r\n              filter_type: selectedSample.filter_type,\r\n              filter_born_on_date: selectedSample.filter_born_on_date,\r\n              dissolution_volume: selectedSample.dissolution_volume,\r\n              elution_notes: selectedSample.elution_notes,\r\n              technician_initials: selectedSample.technician_initials,\r\n              sample_volume_initial: selectedSample.sample_volume_initial,\r\n              peg_neg: selectedSample.peg_neg\r\n            })\r\n\r\n            // show the edit sample modal if not showing already\r\n            if (this.showHideEdit === false) {\r\n              this.showHideEdit = true;\r\n            }\r\n\r\n            this.sampleSelected = true;\r\n          },\r\n          error => {\r\n            this.errorMessage = error\r\n            alert(\"Error retrieving Peg Neg for selected sample. \")\r\n          });\r\n\r\n\r\n    } else {\r\n\r\n      this.editSampleForm.setValue({\r\n        id: selectedSample.id,\r\n        matrix: selectedSample.matrix,\r\n        study: selectedSample.study,\r\n        sample_type: selectedSample.sample_type,\r\n        collaborator_sample_id: selectedSample.collaborator_sample_id,\r\n        filter_flag: selectedSample.filter_flag,\r\n        secondary_concentration_flag: selectedSample.secondary_concentration_flag,\r\n        study_site_name: selectedSample.study_site_name,\r\n        sample_description: selectedSample.sample_description,\r\n        sampler_name: selectedSample.sampler_name,\r\n        sample_notes: selectedSample.sample_notes,\r\n        arrival_date: selectedSample.arrival_date,\r\n        arrival_notes: selectedSample.arrival_notes,\r\n        collection_start_date: selectedSample.collection_start_date,\r\n        collection_start_time: selectedSample.collection_start_time,\r\n        collection_end_date: selectedSample.collection_end_date,\r\n        collection_end_time: selectedSample.collection_end_time,\r\n        meter_reading_initial: selectedSample.meter_reading_initial,\r\n        meter_reading_final: selectedSample.meter_reading_final,\r\n        meter_reading_unit: selectedSample.meter_reading_unit,\r\n        total_volume_sampled_initial: selectedSample.total_volume_sampled_initial,\r\n        total_volume_sampled_unit_initial: selectedSample.total_volume_sampled_unit_initial,\r\n        total_volume_or_mass_sampled: selectedSample.total_volume_or_mass_sampled,\r\n        post_dilution_volume: selectedSample.post_dilution_volume,\r\n        filter_type: selectedSample.filter_type,\r\n        filter_born_on_date: selectedSample.filter_born_on_date,\r\n        dissolution_volume: selectedSample.dissolution_volume,\r\n        elution_notes: selectedSample.elution_notes,\r\n        technician_initials: selectedSample.technician_initials,\r\n        sample_volume_initial: selectedSample.sample_volume_initial,\r\n        peg_neg: selectedSample.peg_neg\r\n      })\r\n\r\n      // show the edit sample modal if not showing already\r\n      if (this.showHideEdit === false) {\r\n        this.showHideEdit = true;\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  onMatrixSelect(selectedMatrixString) {\r\n\r\n    console.log(\"Matrix selected:\" + selectedMatrixString);\r\n    let selectedMatrix = Number(selectedMatrixString);\r\n    // loop through displayConfig variables for the selected matrix, from the config JSON file (all boolean)\r\n    for (let i in this.displayConfig[selectedMatrix]) {\r\n\r\n      if (this.displayConfig[selectedMatrix].hasOwnProperty(i)) {\r\n\r\n        switch (this.displayConfig[selectedMatrix][i]) {\r\n          case (true): {\r\n            // if disabled == true, disable corresponding control\r\n            this.addSampleForm.controls[i].disable();\r\n            this.addSampleForm.controls[i].reset();\r\n            break;\r\n          }\r\n          case (false): {\r\n            // if disabled == false, enable corresponding control\r\n            this.addSampleForm.controls[i].enable();\r\n            break;\r\n          }\r\n          default: {\r\n            // default to enabled\r\n            this.addSampleForm.controls[i].enable();\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private updateSamplesArray(newItem) {\r\n    let updateItem = this.allSamples.find(this.findIndexToUpdate, newItem.id);\r\n\r\n    let index = this.allSamples.indexOf(updateItem);\r\n\r\n    this.allSamples[index] = newItem;\r\n  }\r\n\r\n  private findIndexToUpdate(newItem) {\r\n    return newItem.id === this;\r\n  }\r\n\r\n  // callback for the freeze samples button\r\n  assignFreezerLocation(selectedSampleArray) {\r\n\r\n    this.showHideFreezerChoiceModal = false;\r\n    this.noCurrentBoxFlag = false;\r\n    this.showHideMissingFCSVErrorModal = false;\r\n    // this.lastOccupiedSpotLoading = true;\r\n    // this.showLastOccupiedSpot = false;\r\n    // this.showLastOccupiedSpotError = false;\r\n\r\n    // if any sample in the selection lacks an FCSV value AND has a matrix that requires one, show error\r\n    for (let sample of selectedSampleArray) {\r\n      if (sample.finalconcentratedsamplevolume === null &&\r\n        (sample.matrix === (this.lookupMatrixTypeID(\"W\"))\r\n          || sample.matrix === (this.lookupMatrixTypeID(\"WW\"))\r\n          || sample.matrix === (this.lookupMatrixTypeID(\"F\")))) {\r\n        this.showHideMissingFCSVErrorModal = true;\r\n        return;\r\n      }\r\n    }\r\n\r\n    // set the maxes for freezer location inputs\r\n    for (let freezer of this.freezers) {\r\n      if (freezer.id === this.freezeForm.get('freezer').value) {\r\n        this.currentFreezerDimensions = {\r\n          \"racks\": freezer.racks,\r\n          \"boxes\": freezer.boxes,\r\n          \"rows\": freezer.rows,\r\n          \"spots\": freezer.spots\r\n        }\r\n      }\r\n    }\r\n\r\n    // assign the onlyOneStudySelected var to the output of an Array.prototype.every() function\r\n    // checks if all the values for study are the same in the selected samples array\r\n    this.onlyOneStudySelected = selectedSampleArray.every(\r\n      function (value, _, array) {\r\n        return array[0].study === value.study;\r\n      });\r\n\r\n    // alert user they are attempting to select a set of studies for freezing that belong to more than one study\r\n    // show freeze warning modal if multiple studies, else show the freeze modal\r\n    if (this.onlyOneStudySelected === false) {\r\n      this.showHideFreezeWarningModal = true\r\n    } else if (this.onlyOneStudySelected === true) {\r\n\r\n      // lookup the suggested locations (next available)\r\n      const studyID = selectedSampleArray[0].study;\r\n      this._freezerLocationsService.getNextAvailable(studyID)\r\n        .subscribe(\r\n          (nextAvailable) => {\r\n            //  this.lastOccupiedSpot = lastOccupiedSpot[0];\r\n            // this.lastOccupiedSpotLoading = false;\r\n            // this.showLastOccupiedSpot = true;\r\n            // this.showLastOccupiedSpotError = false;\r\n\r\n            // get the sample count\r\n            const sampleCount = selectedSampleArray.length;\r\n            // get aliquots per sample from freezeForm\r\n            const aliquotsPerSample = this.freezeForm.get('aliquots_per_sample').value;\r\n            // calculate a totalAliquots number to patch into freezeForm control\r\n            const totalAliquots = sampleCount * aliquotsPerSample;\r\n\r\n            // if there is no current box for the study\r\n            if (nextAvailable.not_found) {\r\n              // show no current box message\r\n              this.noCurrentBoxMessage = nextAvailable.not_found;\r\n              this.noCurrentBoxFlag = true;\r\n              this.currentBoxShareMax = null;\r\n              this.freezeForm.patchValue({\r\n                total_aliquots: totalAliquots,\r\n                available_spots_in_box: 0\r\n              });\r\n            }\r\n\r\n            // if there is a box with aliquots for the study ('box' field will exist in this case)\r\n            if (nextAvailable.box) {\r\n              const availableSpotsInCurrentBox = nextAvailable.available_spots_in_box;\r\n              this.currentBoxSetMax = (Math.trunc(availableSpotsInCurrentBox / aliquotsPerSample));\r\n              this.currentBoxShareMax = (Math.trunc(availableSpotsInCurrentBox / aliquotsPerSample)) * aliquotsPerSample;\r\n\r\n              // show both current box loc and next loc box\r\n              this.noCurrentBoxFlag = false;\r\n              this.freezeForm.patchValue({\r\n                available_spots_in_box: nextAvailable.available_spots_in_box,\r\n                aliquot_count_share: this.currentBoxShareMax,\r\n                rack: nextAvailable.rack,\r\n                box: nextAvailable.box,\r\n                row: nextAvailable.row,\r\n                spot: nextAvailable.spot\r\n              });\r\n              // this.currentBoxShareMax = (Math.trunc(nextAvailable.available_spots_in_box / aliquotsPerSample) * aliquotsPerSample);\r\n\r\n            }\r\n\r\n            // show the freeze modal if not showing already\r\n            if (this.freezerLocationAssignModalActive === false) {\r\n              this.freezerLocationAssignModalActive = true;\r\n            }\r\n\r\n            ///////////////////////////\r\n\r\n            this.freezeForm.patchValue({\r\n              total_aliquots: totalAliquots,\r\n              // available_spots_in_box: nextAvailable.available_spots_in_box,\r\n              next_empty_box: {\r\n                aliquot_count_share: (Math.max(0, (totalAliquots - this.currentBoxShareMax))),\r\n                available_spots_in_box: nextAvailable.next_empty_box.available_spots_in_box,\r\n                rack: nextAvailable.next_empty_box.rack,\r\n                box: nextAvailable.next_empty_box.box,\r\n                row: nextAvailable.next_empty_box.row,\r\n                spot: nextAvailable.next_empty_box.spot\r\n              }\r\n            });\r\n\r\n            // tslint:disable-next-line:max-line-length\r\n            this.freezeForm.get('aliquot_count_share').setValidators([Validators.required, Validators.min(0), Validators.max(this.currentBoxShareMax)]);\r\n            // tslint:disable-next-line:max-line-length\r\n            this.freezeForm.get('next_empty_box').get('aliquot_count_share').setValidators([Validators.min(0), Validators.max(this.nextBoxShareMax)]);\r\n\r\n            const availableSpotsInNextBox = this.freezeForm.get('next_empty_box').get('available_spots_in_box').value;\r\n            this.nextBoxSetMax = (Math.trunc(availableSpotsInNextBox / aliquotsPerSample));\r\n            this.nextBoxShareMax = this.nextBoxSetMax * aliquotsPerSample;\r\n            this.maxAliquots = this.currentBoxShareMax + this.nextBoxShareMax;\r\n\r\n            this.freezeForm.get('total_aliquots').setValidators([Validators.min(0), Validators.max(this.maxAliquots)]);\r\n\r\n            this.freezeForm.get('aliquot_count_share').setValue(Math.min(this.currentBoxShareMax, totalAliquots));\r\n            // tslint:disable-next-line:max-line-length\r\n            this.freezeForm.get('next_empty_box').get('aliquot_count_share').setValue(Math.max(0, (totalAliquots - this.currentBoxShareMax)));\r\n\r\n          },\r\n          error => {\r\n            alert(\"There was an error retrieving the last occupied freezer spot.\")\r\n            // this.lastOccupiedSpotLoading = false;\r\n            // this.showLastOccupiedSpot = false;\r\n            // this.showLastOccupiedSpotError = true;\r\n          }\r\n        )\r\n    }\r\n    this.selectedStudy = this.selected[0].study;\r\n  }\r\n\r\n\r\n  onSubmitFreezerLocation(formValue) {\r\n\r\n    this.resetFlags();\r\n    this.submitLoading = true;\r\n\r\n    let submissionArray = [];\r\n\r\n    let currentBoxSampleCount = 0;\r\n    let nextBoxSampleCount = 0;\r\n\r\n    this.aliquotCountErrorFlag = false;\r\n\r\n    // check if aliquot share count exceeds the total number of aliquots expected\r\n    if (formValue.aliquot_count_share) {\r\n      if ((formValue.aliquot_count_share + formValue.next_empty_box.aliquot_count_share) > formValue.total_aliquots) {\r\n        this.aliquotCountErrorFlag = true;\r\n        this.submitLoading = false;\r\n        return;\r\n      }\r\n    } else {\r\n      if (formValue.next_empty_box.aliquot_count_share > formValue.total_aliquots) {\r\n        this.aliquotCountErrorFlag = true;\r\n        this.submitLoading = false;\r\n        return;\r\n      }\r\n    }\r\n\r\n    let sampleIDArray = [];\r\n    for (let sample of this.selected) {\r\n      sampleIDArray.push(sample.id)\r\n    }\r\n\r\n    // sort sampleID list numerically\r\n    sampleIDArray.sort((a, b) => a - b)\r\n\r\n    // if the aliquot_count_share is greater than 0, current box is being used\r\n    if (formValue.aliquot_count_share > 0) {\r\n      // calculate the amount of sample-aliquot sets that can go into the current box\r\n      currentBoxSampleCount = (Math.trunc(formValue.available_spots_in_box / formValue.aliquots_per_sample));\r\n\r\n      // split sampleIDArray: one array for current box, another array for next box\r\n\r\n      // set currentBoxSampleIDArray to the first x of the wholeSampleIDArray, where x = currentBoxSampleCount, using array.slice\r\n      let currentBoxSampleIDArray = sampleIDArray.slice(0, currentBoxSampleCount)\r\n\r\n      // create object with sample array, aliquot per sample count, starting location; push to submission array\r\n      let currentBoxObject = {\r\n        samples: currentBoxSampleIDArray,\r\n        aliquot_count: formValue.aliquots_per_sample,\r\n        freezer: formValue.freezer,\r\n        frozen: formValue.frozen,\r\n        rack: formValue.rack,\r\n        box: formValue.box,\r\n        row: formValue.row,\r\n        spot: formValue.spot\r\n      }\r\n      submissionArray.push(currentBoxObject);\r\n    }\r\n\r\n    if (formValue.next_empty_box.aliquot_count_share > 0) {\r\n\r\n      // determine the length of the nextBoxSampleCount by subtracting currentBoxSampleCount from the  wholeSampleIDArray length.\r\n      nextBoxSampleCount = sampleIDArray.length - currentBoxSampleCount;\r\n\r\n      // set nextBoxSampleIDArray to the remaining IDs of the wholeSampleIDArray, using array.slice\r\n      let nextBoxSampleIDArray = sampleIDArray.slice(nextBoxSampleCount * -1)\r\n\r\n      // create object with sample array, aliquot per sample count, starting location; push to submission array\r\n      let nextBoxObject = {\r\n        samples: nextBoxSampleIDArray,\r\n        aliquot_count: formValue.aliquots_per_sample,\r\n        freezer: formValue.freezer,\r\n        frozen: formValue.frozen,\r\n        rack: formValue.next_empty_box.rack,\r\n        box: formValue.next_empty_box.box,\r\n        row: formValue.next_empty_box.row,\r\n        spot: formValue.next_empty_box.spot\r\n      }\r\n      submissionArray.push(nextBoxObject);\r\n    }\r\n\r\n    this._aliquotService.create(submissionArray)\r\n      .subscribe(\r\n        (results) => {\r\n          this.submitLoading = false;\r\n          this.freezeSuccessFlag = true;\r\n          this.freezeErrorFlag = false;\r\n          this.reloadSamplesTable();\r\n        },\r\n        error => {\r\n          this.submitLoading = false;\r\n          this.freezeSuccessFlag = false;\r\n          this.freezeErrorFlag = true;\r\n          this.errorMessage = error.toString();\r\n        }\r\n      )\r\n  }\r\n\r\n  onSubmitFCSV(formID, formValue) {\r\n\r\n    this.fcsvValuesMissingFlag = false;\r\n    this.showFCSVCreateError = false;\r\n    this.showFCSVEditError = false;\r\n    this.showFCSVCreateSuccess = false;\r\n    this.showFCSVEditSuccess = false;\r\n    this.submitLoading = true;\r\n\r\n    switch (formID) {\r\n      case 'edit':\r\n\r\n        // get the FCSV ID of the currently selected sample\r\n        const fcsvID = this.selected[0].finalconcentratedsamplevolume.id;\r\n        // update the FCSV\r\n        this._finalConcentratedSampleVolumeService.update(fcsvID, formValue)\r\n          .subscribe(\r\n            (sample) => {\r\n              this.editFCSVForm.reset();\r\n              this.submitLoading = false;\r\n              this.showFCSVEditError = false;\r\n              this.showFCSVEditSuccess = true;\r\n              this.reloadSamplesTable();\r\n            },\r\n            error => {\r\n              this.errorMessage = error;\r\n              this.submitLoading = false;\r\n              this.showFCSVEditSuccess = false;\r\n              this.showFCSVEditError = true;\r\n            }\r\n          );\r\n        break;\r\n      case 'add':\r\n\r\n        // if any values are missing, prevent submission and show alert\r\n        for (let fcsv of formValue.fcsv_array) {\r\n          if (fcsv.final_concentrated_sample_volume == null || fcsv.concentration_type == null) {\r\n            this.fcsvValuesMissingFlag = true;\r\n            this.submitLoading = false;\r\n            return;\r\n          }\r\n        }\r\n\r\n        // if no missing values, proceed with conversion and submission\r\n        if (this.fcsvValuesMissingFlag === false) {\r\n\r\n          // set new empty array for submitting fcsv values\r\n          let fcsvArraySubmission = [];\r\n          // loop through each fcsv, convert, and push into the submission array\r\n          for (let fcsv of formValue.fcsv_array) {\r\n            fcsv.final_concentrated_sample_volume = Number(fcsv.final_concentrated_sample_volume);\r\n            fcsv.concentration_type = Number(fcsv.concentration_type);\r\n            fcsv.fcsv_units = Number(fcsv.fcsv_units);\r\n\r\n            fcsv.final_concentrated_sample_volume = (fcsv.final_concentrated_sample_volume /\r\n              this.getConversionFactorToMilliliters(fcsv.fcsv_units))\r\n\r\n            fcsvArraySubmission.push({\r\n              \"sample\": fcsv.sample,\r\n              \"final_concentrated_sample_volume\": fcsv.final_concentrated_sample_volume,\r\n              \"concentration_type\": fcsv.concentration_type,\r\n              \"notes\": fcsv.notes\r\n            })\r\n          }\r\n\r\n          this._finalConcentratedSampleVolumeService.create(fcsvArraySubmission)\r\n            .subscribe(\r\n              (results) => {\r\n                this.showFCSVCreateError = false;\r\n                this.showFCSVCreateSuccess = true;\r\n                this.submitLoading = false;\r\n                this.reloadSamplesTable();\r\n              },\r\n              error => {\r\n                this.showFCSVCreateError = true;\r\n                this.showFCSVCreateSuccess = false;\r\n                this.submitLoading = false;\r\n              }\r\n            )\r\n        }\r\n        break;\r\n      default:\r\n      // do something defaulty\r\n    }\r\n  }\r\n\r\n  onSubmitAB(formValue) {\r\n    this.createdABID = null;\r\n    this.showABCreateError = false;\r\n    this.showABCreateSuccess = false;\r\n    this.submitLoading = true;\r\n    this._analysisBatchService.create(formValue)\r\n      .subscribe(\r\n        (ab) => {\r\n          this.submitLoading = false;\r\n          this.showABCreateSuccess = true;\r\n          this.createdABID = ab.id;\r\n        },\r\n        error => {\r\n          this.errorMessage = error;\r\n          this.submitLoading = false;\r\n          this.showABCreateError = true;\r\n        }\r\n      )\r\n  }\r\n\r\n  getConversionFactorToLiters(unitID) {\r\n    switch (unitID) {\r\n      case 1:\r\n        // if unit is gallons\r\n        return 0.26417;\r\n      case 2:\r\n        // if unit is liters\r\n        return 1;\r\n      case 3:\r\n        // if initial unit is grams\r\n        return 1;\r\n      case 4:\r\n        // if  unit is microliters\r\n        return 1000000;\r\n      case 5:\r\n        // if unit is milliliters\r\n        return 1000;\r\n        ;\r\n    }\r\n  }\r\n\r\n  getConversionFactorToMilliliters(unitID) {\r\n    switch (unitID) {\r\n      case 1:\r\n        // if unit is gallons\r\n        return 0.00026417;\r\n      case 2:\r\n        // if unit is liters\r\n        return 0.0010000;\r\n      case 3:\r\n        // if initial unit is grams\r\n        return 1;\r\n      case 4:\r\n        // if  unit is microliters\r\n        return 1000;\r\n      case 5:\r\n        // if unit is milliliters\r\n        return 1;\r\n        ;\r\n    }\r\n  }\r\n\r\n  trimDecimalPlaces(number, places) {\r\n\r\n    if (Number.isInteger(number)) {\r\n      return number;\r\n\r\n    } else {\r\n\r\n      let numString = number.toString();\r\n      let decimalPlaces = numString.split(\".\")[1].length;\r\n\r\n      if (decimalPlaces > places) {\r\n        let trimmedNumber = number.toFixed(places);\r\n        return trimmedNumber;\r\n      } else {\r\n        return number;\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  onClosesampleVolumeError() {\r\n    this.sampleVolumeErrorFlag = false;\r\n  }\r\n\r\n  resetFlags() {\r\n    this.sampleVolumeErrorFlag = false;\r\n    this.showSampleCreateError = false;\r\n    this.showSampleCreateSuccess = false;\r\n    this.showSampleEditError = false;\r\n    this.showSampleEditSuccess = false;\r\n    this.freezeErrorFlag = false;\r\n    this.freezeSuccessFlag = false;\r\n    this.showFCSVCreateSuccess = false;\r\n    this.showFCSVCreateError = false;\r\n    this.showFCSVEditSuccess = false;\r\n    this.showFCSVEditError = false;\r\n    this.showABCreateSuccess = false;\r\n    this.showABCreateError = false;\r\n    this.sampleQuerySizeErrorFlag = false;\r\n    this.sampleQueryComplete = false;\r\n    this.sampleInhibitionsLoadingFlag = false;\r\n    this.errorMessage = '';\r\n  }\r\n\r\n  reloadSamplesTable() {\r\n\r\n    this.allSamples = [];\r\n    // set sample loading to true to put spinner over table while it updates.\r\n    this.samplesLoading = true;\r\n    this.submitLoading = true;\r\n    // set functional limit for amount of samples to display in the table at once\r\n    const countLimit = 2000;\r\n\r\n    this._sampleService.querySamplesCount(this.sampleQueryForm.value)\r\n      .subscribe(\r\n        (count) => {\r\n\r\n          this.submitLoading = false;\r\n          // if count exceeds limit, show error message\r\n          if (count.count >= countLimit) {\r\n            this.sampleQuerySizeErrorFlag = true;\r\n            this.samplesLoading = false;\r\n          } else if (count.count < countLimit) {\r\n\r\n            this.samplesLoading = true;\r\n\r\n            // if sample query count does not exceed functional limit, query for actual results, and set results to the allSamples var\r\n            this._sampleService.querySamples(this.sampleQueryForm.value)\r\n              .subscribe(\r\n                (samples) => {\r\n                  this.samplesCount = count.count;\r\n                  this.sampleQueryComplete = true;\r\n                  this.allSamples = samples\r\n                  for (let sample of this.allSamples) {\r\n                    if (sample.finalconcentratedsamplevolume) {\r\n                      sample.fcsv = sample.finalconcentratedsamplevolume.final_concentrated_sample_volume;\r\n                      sample.fcsv_concentration_type_string = sample.finalconcentratedsamplevolume.concentration_type_string;\r\n                      sample.fcsv_notes = sample.finalconcentratedsamplevolume.notes;\r\n                    }\r\n                  }\r\n                  this.samplesLoading = false;\r\n                  // for (let sample of samples) {\r\n                  //   if (sample.record_type === 2) {\r\n                  //     this.pegnegs.push(sample);\r\n                  //   }\r\n\r\n                  // }\r\n                  // // sort pegnegs by date order\r\n                  // this.pegnegs.sort(function (a, b) {\r\n                  //   const c: Date = new Date(a.collection_start_date);\r\n                  //   const d: Date = new Date(b.collection_start_date);\r\n                  //   return (d.getTime()) - (c.getTime());\r\n                  // });\r\n                },\r\n                error => {\r\n                  this.errorMessage = error;\r\n                  this.submitLoading = false;\r\n                }\r\n              );\r\n          }\r\n        },\r\n        error => {\r\n          this.errorMessage = error;\r\n          this.submitLoading = false;\r\n        }\r\n      );\r\n  }\r\n\r\n  resetAddSampleForm() {\r\n    this.addSampleForm.reset({\r\n      sample_type: { value: null, disabled: true },\r\n      matrix: null,\r\n      filter_type: { value: null, disabled: true },\r\n      study: { value: null, disabled: true },\r\n      study_site_name: { value: '', disabled: true },\r\n      collaborator_sample_id: { value: '', disabled: true },\r\n      sampler_name: { value: '', disabled: true },\r\n      sample_notes: { value: '', disabled: true },\r\n      sample_description: { value: '', disabled: true },\r\n      arrival_date: { value: null, disabled: true },\r\n      arrival_notes: { value: '', disabled: true },\r\n      collection_start_date: { value: null, disabled: true },\r\n      collection_start_time: { value: null, disabled: false },\r\n      collection_end_date: { value: null, disabled: true },\r\n      collection_end_time: { value: null, disabled: true },\r\n      meter_reading_initial: { value: null, disabled: true },\r\n      meter_reading_final: { value: null, disabled: true },\r\n      meter_reading_unit: { value: null, disabled: true },\r\n      total_volume_sampled_initial: { value: null, disabled: true },\r\n      total_volume_sampled_unit_initial: { value: null, disabled: true },\r\n      sample_volume_initial: { value: null, disabled: true },\r\n      filter_born_on_date: { value: null, disabled: true },\r\n      filter_flag: { value: false, disabled: true },\r\n      secondary_concentration_flag: { value: false, disabled: true },\r\n      elution_notes: { value: '', disabled: true },\r\n      technician_initials: { value: '', disabled: true },\r\n      dissolution_volume: { value: null, disabled: true },\r\n      post_dilution_volume: { value: null, disabled: true },\r\n      record_type: { value: null, disabled: true },\r\n      peg_neg: null\r\n    });\r\n  }\r\n\r\n  resetAddPegNegForm() {\r\n    this.addPegNegForm.reset({\r\n      sample_type: null,\r\n      matrix: null,\r\n      filter_type: null,\r\n      study: null,\r\n      study_site_name: '',\r\n      collaborator_sample_id: '',\r\n      sampler_name: '',\r\n      sample_notes: '',\r\n      sample_description: '',\r\n      arrival_date: null,\r\n      arrival_notes: '',\r\n      collection_start_date: null,\r\n      meter_reading_initial: null,\r\n      meter_reading_final: null,\r\n      meter_reading_unit: null,\r\n      total_volume_sampled_initial: null,\r\n      total_volume_sampled_unit_initial: null,\r\n      total_volume_or_mass_sampled: null,\r\n      sample_volume_initial: null,\r\n      filter_born_on_date: null,\r\n      filter_flag: false,\r\n      secondary_concentration_flag: false,\r\n      elution_notes: '',\r\n      technician_initials: '',\r\n      dissolution_volume: null,\r\n      record_type: 2\r\n    })\r\n\r\n  }\r\n\r\n  onSubmitSample(formId, formValue) {\r\n    this.createdSampleID = null;\r\n    this.sampleVolumeErrorFlag = false;\r\n    this.showSampleCreateError = false;\r\n    this.showSampleEditError = false;\r\n    this.showSampleEditSuccess = false;\r\n    this.submitLoading = true;\r\n    this.errorMessage = '';\r\n\r\n    let meterVolumesPresent: boolean = false;\r\n    let directTVSPresent: boolean = false;\r\n\r\n    formValue.matrix = Number(formValue.matrix);\r\n    formValue.sample_type = Number(formValue.sample_type);\r\n    formValue.sample_volume_initial = Number(formValue.sample_volume_initial);\r\n    formValue.study = Number(formValue.study);\r\n    formValue.dissolution_volume = Number(formValue.dissolution_volume);\r\n\r\n    if (formValue.filter_type !== null) {\r\n      formValue.filter_type = Number(formValue.filter_type);\r\n    }\r\n\r\n    switch (formId) {\r\n      case 'edit':\r\n        // update a record\r\n        this._sampleService.update(formValue)\r\n          .subscribe(\r\n            (sample) => {\r\n              this.updateSamplesArray(formValue);\r\n              this.editSampleForm.reset();\r\n              this.submitLoading = false;\r\n              this.showSampleEditSuccess = true;\r\n              this.reloadSamplesTable();\r\n            },\r\n            error => {\r\n              this.errorMessage = error;\r\n              this.submitLoading = false;\r\n              this.showSampleEditError = true;\r\n            }\r\n          );\r\n        break;\r\n      case 'add':\r\n\r\n        // check if meter_reading_XX fields are present by seeing if they are not disabled (false)\r\n        if (this.displayConfig[formValue.matrix].meter_reading_final === false &&\r\n          this.displayConfig[formValue.matrix].meter_reading_initial === false &&\r\n          this.displayConfig[formValue.matrix].meter_reading_unit === false) {\r\n\r\n          if (formValue.meter_reading_final === null ||\r\n            formValue.meter_reading_initial === null ||\r\n            formValue.meter_reading_unit === null) {\r\n            meterVolumesPresent = false;\r\n          } else if (formValue.meter_reading_final !== null\r\n            && formValue.meter_reading_initial !== null\r\n            && formValue.meter_reading_unit !== null) {\r\n            meterVolumesPresent = true;\r\n            formValue.meter_reading_final = Number(formValue.meter_reading_final);\r\n            formValue.meter_reading_initial = Number(formValue.meter_reading_initial);\r\n            formValue.meter_reading_unit = Number(formValue.meter_reading_unit);\r\n\r\n            // use meter readings, subtraction, and meter_reading_unit to establish total_volume_or_mass_sampled\r\n            formValue.total_volume_or_mass_sampled = ((formValue.meter_reading_final - formValue.meter_reading_initial) /\r\n              this.getConversionFactorToLiters(formValue.meter_reading_unit))\r\n\r\n            // send value through trimDecimalPlaces function to trim decimal places if they exceed 10\r\n            formValue.total_volume_or_mass_sampled = this.trimDecimalPlaces(formValue.total_volume_or_mass_sampled, 10);\r\n          }\r\n        }\r\n\r\n        // check if total_volume_sampled_XX fields are present by seeing if they are not disabled (false)\r\n        if (this.displayConfig[formValue.matrix].total_volume_sampled_initial === false &&\r\n          this.displayConfig[formValue.matrix].total_volume_sampled_unit_initial === false) {\r\n\r\n          if (formValue.total_volume_sampled_initial === null || formValue.total_volume_sampled_unit_initial === null) {\r\n            directTVSPresent = false;\r\n          } else if (formValue.total_volume_sampled_initial !== null && formValue.total_volume_sampled_unit_initial !== null) {\r\n            directTVSPresent = true;\r\n            formValue.total_volume_sampled_initial = Number(formValue.total_volume_sampled_initial);\r\n            formValue.total_volume_sampled_unit_initial = Number(formValue.total_volume_sampled_unit_initial);\r\n            // use total_volume_sampled_initial + total_volume_sampled_unit_initial to establish total_volume_or_mass_sampled\r\n            formValue.total_volume_or_mass_sampled = (formValue.total_volume_sampled_initial /\r\n              this.getConversionFactorToLiters(formValue.total_volume_sampled_unit_initial))\r\n\r\n            // send value through trimDecimalPlaces function to trim decimal places if they exceed 10\r\n            formValue.total_volume_or_mass_sampled = this.trimDecimalPlaces(formValue.total_volume_or_mass_sampled, 10);\r\n          }\r\n        }\r\n\r\n        if (meterVolumesPresent === false && directTVSPresent === false) {\r\n          this.submitLoading = false;\r\n          this.sampleVolumeErrorFlag = true;\r\n        } else if (meterVolumesPresent === true || directTVSPresent === true) {\r\n          // add a record\r\n          this._sampleService.create(formValue)\r\n            .subscribe(\r\n              (sample) => {\r\n                this.resetAddSampleForm();\r\n                this.sampleVolumeErrorFlag = false;\r\n                this.submitLoading = false;\r\n                this.showSampleCreateSuccess = true;\r\n                this.createdSampleID = sample.id;\r\n                this.reloadSamplesTable();\r\n              },\r\n              error => {\r\n                this.errorMessage = error;\r\n                this.submitLoading = false;\r\n                this.sampleVolumeErrorFlag = false;\r\n                this.showSampleCreateError = true;\r\n              }\r\n            );\r\n        }\r\n        break;\r\n      case 'addPegNeg':\r\n        // add a record, of type pegneg (control)\r\n\r\n        // check if any of the values are missing for the meter reading approach to deriving sample volume\r\n        if (formValue.meter_reading_final === null ||\r\n          formValue.meter_reading_initial === null ||\r\n          formValue.meter_reading_unit === null) {\r\n          // if all are null, set meterVolumesPresent var to false\r\n          meterVolumesPresent = false;\r\n        } else if (formValue.meter_reading_final !== null\r\n          && formValue.meter_reading_initial !== null\r\n          && formValue.meter_reading_unit !== null) {\r\n          // if no needed values are missing for meter reading TVS calculation, proceed with converting values and calculating TVS\r\n          meterVolumesPresent = true;\r\n          formValue.meter_reading_final = Number(formValue.meter_reading_final);\r\n          formValue.meter_reading_initial = Number(formValue.meter_reading_initial);\r\n          formValue.meter_reading_unit = Number(formValue.meter_reading_unit);\r\n\r\n          // use meter readings, subtraction, and meter_reading_unit to establish total_volume_or_mass_sampled\r\n          formValue.total_volume_or_mass_sampled = ((formValue.meter_reading_final - formValue.meter_reading_initial) /\r\n            this.getConversionFactorToLiters(formValue.meter_reading_unit))\r\n\r\n          // send value through trimDecimalPlaces funciton to trim decimal places if they exceed 10\r\n          formValue.total_volume_or_mass_sampled = this.trimDecimalPlaces(formValue.total_volume_or_mass_sampled, 10);\r\n        }\r\n\r\n\r\n        // check if values are present for direct TVS input\r\n        if (formValue.total_volume_sampled_initial === null || formValue.total_volume_sampled_unit_initial === null) {\r\n          // if either are absent, set the directTVSPresent var to false.\r\n          directTVSPresent = false;\r\n        } else if (formValue.total_volume_sampled_initial !== null && formValue.total_volume_sampled_unit_initial !== null) {\r\n          // if values are present, proceed with converting values and calculating TVS\r\n          directTVSPresent = true;\r\n          formValue.total_volume_sampled_initial = Number(formValue.total_volume_sampled_initial);\r\n          formValue.total_volume_sampled_unit_initial = Number(formValue.total_volume_sampled_unit_initial);\r\n          // use total_volume_sampled_initial + total_volume_sampled_unit_initial to establish total_volume_or_mass_sampled\r\n          formValue.total_volume_or_mass_sampled = (formValue.total_volume_sampled_initial /\r\n            this.getConversionFactorToLiters(formValue.total_volume_sampled_unit_initial))\r\n\r\n          // send value through trimDecimalPlaces funciton to trim decimal places if they exceed 10\r\n          formValue.total_volume_or_mass_sampled = this.trimDecimalPlaces(formValue.total_volume_or_mass_sampled, 10);\r\n        }\r\n\r\n\r\n        // need to add required field values as they are assumed and not entered by user\r\n        let now = new Date(Date.now());\r\n        let currentDate = now.toISOString().substring(0, 10);\r\n        let currentTime = now.toTimeString().split(\" \")[0];\r\n\r\n        formValue.matrix = APP_SETTINGS.PEGNEG_FIELD_VALUES.matrix;\r\n        // formValue.filter_type = APP_SETTINGS.PEGNEG_FIELD_VALUES.filter_type;\r\n        formValue.sample_type = APP_SETTINGS.PEGNEG_FIELD_VALUES.sample_type;\r\n        formValue.collaborator_sample_id = 'pegneg_' + formValue.collection_start_date;\r\n        formValue.study = APP_SETTINGS.PEGNEG_FIELD_VALUES.study;\r\n        // formValue.collection_start_time = APP_SETTINGS.PEGNEG_FIELD_VALUES.collection_start_time;\r\n        // formValue.collection_end_time = APP_SETTINGS.PEGNEG_FIELD_VALUES.collection_end_time;\r\n        // formValue.collection_end_date = formValue.collection_start_date;\r\n        // formValue.arrival_date = formValue.collection_start_date;\r\n\r\n        if (meterVolumesPresent === false && directTVSPresent === false) {\r\n          this.submitLoading = false;\r\n          this.sampleVolumeErrorFlag = true;\r\n        } else if (meterVolumesPresent === true || directTVSPresent === true) {\r\n\r\n          this._sampleService.create(formValue)\r\n            .subscribe(\r\n              (sample) => {\r\n                this.resetAddPegNegForm();\r\n                this.submitLoading = false;\r\n                this.createdSampleID = sample.id;\r\n                this.showSampleCreateSuccess = true;\r\n                this.reloadSamplesTable();\r\n                this.populatePegnegList();\r\n              },\r\n              error => {\r\n                this.errorMessage = error;\r\n                this.submitLoading = false;\r\n                this.showSampleCreateError = true;\r\n              }\r\n            );\r\n        }\r\n        break;\r\n      default:\r\n      // do something defaulty\r\n    }\r\n  }\r\n\r\n  addLeadingZero(value, control) {\r\n    if (value.charAt(0) === '.') {\r\n      control.setValue('0' + value);\r\n    }\r\n  }\r\n\r\n  onSubmitSampleQuery(formValue) {\r\n\r\n    this.resetFlags();\r\n\r\n    this.submitLoading = true;\r\n\r\n    // set functional limit for amount of samples to display in the table at once\r\n    const countLimit = 2000;\r\n\r\n    this._sampleService.querySamplesCount(formValue)\r\n      .subscribe(\r\n        (count) => {\r\n\r\n          this.submitLoading = false;\r\n          // if count exceeds limit, show error message\r\n          if (count.count >= countLimit) {\r\n            this.sampleQuerySizeErrorFlag = true;\r\n          } else if (count.count < countLimit) {\r\n\r\n            this.samplesLoading = true;\r\n\r\n            // if sample query count does not exceed functional limit, query for actual results, and set results to the allSamples var\r\n            this._sampleService.querySamples(formValue)\r\n              .subscribe(\r\n                (samples) => {\r\n                  this.samplesCount = count.count;\r\n                  this.sampleQueryComplete = true;\r\n                  this.allSamples = samples\r\n                  for (let sample of this.allSamples) {\r\n                    if (sample.finalconcentratedsamplevolume) {\r\n                      sample.fcsv = sample.finalconcentratedsamplevolume.final_concentrated_sample_volume;\r\n                      sample.fcsv_concentration_type_string = sample.finalconcentratedsamplevolume.concentration_type_string;\r\n                      sample.fcsv_notes = sample.finalconcentratedsamplevolume.notes;\r\n                    }\r\n                  }\r\n                  this.samplesLoading = false;\r\n                  // for (let sample of samples) {\r\n                  //   if (sample.record_type === 2) {\r\n                  //     this.pegnegs.push(sample);\r\n                  //   }\r\n\r\n                  // }\r\n                  // // sort pegnegs by date order\r\n                  // this.pegnegs.sort(function (a, b) {\r\n                  //   const c: Date = new Date(a.collection_start_date);\r\n                  //   const d: Date = new Date(b.collection_start_date);\r\n                  //   return (d.getTime()) - (c.getTime());\r\n                  // });\r\n                },\r\n                error => {\r\n                  this.errorMessage = error;\r\n                  this.submitLoading = false;\r\n                }\r\n              );\r\n          }\r\n        },\r\n        error => {\r\n          this.errorMessage = error;\r\n          this.submitLoading = false;\r\n        }\r\n      );\r\n\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/samples/samples.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-xs-12\\\">\\r\\n        <h3>Studies</h3>\\r\\n    </div>\\r\\n</div>\\r\\n<!-- add study card -->\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-6 col-md-6 col-sm-12 col-xs-12\\\" *ngIf=\\\"showHideAdd\\\">\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-block\\\">\\r\\n                <div class=\\\"card-title\\\">Add Study</div>\\r\\n                <div class=\\\"card-text\\\">\\r\\n\\r\\n                    <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showStudyCreateError\\\">\\r\\n                        <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                            <span class=\\\"alert-text\\\">Submission error. Study not submitted. {{errorMessage}}</span>\\r\\n                            <div class=\\\"alert-actions\\\">\\r\\n                                <a class=\\\"alert-action\\\" (click)=\\\"onSubmitStudy('add', addStudyForm.value)\\\">Try again</a>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </clr-alert>\\r\\n\\r\\n                    <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showStudyCreateSuccess\\\">\\r\\n                        <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                            <span class=\\\"alert-text\\\">Study successfully submitted. ID: {{createdStudyID}}\\r\\n                            </span>\\r\\n\\r\\n\\r\\n                            <div class=\\\"alert-actions\\\">\\r\\n                                <a class=\\\"alert-action\\\" (click)=\\\"showHideAdd = false; showStudyCreateSuccess = false\\\">Close</a>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </clr-alert>\\r\\n\\r\\n                    <form id=\\\"addStudyForm\\\" class=\\\"compact\\\" [formGroup]=\\\"addStudyForm\\\" (ngSubmit)=\\\"onSubmitStudy('add', addStudyForm.value)\\\">\\r\\n                        <section class=\\\"form-block\\\">\\r\\n                            <!--<label>Add Study</label>-->\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label class=\\\"required\\\">Name</label>\\r\\n                                <label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"addStudyForm.get('name').invalid && (addStudyForm.get('name').dirty || addStudyForm.get('name').touched)\\\">\\r\\n                                    <input id=\\\"name\\\" type=\\\"text\\\" formControlName=\\\"name\\\" size=\\\"40\\\">\\r\\n                                    <span class=\\\"tooltip-content\\\">Name is required.</span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"description\\\">Description</label>\\r\\n                                <textarea id=\\\"description\\\" type=\\\"text\\\" formControlName=\\\"description\\\" rows=\\\"2\\\" style=\\\"max-width:25em\\\"></textarea>\\r\\n                            </div>\\r\\n                            <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"addStudyForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Submit</button>\\r\\n                            <button class=\\\"btn btn-info\\\" (click)=\\\"showHideAdd = !showHideAdd\\\">Close</button>\\r\\n                        </section>\\r\\n                        <!-- <p>Form value: {{ addStudyForm.value | json }}</p>\\r\\n                        <p>Form status: {{ addStudyForm.status | json }}</p> -->\\r\\n                    </form>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\r\\n    <clr-modal [(clrModalOpen)]=\\\"showHideEdit\\\">\\r\\n        <h3 class=\\\"modal-title\\\">Edit Study</h3>\\r\\n        <div class=\\\"modal-body\\\">\\r\\n\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-lg-12\\\">\\r\\n\\r\\n                    <form id=\\\"editStudyForm\\\" class=\\\"compact\\\" [formGroup]=\\\"editStudyForm\\\" (ngSubmit)=\\\"onSubmitStudy('edit', editStudyForm.value)\\\">\\r\\n                        <section class=\\\"form-block\\\">\\r\\n\\r\\n                            <label>Selected Study: {{selectedStudyName}}</label>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"studyId\\\">Study ID</label>\\r\\n                                <input type=\\\"text\\\" id=\\\"studyId\\\" size=\\\"35\\\" formControlName=\\\"id\\\" readonly>\\r\\n                            </div>\\r\\n\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label class=\\\"required\\\">Name</label>\\r\\n                                <label for=\\\"name\\\" aria-haspopup=\\\"true\\\" role=\\\"tooltip\\\" class=\\\"tooltip tooltip-validation tooltip-sm\\\" [class.invalid]=\\\"editStudyForm.get('name').invalid && (editStudyForm.get('name').dirty || editStudyForm.get('name').touched)\\\">\\r\\n                                    <input id=\\\"name\\\" type=\\\"text\\\" formControlName=\\\"name\\\" size=\\\"40\\\">\\r\\n                                    <span class=\\\"tooltip-content\\\">Name is required.</span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"description\\\">Description</label>\\r\\n                                <textarea id=\\\"description\\\" type=\\\"text\\\" formControlName=\\\"description\\\" rows=\\\"2\\\" style=\\\"max-width:25em\\\"></textarea>\\r\\n                            </div>\\r\\n\\r\\n                            <clr-alert [clrAlertType]=\\\"'alert-danger'\\\" *ngIf=\\\"showStudyEditError\\\">\\r\\n                                <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                    <span class=\\\"alert-text\\\">Submission error. Study not edited.</span>\\r\\n                                    <div class=\\\"alert-actions\\\">\\r\\n                                        <a class=\\\"alert-action\\\" (click)=\\\"onSubmitStudy('edit', editStudyForm.value)\\\">Try again</a>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </clr-alert>\\r\\n\\r\\n                            <clr-alert [clrAlertType]=\\\"'alert-success'\\\" *ngIf=\\\"showStudyEditSuccess\\\">\\r\\n                                <div clr-alert-item class=\\\"alert-item\\\">\\r\\n                                    <span class=\\\"alert-text\\\">Study successfully edited</span>\\r\\n                                    <div class=\\\"alert-actions\\\">\\r\\n                                        <a class=\\\"alert-action\\\" (click)=\\\"showHideEdit = false; showStudyEditSuccess = false\\\">Close</a>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </clr-alert>\\r\\n\\r\\n                            <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"editStudyForm.invalid\\\" [clrLoading]=\\\"submitLoading\\\">Save Edits</button>\\r\\n                            <button class=\\\"btn btn-info\\\" (click)=\\\"showHideEdit = !showHideEdit\\\">Close</button>\\r\\n                        </section>\\r\\n                        <!-- <p>Form value: {{ editStudyForm.value | json }}</p>\\r\\n                        <p>Form status: {{ editStudyForm.status | json }}</p> -->\\r\\n                    </form>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <!--<div class=\\\"modal-footer\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-outline\\\" (click)=\\\"showHideEdit = !showHideEdit\\\">Close</button>\\r\\n            <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" type=\\\"submit\\\" [disabled]=\\\"editStudyForm.invalid\\\">Save Edits</button>\\r\\n        </div>-->\\r\\n    </clr-modal>\\r\\n\\r\\n    <div class=\\\"col-lg-8 col-md-8 col-sm-12 col-xs-12\\\">\\r\\n\\r\\n        <clr-datagrid [(clrDgSingleSelected)]=\\\"selectedStudy\\\" [clrDgLoading]=\\\"studiesLoading\\\">\\r\\n\\r\\n            <clr-dg-action-bar>\\r\\n                <div class=\\\"btn-group\\\">\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" (click)=\\\"showHideAdd = !showHideAdd\\\">\\r\\n                        <clr-icon shape=\\\"plus\\\"></clr-icon> Add Study</button>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-sm btn-secondary\\\" [disabled]=\\\"!selectedStudy\\\" (click)=\\\"editStudy(selectedStudy)\\\">\\r\\n                        <clr-icon shape=\\\"note-edit\\\" size=\\\"16\\\"></clr-icon> Edit Study</button>\\r\\n\\r\\n                </div>\\r\\n            </clr-dg-action-bar>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'id'\\\">\\r\\n                Study ID\\r\\n                <clr-dg-filter [clrDgFilter]=\\\"rangeFilter\\\">\\r\\n                    <range-filter #rangeFilter></range-filter>\\r\\n                </clr-dg-filter>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'name'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Study Name\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-column [clrDgField]=\\\"'description'\\\">\\r\\n                <ng-container *clrDgHideableColumn=\\\"{hidden: false}\\\">\\r\\n                    Study Description\\r\\n                </ng-container>\\r\\n            </clr-dg-column>\\r\\n\\r\\n            <clr-dg-row *clrDgItems=\\\"let study of allStudies\\\" [clrDgItem]=\\\"study\\\">\\r\\n                <clr-dg-cell>{{study.id}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{study.name}}</clr-dg-cell>\\r\\n                <clr-dg-cell>{{study.description}}</clr-dg-cell>\\r\\n            </clr-dg-row>\\r\\n\\r\\n            <clr-dg-footer>\\r\\n                {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{pagination.totalItems}} studies\\r\\n                <clr-dg-pagination #pagination [clrDgPageSize]=\\\"20\\\"></clr-dg-pagination>\\r\\n            </clr-dg-footer>\\r\\n\\r\\n        </clr-datagrid>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<!--<clr-modal [(clrModalOpen)]=\\\"deleteStudyConfirm\\\">\\r\\n    <h3 class=\\\"modal-title\\\"><clr-icon shape=\\\"warning\\\" class=\\\"is-warning\\\" size=\\\"36\\\"></clr-icon> Delete Study</h3>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n         <p>You have selected the following study to delete:\\r\\n         <br><b>{{selectedStudy ? selectedStudy.study_name: 'none'}}</b></p>\\r\\n         <p>Are you sure you want to delete this study?</p>\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n       <button class=\\\"btn btn-outline\\\" type=\\\"button\\\" (click)=\\\"deleteStudyConfirm = false\\\">Close</button>\\r\\n        <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" (click)=\\\"deleteStudyConfirm = false\\\">Delete this study</button>\\r\\n    </div>\\r\\n</clr-modal>-->\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/studies/studies.component.html\n// module id = ./src/app/studies/studies.component.html\n// module chunks = main","module.exports = \".datagrid .datagrid-column, .datagrid .datagrid-cell .no-padding {\\n  padding: 0px; }\\n\\n.ten {\\n  min-width: 4em; }\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/studies/studies.component.scss\n// module id = ./src/app/studies/studies.component.scss\n// module chunks = main","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\nimport { IStudy } from './study';\r\nimport { StudyService } from './study.service';\r\n\r\n@Component({\r\n    selector: 'app-studies',\r\n    templateUrl: './studies.component.html',\r\n    styleUrls: ['./studies.component.scss']\r\n})\r\nexport class StudiesComponent implements OnInit {\r\n    allStudies: IStudy[];\r\n    errorMessage: string;\r\n    selectedStudy: IStudy;\r\n    showHideAdd: boolean = false;\r\n    showHideEdit: boolean = false;\r\n\r\n    showStudyCreateError: boolean = false;\r\n    showStudyEditError: boolean = false;\r\n\r\n    showStudyCreateSuccess: boolean = false;\r\n    showStudyEditSuccess: boolean = false;\r\n\r\n    studiesLoading: boolean = false;\r\n\r\n    selectedStudyName;\r\n    selectedStudyId;\r\n\r\n    createdStudyID;\r\n\r\n    submitLoading: boolean = false;\r\n\r\n    // add study form - declare a reactive form with appropriate study fields\r\n    addStudyForm = new FormGroup({\r\n        name: new FormControl('', Validators.required),\r\n        description: new FormControl('')\r\n    });\r\n    // edit study form - declare a reactive form\r\n    editStudyForm = new FormGroup({\r\n        id: new FormControl(''),\r\n        name: new FormControl('', Validators.required),\r\n        description: new FormControl('')\r\n    });\r\n\r\n    constructor(private _studyService: StudyService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.studiesLoading = true;\r\n        // on init, call getStudies function which subscribes to the StudyService, set results to the allStudies var\r\n        this._studyService.getStudies()\r\n            .subscribe(\r\n                (studies) => {\r\n                    this.allStudies = studies;\r\n                    this.studiesLoading = false;\r\n                },\r\n                (error) => {\r\n                    this.errorMessage = <any>error\r\n                }\r\n            );\r\n    }\r\n\r\n    editStudy(selectedStudy) {\r\n\r\n        this.showStudyEditSuccess = false;\r\n        this.showStudyEditError = false;\r\n\r\n        this.selectedStudyName = selectedStudy.name;\r\n        this.selectedStudyId = selectedStudy.id;\r\n\r\n        this.editStudyForm.setValue({\r\n            id: selectedStudy.id,\r\n            name: selectedStudy.name,\r\n            description: selectedStudy.description\r\n        });\r\n\r\n        // show the edit study form if not showing already\r\n        if (this.showHideEdit === false) {\r\n            this.showHideEdit = true;\r\n        }\r\n\r\n    }\r\n\r\n    private updateStudiesArray(newItem) {\r\n        let updateItem = this.allStudies.find(this.findIndexToUpdate, newItem.id);\r\n\r\n        let index = this.allStudies.indexOf(updateItem);\r\n\r\n        this.allStudies[index] = newItem;\r\n    }\r\n\r\n    private findIndexToUpdate(newItem) {\r\n        return newItem.id === this;\r\n    }\r\n\r\n    // split these out\r\n    onSubmitStudy(formId, formValue) {\r\n        this.createdStudyID = null;\r\n        this.showStudyCreateError = false;\r\n        this.showStudyEditError = false;\r\n        this.submitLoading = true;\r\n        switch (formId) {\r\n            case 'edit':\r\n                // update a record\r\n                this._studyService.update(formValue)\r\n                    .subscribe(\r\n                        (study) => {\r\n                            this.updateStudiesArray(formValue);\r\n                            this.editStudyForm.reset();\r\n                            this.submitLoading = false;\r\n                            this.showStudyEditSuccess = true;\r\n                        },\r\n                        error => {\r\n                            this.errorMessage = <any>error;\r\n                            this.submitLoading = false;\r\n                            this.showStudyEditError = true;\r\n                        }\r\n                    );\r\n                break;\r\n            case 'add':\r\n                // add a record\r\n                this._studyService.create(formValue)\r\n                    .subscribe(\r\n                        (study) => {\r\n                            this.allStudies.push(study);\r\n                            this.addStudyForm.reset();\r\n                            this.submitLoading = false;\r\n                            this.showStudyCreateSuccess = true;\r\n                            this.createdStudyID = study.id;\r\n                        },\r\n                        error => {\r\n                            this.errorMessage = <any>error;\r\n                            this.submitLoading = false;\r\n                            this.showStudyCreateError = true;\r\n                        }\r\n                    );\r\n                break;\r\n            default:\r\n            // do something defaulty\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/studies/studies.component.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport 'rxjs/add/observable/throw';\r\n\r\nimport { APP_SETTINGS } from '../app.settings'\r\n\r\nimport { IStudy } from './study';\r\n\r\n@Injectable()\r\nexport class StudyService {\r\n\r\n    constructor(private _http: Http) {}\r\n\r\n    private extractData(res: Response) {\r\n        let body = res.json();\r\n        return body || {};\r\n    }\r\n\r\n    //check return from server - may need to adjust response.json below with further dot notation\r\n    public getStudies(): Observable < IStudy[] > {\r\n\r\n        let options = new RequestOptions({\r\n            headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS\r\n        });\r\n\r\n        return this._http.get(APP_SETTINGS.STUDIES_URL, options)\r\n            .map((response: Response) => < IStudy[] > response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    public create(formValue: IStudy): Observable < IStudy > {\r\n\r\n        let options = new RequestOptions({\r\n            headers: APP_SETTINGS.AUTH_JSON_HEADERS\r\n        });\r\n\r\n        return this._http.post(APP_SETTINGS.STUDIES_URL, formValue, options)\r\n            .map((response: Response) => < IStudy[] > response.json())\r\n            .catch(this.handleError);\r\n\r\n    }\r\n\r\n    public update(formValue: IStudy): Observable < IStudy > {\r\n\r\n        let options = new RequestOptions({\r\n            headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS\r\n        });\r\n\r\n        return this._http.put(APP_SETTINGS.STUDIES_URL + formValue.id + '/', formValue, options)\r\n            .map((response: Response) => < IStudy[] > response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        console.error(error);\r\n        return Observable.throw(error.json().name[0] || 'Server error');\r\n    }\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/studies/study.service.ts","import { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { ITarget } from '../targets/target';\r\nimport { TargetService } from '../targets/target.service';\r\n\r\n@Injectable()\r\nexport class TargetResolve implements Resolve<Array<ITarget>> {\r\n\r\n  constructor(private _targetService: TargetService) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot): Observable<Array<ITarget>> {\r\n     return this._targetService.getTargets();\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/targets/target.resolve.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings';\r\n\r\nimport { ITarget } from './target';\r\n\r\n@Injectable()\r\nexport class TargetService {\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  private extractData(res: Response) {\r\n    let body = res.json();\r\n    return body.data || {};\r\n  }\r\n\r\n\r\n  // public getTargetsData(){}\r\n\r\n\r\n  public getTargets(): Observable<ITarget[]> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.get(APP_SETTINGS.TARGETS_URL, options)\r\n      .map((response: Response) => <ITarget[]>response.json())\r\n      // .do(data => console.log('Targets data: ' + JSON.stringify(data)))\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  public create(formValue: ITarget): Observable<ITarget> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.AUTH_JSON_HEADERS });\r\n\r\n    return this._http.post(APP_SETTINGS.TARGETS_URL, formValue, options)\r\n      .map((response: Response) => <ITarget>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public update(formValue: ITarget): Observable<ITarget> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.put(APP_SETTINGS.TARGETS_URL + formValue.id + '/', formValue, options)\r\n      .map((response: Response) => <ITarget>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n\r\n  public delete(id: number): Observable<ITarget> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.delete(APP_SETTINGS.TARGETS_URL + id, options)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  private handleError(error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/targets/target.service.ts","import { Injectable } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { IUnit } from '../units/unit';\r\nimport { UnitService } from '../units/unit.service';\r\n\r\n@Injectable()\r\nexport class UnitResolve implements Resolve<Array<IUnit>> {\r\n\r\n  constructor(private _unitService: UnitService) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot): Observable<Array<IUnit>> {\r\n     return this._unitService.getUnits();\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/units/unit.resolve.ts","import { Injectable } from '@angular/core';\r\nimport { Http, Response, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { APP_SETTINGS } from '../app.settings'\r\n\r\nimport { IUnit } from './unit';\r\n\r\n@Injectable()\r\nexport class UnitService {\r\n   private _unitsUrl = 'https://raw.githubusercontent.com/USGS-WiM/lide-lims/master/src/app/demo-services/units.json';\r\n\r\n  constructor(private _http: Http) { }\r\n\r\n  getUnits(): Observable<IUnit[]> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.get(APP_SETTINGS.UNITS_URL, options)\r\n    //return this._http.get(this._unitsUrl)\r\n                .map((response: Response) => <IUnit[]>response.json())\r\n                //.do(data => console.log('Units data: ' + JSON.stringify(data)))\r\n                .catch(this.handleError);\r\n  }\r\n\r\n  public create(formValue: IUnit): Observable<IUnit> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.AUTH_JSON_HEADERS });\r\n\r\n    return this._http.post(APP_SETTINGS.UNITS_URL, formValue, options)\r\n      .map((response: Response) => <IUnit>response.json())\r\n      .catch(this.handleError);\r\n\r\n  }\r\n\r\n  public update(formValue: IUnit): Observable<IUnit> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.put(APP_SETTINGS.UNITS_URL + formValue.id + '/', formValue, options)\r\n      .map((response: Response) => <IUnit>response.json())\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  public delete(id: number): Observable<IUnit> {\r\n    let options = new RequestOptions({ headers: APP_SETTINGS.MIN_AUTH_JSON_HEADERS });\r\n\r\n    return this._http.delete(APP_SETTINGS.UNITS_URL + id, options)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  private handleError (error: Response) {\r\n    console.error(error);\r\n    return Observable.throw(JSON.stringify(error.json()) || 'Server error');\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/units/unit.service.ts","// The file contents for the current environment will overwrite these during build.\r\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\r\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\r\n// The list of which env maps to which file can be found in `angular-cli.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  version: require('../../package.json').version\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","import './polyfills.ts';\r\n\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { environment } from './environments/environment';\r\nimport { AppModule } from './app/';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","// This file includes polyfills needed by Angular 2 and is loaded before\r\n// the app. You can add your own extra polyfills to this file.\r\nimport 'core-js/es6/symbol';\r\nimport 'core-js/es6/object';\r\nimport 'core-js/es6/function';\r\nimport 'core-js/es6/parse-int';\r\nimport 'core-js/es6/parse-float';\r\nimport 'core-js/es6/number';\r\nimport 'core-js/es6/math';\r\nimport 'core-js/es6/string';\r\nimport 'core-js/es6/date';\r\nimport 'core-js/es6/array';\r\nimport 'core-js/es6/regexp';\r\nimport 'core-js/es6/map';\r\nimport 'core-js/es6/set';\r\nimport 'core-js/es6/reflect';\r\n\r\nimport 'core-js/es7/reflect';\r\n\r\n\r\nimport 'zone.js/dist/zone';\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/polyfills.ts"],"sourceRoot":"webpack:///"}