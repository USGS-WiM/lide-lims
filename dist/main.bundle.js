webpackJsonp(["main"],{

/***/ "./package.json":
/***/ (function(module, exports) {

module.exports = {"name":"lili","version":"1.4.1","description":"LIDE LIMS","repository":{"type":"git","url":"https://github.com/USGS-WiM/lili.git"},"license":"Public Domain","readme":"https://github.com/USGS-WiM/lili/blob/master/README.md","angular-cli":{},"scripts":{"start":"ng serve","lint":"tslint \"src/**/*.ts\"","test":"ng test --single-run","pree2e":"webdriver-manager update","e2e":"protractor protractor.config.js"},"private":true,"dependencies":{"@angular/animations":"^4.4.6","@angular/common":"^4.4.6","@angular/compiler":"^4.4.6","@angular/core":"^4.4.6","@angular/forms":"^4.4.6","@angular/http":"^4.4.6","@angular/platform-browser":"^4.4.6","@angular/platform-browser-dynamic":"^4.4.6","@angular/router":"^4.4.6","@webcomponents/custom-elements":"^1.0.8","clarity-angular":"^0.10.25","clarity-icons":"^0.10.25","clarity-ui":"^0.10.25","common-tags":"^1.7.2","core-js":"^2.5.3","font-awesome":"^4.7.0","html2canvas":"^0.5.0-beta4","jspdf":"^1.3.5","jspdf-autotable":"^2.3.2","mutationobserver-shim":"^0.3.2","node-sass":"^4.13.1","rxjs":"^5.5.6","ts-helpers":"^1.1.1","web-animations-js":"^2.2.1","webpack":"^3.10.0","zone.js":"^0.8.20"},"devDependencies":{"@angular/cli":"^1.6.8","@angular/compiler-cli":"^4.4.6","@types/core-js":"^0.9.46","@types/html2canvas":"^0.5.35","@types/jasmine":"^2.8.6","@types/jspdf":"^1.1.31","@types/node":"^8.9.1","bootstrap":"4.0.0-beta","codelyzer":"^3.2.2","enhanced-resolve":"^3.0.0","jasmine-core":"^2.99.1","jasmine-spec-reporter":"^4.2.1","karma":"^1.7.*","karma-cli":"^1.0.*","karma-jasmine":"^1.1.1","karma-mocha-reporter":"^2.2.5","karma-phantomjs-launcher":"^1.0.0","karma-remap-istanbul":"^0.6.*","protractor":"^5.3.0","ts-node":"^3.3.0","tslint":"^5.9.1","typescript":"^2.3.4","typings":"^2.1.1","webdriver-manager":"^12.0.6"}}

/***/ }),

/***/ "./src/$$_gendir lazy recursive":
/***/ (function(module, exports) {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncatched exception popping up in devtools
	return Promise.resolve().then(function() {
		throw new Error("Cannot find module '" + req + "'.");
	});
}
webpackEmptyAsyncContext.keys = function() { return []; };
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
module.exports = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = "./src/$$_gendir lazy recursive";

/***/ }),

/***/ "./src/app/FILTERS/collection-end-date-filter/collection-end-date-filter.component.html":
/***/ (function(module, exports) {

module.exports = "<label for=\"from\">From</label>\r\n<input id=\"from\" type=\"date\" style=\"width: 12em\" (change)=\"onFromChange($event.target.value)\">\r\n\r\n<label for=\"to\">To</label>\r\n<input id=\"to\" type=\"date\" style=\"width: 12em\" (change)=\"onToChange($event.target.value)\">\r\n"

/***/ }),

/***/ "./src/app/FILTERS/collection-end-date-filter/collection-end-date-filter.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/FILTERS/collection-end-date-filter/collection-end-date-filter.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var CollectionEndDateFilter = (function () {
    function CollectionEndDateFilter() {
        this.lower = "";
        this.upper = "";
        this.changes = new core_1.EventEmitter(false);
    }
    CollectionEndDateFilter.prototype.ngOnInit = function () {
    };
    CollectionEndDateFilter.prototype.accepts = function (sample) {
        return ((Date.parse(sample[this.dateField]) >= Date.parse(this.lower)) && (Date.parse(sample[this.dateField]) <= Date.parse(this.upper)));
        //return true
    };
    CollectionEndDateFilter.prototype.isActive = function () {
        return ((this.lower !== '' && this.upper !== '') ? true : false);
        //return true;
    };
    CollectionEndDateFilter.prototype.onFromChange = function (value) {
        if (value == '') {
            this.lower = value;
            console.log("last 'from' date value was EMPTY");
            this.changes.emit(true);
        }
        else {
            this.lower = value;
            console.log("last from date value was:" + this.lower);
            this.changes.emit(true);
        }
    };
    CollectionEndDateFilter.prototype.onToChange = function (value) {
        if (value == '') {
            this.lower = value;
            console.log("last 'to' date value was EMPTY");
            this.changes.emit(true);
        }
        else {
            this.upper = value;
            console.log("last to date value was:" + this.upper);
            this.changes.emit(true);
        }
    };
    return CollectionEndDateFilter;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], CollectionEndDateFilter.prototype, "dateField", void 0);
CollectionEndDateFilter = __decorate([
    core_1.Component({
        selector: 'collection-end-date-filter',
        template: __webpack_require__("./src/app/FILTERS/collection-end-date-filter/collection-end-date-filter.component.html"),
        styles: [__webpack_require__("./src/app/FILTERS/collection-end-date-filter/collection-end-date-filter.component.scss")]
    }),
    __metadata("design:paramtypes", [])
], CollectionEndDateFilter);
exports.CollectionEndDateFilter = CollectionEndDateFilter;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/FILTERS/collection-end-date-filter/collection-end-date-filter.component.js.map

/***/ }),

/***/ "./src/app/FILTERS/collection-start-date-filter/collection-start-date-filter.component.html":
/***/ (function(module, exports) {

module.exports = "<label for=\"from\">From</label>\r\n<input id=\"from\" type=\"date\" style=\"width: 12em\" (change)=\"onFromChange($event.target.value)\">\r\n\r\n<label for=\"to\">To</label>\r\n<input id=\"to\" type=\"date\" style=\"width: 12em\" (change)=\"onToChange($event.target.value)\">\r\n"

/***/ }),

/***/ "./src/app/FILTERS/collection-start-date-filter/collection-start-date-filter.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/FILTERS/collection-start-date-filter/collection-start-date-filter.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var CollectionStartDateFilter = (function () {
    function CollectionStartDateFilter() {
        this.lower = "";
        this.upper = "";
        this.changes = new core_1.EventEmitter(false);
    }
    CollectionStartDateFilter.prototype.ngOnInit = function () {
    };
    CollectionStartDateFilter.prototype.accepts = function (sample) {
        return ((Date.parse(sample[this.dateField]) >= Date.parse(this.lower)) && (Date.parse(sample[this.dateField]) <= Date.parse(this.upper)));
        //return true
    };
    CollectionStartDateFilter.prototype.isActive = function () {
        return ((this.lower !== '' && this.upper !== '') ? true : false);
        //return true;
    };
    CollectionStartDateFilter.prototype.onFromChange = function (value) {
        if (value == '') {
            this.lower = value;
            console.log("last 'from' date value was EMPTY");
            this.changes.emit(true);
        }
        else {
            this.lower = value;
            console.log("last from date value was:" + this.lower);
            this.changes.emit(true);
        }
    };
    CollectionStartDateFilter.prototype.onToChange = function (value) {
        if (value == '') {
            this.lower = value;
            console.log("last 'to' date value was EMPTY");
            this.changes.emit(true);
        }
        else {
            this.upper = value;
            console.log("last to date value was:" + this.upper);
            this.changes.emit(true);
        }
    };
    return CollectionStartDateFilter;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], CollectionStartDateFilter.prototype, "dateField", void 0);
CollectionStartDateFilter = __decorate([
    core_1.Component({
        selector: 'collection-start-date-filter',
        template: __webpack_require__("./src/app/FILTERS/collection-start-date-filter/collection-start-date-filter.component.html"),
        styles: [__webpack_require__("./src/app/FILTERS/collection-start-date-filter/collection-start-date-filter.component.scss")]
    }),
    __metadata("design:paramtypes", [])
], CollectionStartDateFilter);
exports.CollectionStartDateFilter = CollectionStartDateFilter;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/FILTERS/collection-start-date-filter/collection-start-date-filter.component.js.map

/***/ }),

/***/ "./src/app/FILTERS/date-added-filter/date-added-filter.component.html":
/***/ (function(module, exports) {

module.exports = "<label for=\"from\">From</label>\r\n<input id=\"from\" type=\"date\" style=\"width: 12em\" (change)=\"onFromChange($event.target.value)\">\r\n\r\n<label for=\"to\">To</label>\r\n<input id=\"to\" type=\"date\" style=\"width: 12em\" (change)=\"onToChange($event.target.value)\">\r\n\r\n"

/***/ }),

/***/ "./src/app/FILTERS/date-added-filter/date-added-filter.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/FILTERS/date-added-filter/date-added-filter.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var DateAddedFilter = (function () {
    function DateAddedFilter() {
        this.lower = "";
        this.upper = "";
        this.changes = new core_1.EventEmitter(false);
    }
    DateAddedFilter.prototype.ngOnInit = function () {
    };
    DateAddedFilter.prototype.accepts = function (sample) {
        return ((Date.parse(sample[this.dateField]) >= Date.parse(this.lower)) && (Date.parse(sample[this.dateField]) <= Date.parse(this.upper)));
        //return true
    };
    DateAddedFilter.prototype.isActive = function () {
        return ((this.lower !== '' && this.upper !== '') ? true : false);
        //return true;
    };
    DateAddedFilter.prototype.onFromChange = function (value) {
        if (value == '') {
            this.lower = value;
            console.log("last 'from' date value was EMPTY");
            this.changes.emit(true);
        }
        else {
            this.lower = value;
            console.log("last from date value was:" + this.lower);
            this.changes.emit(true);
        }
    };
    DateAddedFilter.prototype.onToChange = function (value) {
        if (value == '') {
            this.lower = value;
            console.log("last 'to' date value was EMPTY");
            this.changes.emit(true);
        }
        else {
            this.upper = value;
            console.log("last to date value was:" + this.upper);
            this.changes.emit(true);
        }
    };
    return DateAddedFilter;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DateAddedFilter.prototype, "dateField", void 0);
DateAddedFilter = __decorate([
    core_1.Component({
        selector: 'date-added-filter',
        template: __webpack_require__("./src/app/FILTERS/date-added-filter/date-added-filter.component.html"),
        styles: [__webpack_require__("./src/app/FILTERS/date-added-filter/date-added-filter.component.scss")]
    }),
    __metadata("design:paramtypes", [])
], DateAddedFilter);
exports.DateAddedFilter = DateAddedFilter;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/FILTERS/date-added-filter/date-added-filter.component.js.map

/***/ }),

/***/ "./src/app/FILTERS/date-updated-filter/date-updated-filter.component.html":
/***/ (function(module, exports) {

module.exports = "<label for=\"from\">From</label>\r\n<input id=\"from\" type=\"date\" style=\"width: 12em\" (change)=\"onFromChange($event.target.value)\">\r\n\r\n<label for=\"to\">To</label>\r\n<input id=\"to\" type=\"date\" style=\"width: 12em\" (change)=\"onToChange($event.target.value)\">\r\n"

/***/ }),

/***/ "./src/app/FILTERS/date-updated-filter/date-updated-filter.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/FILTERS/date-updated-filter/date-updated-filter.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var DateUpdatedFilter = (function () {
    function DateUpdatedFilter() {
        this.lower = "";
        this.upper = "";
        this.changes = new core_1.EventEmitter(false);
    }
    DateUpdatedFilter.prototype.ngOnInit = function () {
    };
    DateUpdatedFilter.prototype.accepts = function (sample) {
        return ((Date.parse(sample[this.dateField]) >= Date.parse(this.lower)) && (Date.parse(sample[this.dateField]) <= Date.parse(this.upper)));
        //return true
    };
    DateUpdatedFilter.prototype.isActive = function () {
        return ((this.lower !== '' && this.upper !== '') ? true : false);
        //return true;
    };
    DateUpdatedFilter.prototype.onFromChange = function (value) {
        if (value == '') {
            this.lower = value;
            console.log("last 'from' date value was EMPTY");
            this.changes.emit(true);
        }
        else {
            this.lower = value;
            console.log("last from date value was:" + this.lower);
            this.changes.emit(true);
        }
    };
    DateUpdatedFilter.prototype.onToChange = function (value) {
        if (value == '') {
            this.lower = value;
            console.log("last 'to' date value was EMPTY");
            this.changes.emit(true);
        }
        else {
            this.upper = value;
            console.log("last to date value was:" + this.upper);
            this.changes.emit(true);
        }
    };
    return DateUpdatedFilter;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], DateUpdatedFilter.prototype, "dateField", void 0);
DateUpdatedFilter = __decorate([
    core_1.Component({
        selector: 'date-updated-filter',
        template: __webpack_require__("./src/app/FILTERS/date-updated-filter/date-updated-filter.component.html"),
        styles: [__webpack_require__("./src/app/FILTERS/date-updated-filter/date-updated-filter.component.scss")]
    }),
    __metadata("design:paramtypes", [])
], DateUpdatedFilter);
exports.DateUpdatedFilter = DateUpdatedFilter;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/FILTERS/date-updated-filter/date-updated-filter.component.js.map

/***/ }),

/***/ "./src/app/FILTERS/filter-born-on-date-filter/filter-born-on-date-filter.component.html":
/***/ (function(module, exports) {

module.exports = "<label for=\"from\">From</label>\r\n<input id=\"from\" type=\"date\" style=\"width: 12em\" (change)=\"onFromChange($event.target.value)\">\r\n\r\n<label for=\"to\">To</label>\r\n<input id=\"to\" type=\"date\" style=\"width: 12em\" (change)=\"onToChange($event.target.value)\">\r\n\r\n"

/***/ }),

/***/ "./src/app/FILTERS/filter-born-on-date-filter/filter-born-on-date-filter.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/FILTERS/filter-born-on-date-filter/filter-born-on-date-filter.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var FilterBornOnDateFilter = (function () {
    function FilterBornOnDateFilter() {
        this.lower = "";
        this.upper = "";
        this.changes = new core_1.EventEmitter(false);
    }
    FilterBornOnDateFilter.prototype.ngOnInit = function () {
    };
    FilterBornOnDateFilter.prototype.accepts = function (sample) {
        return ((Date.parse(sample[this.dateField]) >= Date.parse(this.lower)) && (Date.parse(sample[this.dateField]) <= Date.parse(this.upper)));
        //return true
    };
    FilterBornOnDateFilter.prototype.isActive = function () {
        return ((this.lower !== '' && this.upper !== '') ? true : false);
        //return true;
    };
    FilterBornOnDateFilter.prototype.onFromChange = function (value) {
        if (value == '') {
            this.lower = value;
            console.log("last 'from' date value was EMPTY");
            this.changes.emit(true);
        }
        else {
            this.lower = value;
            console.log("last from date value was:" + this.lower);
            this.changes.emit(true);
        }
    };
    FilterBornOnDateFilter.prototype.onToChange = function (value) {
        if (value == '') {
            this.lower = value;
            console.log("last 'to' date value was EMPTY");
            this.changes.emit(true);
        }
        else {
            this.upper = value;
            console.log("last to date value was:" + this.upper);
            this.changes.emit(true);
        }
    };
    return FilterBornOnDateFilter;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], FilterBornOnDateFilter.prototype, "dateField", void 0);
FilterBornOnDateFilter = __decorate([
    core_1.Component({
        selector: 'filter-born-on-date-filter',
        template: __webpack_require__("./src/app/FILTERS/filter-born-on-date-filter/filter-born-on-date-filter.component.html"),
        styles: [__webpack_require__("./src/app/FILTERS/filter-born-on-date-filter/filter-born-on-date-filter.component.scss")]
    }),
    __metadata("design:paramtypes", [])
], FilterBornOnDateFilter);
exports.FilterBornOnDateFilter = FilterBornOnDateFilter;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/FILTERS/filter-born-on-date-filter/filter-born-on-date-filter.component.js.map

/***/ }),

/***/ "./src/app/FILTERS/filter-type-filter/filter-type-filter.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"select\">\r\n    <select [(ngModel)]=\"selectedFilterType\" name=\"filter_type\" (ngModelChange)=\"onSelect($event)\">\r\n        <option value=\"-1\"><span class=\"all\">ALL SAMPLE TYPES</span></option>\r\n        <option *ngFor=\"let filterType of allFilterTypes\" [ngValue]=\"filterType.id\">{{filterType.name}}</option>\r\n    </select>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/FILTERS/filter-type-filter/filter-type-filter.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/FILTERS/filter-type-filter/filter-type-filter.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var filter_type_service_1 = __webpack_require__("./src/app/SHARED/filter-type.service.ts");
var FilterTypeFilter = (function () {
    function FilterTypeFilter(_filterTypeService) {
        this._filterTypeService = _filterTypeService;
        this.changes = new core_1.EventEmitter(false);
    }
    FilterTypeFilter.prototype.ngOnInit = function () {
        var _this = this;
        //on init, call getStudies function which subscribes to the StudyService, set results to the allFilterTypes var
        this._filterTypeService.getFilterTypes()
            .subscribe(function (filterTypes) { return _this.allFilterTypes = filterTypes; }, function (error) { return _this.errorMessage = error; });
    };
    FilterTypeFilter.prototype.accepts = function (sample) {
        return (this.selectedFilterType === sample.filter_type);
    };
    FilterTypeFilter.prototype.isActive = function () {
        return ((this.selectedFilterType > -1) ? true : false);
    };
    FilterTypeFilter.prototype.onSelect = function (value) {
        console.log("Filter type has been selected");
        this.selectedFilterType = value;
        this.changes.emit(true);
    };
    return FilterTypeFilter;
}());
FilterTypeFilter = __decorate([
    core_1.Component({
        selector: 'filter-type-filter',
        template: __webpack_require__("./src/app/FILTERS/filter-type-filter/filter-type-filter.component.html"),
        styles: [__webpack_require__("./src/app/FILTERS/filter-type-filter/filter-type-filter.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof filter_type_service_1.FilterTypeService !== "undefined" && filter_type_service_1.FilterTypeService) === "function" && _a || Object])
], FilterTypeFilter);
exports.FilterTypeFilter = FilterTypeFilter;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/FILTERS/filter-type-filter/filter-type-filter.component.js.map

/***/ }),

/***/ "./src/app/FILTERS/matrix-type-filter/matrix-type-filter.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"select\">\r\n    <select [(ngModel)]=\"selectedMatrix\" name=\"matrix\" (ngModelChange)=\"onSelect($event)\">\r\n        <option value=\"-1\"><span class=\"all\">ALL MATRICES</span></option>\r\n        <option *ngFor=\"let matrix of allMatrices\" [ngValue]=\"matrix.id\">{{matrix.name}}</option>\r\n    </select>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/FILTERS/matrix-type-filter/matrix-type-filter.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/FILTERS/matrix-type-filter/matrix-type-filter.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var matrix_service_1 = __webpack_require__("./src/app/SHARED/matrix.service.ts");
var MatrixTypeFilter = (function () {
    function MatrixTypeFilter(_matrixService) {
        this._matrixService = _matrixService;
        this.changes = new core_1.EventEmitter(false);
    }
    MatrixTypeFilter.prototype.ngOnInit = function () {
        var _this = this;
        // on init, call getMatrices function which subscribes to the MatrixService, set results to the allMatrices var
        this._matrixService.getMatrices()
            .subscribe(function (matrices) { return _this.allMatrices = matrices; }, function (error) { return _this.errorMessage = error; });
    };
    MatrixTypeFilter.prototype.accepts = function (sample) {
        return (this.selectedMatrix === sample.matrix);
    };
    MatrixTypeFilter.prototype.isActive = function () {
        return ((this.selectedMatrix > -1) ? true : false);
    };
    MatrixTypeFilter.prototype.onSelect = function (value) {
        this.selectedMatrix = value;
        this.changes.emit(true);
    };
    return MatrixTypeFilter;
}());
MatrixTypeFilter = __decorate([
    core_1.Component({
        selector: 'matrix-type-filter',
        template: __webpack_require__("./src/app/FILTERS/matrix-type-filter/matrix-type-filter.component.html"),
        styles: [__webpack_require__("./src/app/FILTERS/matrix-type-filter/matrix-type-filter.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof matrix_service_1.MatrixService !== "undefined" && matrix_service_1.MatrixService) === "function" && _a || Object])
], MatrixTypeFilter);
exports.MatrixTypeFilter = MatrixTypeFilter;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/FILTERS/matrix-type-filter/matrix-type-filter.component.js.map

/***/ }),

/***/ "./src/app/FILTERS/multi-study-filter/multi-study-filter.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"select\">\r\n  <select [(ngModel)]=\"selectedStudies\" name=\"study\" (ngModelChange)=\"onSelect($event)\">\r\n    <option value=\"-1\">\r\n      <span class=\"all\">ALL STUDIES</span>\r\n    </option>\r\n    <option *ngFor=\"let study of allStudies\" [ngValue]=\"study.id\">{{study.name}}</option>\r\n  </select>\r\n</div>"

/***/ }),

/***/ "./src/app/FILTERS/multi-study-filter/multi-study-filter.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/FILTERS/multi-study-filter/multi-study-filter.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var study_service_1 = __webpack_require__("./src/app/studies/study.service.ts");
var MultiStudyFilterComponent = (function () {
    function MultiStudyFilterComponent(_studyService) {
        this._studyService = _studyService;
        this.changes = new core_1.EventEmitter(false);
    }
    MultiStudyFilterComponent.prototype.ngOnInit = function () {
        var _this = this;
        // on init, call getStudies function which subscribes to the StudyService, set results to the allStudies var
        this._studyService.getStudies()
            .subscribe(function (studies) { return _this.allStudies = studies; }, function (error) { return _this.errorMessage = error; });
    };
    MultiStudyFilterComponent.prototype.accepts = function (sample) {
        for (var _i = 0, _a = sample.studies; _i < _a.length; _i++) {
            var study = _a[_i];
            if (study.id === this.selectedStudy) {
                return true;
            }
        }
        //return (this.selectedStudy === sample.studies);
    };
    MultiStudyFilterComponent.prototype.isActive = function () {
        return ((this.selectedStudy > -1) ? true : false);
    };
    MultiStudyFilterComponent.prototype.onSelect = function (value) {
        console.log("Study has been selected");
        this.selectedStudy = value;
        this.changes.emit(true);
    };
    return MultiStudyFilterComponent;
}());
MultiStudyFilterComponent = __decorate([
    core_1.Component({
        selector: 'multi-study-filter',
        template: __webpack_require__("./src/app/FILTERS/multi-study-filter/multi-study-filter.component.html"),
        styles: [__webpack_require__("./src/app/FILTERS/multi-study-filter/multi-study-filter.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof study_service_1.StudyService !== "undefined" && study_service_1.StudyService) === "function" && _a || Object])
], MultiStudyFilterComponent);
exports.MultiStudyFilterComponent = MultiStudyFilterComponent;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/FILTERS/multi-study-filter/multi-study-filter.component.js.map

/***/ }),

/***/ "./src/app/FILTERS/range-filter/range-filter.component.html":
/***/ (function(module, exports) {

module.exports = "<label>ID Range</label><br>\r\n<label style=\"width: 8em\">From </label><input type=\"number\" min=\"0\" id=\"lower\" style=\"width: 4em\" (change)=\"onLowerChange($event.target.value)\"><br>\r\n<label style=\"width: 8em\">To </label><input type=\"number\" min=\"0\"  id=\"upper\" style=\"width: 4em\" (change)=\"onUpperChange($event.target.value)\">\r\n    "

/***/ }),

/***/ "./src/app/FILTERS/range-filter/range-filter.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/FILTERS/range-filter/range-filter.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var RangeFilter = (function () {
    function RangeFilter() {
        this.lower = -1;
        this.upper = -1;
        this.changes = new core_1.EventEmitter(false);
    }
    RangeFilter.prototype.ngOnInit = function () {
    };
    RangeFilter.prototype.accepts = function (sample) {
        return ((sample.id >= Number(this.lower)) && (sample.id <= Number(this.upper)));
        //return true
    };
    RangeFilter.prototype.isActive = function () {
        return ((this.lower > -1 && this.upper > -1) ? true : false);
        //return true;
    };
    //capture the value from the onchange, set it equal to a variable, compare within the accepts() function
    RangeFilter.prototype.onLowerChange = function (value) {
        if (value == '') {
            this.lower = -1;
            console.log("last lower range value was EMPTY ");
            this.changes.emit(true);
        }
        else {
            this.lower = value;
            console.log("last lower range value was:" + this.upper);
            this.changes.emit(true);
        }
    };
    RangeFilter.prototype.onUpperChange = function (value) {
        if (value == '') {
            this.upper = -1;
            console.log("last upper range value was EMPTY ");
            this.changes.emit(true);
        }
        else {
            this.upper = value;
            console.log("last upper range value was:" + this.upper);
            this.changes.emit(true);
        }
    };
    return RangeFilter;
}());
RangeFilter = __decorate([
    core_1.Component({
        selector: 'range-filter',
        template: __webpack_require__("./src/app/FILTERS/range-filter/range-filter.component.html"),
        styles: [__webpack_require__("./src/app/FILTERS/range-filter/range-filter.component.scss")]
    }),
    __metadata("design:paramtypes", [])
], RangeFilter);
exports.RangeFilter = RangeFilter;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/FILTERS/range-filter/range-filter.component.js.map

/***/ }),

/***/ "./src/app/FILTERS/record-type-filter/record-type-filter.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"select\">\r\n  <select [(ngModel)]=\"selectedRecordType\" name=\"recordType\" (ngModelChange)=\"onSelect($event)\">\r\n    <option value=\"-1\"><span class=\"all\">ALL RECORD TYPES</span></option>\r\n    <option *ngFor=\"let recordType of allRecordTypes\" [ngValue]=\"recordType.id\">{{recordType.name}}</option>\r\n  </select>\r\n</div>"

/***/ }),

/***/ "./src/app/FILTERS/record-type-filter/record-type-filter.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/FILTERS/record-type-filter/record-type-filter.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var record_type_service_1 = __webpack_require__("./src/app/SHARED/record-type.service.ts");
var RecordTypeFilter = (function () {
    function RecordTypeFilter(_recordTypeService) {
        this._recordTypeService = _recordTypeService;
        this.changes = new core_1.EventEmitter(false);
    }
    RecordTypeFilter.prototype.ngOnInit = function () {
        var _this = this;
        this._recordTypeService.getRecordTypes()
            .subscribe(function (recordTypes) { return _this.allRecordTypes = recordTypes; }, function (error) { return _this.errorMessage = error; });
    };
    RecordTypeFilter.prototype.accepts = function (sample) {
        return (this.selectedRecordType === sample.record_type);
    };
    RecordTypeFilter.prototype.isActive = function () {
        return ((this.selectedRecordType > -1) ? true : false);
    };
    RecordTypeFilter.prototype.onSelect = function (value) {
        this.selectedRecordType = value;
        this.changes.emit(true);
    };
    return RecordTypeFilter;
}());
RecordTypeFilter = __decorate([
    core_1.Component({
        selector: 'record-type-filter',
        template: __webpack_require__("./src/app/FILTERS/record-type-filter/record-type-filter.component.html"),
        styles: [__webpack_require__("./src/app/FILTERS/record-type-filter/record-type-filter.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof record_type_service_1.RecordTypeService !== "undefined" && record_type_service_1.RecordTypeService) === "function" && _a || Object])
], RecordTypeFilter);
exports.RecordTypeFilter = RecordTypeFilter;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/FILTERS/record-type-filter/record-type-filter.component.js.map

/***/ }),

/***/ "./src/app/FILTERS/sample-type-filter/sample-type-filter.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"select\">\r\n    <select [(ngModel)]=\"selectedSampleType\" name=\"sample_type\" (ngModelChange)=\"onSelect($event)\">\r\n        <option value=\"-1\"><span class=\"all\">ALL SAMPLE TYPES</span></option>\r\n        <option *ngFor=\"let sampleType of allSampleTypes\" [ngValue]=\"sampleType.id\">{{sampleType.code}}</option>\r\n    </select>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/FILTERS/sample-type-filter/sample-type-filter.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/FILTERS/sample-type-filter/sample-type-filter.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var sample_type_service_1 = __webpack_require__("./src/app/SHARED/sample-type.service.ts");
var SampleTypeFilter = (function () {
    function SampleTypeFilter(_sampleTypeService) {
        this._sampleTypeService = _sampleTypeService;
        this.changes = new core_1.EventEmitter(false);
    }
    SampleTypeFilter.prototype.ngOnInit = function () {
        var _this = this;
        //on init, call getStudies function which subscribes to the StudyService, set results to the allSampleTypes var
        this._sampleTypeService.getSampleTypes()
            .subscribe(function (sampleTypes) { return _this.allSampleTypes = sampleTypes; }, function (error) { return _this.errorMessage = error; });
    };
    SampleTypeFilter.prototype.accepts = function (sample) {
        return (this.selectedSampleType === sample.sample_type);
    };
    SampleTypeFilter.prototype.isActive = function () {
        return ((this.selectedSampleType > -1) ? true : false);
    };
    SampleTypeFilter.prototype.onSelect = function (value) {
        console.log("Sample type has been selected");
        this.selectedSampleType = value;
        this.changes.emit(true);
    };
    return SampleTypeFilter;
}());
SampleTypeFilter = __decorate([
    core_1.Component({
        selector: 'sample-type-filter',
        template: __webpack_require__("./src/app/FILTERS/sample-type-filter/sample-type-filter.component.html"),
        styles: [__webpack_require__("./src/app/FILTERS/sample-type-filter/sample-type-filter.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof sample_type_service_1.SampleTypeService !== "undefined" && sample_type_service_1.SampleTypeService) === "function" && _a || Object])
], SampleTypeFilter);
exports.SampleTypeFilter = SampleTypeFilter;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/FILTERS/sample-type-filter/sample-type-filter.component.js.map

/***/ }),

/***/ "./src/app/FILTERS/sampler-name-filter/sampler-name-filter.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"select\">\r\n    <select [(ngModel)]=\"selectedUsers\" name=\"sampler_name\" (ngModelChange)=\"onSelect($event)\">\r\n        <option value=\"-1\"><span class=\"all\">ALL USERS</span></option>\r\n        <option *ngFor=\"let user of allUsers\" [ngValue]=\"user.id\">{{user.username}}</option>\r\n    </select>\r\n</div>"

/***/ }),

/***/ "./src/app/FILTERS/sampler-name-filter/sampler-name-filter.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/FILTERS/sampler-name-filter/sampler-name-filter.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var user_service_1 = __webpack_require__("./src/app/SHARED/user.service.ts");
var SamplerNameFilter = (function () {
    function SamplerNameFilter(_userService) {
        this._userService = _userService;
        this.changes = new core_1.EventEmitter(false);
    }
    SamplerNameFilter.prototype.ngOnInit = function () {
        var _this = this;
        //on init, call getUsers function which subscribes to the UserService, set results to the allUsers var
        this._userService.getUsers()
            .subscribe(function (users) { return _this.allUsers = users; }, function (error) { return _this.errorMessage = error; });
    };
    SamplerNameFilter.prototype.accepts = function (sample) {
        return (this.selectedUser === sample.sampler_name.id);
    };
    SamplerNameFilter.prototype.isActive = function () {
        return ((this.selectedUser > -1) ? true : false);
    };
    SamplerNameFilter.prototype.onSelect = function (value) {
        console.log("Sample type has been selected");
        this.selectedUser = value;
        this.changes.emit(true);
    };
    return SamplerNameFilter;
}());
SamplerNameFilter = __decorate([
    core_1.Component({
        selector: 'sampler-name-filter',
        template: __webpack_require__("./src/app/FILTERS/sampler-name-filter/sampler-name-filter.component.html"),
        styles: [__webpack_require__("./src/app/FILTERS/sampler-name-filter/sampler-name-filter.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" && _a || Object])
], SamplerNameFilter);
exports.SamplerNameFilter = SamplerNameFilter;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/FILTERS/sampler-name-filter/sampler-name-filter.component.js.map

/***/ }),

/***/ "./src/app/FILTERS/study-filter/study-filter.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"select\">\r\n    <select [(ngModel)]=\"selectedStudy\" name=\"study\" (ngModelChange)=\"onSelect($event)\">\r\n        <option value=\"-1\">\r\n            <span class=\"all\">ALL STUDIES</span>\r\n        </option>\r\n        <option *ngFor=\"let study of allStudies\" [ngValue]=\"study.id\">{{study.name}}</option>\r\n    </select>\r\n</div>"

/***/ }),

/***/ "./src/app/FILTERS/study-filter/study-filter.component.scss":
/***/ (function(module, exports) {

module.exports = ".all {\n  font-weight: bold; }\n"

/***/ }),

/***/ "./src/app/FILTERS/study-filter/study-filter.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var study_service_1 = __webpack_require__("./src/app/studies/study.service.ts");
var StudyFilter = (function () {
    function StudyFilter(_studyService) {
        this._studyService = _studyService;
        this.changes = new core_1.EventEmitter(false);
    }
    StudyFilter.prototype.ngOnInit = function () {
        var _this = this;
        // on init, call getStudies function which subscribes to the StudyService, set results to the allStudies var
        this._studyService.getStudies()
            .subscribe(function (studies) { return _this.allStudies = studies; }, function (error) { return _this.errorMessage = error; });
    };
    StudyFilter.prototype.accepts = function (sample) {
        return (this.selectedStudy === sample.study);
    };
    StudyFilter.prototype.isActive = function () {
        return ((this.selectedStudy > -1) ? true : false);
    };
    StudyFilter.prototype.onSelect = function (value) {
        this.selectedStudy = value;
        this.changes.emit(true);
    };
    return StudyFilter;
}());
StudyFilter = __decorate([
    core_1.Component({
        selector: 'study-filter',
        template: __webpack_require__("./src/app/FILTERS/study-filter/study-filter.component.html"),
        styles: [__webpack_require__("./src/app/FILTERS/study-filter/study-filter.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof study_service_1.StudyService !== "undefined" && study_service_1.StudyService) === "function" && _a || Object])
], StudyFilter);
exports.StudyFilter = StudyFilter;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/FILTERS/study-filter/study-filter.component.js.map

/***/ }),

/***/ "./src/app/FILTERS/target-filter/target-filter.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"select\">\r\n  <select [(ngModel)]=\"selectedTarget\" name=\"target\" (ngModelChange)=\"onSelect($event)\">\r\n    <option value=\"-1\">\r\n      <span class=\"all\">ALL TARGETS</span>\r\n    </option>\r\n    <option *ngFor=\"let target of allTargets\" [ngValue]=\"target.id\">{{target.name}}</option>\r\n  </select>\r\n</div>"

/***/ }),

/***/ "./src/app/FILTERS/target-filter/target-filter.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/FILTERS/target-filter/target-filter.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var target_service_1 = __webpack_require__("./src/app/targets/target.service.ts");
var TargetFilter = (function () {
    function TargetFilter(_targetService) {
        this._targetService = _targetService;
        this.changes = new core_1.EventEmitter(false);
    }
    TargetFilter.prototype.ngOnInit = function () {
        var _this = this;
        //on init, call getTargets function which subscribes to the TargetService, set results to the allTargets var
        this._targetService.getTargets()
            .subscribe(function (targets) {
            _this.allTargets = targets;
            _this.allTargets.sort(function (a, b) {
                if (a.name < b.name) {
                    return -1;
                }
                ;
                if (a.name > b.name) {
                    return 1;
                }
                ;
                return 0;
            });
        }, function (error) { _this.errorMessage = error; });
    };
    TargetFilter.prototype.accepts = function (fsmc) {
        return (this.selectedTarget === fsmc.target);
    };
    TargetFilter.prototype.isActive = function () {
        return ((this.selectedTarget > -1) ? true : false);
    };
    TargetFilter.prototype.onSelect = function (value) {
        this.selectedTarget = value;
        this.changes.emit(true);
    };
    return TargetFilter;
}());
TargetFilter = __decorate([
    core_1.Component({
        selector: 'target-filter',
        template: __webpack_require__("./src/app/FILTERS/target-filter/target-filter.component.html"),
        styles: [__webpack_require__("./src/app/FILTERS/target-filter/target-filter.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof target_service_1.TargetService !== "undefined" && target_service_1.TargetService) === "function" && _a || Object])
], TargetFilter);
exports.TargetFilter = TargetFilter;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/FILTERS/target-filter/target-filter.component.js.map

/***/ }),

/***/ "./src/app/SHARED/display-value.pipe.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
/*
 * Retrieve display value for a field
 * Accepts the field name and the field id
 * returns the appropriate display value for UI display
 * Usage:
 *  value | displayValue:sourceArray
 * Example:
 *  {{sample.sample_type | displayValue:'name':this.sampleTypes}}
 * formats to: "Performance Evaluation"
 */
var DisplayValuePipe = (function () {
    function DisplayValuePipe() {
    }
    DisplayValuePipe.prototype.transform = function (value, displayProperty, sourceArray) {
        var displayValue;
        for (var i = 0; i < sourceArray.length; i++) {
            if (sourceArray[i].id === parseInt(value, 10)) {
                displayValue = sourceArray[i][displayProperty];
            }
        }
        return displayValue;
    };
    return DisplayValuePipe;
}());
DisplayValuePipe = __decorate([
    core_1.Pipe({
        name: 'displayValue'
    })
], DisplayValuePipe);
exports.DisplayValuePipe = DisplayValuePipe;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/SHARED/display-value.pipe.js.map

/***/ }),

/***/ "./src/app/SHARED/filter-type.resolve.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var filter_type_service_1 = __webpack_require__("./src/app/SHARED/filter-type.service.ts");
var FilterResolve = (function () {
    function FilterResolve(_filterService) {
        this._filterService = _filterService;
    }
    FilterResolve.prototype.resolve = function (route) {
        return this._filterService.getFilterTypes();
    };
    return FilterResolve;
}());
FilterResolve = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof filter_type_service_1.FilterTypeService !== "undefined" && filter_type_service_1.FilterTypeService) === "function" && _a || Object])
], FilterResolve);
exports.FilterResolve = FilterResolve;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/SHARED/filter-type.resolve.js.map

/***/ }),

/***/ "./src/app/SHARED/filter-type.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var FilterTypeService = (function () {
    function FilterTypeService(_http) {
        this._http = _http;
    }
    FilterTypeService.prototype.getFilterTypes = function () {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.get(app_settings_1.APP_SETTINGS.FILTER_TYPES_URL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    FilterTypeService.prototype.create = function (formValue) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS });
        return this._http.post(app_settings_1.APP_SETTINGS.FILTER_TYPES_URL, formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    FilterTypeService.prototype.update = function (formValue) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.put(app_settings_1.APP_SETTINGS.FILTER_TYPES_URL + formValue.id + '/', formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    FilterTypeService.prototype.delete = function (id) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.delete(app_settings_1.APP_SETTINGS.FILTER_TYPES_URL + id, options)
            .catch(this.handleError);
    };
    FilterTypeService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return FilterTypeService;
}());
FilterTypeService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], FilterTypeService);
exports.FilterTypeService = FilterTypeService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/SHARED/filter-type.service.js.map

/***/ }),

/***/ "./src/app/SHARED/matrix.resolve.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var matrix_service_1 = __webpack_require__("./src/app/SHARED/matrix.service.ts");
var MatrixResolve = (function () {
    function MatrixResolve(_matrixService) {
        this._matrixService = _matrixService;
    }
    MatrixResolve.prototype.resolve = function (route) {
        return this._matrixService.getMatrices();
    };
    return MatrixResolve;
}());
MatrixResolve = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof matrix_service_1.MatrixService !== "undefined" && matrix_service_1.MatrixService) === "function" && _a || Object])
], MatrixResolve);
exports.MatrixResolve = MatrixResolve;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/SHARED/matrix.resolve.js.map

/***/ }),

/***/ "./src/app/SHARED/matrix.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var MatrixService = (function () {
    function MatrixService(_http) {
        this._http = _http;
        this._matricesUrl = 'https://raw.githubusercontent.com/USGS-WiM/lide-lims/master/src/app/demo-services/matrix.json';
    }
    MatrixService.prototype.getMatrices = function () {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.get(app_settings_1.APP_SETTINGS.MATRICES_URL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    MatrixService.prototype.create = function (formValue) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS });
        return this._http.post(app_settings_1.APP_SETTINGS.MATRICES_URL, formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    MatrixService.prototype.update = function (formValue) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.put(app_settings_1.APP_SETTINGS.MATRICES_URL + formValue.id + '/', formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    MatrixService.prototype.delete = function (id) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.delete(app_settings_1.APP_SETTINGS.MATRICES_URL + id, options)
            .catch(this.handleError);
    };
    MatrixService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return MatrixService;
}());
MatrixService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], MatrixService);
exports.MatrixService = MatrixService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/SHARED/matrix.service.js.map

/***/ }),

/***/ "./src/app/SHARED/record-type.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var RecordTypeService = (function () {
    function RecordTypeService(_http) {
        this._http = _http;
    }
    RecordTypeService.prototype.getRecordTypes = function () {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.get(app_settings_1.APP_SETTINGS.RECORD_TYPES_URL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    RecordTypeService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return RecordTypeService;
}());
RecordTypeService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], RecordTypeService);
exports.RecordTypeService = RecordTypeService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/SHARED/record-type.service.js.map

/***/ }),

/***/ "./src/app/SHARED/reverse-transcription.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var ReverseTranscriptionService = (function () {
    function ReverseTranscriptionService(_http) {
        this._http = _http;
    }
    ReverseTranscriptionService.prototype.update = function (formValue) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.patch(app_settings_1.APP_SETTINGS.RT_URL + formValue.id + '/', formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    ReverseTranscriptionService.prototype.delete = function (id) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.delete(app_settings_1.APP_SETTINGS.RT_URL + id, options)
            .catch(this.handleError);
    };
    ReverseTranscriptionService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return ReverseTranscriptionService;
}());
ReverseTranscriptionService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], ReverseTranscriptionService);
exports.ReverseTranscriptionService = ReverseTranscriptionService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/SHARED/reverse-transcription.service.js.map

/***/ }),

/***/ "./src/app/SHARED/sample-type.resolve.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var sample_type_service_1 = __webpack_require__("./src/app/SHARED/sample-type.service.ts");
var SampleTypeResolve = (function () {
    function SampleTypeResolve(_filterService) {
        this._filterService = _filterService;
    }
    SampleTypeResolve.prototype.resolve = function (route) {
        return this._filterService.getSampleTypes();
    };
    return SampleTypeResolve;
}());
SampleTypeResolve = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof sample_type_service_1.SampleTypeService !== "undefined" && sample_type_service_1.SampleTypeService) === "function" && _a || Object])
], SampleTypeResolve);
exports.SampleTypeResolve = SampleTypeResolve;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/SHARED/sample-type.resolve.js.map

/***/ }),

/***/ "./src/app/SHARED/sample-type.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var SampleTypeService = (function () {
    function SampleTypeService(_http) {
        this._http = _http;
    }
    SampleTypeService.prototype.getSampleTypes = function () {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.get(app_settings_1.APP_SETTINGS.SAMP_TYPES_URL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    SampleTypeService.prototype.create = function (formValue) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS });
        return this._http.post(app_settings_1.APP_SETTINGS.SAMP_TYPES_URL, formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    SampleTypeService.prototype.update = function (formValue) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.put(app_settings_1.APP_SETTINGS.SAMP_TYPES_URL + formValue.id + '/', formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    SampleTypeService.prototype.delete = function (id) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.delete(app_settings_1.APP_SETTINGS.SAMP_TYPES_URL + id, options)
            .catch(this.handleError);
    };
    SampleTypeService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return SampleTypeService;
}());
SampleTypeService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], SampleTypeService);
exports.SampleTypeService = SampleTypeService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/SHARED/sample-type.service.js.map

/***/ }),

/***/ "./src/app/SHARED/server-test.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var ErrorObservable_1 = __webpack_require__("./node_modules/rxjs/_esm5/observable/ErrorObservable.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var ServerTestService = (function () {
    function ServerTestService(_http) {
        this._http = _http;
    }
    ServerTestService.prototype.testLIDEServices = function () {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.ADMIN_MIN_AUTH_JSON_HEADERS });
        return this._http.get(app_settings_1.APP_SETTINGS.ROOT_URL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    ServerTestService.prototype.handleError = function (error) {
        if (error.error instanceof ErrorEvent) {
            // A client-side or network error occurred. Handle it accordingly.
            console.error('An error occurred:', error.error.message);
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong,
            console.error("Backend returned code " + error.status + ", " +
                ("body was: " + error.error));
        }
        // return an ErrorObservable with a user-facing error message
        return new ErrorObservable_1.ErrorObservable('Something bad happened; please try again later.');
    };
    ;
    return ServerTestService;
}());
ServerTestService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], ServerTestService);
exports.ServerTestService = ServerTestService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/SHARED/server-test.service.js.map

/***/ }),

/***/ "./src/app/SHARED/user.resolve.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var user_service_1 = __webpack_require__("./src/app/SHARED/user.service.ts");
var UserResolve = (function () {
    function UserResolve(_userService) {
        this._userService = _userService;
    }
    UserResolve.prototype.resolve = function (route) {
        return this._userService.getUsers();
    };
    return UserResolve;
}());
UserResolve = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" && _a || Object])
], UserResolve);
exports.UserResolve = UserResolve;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/SHARED/user.resolve.js.map

/***/ }),

/***/ "./src/app/SHARED/user.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var UserService = (function () {
    function UserService(_http) {
        this._http = _http;
    }
    UserService.prototype.getUsers = function () {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.get(app_settings_1.APP_SETTINGS.USERS_URL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    UserService.prototype.create = function (formValue) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS });
        return this._http.post(app_settings_1.APP_SETTINGS.USERS_URL, formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    UserService.prototype.update = function (formValue) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.put(app_settings_1.APP_SETTINGS.USERS_URL + formValue.id + '/', formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    UserService.prototype.delete = function (id) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.delete(app_settings_1.APP_SETTINGS.USERS_URL + id, options)
            .catch(this.handleError);
    };
    UserService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return UserService;
}());
UserService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], UserService);
exports.UserService = UserService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/SHARED/user.service.js.map

/***/ }),

/***/ "./src/app/admin/admin.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"masonry-layout-2\">\r\n    <div class=\"masonry-block\">\r\n        <concentrationtypes [ConcentrationTypes]=\"ctypes\"></concentrationtypes>\r\n    </div>\r\n    <div class=\"masonry-block\">\r\n        <units [Units]=\"units\"></units>\r\n    </div>\r\n\r\n\r\n    <div class=\"masonry-block\">\r\n        <extractionmethods [ExtractionMethods]=\"extractionMethods\"></extractionmethods>\r\n    </div>\r\n    <div class=\"masonry-block\">\r\n        <filtertypes [FilterTypes]=\"filters\" [Matrices]=\"matrices\"></filtertypes>\r\n    </div>\r\n\r\n\r\n    <div class=\"masonry-block\">\r\n        <matrices [MatrixTypes]=\"matrices\"></matrices>\r\n    </div>\r\n    <div class=\"masonry-block\">\r\n        <sampletypes [SampleTypes]=\"stypes\"></sampletypes>\r\n    </div>\r\n\r\n\r\n    <div class=\"masonry-block\">\r\n        <targets [Targets]=\"targets\"></targets>\r\n    </div>\r\n    <div class=\"masonry-block\">\r\n        <users [Users]=\"users\"></users>\r\n    </div>\r\n</div>\r\n<!--\r\n<div class=\"row\">\r\n    <div class=\"col-lg-6 col-md-6 col-xs-12\">\r\n        <users [Users]=\"users\"></users>\r\n    </div>\r\n</div>-->"

/***/ }),

/***/ "./src/app/admin/admin.component.scss":
/***/ (function(module, exports) {

module.exports = "/*Masonry layout - admin page - 2 columns*/\n.masonry-layout-2 {\n  -webkit-column-count: 2;\n          column-count: 2;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  padding: 0 0 80px 0; }\n@media (max-width: 1200px) {\n    .masonry-layout-2 {\n      -webkit-column-count: 1;\n              column-count: 1; } }\n.masonry-layout-2 .masonry-block .card {\n    height: 420px !important; }\n.masonry-layout-2 .masonry-block .col-lg-12,\n  .masonry-layout-2 .masonry-block .col-md-12,\n  .masonry-layout-2 .masonry-block .col-sm-12,\n  .masonry-layout-2 .masonry-block .col-xs-12,\n  .masonry-layout-2 .masonry-block .col-lg-6,\n  .masonry-layout-2 .masonry-block .col-md-6,\n  .masonry-layout-2 .masonry-block .col-sm-6,\n  .masonry-layout-2 .masonry-block .col-xs-6 {\n    padding: 0 !important; }\n.datagrid-action-bar,\nclr-dg-action-bar {\n  -ms-flex-wrap: wrap !important;\n      flex-wrap: wrap !important; }\n.btn-group {\n  padding-top: 5px !important;\n  padding-bottom: 5px !important; }\n@media (max-width: 800px) {\n  .content-area {\n    padding: 15px !important; } }\n"

/***/ }),

/***/ "./src/app/admin/admin.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
var AdminComponent = (function () {
    function AdminComponent(_route) {
        this._route = _route;
    }
    AdminComponent.prototype.ngOnInit = function () {
        var _this = this;
        this._route.data.subscribe(function (data) {
            _this.ctypes = data.concentrationTypes;
        });
        this._route.data.subscribe(function (data) {
            _this.units = data.units;
        });
        this._route.data.subscribe(function (data) {
            _this.extractionMethods = data.extractionMethods;
        });
        this._route.data.subscribe(function (data) {
            _this.filters = data.filterTypes;
        });
        this._route.data.subscribe(function (data) {
            _this.matrices = data.matrixTypes;
        });
        this._route.data.subscribe(function (data) {
            _this.stypes = data.sampleTypes;
        });
        this._route.data.subscribe(function (data) {
            _this.targets = data.targets;
        });
        this._route.data.subscribe(function (data) {
            _this.users = data.users;
        });
    };
    return AdminComponent;
}());
AdminComponent = __decorate([
    core_1.Component({
        selector: 'app-admin',
        template: __webpack_require__("./src/app/admin/admin.component.html"),
        styles: [__webpack_require__("./src/app/admin/admin.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof router_1.ActivatedRoute !== "undefined" && router_1.ActivatedRoute) === "function" && _a || Object])
], AdminComponent);
exports.AdminComponent = AdminComponent;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/admin/admin.component.js.map

/***/ }),

/***/ "./src/app/admin/concentration-types/concentration-types.component.html":
/***/ (function(module, exports) {

module.exports = "<!-- concentration type table -->\r\n<div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n\t<div class=\"card\">\r\n\t\t<div class=\"card-block\">\r\n\t\t\t<div class=\"card-title\">Concentration Types</div>\r\n\t\t\t<div class=\"card-text\">\r\n\t\t\t\t<!-- add concentration card -->\r\n\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t<div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\" *ngIf=\"showHideAdd\">\r\n\t\t\t\t\t\t<div class=\"card\">\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<clr-datagrid [(clrDgSingleSelected)]=\"selectedConcentration\">\r\n\t\t\t\t\t<!-- add, edit and delete concentration buttons -->\r\n\t\t\t\t\t<clr-dg-action-bar>\r\n\t\t\t\t\t\t<div class=\"btn-group\">\r\n\t\t\t\t\t\t\t<button class=\"btn btn-sm\" (click)=\"showAddModal()\">\r\n\t\t\t\t\t\t\t\t<clr-icon shape=\"plus\"></clr-icon> Add</button>\r\n\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedConcentration\" (click)=\"editCT(selectedConcentration)\">\r\n\t\t\t\t\t\t\t\t<clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit</button>\r\n\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedConcentration\" (click)=\"deleteCT(selectedConcentration)\">\r\n\t\t\t\t\t\t\t\t<clr-icon shape=\"trash\" size=\"16\"></clr-icon> Delete</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</clr-dg-action-bar>\r\n\r\n\t\t\t\t\t<!-- table of all concentrations -->\r\n\t\t\t\t\t<clr-dg-column [clrDgField]=\"'id'\">\r\n\t\t\t\t\t\t<ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n\t\t\t\t\t\t\tConcentration Type ID\r\n\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t</clr-dg-column>\r\n\r\n\t\t\t\t\t<clr-dg-column [clrDgField]=\"'name'\">\r\n\t\t\t\t\t\t<ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n\t\t\t\t\t\t\tConcentration Type Name\r\n\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t</clr-dg-column>\r\n\r\n\t\t\t\t\t<clr-dg-row *clrDgItems=\"let ct of ConcentrationTypes\" [clrDgItem]=\"ct\">\r\n\t\t\t\t\t\t<clr-dg-cell>{{ct.id}}</clr-dg-cell>\r\n\t\t\t\t\t\t<clr-dg-cell>{{ct.name}}</clr-dg-cell>\r\n\t\t\t\t\t</clr-dg-row>\r\n\t\t\t\t</clr-datagrid>\r\n\t\t\t</div>\r\n\t\t\t<!-- end main concentration card text -->\r\n\t\t</div>\r\n\t\t<!-- end main concentration card block -->\r\n\t</div>\r\n\t<!-- end main concentration card -->\r\n</div>\r\n\r\n<!-- add Concentration Type Modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideAdd\">\r\n\t<h3 class=\"modal-title\"><clr-icon shape=\"plus\"></clr-icon> Add Concentration Type</h3>\r\n\t<div class=\"modal-body\">\r\n\t\t<div class=\"row\">\r\n\t\t\t<div class=\"col-lg-12\">\r\n\t\t\t\t<form id=\"addCTForm\" class=\"compact\" [formGroup]=\"addCTForm\" (ngSubmit)=\"onSubmitCT('add', addCTForm.value)\">\r\n\t\t\t\t\t<div class=\"card-block\">\r\n\t\t\t\t\t\t<div class=\"card-title\">Add Concentration Type</div>\r\n\t\t\t\t\t\t<div class=\"card-text\">\r\n\t\t\t\t\t\t\t<clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showCTCreateError\">\r\n\t\t\t\t\t\t\t\t<div clr-alert-item class=\"alert-item\">\r\n\t\t\t\t\t\t\t\t\t<span class=\"alert-text\">Submission error. Concentration Type not submitted. {{errorMessage}}</span>\r\n\t\t\t\t\t\t\t\t\t<div class=\"alert-actions\">\r\n\t\t\t\t\t\t\t\t\t\t<a class=\"alert-action\" (click)=\"onSubmitCT('add', addCTForm.value)\">Try again</a>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</clr-alert>\r\n\r\n\t\t\t\t\t\t\t<clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showCTCreateSuccess\">\r\n\t\t\t\t\t\t\t\t<div clr-alert-item class=\"alert-item\">\r\n\t\t\t\t\t\t\t\t\t<span class=\"alert-text\">Concentration Type successfully submitted</span>\r\n\t\t\t\t\t\t\t\t\t<div class=\"alert-actions\">\r\n\t\t\t\t\t\t\t\t\t\t<a class=\"alert-action\" (click)=\"showHideAdd = false; showCTCreateSuccess = false\">Close</a>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</clr-alert>\r\n\r\n\t\t\t\t\t\t\t<section class=\"form-block\">\r\n\t\t\t\t\t\t\t\t<!--<label>Add Concentration Type</label>-->\r\n\t\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t<label class=\"required\">Name</label>\r\n\t\t\t\t\t\t\t\t\t<label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm tooltip-top-left\" [class.invalid]=\"addCTForm.get('name').invalid && (addCTForm.get('name').dirty || addCTForm.get('name').touched)\">\r\n\t\t\t\t\t\t\t\t\t\t<input id=\"name\" type=\"text\" class=\"form-control\" formControlName=\"name\" size=\"30\">\r\n\t\t\t\t\t\t\t\t\t\t<span class=\"tooltip-content\">Name is required.</span>\r\n\t\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</section>\r\n\t\t\t\t\t\t\t<button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"addCTForm.invalid\" [clrLoading]=\"submitLoading\">Submit</button>\r\n\t\t\t\t\t\t\t<button class=\"btn btn-info\" (click)=\"showHideEdit = !showHideAdd\">Close</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\t\t\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</clr-modal>\r\n\r\n<!-- edit Concentration Type Modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideEdit\">\r\n\t<h3 class=\"modal-title\"><clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit Concentration Type</h3>\r\n\t<div class=\"modal-body\">\r\n\r\n\t\t<div class=\"row\">\r\n\t\t\t<div class=\"col-lg-12\">\r\n\t\t\t\t<clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showCTEditError\">\r\n\t\t\t\t\t<div clr-alert-item class=\"alert-item\">\r\n\t\t\t\t\t\t<span class=\"alert-text\">Submission error. Concentration Type not edited.</span>\r\n\t\t\t\t\t\t<div class=\"alert-actions\">\r\n\t\t\t\t\t\t\t<a class=\"alert-action\" (click)=\"onSubmitCT('edit', editCTForm.value)\">Try again</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</clr-alert>\r\n\r\n\t\t\t\t<clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showCTEditSuccess\">\r\n\t\t\t\t\t<div clr-alert-item class=\"alert-item\">\r\n\t\t\t\t\t\t<span class=\"alert-text\">Concentration Type successfully edited</span>\r\n\t\t\t\t\t\t<!--<div class=\"alert-actions\"> <!- I don't want this extra inner close -->\r\n\t\t\t\t\t\t<!--                <a class=\"alert-action\" (click)=\"showHideEdit = false; showCTEditSuccess = false\">Close</a>\r\n              </div>-->\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</clr-alert>\r\n\r\n\t\t\t\t<form id=\"editCTForm\" class=\"compact\" [formGroup]=\"editCTForm\" (ngSubmit)=\"onSubmitCT('edit', editCTForm.value)\">\r\n\t\t\t\t\t<section class=\"form-block\">\r\n\t\t\t\t\t\t<label>Selected Concentration Type: {{selectedCTName}}</label>\r\n\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t<label for=\"CTId\">Concentration Type ID</label>\r\n\t\t\t\t\t\t\t<input type=\"text\" id=\"CTId\" size=\"35\" formControlName=\"id\" readonly>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t<label class=\"required\">Name</label>\r\n\t\t\t\t\t\t\t<label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"editCTForm.get('name').invalid && (editCTForm.get('name').dirty || editCTForm.get('name').touched)\">\r\n\t\t\t\t\t\t\t\t<input id=\"name\" type=\"text\" formControlName=\"name\" size=\"40\">\r\n\t\t\t\t\t\t\t\t<span class=\"tooltip-content\">Name is required.</span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"editCTForm.invalid\" [clrLoading]=\"submitLoading\">Save Edits</button>\r\n\t\t\t\t\t\t<button class=\"btn btn-info\" (click)=\"showHideEdit = !showHideEdit\">Close</button>\r\n\r\n\t\t\t\t\t</section>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</clr-modal>\r\n\r\n<!-- delete concentration type Modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideDelete\">\r\n\t<h3 class=\"modal-title\"><clr-icon shape=\"trash\" size=\"16\"></clr-icon> Delete Concentration Type</h3>\r\n\t<div class=\"modal-body\">\r\n\t\t<div class=\"row\">\r\n\t\t\t<div class=\"col-lg-12\">\r\n\t\t\t\t<clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showCTDeleteError\">\r\n\t\t\t\t\t<div clr-alert-item class=\"alert-item\">\r\n\t\t\t\t\t\t<span class=\"alert-text\">Submission error. Concentration Type not deleted.</span>\r\n\t\t\t\t\t\t<div class=\"alert-actions\">\r\n\t\t\t\t\t\t\t<a class=\"alert-action\" (click)=\"submitDelete()\">Try again</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</clr-alert>\r\n\r\n\t\t\t\t<clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showCTDeleteSuccess\">\r\n\t\t\t\t\t<div clr-alert-item class=\"alert-item\">\r\n\t\t\t\t\t\t<span class=\"alert-text\">Concentration Type successfully deleted.</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</clr-alert>\r\n\r\n\t\t\t\t<div *ngIf=\"!showCTDeleteSuccess\">\r\n\t\t\t\t\t<p>Are you sure you want to delete concentration type<b> {{selectedCTName}}</b> ?</p>\r\n\r\n\t\t\t\t\t<button class=\"btn btn-primary\" type=\"button\" (click)=\"submitDelete()\" [clrLoading]=\"submitLoading\">Delete</button>\r\n\t\t\t\t\t<button class=\"btn btn-info\" (click)=\"showHideDelete = !showHideDelete\">Close</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</clr-modal>"

/***/ }),

/***/ "./src/app/admin/concentration-types/concentration-types.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/admin/concentration-types/concentration-types.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var concentration_types_service_1 = __webpack_require__("./src/app/concentration-types/concentration-types.service.ts");
var ConcentrationTypesComponent = (function () {
    function ConcentrationTypesComponent(_route, _concentrationService, _cdr) {
        this._route = _route;
        this._concentrationService = _concentrationService;
        this._cdr = _cdr;
        // add concentration form - declare a reactive form with appropriate concentration fields
        this.addCTForm = new forms_1.FormGroup({
            name: new forms_1.FormControl('', forms_1.Validators.required)
        });
        // edit concentration form - declare a reactive form
        this.editCTForm = new forms_1.FormGroup({
            id: new forms_1.FormControl(''),
            name: new forms_1.FormControl('', forms_1.Validators.required)
        });
    }
    ConcentrationTypesComponent.prototype.ngOnInit = function () {
        this.showHideAdd = false;
        this.showHideEdit = false;
        this.showHideDelete = false;
        this.showCTCreateError = false;
        this.showCTEditError = false;
        this.showCTDeleteError = false;
        this.showCTCreateSuccess = false;
        this.showCTEditSuccess = false;
        this.showCTDeleteSuccess = false;
        this.submitLoading = false;
    };
    ConcentrationTypesComponent.prototype.showAddModal = function () {
        this.showHideAdd = !this.showHideAdd;
        //reset these to false in case Add Concentration is clicked more than once
        this.showCTCreateError = false;
        this.showCTCreateSuccess = false;
    };
    ConcentrationTypesComponent.prototype.editCT = function (selectedConcentration) {
        this.editCTForm.reset(); //reset here to ensure states are clean (instead of after update complete)
        this.showCTEditSuccess = false; //reset this 
        this.showCTEditError = false; //reset this 
        this.selectedCTName = selectedConcentration.name;
        this.selectedCTId = selectedConcentration.id;
        this.editCTForm.setValue({
            id: this.selectedCTId,
            name: this.selectedCTName
        });
        // show the edit concentration form if not showing already
        if (this.showHideEdit === false) {
            this.showHideEdit = true;
        }
    };
    ConcentrationTypesComponent.prototype.updateCTArray = function (newItem) {
        var updateItem = this.ConcentrationTypes.find(this.findIndexToUpdate, newItem.id);
        var index = this.ConcentrationTypes.indexOf(updateItem);
        this.ConcentrationTypes[index] = newItem;
    };
    ConcentrationTypesComponent.prototype.findIndexToUpdate = function (newItem) {
        return newItem.id === this;
    };
    // create or edit concentration type submit
    ConcentrationTypesComponent.prototype.onSubmitCT = function (formId, formValue) {
        var _this = this;
        this.showCTCreateError = false;
        this.showCTEditError = false;
        this.submitLoading = true;
        switch (formId) {
            case 'edit':
                // update a record
                this._concentrationService.update(formValue)
                    .subscribe(function (updatedConcentrationT) {
                    _this.selectedCTName = updatedConcentrationT.name;
                    _this.updateCTArray(formValue);
                    _this.selectedConcentration = undefined; // the radio button becomes unselected upon save, but Edit this One is still enabled. This disables the edit button
                    //this.editCTForm.reset(); // don't want to reset it. keep the content they just saved in the inputs rather than empty inputs
                    _this.submitLoading = false;
                    _this.showCTEditSuccess = true;
                    _this._cdr.detectChanges(); //fix for ExpressionChangedAfterItHasBeenCheckedError (see https://github.com/angular/angular/issues/17572 )
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showCTEditError = true;
                });
                break;
            case 'add':
                // add a record
                this._concentrationService.create(formValue)
                    .subscribe(function (newConcentration) {
                    _this.ConcentrationTypes.push(newConcentration);
                    _this.addCTForm.reset();
                    _this.submitLoading = false;
                    _this.showCTCreateSuccess = true;
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showCTCreateError = true;
                });
                break;
            default:
        }
    };
    // show delete concentration type modal
    ConcentrationTypesComponent.prototype.deleteCT = function (selectedConcentration) {
        this.showCTDeleteSuccess = false; //reset this
        this.showCTDeleteError = false; //reset this too
        this.selectedCTName = selectedConcentration.name;
        this.selectedCTId = selectedConcentration.id;
        // show the delete concentration form if not showing already
        if (this.showHideDelete === false) {
            this.showHideDelete = true;
        }
    };
    ConcentrationTypesComponent.prototype.submitDelete = function () {
        var _this = this;
        //get the index to be deleted by the id
        var ind;
        this.ConcentrationTypes.some(function (pdh, index, _ary) {
            if (pdh.id === _this.selectedCTId)
                ind = index;
            return pdh.id === _this.selectedCTId;
        });
        this._concentrationService.delete(this.selectedCTId)
            .subscribe(function () {
            _this.selectedCTName = "";
            _this.ConcentrationTypes.splice(ind, 1);
            _this.selectedConcentration = undefined; // the radio button becomes unselected upon save, but Edit this One is still enabled. This disables the edit button
            //this.editCTForm.reset(); // don't want to reset it. keep the content they just saved in the inputs rather than empty inputs
            _this.submitLoading = false;
            _this.showCTDeleteSuccess = true;
            _this._cdr.detectChanges();
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
            _this.showCTDeleteError = true;
        });
    };
    return ConcentrationTypesComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ConcentrationTypesComponent.prototype, "ConcentrationTypes", void 0);
ConcentrationTypesComponent = __decorate([
    core_1.Component({
        selector: 'concentrationtypes',
        template: __webpack_require__("./src/app/admin/concentration-types/concentration-types.component.html"),
        styles: [__webpack_require__("./src/app/admin/concentration-types/concentration-types.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof router_1.ActivatedRoute !== "undefined" && router_1.ActivatedRoute) === "function" && _a || Object, typeof (_b = typeof concentration_types_service_1.ConcentrationTypeService !== "undefined" && concentration_types_service_1.ConcentrationTypeService) === "function" && _b || Object, typeof (_c = typeof core_1.ChangeDetectorRef !== "undefined" && core_1.ChangeDetectorRef) === "function" && _c || Object])
], ConcentrationTypesComponent);
exports.ConcentrationTypesComponent = ConcentrationTypesComponent;
var _a, _b, _c;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/admin/concentration-types/concentration-types.component.js.map

/***/ }),

/***/ "./src/app/admin/extraction-methods/extraction-methods.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\r\n  <!-- extraction method table -->\r\n  <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n    <div class=\"card\">\r\n      <div class=\"card-block\">\r\n        <div class=\"card-title\">Extraction Methods</div>\r\n        <div class=\"card-text\">\r\n    \r\n          <clr-datagrid [(clrDgSingleSelected)]=\"selectedExtractionMethod\">\r\n            <!-- add, edit and delete Extraction buttons -->\r\n            <clr-dg-action-bar>\r\n              <div class=\"btn-group\">\r\n                <button class=\"btn btn-sm\" (click)=\"showAddModal()\">\r\n                  <clr-icon shape=\"plus\"></clr-icon> Add</button>\r\n                <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedExtractionMethod\" (click)=\"editEM(selectedExtractionMethod)\">\r\n                  <clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit</button>\r\n                <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedExtractionMethod\" (click)=\"deleteEM(selectedExtractionMethod)\">\r\n                  <clr-icon shape=\"trash\" size=\"16\"></clr-icon> Delete</button>\r\n              </div>\r\n            </clr-dg-action-bar>\r\n\r\n            <!-- table of all Extraction methods-->\r\n            <clr-dg-column [clrDgField]=\"'id'\">\r\n              <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                Extraction Method ID\r\n              </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'name'\">\r\n              <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                Extraction Method Name\r\n              </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-row *clrDgItems=\"let em of ExtractionMethods\" [clrDgItem]=\"em\">\r\n              <clr-dg-cell>{{em.id}}</clr-dg-cell>\r\n              <clr-dg-cell>{{em.name}}</clr-dg-cell>\r\n            </clr-dg-row>\r\n          </clr-datagrid>\r\n        </div>\r\n        <!-- end main extraction method card text -->\r\n      </div>\r\n      <!-- end main extraction method card block -->\r\n    </div>\r\n    <!-- end main extraction method card -->\r\n  </div>\r\n\r\n  <!-- add extraction method Modal -->\r\n  <clr-modal [(clrModalOpen)]=\"showHideAdd\">\r\n    <h3 class=\"modal-title\">Add Extraction Method</h3>\r\n    <div class=\"modal-body\">\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <form id=\"addEMForm\" class=\"compact\" [formGroup]=\"addEMForm\" (ngSubmit)=\"onSubmitEM('add', addEMForm.value)\">\r\n\r\n            <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showEMCreateError\">\r\n              <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">Submission error. Extraction Method not submitted. {{errorMessage}}</span>\r\n                <div class=\"alert-actions\">\r\n                  <a class=\"alert-action\" (click)=\"onSubmitEM('add', addEMForm.value)\">Try again</a>\r\n                </div>\r\n              </div>\r\n            </clr-alert>\r\n\r\n            <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showEMCreateSuccess\">\r\n              <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">Extraction Method successfully submitted</span>\r\n                <div class=\"alert-actions\">\r\n                  <a class=\"alert-action\" (click)=\"showHideAdd = false; showEMCreateSuccess = false\">Close</a>\r\n                </div>\r\n              </div>\r\n            </clr-alert>\r\n\r\n            <section class=\"form-block\">\r\n              <div class=\"form-group\">\r\n                <label class=\"required\">Name</label>\r\n                <label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"addEMForm.get('name').invalid && (addEMForm.get('name').dirty || addEMForm.get('name').touched)\">\r\n                  <input id=\"name\" type=\"text\" class=\"form-control\" formControlName=\"name\" size=\"30\">\r\n                  <span class=\"tooltip-content\">Name is required.</span>\r\n                </label>\r\n              </div>\r\n            </section>\r\n            <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"addEMForm.invalid\" [clrLoading]=\"submitLoading\">Submit</button>\r\n            <button class=\"btn btn-info\" (click)=\"showHideAdd = !showHideAdd\">Close</button>\r\n\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </clr-modal>\r\n\r\n  <!-- edit extraction Type Modal -->\r\n  <clr-modal [(clrModalOpen)]=\"showHideEdit\">\r\n    <h3 class=\"modal-title\"><clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit Extraction Method</h3>\r\n    <div class=\"modal-body\">\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showEMEditError\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Submission error. Extraction Method not edited.</span>\r\n              <div class=\"alert-actions\">\r\n                <a class=\"alert-action\" (click)=\"onSubmitEM('edit', editEMForm.value)\">Try again</a>\r\n              </div>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showEMEditSuccess\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Extraction Method successfully edited</span>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <form id=\"editEMForm\" class=\"compact\" [formGroup]=\"editEMForm\" (ngSubmit)=\"onSubmitEM('edit', editEMForm.value)\">\r\n            <section class=\"form-block\">\r\n              <label>Selected Extraction Method: {{selectedEMName}}</label>\r\n              <div class=\"form-group\">\r\n                <label for=\"EMId\">Extraction Method ID</label>\r\n                <input type=\"text\" id=\"EMId\" size=\"35\" formControlName=\"id\" readonly>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <label class=\"required\">Name</label>\r\n                <label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"editEMForm.get('name').invalid && (editEMForm.get('name').dirty || editEMForm.get('name').touched)\">\r\n                  <input id=\"name\" type=\"text\" formControlName=\"name\" size=\"40\">\r\n                  <span class=\"tooltip-content\">Name is required.</span>\r\n                </label>\r\n              </div>\r\n              <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"editEMForm.invalid\" [clrLoading]=\"submitLoading\">Save Edits</button>\r\n              <button class=\"btn btn-info\" (click)=\"showHideEdit = !showHideEdit\">Close</button>\r\n\r\n            </section>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </clr-modal>\r\n\r\n  <!-- delete concentration type Modal -->\r\n  <clr-modal [(clrModalOpen)]=\"showHideDelete\">\r\n    <h3 class=\"modal-title\"><clr-icon shape=\"trash\" size=\"16\"></clr-icon> Delete Extraction Method</h3>\r\n    <div class=\"modal-body\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showEMDeleteError\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Submission error. Extraction Method not deleted.</span>\r\n              <div class=\"alert-actions\">\r\n                <a class=\"alert-action\" (click)=\"submitDelete()\">Try again</a>\r\n              </div>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showEMDeleteSuccess\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Extraction Method successfully deleted.</span>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <div *ngIf=\"!showEMDeleteSuccess\">\r\n            <p>Are you sure you want to delete the extraction method <b>{{selectedEMName}}</b> ?</p>\r\n\r\n            <button class=\"btn btn-primary\" type=\"button\" (click)=\"submitDelete()\" [clrLoading]=\"submitLoading\">Delete</button>\r\n            <button class=\"btn btn-info\" (click)=\"showHideDelete = !showHideDelete\">Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </clr-modal>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/extraction-methods/extraction-methods.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/admin/extraction-methods/extraction-methods.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
var extraction_method_service_1 = __webpack_require__("./src/app/extraction-batches/extraction-method.service.ts");
var ExtractionMethodsComponent = (function () {
    function ExtractionMethodsComponent(_route, _extractionMethodService, _cdr) {
        this._route = _route;
        this._extractionMethodService = _extractionMethodService;
        this._cdr = _cdr;
        // add Extraction form - declare a reactive form with appropriate Extraction fields
        this.addEMForm = new forms_1.FormGroup({
            name: new forms_1.FormControl('', forms_1.Validators.required)
        });
        // edit Extraction form - declare a reactive form
        this.editEMForm = new forms_1.FormGroup({
            id: new forms_1.FormControl(''),
            name: new forms_1.FormControl('', forms_1.Validators.required)
        });
    }
    ExtractionMethodsComponent.prototype.ngOnInit = function () {
        this.showHideAdd = false;
        this.showHideEdit = false;
        this.showHideDelete = false;
        this.showEMCreateError = false;
        this.showEMEditError = false;
        this.showEMDeleteError = false;
        this.showEMCreateSuccess = false;
        this.showEMEditSuccess = false;
        this.showEMDeleteSuccess = false;
        this.submitLoading = false;
    };
    ExtractionMethodsComponent.prototype.showAddModal = function () {
        this.showHideAdd = !this.showHideAdd;
        // reset these to false in case Add Extraction is clicked more than once
        this.showEMCreateError = false;
        this.showEMCreateSuccess = false;
    };
    ExtractionMethodsComponent.prototype.editEM = function (selectedExtractionMethod) {
        this.editEMForm.reset(); // reset here to ensure states are clean (instead of after update complete)
        this.showEMEditSuccess = false; // reset this
        this.showEMEditError = false; // reset this
        this.selectedEMName = selectedExtractionMethod.name;
        this.selectedEMId = selectedExtractionMethod.id;
        this.editEMForm.setValue({
            id: this.selectedEMId,
            name: this.selectedEMName
        });
        // show the edit Extraction form if not showing already
        if (this.showHideEdit === false) {
            this.showHideEdit = true;
        }
    };
    ExtractionMethodsComponent.prototype.updateEMArray = function (newItem) {
        var updateItem = this.ExtractionMethods.find(this.findIndexToUpdate, newItem.id);
        var index = this.ExtractionMethods.indexOf(updateItem);
        this.ExtractionMethods[index] = newItem;
    };
    ExtractionMethodsComponent.prototype.findIndexToUpdate = function (newItem) {
        return newItem.id === this;
    };
    // create or edit Extraction type submit
    ExtractionMethodsComponent.prototype.onSubmitEM = function (formId, formValue) {
        var _this = this;
        this.showEMCreateError = false;
        this.showEMEditError = false;
        this.submitLoading = true;
        switch (formId) {
            case 'edit':
                // update a record
                this._extractionMethodService.update(formValue)
                    .subscribe(function (updatedExtraction) {
                    _this.selectedEMName = updatedExtraction.name;
                    _this.updateEMArray(formValue);
                    _this.selectedExtractionMethod = undefined;
                    _this.submitLoading = false;
                    _this.showEMEditSuccess = true;
                    _this._cdr.detectChanges();
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showEMEditError = true;
                });
                break;
            case 'add':
                // add a record
                this._extractionMethodService.create(formValue)
                    .subscribe(function (newExtraction) {
                    _this.ExtractionMethods.push(newExtraction);
                    _this.addEMForm.reset();
                    _this.submitLoading = false;
                    _this.showEMCreateSuccess = true;
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showEMCreateError = true;
                });
                break;
            default:
        }
    };
    // show delete concentration type modal
    ExtractionMethodsComponent.prototype.deleteEM = function (selectedConcentration) {
        this.showEMDeleteSuccess = false; // reset this
        this.showEMDeleteError = false; // reset this too
        this.selectedEMName = selectedConcentration.name;
        this.selectedEMId = selectedConcentration.id;
        // show the delete concentration form if not showing already
        if (this.showHideDelete === false) {
            this.showHideDelete = true;
        }
    };
    ExtractionMethodsComponent.prototype.submitDelete = function () {
        var _this = this;
        // get the index to be deleted by the id
        var ind;
        this.ExtractionMethods.some(function (pdh, index, _ary) {
            if (pdh.id === _this.selectedEMId) {
                ind = index;
            }
            return pdh.id === _this.selectedEMId;
        });
        this._extractionMethodService.delete(this.selectedEMId)
            .subscribe(function () {
            _this.selectedEMName = "";
            _this.ExtractionMethods.splice(ind, 1);
            _this._extractionMethodService = undefined;
            _this.submitLoading = false;
            _this.showEMDeleteSuccess = true;
            _this._cdr.detectChanges();
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
            _this.showEMDeleteError = true;
        });
    };
    return ExtractionMethodsComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], ExtractionMethodsComponent.prototype, "ExtractionMethods", void 0);
ExtractionMethodsComponent = __decorate([
    core_1.Component({
        selector: 'extractionmethods',
        template: __webpack_require__("./src/app/admin/extraction-methods/extraction-methods.component.html"),
        styles: [__webpack_require__("./src/app/admin/extraction-methods/extraction-methods.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof router_1.ActivatedRoute !== "undefined" && router_1.ActivatedRoute) === "function" && _a || Object, typeof (_b = typeof extraction_method_service_1.ExtractionMethodService !== "undefined" && extraction_method_service_1.ExtractionMethodService) === "function" && _b || Object, typeof (_c = typeof core_1.ChangeDetectorRef !== "undefined" && core_1.ChangeDetectorRef) === "function" && _c || Object])
], ExtractionMethodsComponent);
exports.ExtractionMethodsComponent = ExtractionMethodsComponent;
var _a, _b, _c;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/admin/extraction-methods/extraction-methods.component.js.map

/***/ }),

/***/ "./src/app/admin/filter-types/filter-types.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\r\n  <!-- Filter table -->\r\n  <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n    <div class=\"card\">\r\n      <div class=\"card-block\">\r\n        <div class=\"card-title\">Filter Types</div>\r\n        <div class=\"card-text\">\r\n\r\n          <clr-datagrid [(clrDgSingleSelected)]=\"selectedFilter\">\r\n            <!-- edit and delete Filter buttons -->\r\n            <clr-dg-action-bar>\r\n              <div class=\"btn-group\">\r\n                <button class=\"btn btn-sm\" (click)=\"showAddModal()\">\r\n                  <clr-icon shape=\"plus\"></clr-icon> Add </button>\r\n                <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedFilter\" (click)=\"editFilter(selectedFilter)\">\r\n                  <clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit</button>\r\n                <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedFilter\" (click)=\"deleteFilter(selectedFilter)\">\r\n                  <clr-icon shape=\"trash\" size=\"16\"></clr-icon> Delete </button>\r\n              </div>\r\n            </clr-dg-action-bar>\r\n\r\n            <!-- table of all Filters -->\r\n            <clr-dg-column [clrDgField]=\"'id'\">\r\n              <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                Filter Type ID\r\n              </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'name'\">\r\n              <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                Filter Type Name\r\n              </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <!-- filter column header for matrix type-->\r\n            <clr-dg-column [clrDgField]=\"'matrix'\">\r\n              Filter Type Matrix\r\n              <clr-dg-filter [clrDgFilter]=\"matrixTypeFilter\">\r\n                <matrix-type-filter #matrixTypeFilter></matrix-type-filter>\r\n              </clr-dg-filter>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-row *clrDgItems=\"let ft of FilterTypes\" [clrDgItem]=\"ft\">\r\n              <clr-dg-cell>{{ft.id}}</clr-dg-cell>\r\n              <clr-dg-cell>{{ft.name}}</clr-dg-cell>\r\n              <clr-dg-cell>{{ft.matrix | displayValue:'name': Matrices}}</clr-dg-cell>\r\n            </clr-dg-row>\r\n            \r\n          </clr-datagrid>\r\n        </div>\r\n        <!-- end main FilterTypes card text -->\r\n      </div>\r\n      <!-- end main FilterTypes card block -->\r\n    </div>\r\n    <!-- end main FilterTypes card -->\r\n  </div>\r\n\r\n  <!-- add FilterTypes Modal -->\r\n  <clr-modal [(clrModalOpen)]=\"showHideAdd\">\r\n    <h3 class=\"modal-title\">\r\n      <clr-icon shape=\"plus\"></clr-icon> Add Filter Type</h3>\r\n    <div class=\"modal-body\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <form id=\"addFilterForm\" class=\"compact\" [formGroup]=\"addFilterForm\" (ngSubmit)=\"onSubmitFilter('add', addFilterForm.value)\">\r\n\r\n            <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showFilterCreateError\">\r\n              <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">Submission error. Filter Type not submitted. {{errorMessage}}</span>\r\n                <div class=\"alert-actions\">\r\n                  <a class=\"alert-action\" (click)=\"onSubmitFilter('add', addFilterForm.value)\">Try again</a>\r\n                </div>\r\n              </div>\r\n            </clr-alert>\r\n\r\n            <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showFilterCreateSuccess\">\r\n              <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">Filter Type successfully submitted</span>\r\n                <div class=\"alert-actions\">\r\n                  <a class=\"alert-action\" (click)=\"showHideAdd = false; showFilterCreateSuccess = false\">Close</a>\r\n                </div>\r\n              </div>\r\n            </clr-alert>\r\n\r\n            <section class=\"form-block\">\r\n              <div class=\"form-group\">\r\n                <label class=\"required\">Name</label>\r\n                <label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"addFilterForm.get('name').invalid && (addFilterForm.get('name').dirty || addFilterForm.get('name').touched)\">\r\n                  <input id=\"name\" type=\"text\" class=\"form-control\" formControlName=\"name\" size=\"30\">\r\n                  <span class=\"tooltip-content\">Name is required.</span>\r\n                </label>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label class=\"required\">Matrix</label>\r\n                <label for=\"matrix\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"addFilterForm.get('matrix').invalid && (addFilterForm.get('matrix').dirty || addFilterForm.get('matrix').touched)\">\r\n                  <select class=\"form-control\" id=\"matrix\" formControlName=\"matrix\">\r\n                    <option value=\"\"></option>\r\n                    <option *ngFor=\"let m of Matrices\" [ngValue]=\"m.id\">{{m.name}}</option>\r\n                  </select>\r\n                  <span class=\"tooltip-content\">Matrix is required.</span>\r\n                </label>\r\n              </div>\r\n            </section>\r\n            <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"addFilterForm.invalid\" [clrLoading]=\"submitLoading\">Submit</button>\r\n            <button class=\"btn btn-info\" (click)=\"showHideAdd = !showHideAdd\">Close</button>\r\n\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </clr-modal>\r\n\r\n  <!-- edit FilterTypes Modal -->\r\n  <clr-modal [(clrModalOpen)]=\"showHideEdit\">\r\n    <h3 class=\"modal-title\"><clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit Filter Type</h3>\r\n    <div class=\"modal-body\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showFilterEditError\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Submission error. Filter Type not edited.</span>\r\n              <div class=\"alert-actions\">\r\n                <a class=\"alert-action\" (click)=\"onSubmitFilter('edit', editFilterForm.value)\">Try again</a>\r\n              </div>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showFilterEditSuccess\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Filter Type successfully edited</span>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <form id=\"editFilterForm\" class=\"compact\" [formGroup]=\"editFilterForm\" (ngSubmit)=\"onSubmitFilter('edit', editFilterForm.value)\">\r\n            <section class=\"form-block\">\r\n              <label>Selected Filter Type: {{selectedFilterName}}</label>\r\n              <div class=\"form-group\">\r\n                <label for=\"FilterId\">Filter Type ID</label>\r\n                <input type=\"text\" id=\"FilterId\" size=\"35\" formControlName=\"id\" readonly>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <label class=\"required\">Name</label>\r\n                <label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"editFilterForm.get('name').invalid && (editFilterForm.get('name').dirty || editFilterForm.get('name').touched)\">\r\n                  <input id=\"name\" type=\"text\" formControlName=\"name\" size=\"40\">\r\n                  <span class=\"tooltip-content\">Name is required.</span>\r\n                </label>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <label class=\"required\">Matrix</label>\r\n                <label for=\"matrix\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"editFilterForm.get('matrix').invalid && (editFilterForm.get('matrix').dirty || editFilterForm.get('matrix').touched)\">\r\n                  <select id=\"matrixSelect\" name=\"matrix\" formControlName=\"matrix\">\r\n                    <option *ngFor=\"let m of Matrices\" [ngValue]=\"m.id\">{{m.name}}</option>\r\n                  </select>\r\n                </label>\r\n              </div>\r\n\r\n              <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"editFilterForm.invalid\" [clrLoading]=\"submitLoading\">Save Edits</button>\r\n              <button class=\"btn btn-info\" (click)=\"showHideEdit = !showHideEdit\">Close</button>\r\n\r\n            </section>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </clr-modal>\r\n\r\n  <!-- delete Filter type Modal -->\r\n  <clr-modal [(clrModalOpen)]=\"showHideDelete\">\r\n    <h3 class=\"modal-title\"><clr-icon shape=\"trash\" size=\"16\"></clr-icon> Delete Filter Type</h3>\r\n    <div class=\"modal-body\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showFilterDeleteError\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Submission error. Filter Type not deleted.</span>\r\n              <div class=\"alert-actions\">\r\n                <a class=\"alert-action\" (click)=\"submitDelete()\">Try again</a>\r\n              </div>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showFilterDeleteSuccess\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Filter Type successfully deleted.</span>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <div *ngIf=\"!showFilterDeleteSuccess\">\r\n            <p>Are you sure you want to delete the filter type <b>{{selectedFilterName}}</b> ?</p>\r\n\r\n            <button class=\"btn btn-primary\" type=\"button\" (click)=\"submitDelete()\" [clrLoading]=\"submitLoading\">Delete</button>\r\n            <button class=\"btn btn-info\" (click)=\"showHideDelete = !showHideDelete\">Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </clr-modal>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/filter-types/filter-types.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/admin/filter-types/filter-types.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
var filter_type_service_1 = __webpack_require__("./src/app/SHARED/filter-type.service.ts");
var FilterTypesComponent = (function () {
    function FilterTypesComponent(_route, _filterService, _cdr) {
        this._route = _route;
        this._filterService = _filterService;
        this._cdr = _cdr;
        // add Filter form - declare a reactive form with appropriate Filter fields
        this.addFilterForm = new forms_1.FormGroup({
            name: new forms_1.FormControl('', forms_1.Validators.required),
            matrix: new forms_1.FormControl('', forms_1.Validators.required)
        });
        // edit Filter form - declare a reactive form
        this.editFilterForm = new forms_1.FormGroup({
            id: new forms_1.FormControl(''),
            name: new forms_1.FormControl('', forms_1.Validators.required),
            matrix: new forms_1.FormControl('', forms_1.Validators.required) // add validator for number only here
        });
    }
    FilterTypesComponent.prototype.ngOnInit = function () {
        this.showHideAdd = false;
        this.showHideEdit = false;
        this.showHideDelete = false;
        this.showFilterCreateError = false;
        this.showFilterEditError = false;
        this.showFilterDeleteError = false;
        this.showFilterCreateSuccess = false;
        this.showFilterEditSuccess = false;
        this.showFilterDeleteSuccess = false;
        this.submitLoading = false;
    };
    FilterTypesComponent.prototype.showAddModal = function () {
        this.showHideAdd = !this.showHideAdd;
        //reset these to false in case Add Filter is clicked more than once
        this.showFilterCreateError = false;
        this.showFilterCreateSuccess = false;
    };
    FilterTypesComponent.prototype.editFilter = function (selectedFilter) {
        this.editFilterForm.reset(); //reset here to ensure states are clean (instead of after update complete)
        this.showFilterEditSuccess = false; //reset this 
        this.showFilterEditError = false; //reset this 
        this.selectedFilterMatrix = selectedFilter.matrix;
        this.selectedFilterName = selectedFilter.name;
        this.selectedFilterId = selectedFilter.id;
        this.editFilterForm.setValue({
            id: this.selectedFilterId,
            name: this.selectedFilterName,
            matrix: this.selectedFilterMatrix
        });
        // show the edit Filter form if not showing already
        if (this.showHideEdit === false) {
            this.showHideEdit = true;
        }
    };
    FilterTypesComponent.prototype.updateFilterArray = function (newItem) {
        var updateItem = this.FilterTypes.find(this.findIndexToUpdate, newItem.id);
        var index = this.FilterTypes.indexOf(updateItem);
        this.FilterTypes[index] = newItem;
    };
    FilterTypesComponent.prototype.findIndexToUpdate = function (newItem) {
        return newItem.id === this;
    };
    // create or edit Filter submit
    FilterTypesComponent.prototype.onSubmitFilter = function (formId, formValue) {
        var _this = this;
        this.showFilterCreateError = false;
        this.showFilterEditError = false;
        this.submitLoading = true;
        switch (formId) {
            case 'edit':
                // update a record
                this._filterService.update(formValue)
                    .subscribe(function (updatedFilter) {
                    _this.selectedFilterName = updatedFilter.name;
                    _this.selectedFilterMatrix = updatedFilter.matrix;
                    _this.updateFilterArray(formValue);
                    _this.selectedFilter = undefined;
                    _this.submitLoading = false;
                    _this.showFilterEditSuccess = true;
                    _this._cdr.detectChanges();
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showFilterEditError = true;
                });
                break;
            case 'add':
                // add a record
                this._filterService.create(formValue)
                    .subscribe(function (newFilter) {
                    _this.FilterTypes.push(newFilter);
                    _this.addFilterForm.reset();
                    _this.submitLoading = false;
                    _this.showFilterCreateSuccess = true;
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showFilterCreateError = true;
                });
                break;
            default:
        }
    };
    // show delete Filter type modal
    FilterTypesComponent.prototype.deleteFilter = function (selectedFilter) {
        this.showFilterDeleteSuccess = false; //reset this
        this.showFilterDeleteError = false; //reset this too
        this.selectedFilterName = selectedFilter.name;
        this.selectedFilterId = selectedFilter.id;
        // show the delete Filter form if not showing already
        if (this.showHideDelete === false) {
            this.showHideDelete = true;
        }
    };
    FilterTypesComponent.prototype.submitDelete = function () {
        var _this = this;
        //get the index to be deleted by the id
        var ind;
        this.FilterTypes.some(function (pdh, index, _ary) {
            if (pdh.id === _this.selectedFilterId)
                ind = index;
            return pdh.id === _this.selectedFilterId;
        });
        this._filterService.delete(this.selectedFilterId)
            .subscribe(function () {
            _this.selectedFilterName = "";
            _this.FilterTypes.splice(ind, 1);
            _this.selectedFilter = undefined;
            _this.submitLoading = false;
            _this.showFilterDeleteSuccess = true;
            _this._cdr.detectChanges();
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
            _this.showFilterDeleteError = true;
        });
    };
    return FilterTypesComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], FilterTypesComponent.prototype, "FilterTypes", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], FilterTypesComponent.prototype, "Matrices", void 0);
FilterTypesComponent = __decorate([
    core_1.Component({
        selector: 'filtertypes',
        template: __webpack_require__("./src/app/admin/filter-types/filter-types.component.html"),
        styles: [__webpack_require__("./src/app/admin/filter-types/filter-types.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof router_1.ActivatedRoute !== "undefined" && router_1.ActivatedRoute) === "function" && _a || Object, typeof (_b = typeof filter_type_service_1.FilterTypeService !== "undefined" && filter_type_service_1.FilterTypeService) === "function" && _b || Object, typeof (_c = typeof core_1.ChangeDetectorRef !== "undefined" && core_1.ChangeDetectorRef) === "function" && _c || Object])
], FilterTypesComponent);
exports.FilterTypesComponent = FilterTypesComponent;
var _a, _b, _c;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/admin/filter-types/filter-types.component.js.map

/***/ }),

/***/ "./src/app/admin/matrix-types/matrix-types.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\r\n  <!-- Matrix table -->\r\n  <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n    <div class=\"card\">\r\n      <div class=\"card-block\">\r\n        <div class=\"card-title\">Matrices</div>\r\n        <div class=\"card-text\">\r\n\r\n          <clr-datagrid [(clrDgSingleSelected)]=\"selectedMatrix\">\r\n            <!-- edit and delete Matrix buttons -->\r\n            <clr-dg-action-bar>\r\n              <div class=\"btn-group\">\r\n                <button class=\"btn btn-sm\" (click)=\"showAddModal()\">\r\n                  <clr-icon shape=\"plus\"></clr-icon> Add</button>\r\n                <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedMatrix\" (click)=\"editMatrix(selectedMatrix)\">\r\n                  <clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit</button>\r\n                <!-- <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedMatrix\" (click)=\"deleteMatrix(selectedMatrix)\">\r\n                  <clr-icon shape=\"trash\" size=\"16\"></clr-icon> Delete</button> -->\r\n              </div>\r\n            </clr-dg-action-bar>\r\n\r\n            <!-- table of all Matrix -->\r\n            <clr-dg-column [clrDgField]=\"'id'\">\r\n              <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                Matrix ID\r\n              </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'name'\">\r\n              <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                Matrix Name\r\n              </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'code'\">\r\n              <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                Matrix Code\r\n              </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-row *clrDgItems=\"let mt of MatrixTypes\" [clrDgItem]=\"mt\">\r\n              <clr-dg-cell>{{mt.id}}</clr-dg-cell>\r\n              <clr-dg-cell>{{mt.name}}</clr-dg-cell>\r\n              <clr-dg-cell>{{mt.code}}</clr-dg-cell>\r\n            </clr-dg-row>\r\n          </clr-datagrid>\r\n        </div>\r\n        <!-- end main MatrixTypes card text -->\r\n      </div>\r\n      <!-- end main MatrixTypes card block -->\r\n    </div>\r\n    <!-- end main MatrixTypes card -->\r\n  </div>\r\n\r\n  <!-- add MatrixTypes Modal -->\r\n  <clr-modal [(clrModalOpen)]=\"showHideAdd\">\r\n    <h3 class=\"modal-title\">\r\n      <clr-icon shape=\"plus\"></clr-icon> Add Matrix</h3>\r\n    <div class=\"modal-body\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <form id=\"addMatrixForm\" class=\"compact\" [formGroup]=\"addMatrixForm\" (ngSubmit)=\"onSubmitMatrix('add', addMatrixForm.value)\">\r\n            <div class=\"card-block\">\r\n              <div class=\"card-title\">Add Matrix</div>\r\n              <div class=\"card-text\">\r\n                <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showMatrixCreateError\">\r\n                  <div clr-alert-item class=\"alert-item\">\r\n                    <span class=\"alert-text\">Submission error. Matrix not submitted. {{errorMessage}}</span>\r\n                    <div class=\"alert-actions\">\r\n                      <a class=\"alert-action\" (click)=\"onSubmitMatrix('add', addMatrixForm.value)\">Try again</a>\r\n                    </div>\r\n                  </div>\r\n                </clr-alert>\r\n\r\n                <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showMatrixCreateSuccess\">\r\n                  <div clr-alert-item class=\"alert-item\">\r\n                    <span class=\"alert-text\">Matrix successfully submitted</span>\r\n                    <div class=\"alert-actions\">\r\n                      <a class=\"alert-action\" (click)=\"showHideAdd = false; showMatrixCreateSuccess = false\">Close</a>\r\n                    </div>\r\n                  </div>\r\n                </clr-alert>\r\n\r\n\r\n                <section class=\"form-block\">\r\n                  <div class=\"form-group\">\r\n                    <label class=\"required\">Name</label>\r\n                    <label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"addMatrixForm.get('name').invalid && (addMatrixForm.get('name').dirty || addMatrixForm.get('name').touched)\">\r\n                      <input id=\"name\" type=\"text\" class=\"form-control\" formControlName=\"name\" size=\"30\">\r\n                      <span class=\"tooltip-content\">Name is required.</span>\r\n                    </label>\r\n                  </div>\r\n                  <div class=\"form-group\">\r\n                    <label class=\"required\">Code</label>\r\n                    <label for=\"code\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"addMatrixForm.get('code').invalid && (addMatrixForm.get('code').dirty || addMatrixForm.get('code').touched)\">\r\n                      <input id=\"code\" type=\"text\" class=\"form-control\" formControlName=\"code\" size=\"30\">\r\n                      <span class=\"tooltip-content\">Code is required.</span>\r\n                    </label>\r\n                  </div>\r\n                </section>\r\n                <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"addMatrixForm.invalid\" [clrLoading]=\"submitLoading\">Submit</button>\r\n                <button class=\"btn btn-info\" (click)=\"showHideAdd = !showHideAdd\">Close</button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </clr-modal>\r\n\r\n  <!-- edit MatrixTypes Modal -->\r\n  <clr-modal [(clrModalOpen)]=\"showHideEdit\">\r\n    <h3 class=\"modal-title\"><clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit Matrix</h3>\r\n    <div class=\"modal-body\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showMatrixEditError\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Submission error. Matrix not edited.</span>\r\n              <div class=\"alert-actions\">\r\n                <a class=\"alert-action\" (click)=\"onSubmitMatrix('edit', editMatrixForm.value)\">Try again</a>\r\n              </div>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showMatrixEditSuccess\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Matrix successfully edited</span>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <form id=\"editMatrixForm\" class=\"compact\" [formGroup]=\"editMatrixForm\" (ngSubmit)=\"onSubmitMatrix('edit', editMatrixForm.value)\">\r\n            <section class=\"form-block\">\r\n              <label>Selected Matrix: {{selectedMatrixName}}</label>\r\n              <div class=\"form-group\">\r\n                <label for=\"MatrixId\">Matrix ID</label>\r\n                <input type=\"text\" id=\"MatrixId\" size=\"35\" formControlName=\"id\" readonly>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <label class=\"required\">Name</label>\r\n                <label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"editMatrixForm.get('name').invalid && (editMatrixForm.get('name').dirty || editMatrixForm.get('name').touched)\">\r\n                  <input id=\"name\" type=\"text\" formControlName=\"name\" size=\"40\">\r\n                  <span class=\"tooltip-content\">Name is required.</span>\r\n                </label>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <label class=\"required\">Code</label>\r\n                <label for=\"code\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"editMatrixForm.get('code').invalid && (editMatrixForm.get('code').dirty || editMatrixForm.get('code').touched)\">\r\n                  <input id=\"code\" type=\"text\" formControlName=\"code\" size=\"40\">\r\n                  <span class=\"tooltip-content\">Code is required.</span>\r\n                </label>\r\n              </div>\r\n\r\n              <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"editMatrixForm.invalid\" [clrLoading]=\"submitLoading\">Save Edits</button>\r\n              <button class=\"btn btn-info\" (click)=\"showHideEdit = !showHideEdit\">Close</button>\r\n\r\n            </section>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </clr-modal>\r\n\r\n  <!-- delete Matrix Modal -->\r\n  <clr-modal [(clrModalOpen)]=\"showHideDelete\">\r\n    <h3 class=\"modal-title\"><clr-icon shape=\"trash\" size=\"16\"></clr-icon>Delete Matrix</h3>\r\n    <div class=\"modal-body\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showMatrixDeleteError\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Submission error. Matrix not deleted.</span>\r\n              <div class=\"alert-actions\">\r\n                <a class=\"alert-action\" (click)=\"submitDelete()\">Try again</a>\r\n              </div>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showMatrixDeleteSuccess\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Matrix successfully deleted.</span>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <div *ngIf=\"!showMatrixDeleteSuccess\">\r\n            <p>Are you sure you want to delete the matrix <b>{{selectedMatrixName}}</b> ?</p>\r\n\r\n            <button class=\"btn btn-primary\" type=\"button\" (click)=\"submitDelete()\" [clrLoading]=\"submitLoading\">Delete</button>\r\n            <button class=\"btn btn-info\" (click)=\"showHideDelete = !showHideDelete\">Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </clr-modal>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/matrix-types/matrix-types.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/admin/matrix-types/matrix-types.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
var matrix_service_1 = __webpack_require__("./src/app/SHARED/matrix.service.ts");
var MatrixTypesComponent = (function () {
    function MatrixTypesComponent(_route, _matrixService, _cdr) {
        this._route = _route;
        this._matrixService = _matrixService;
        this._cdr = _cdr;
        // add Matrix form - declare a reactive form with appropriate Matrix fields
        this.addMatrixForm = new forms_1.FormGroup({
            name: new forms_1.FormControl('', forms_1.Validators.required),
            code: new forms_1.FormControl('', forms_1.Validators.required)
        });
        // edit Matrix form - declare a reactive form
        this.editMatrixForm = new forms_1.FormGroup({
            id: new forms_1.FormControl(''),
            name: new forms_1.FormControl('', forms_1.Validators.required),
            code: new forms_1.FormControl('', forms_1.Validators.required)
        });
    }
    MatrixTypesComponent.prototype.ngOnInit = function () {
        this.showHideAdd = false;
        this.showHideEdit = false;
        this.showHideDelete = false;
        this.showMatrixCreateError = false;
        this.showMatrixEditError = false;
        this.showMatrixDeleteError = false;
        this.showMatrixCreateSuccess = false;
        this.showMatrixEditSuccess = false;
        this.showMatrixDeleteSuccess = false;
        this.submitLoading = false;
    };
    MatrixTypesComponent.prototype.showAddModal = function () {
        this.showHideAdd = !this.showHideAdd;
        //reset these to false in case Add Filter is clicked more than once
        this.showMatrixCreateError = false;
        this.showMatrixCreateSuccess = false;
    };
    MatrixTypesComponent.prototype.editMatrix = function (selectedMatrix) {
        this.editMatrixForm.reset(); //reset here to ensure states are clean (instead of after update complete)
        this.showMatrixEditSuccess = false; //reset this 
        this.showMatrixEditError = false; //reset this 
        this.selectedMatrixCode = selectedMatrix.code;
        this.selectedMatrixName = selectedMatrix.name;
        this.selectedMatrixId = selectedMatrix.id;
        this.editMatrixForm.setValue({
            id: this.selectedMatrixId,
            name: this.selectedMatrixName,
            code: this.selectedMatrixCode
        });
        // show the edit Filter form if not showing already
        if (this.showHideEdit === false) {
            this.showHideEdit = true;
        }
    };
    MatrixTypesComponent.prototype.updateMatrixArray = function (newItem) {
        var updateItem = this.MatrixTypes.find(this.findIndexToUpdate, newItem.id);
        var index = this.MatrixTypes.indexOf(updateItem);
        this.MatrixTypes[index] = newItem;
    };
    MatrixTypesComponent.prototype.findIndexToUpdate = function (newItem) {
        return newItem.id === this;
    };
    // create or edit Filter submit
    MatrixTypesComponent.prototype.onSubmitMatrix = function (formId, formValue) {
        var _this = this;
        this.showMatrixCreateError = false;
        this.showMatrixEditError = false;
        this.submitLoading = true;
        switch (formId) {
            case 'edit':
                // update a record
                this._matrixService.update(formValue)
                    .subscribe(function (updatedMatrix) {
                    _this.selectedMatrixName = updatedMatrix.name;
                    _this.selectedMatrixCode = updatedMatrix.code;
                    _this.updateMatrixArray(formValue);
                    _this.selectedMatrix = undefined;
                    _this.submitLoading = false;
                    _this.showMatrixEditSuccess = true;
                    _this._cdr.detectChanges();
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showMatrixEditError = true;
                });
                break;
            case 'add':
                // add a record
                this._matrixService.create(formValue)
                    .subscribe(function (newMatrix) {
                    _this.MatrixTypes.push(newMatrix);
                    _this.addMatrixForm.reset();
                    _this.submitLoading = false;
                    _this.showMatrixCreateSuccess = true;
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showMatrixCreateError = true;
                });
                break;
            default:
        }
    };
    // show delete Matrix type modal
    MatrixTypesComponent.prototype.deleteMatrix = function (selectedMatrix) {
        this.showMatrixDeleteSuccess = false; //reset this
        this.showMatrixDeleteError = false; //reset this too
        this.selectedMatrixName = selectedMatrix.name;
        this.selectedMatrixId = selectedMatrix.id;
        // show the delete Filter form if not showing already
        if (this.showHideDelete === false) {
            this.showHideDelete = true;
        }
    };
    MatrixTypesComponent.prototype.submitDelete = function () {
        var _this = this;
        //get the index to be deleted by the id
        var ind;
        this.MatrixTypes.some(function (pdh, index, _ary) {
            if (pdh.id === _this.selectedMatrixId)
                ind = index;
            return pdh.id === _this.selectedMatrixId;
        });
        this._matrixService.delete(this.selectedMatrixId)
            .subscribe(function () {
            _this.selectedMatrixName = "";
            _this.MatrixTypes.splice(ind, 1);
            _this.selectedMatrix = undefined;
            _this.submitLoading = false;
            _this.showMatrixDeleteSuccess = true;
            _this._cdr.detectChanges();
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
            _this.showMatrixDeleteError = true;
        });
    };
    return MatrixTypesComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], MatrixTypesComponent.prototype, "MatrixTypes", void 0);
MatrixTypesComponent = __decorate([
    core_1.Component({
        selector: 'matrices',
        template: __webpack_require__("./src/app/admin/matrix-types/matrix-types.component.html"),
        styles: [__webpack_require__("./src/app/admin/matrix-types/matrix-types.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof router_1.ActivatedRoute !== "undefined" && router_1.ActivatedRoute) === "function" && _a || Object, typeof (_b = typeof matrix_service_1.MatrixService !== "undefined" && matrix_service_1.MatrixService) === "function" && _b || Object, typeof (_c = typeof core_1.ChangeDetectorRef !== "undefined" && core_1.ChangeDetectorRef) === "function" && _c || Object])
], MatrixTypesComponent);
exports.MatrixTypesComponent = MatrixTypesComponent;
var _a, _b, _c;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/admin/matrix-types/matrix-types.component.js.map

/***/ }),

/***/ "./src/app/admin/sample-types/sample-types.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\r\n  <!-- Sample Type table -->\r\n  <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n    <div class=\"card\">\r\n      <div class=\"card-block\">\r\n        <div class=\"card-title\">All Sample Types</div>\r\n        <div class=\"card-text\">\r\n\r\n          <clr-datagrid [(clrDgSingleSelected)]=\"selectedST\">\r\n            <!-- edit and delete Sample Type buttons -->\r\n            <clr-dg-action-bar>\r\n              <div class=\"btn-group\">\r\n                <button class=\"btn btn-sm\" (click)=\"showAddModal()\">\r\n                  <clr-icon shape=\"plus\"></clr-icon>Add</button>\r\n                <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedST\" (click)=\"editST(selectedST)\">\r\n                  <clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit</button>\r\n                <!-- <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedST\" (click)=\"deleteST(selectedST)\">\r\n                  <clr-icon shape=\"trash\" size=\"16\"></clr-icon> Delete</button> -->\r\n              </div>\r\n            </clr-dg-action-bar>\r\n\r\n            <!-- table of all Sample Types -->\r\n            <clr-dg-column [clrDgField]=\"'id'\">\r\n              <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                Sample Type ID\r\n              </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'name'\">\r\n              <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                Sample Type Name\r\n              </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'code'\">\r\n              <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                Sample Type Code\r\n              </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-row *clrDgItems=\"let st of SampleTypes\" [clrDgItem]=\"st\">\r\n              <clr-dg-cell>{{st.id}}</clr-dg-cell>\r\n              <clr-dg-cell>{{st.name}}</clr-dg-cell>\r\n              <clr-dg-cell>{{st.code}}</clr-dg-cell>\r\n            </clr-dg-row>\r\n          </clr-datagrid>\r\n        </div>\r\n        <!-- end main SampleTypes card text -->\r\n      </div>\r\n      <!-- end main SampleTypes card block -->\r\n    </div>\r\n    <!-- end main SampleTypes card -->\r\n  </div>\r\n\r\n  <!-- add SampleTypes Modal -->\r\n  <clr-modal [(clrModalOpen)]=\"showHideAdd\">\r\n    <h3 class=\"modal-title\"><clr-icon shape=\"plus\"></clr-icon> Add Sample Type</h3>\r\n    <div class=\"modal-body\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n\r\n          <form id=\"addSTForm\" class=\"compact\" [formGroup]=\"addSTForm\" (ngSubmit)=\"onSubmitST('add', addSTForm.value)\">\r\n\r\n            <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showSTCreateError\">\r\n              <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">Submission error. Sample Type not submitted. {{errorMessage}}</span>\r\n                <div class=\"alert-actions\">\r\n                  <a class=\"alert-action\" (click)=\"onSubmitST('add', addSTForm.value)\">Try again</a>\r\n                </div>\r\n              </div>\r\n            </clr-alert>\r\n\r\n            <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showSTCreateSuccess\">\r\n              <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">Sample Type successfully submitted</span>\r\n                <div class=\"alert-actions\">\r\n                  <a class=\"alert-action\" (click)=\"showHideAdd = false; showSTCreateSuccess = false\">Close</a>\r\n                </div>\r\n              </div>\r\n            </clr-alert>\r\n\r\n\r\n            <section class=\"form-block\">\r\n              <div class=\"form-group\">\r\n                <label class=\"required\">Name</label>\r\n                <label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"addSTForm.get('name').invalid && (addSTForm.get('name').dirty || addSTForm.get('name').touched)\">\r\n                  <input id=\"name\" type=\"text\" class=\"form-control\" formControlName=\"name\" size=\"30\">\r\n                  <span class=\"tooltip-content\">Name is required.</span>\r\n                </label>\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label class=\"required\">Code</label>\r\n                <label for=\"code\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"addSTForm.get('code').invalid && (addSTForm.get('code').dirty || addSTForm.get('code').touched)\">\r\n                  <input id=\"code\" type=\"text\" class=\"form-control\" formControlName=\"code\" size=\"30\">\r\n                  <span class=\"tooltip-content\">Code is required.</span>\r\n                </label>\r\n              </div>\r\n            </section>\r\n            <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"addSTForm.invalid\" [clrLoading]=\"submitLoading\">Submit</button>\r\n            <button class=\"btn btn-info\" (click)=\"showHideAdd = !showHideAdd\">Close</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </clr-modal>\r\n\r\n  <!-- edit SampleTypes Modal -->\r\n  <clr-modal [(clrModalOpen)]=\"showHideEdit\">\r\n    <h3 class=\"modal-title\"><clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit Sample Type</h3>\r\n    <div class=\"modal-body\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showSTEditError\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Submission error. Sample Type not edited.</span>\r\n              <div class=\"alert-actions\">\r\n                <a class=\"alert-action\" (click)=\"onSubmitST('edit', editSTForm.value)\">Try again</a>\r\n              </div>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showSTEditSuccess\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Sample Type successfully edited</span>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <form id=\"editSTForm\" class=\"compact\" [formGroup]=\"editSTForm\" (ngSubmit)=\"onSubmitST('edit', editSTForm.value)\">\r\n            <section class=\"form-block\">\r\n              <label>Selected Sample Type: {{selectedSTName}}</label>\r\n              <div class=\"form-group\">\r\n                <label for=\"STId\">Sample Type ID</label>\r\n                <input type=\"text\" id=\"STId\" size=\"35\" formControlName=\"id\" readonly>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <label class=\"required\">Name</label>\r\n                <label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"editSTForm.get('name').invalid && (editSTForm.get('name').dirty || editSTForm.get('name').touched)\">\r\n                  <input id=\"name\" type=\"text\" formControlName=\"name\" size=\"40\">\r\n                  <span class=\"tooltip-content\">Name is required.</span>\r\n                </label>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <label class=\"required\">Code</label>\r\n                <label for=\"code\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"editSTForm.get('code').invalid && (editSTForm.get('code').dirty || editSTForm.get('code').touched)\">\r\n                  <input id=\"code\" type=\"text\" formControlName=\"code\" size=\"40\">\r\n                  <span class=\"tooltip-content\">Code is required.</span>\r\n                </label>\r\n              </div>\r\n\r\n              <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"editSTForm.invalid\" [clrLoading]=\"submitLoading\">Save Edits</button>\r\n              <button class=\"btn btn-info\" (click)=\"showHideEdit = !showHideEdit\">Close</button>\r\n\r\n            </section>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </clr-modal>\r\n\r\n  <!-- delete Sample type Modal -->\r\n  <clr-modal [(clrModalOpen)]=\"showHideDelete\">\r\n    <h3 class=\"modal-title\"><clr-icon shape=\"trash\" size=\"16\"></clr-icon> Delete Sample Type</h3>\r\n    <div class=\"modal-body\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showSTDeleteError\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Submission error. Sample Type not deleted.</span>\r\n              <div class=\"alert-actions\">\r\n                <a class=\"alert-action\" (click)=\"submitDelete()\">Try again</a>\r\n              </div>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showSTDeleteSuccess\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Sample Type successfully deleted.</span>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <div *ngIf=\"!showSTDeleteSuccess\">\r\n            <p>Are you sure you want to delete the sample type <b>{{selectedSTName}}</b> ?</p>\r\n\r\n            <button class=\"btn btn-primary\" type=\"button\" (click)=\"submitDelete()\" [clrLoading]=\"submitLoading\">Delete</button>\r\n            <button class=\"btn btn-info\" (click)=\"showHideDelete = !showHideDelete\">Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </clr-modal>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/sample-types/sample-types.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/admin/sample-types/sample-types.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
var sample_type_service_1 = __webpack_require__("./src/app/SHARED/sample-type.service.ts");
var SampleTypesComponent = (function () {
    function SampleTypesComponent(_route, _stService, _cdr) {
        this._route = _route;
        this._stService = _stService;
        this._cdr = _cdr;
        // add Sample form - declare a reactive form with appropriate Sample fields
        this.addSTForm = new forms_1.FormGroup({
            name: new forms_1.FormControl('', forms_1.Validators.required),
            code: new forms_1.FormControl('', forms_1.Validators.required)
        });
        // edit Sample form - declare a reactive form
        this.editSTForm = new forms_1.FormGroup({
            id: new forms_1.FormControl(''),
            name: new forms_1.FormControl('', forms_1.Validators.required),
            code: new forms_1.FormControl('', forms_1.Validators.required)
        });
    }
    SampleTypesComponent.prototype.ngOnInit = function () {
        this.showHideAdd = false;
        this.showHideEdit = false;
        this.showHideDelete = false;
        this.showSTCreateError = false;
        this.showSTEditError = false;
        this.showSTDeleteError = false;
        this.showSTCreateSuccess = false;
        this.showSTEditSuccess = false;
        this.showSTDeleteSuccess = false;
        this.submitLoading = false;
    };
    SampleTypesComponent.prototype.showAddModal = function () {
        this.showHideAdd = !this.showHideAdd;
        //reset these to false in case Add Sample Type is clicked more than once
        this.showSTCreateError = false;
        this.showSTCreateSuccess = false;
    };
    SampleTypesComponent.prototype.editST = function (selectedST) {
        this.editSTForm.reset(); //reset here to ensure states are clean (instead of after update complete)
        this.showSTEditSuccess = false; //reset this 
        this.showSTEditError = false; //reset this 
        this.selectedSTCode = selectedST.code;
        this.selectedSTName = selectedST.name;
        this.selectedSTId = selectedST.id;
        this.editSTForm.setValue({
            id: this.selectedSTId,
            name: this.selectedSTName,
            code: this.selectedSTCode
        });
        // show the edit Sample Type form if not showing already
        if (this.showHideEdit === false) {
            this.showHideEdit = true;
        }
    };
    SampleTypesComponent.prototype.updateSTArray = function (newItem) {
        var updateItem = this.SampleTypes.find(this.findIndexToUpdate, newItem.id);
        var index = this.SampleTypes.indexOf(updateItem);
        this.SampleTypes[index] = newItem;
    };
    SampleTypesComponent.prototype.findIndexToUpdate = function (newItem) {
        return newItem.id === this;
    };
    // create or edit Filter submit
    SampleTypesComponent.prototype.onSubmitST = function (formId, formValue) {
        var _this = this;
        this.showSTCreateError = false;
        this.showSTEditError = false;
        this.submitLoading = true;
        switch (formId) {
            case 'edit':
                // update a record
                this._stService.update(formValue)
                    .subscribe(function (updatedST) {
                    _this.selectedSTName = updatedST.name;
                    _this.selectedSTCode = updatedST.code;
                    _this.updateSTArray(formValue);
                    _this.selectedST = undefined;
                    _this.submitLoading = false;
                    _this.showSTEditSuccess = true;
                    _this._cdr.detectChanges();
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showSTEditError = true;
                });
                break;
            case 'add':
                // add a record
                this._stService.create(formValue)
                    .subscribe(function (newST) {
                    _this.SampleTypes.push(newST);
                    _this.addSTForm.reset();
                    _this.submitLoading = false;
                    _this.showSTCreateSuccess = true;
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showSTCreateError = true;
                });
                break;
            default:
        }
    };
    // show delete sample type modal
    SampleTypesComponent.prototype.deleteST = function (selectedST) {
        this.showSTDeleteSuccess = false; //reset this
        this.showSTDeleteError = false; //reset this too
        this.selectedSTName = selectedST.name;
        this.selectedSTId = selectedST.id;
        // show the delete Filter form if not showing already
        if (this.showHideDelete === false) {
            this.showHideDelete = true;
        }
    };
    SampleTypesComponent.prototype.submitDelete = function () {
        var _this = this;
        //get the index to be deleted by the id
        var ind;
        this.SampleTypes.some(function (pdh, index, _ary) {
            if (pdh.id === _this.selectedSTId)
                ind = index;
            return pdh.id === _this.selectedSTId;
        });
        this._stService.delete(this.selectedSTId)
            .subscribe(function () {
            _this.selectedSTName = "";
            _this.SampleTypes.splice(ind, 1);
            _this.selectedST = undefined;
            _this.submitLoading = false;
            _this.showSTDeleteSuccess = true;
            _this._cdr.detectChanges();
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
            _this.showSTDeleteError = true;
        });
    };
    return SampleTypesComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], SampleTypesComponent.prototype, "SampleTypes", void 0);
SampleTypesComponent = __decorate([
    core_1.Component({
        selector: 'sampletypes',
        template: __webpack_require__("./src/app/admin/sample-types/sample-types.component.html"),
        styles: [__webpack_require__("./src/app/admin/sample-types/sample-types.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof router_1.ActivatedRoute !== "undefined" && router_1.ActivatedRoute) === "function" && _a || Object, typeof (_b = typeof sample_type_service_1.SampleTypeService !== "undefined" && sample_type_service_1.SampleTypeService) === "function" && _b || Object, typeof (_c = typeof core_1.ChangeDetectorRef !== "undefined" && core_1.ChangeDetectorRef) === "function" && _c || Object])
], SampleTypesComponent);
exports.SampleTypesComponent = SampleTypesComponent;
var _a, _b, _c;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/admin/sample-types/sample-types.component.js.map

/***/ }),

/***/ "./src/app/admin/targets/targets.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\r\n  <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n    <div class=\"card\">\r\n      <div class=\"card-block\">\r\n        <div class=\"card-title\">All Targets</div>\r\n        <div class=\"card-text\">\r\n          <clr-datagrid [(clrDgSingleSelected)]=\"selectedTarget\">\r\n            <!-- add, edit and delete Target buttons -->\r\n            <clr-dg-action-bar>\r\n              <div class=\"btn-group\">\r\n                <button class=\"btn btn-sm\" (click)=\"showAddModal()\">\r\n                  <clr-icon shape=\"plus\"></clr-icon> Add</button>\r\n                <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedTarget\" (click)=\"editTarget(selectedTarget)\">\r\n                  <clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit</button>\r\n                <!-- <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedTarget\" (click)=\"deleteTarget(selectedTarget)\">\r\n                  <clr-icon shape=\"trash\" size=\"16\"></clr-icon> Delete </button> -->\r\n              </div>\r\n            </clr-dg-action-bar>\r\n\r\n            <!-- table of all targets -->\r\n            <clr-dg-column [clrDgField]=\"'id'\">\r\n              <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                Target ID\r\n              </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'name'\">\r\n              <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                Target Name\r\n              </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'description'\">\r\n              <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                Target Code\r\n              </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'description'\">\r\n              <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                Target Nucleic Acid Type\r\n              </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'description'\">\r\n              <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                Target Notes\r\n              </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-row *clrDgItems=\"let target of Targets\" [clrDgItem]=\"target\">\r\n              <clr-dg-cell>{{target.id}}</clr-dg-cell>\r\n              <clr-dg-cell>{{target.name}}</clr-dg-cell>\r\n              <clr-dg-cell>{{target.code}}</clr-dg-cell>\r\n              <clr-dg-cell>{{target.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes}}</clr-dg-cell>\r\n              <clr-dg-cell>{{target.notes}}</clr-dg-cell>\r\n            </clr-dg-row>\r\n          </clr-datagrid>\r\n        </div>\r\n        <!-- end main target card text -->\r\n      </div>\r\n      <!-- end main target card block -->\r\n    </div>\r\n    <!-- end main target card -->\r\n  </div>\r\n\r\n  <!-- add target Modal -->\r\n  <clr-modal [(clrModalOpen)]=\"showHideAdd\">\r\n    <h3 class=\"modal-title\">\r\n      <clr-icon shape=\"plus\"></clr-icon> Add Target</h3>\r\n    <div class=\"modal-body\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <form id=\"addTargetForm\" class=\"compact\" [formGroup]=\"addTargetForm\" (ngSubmit)=\"onSubmitTarget('add', addTargetForm.value)\">\r\n\r\n            <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showTargetCreateError\">\r\n              <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">Submission error. Target not submitted. {{errorMessage}}</span>\r\n                <div class=\"alert-actions\">\r\n                  <a class=\"alert-action\" (click)=\"onSubmitTarget('add', addTargetForm.value)\">Try again</a>\r\n                </div>\r\n              </div>\r\n            </clr-alert>\r\n\r\n            <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"duplicateCodeFlag\" [clrAlertClosable]=\"false\">\r\n              <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">You have entered a target code that already exists. Please change your submission to a unique code.</span>\r\n                <div class=\"alert-actions\">\r\n                  <a class=\"alert-action\" (click)=\"duplicateCodeFlag = false\">Close</a>\r\n                </div>\r\n              </div>\r\n            </clr-alert>\r\n\r\n            <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showTargetCreateSuccess\">\r\n              <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">Target successfully submitted</span>\r\n                <div class=\"alert-actions\">\r\n                  <a class=\"alert-action\" (click)=\"showHideAdd = false; showTargetCreateSuccess = false\">Close</a>\r\n                </div>\r\n              </div>\r\n            </clr-alert>\r\n\r\n            <section class=\"form-block\">\r\n              <div class=\"form-group\">\r\n                <label class=\"required\">Name</label>\r\n                <label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"addTargetForm.get('name').invalid && (addTargetForm.get('name').dirty || addTargetForm.get('name').touched)\">\r\n                  <input id=\"name\" type=\"text\" class=\"form-control\" formControlName=\"name\" size=\"30\">\r\n                  <span class=\"tooltip-content\">Name is required.</span>\r\n                </label>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <label>Code</label>\r\n                <label for=\"code\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-sm\">\r\n                  <input id=\"code\" type=\"text\" class=\"form-control\" formControlName=\"code\" size=\"30\">\r\n                </label>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <label class=\"required\">Nucleic Acid Type</label>\r\n                <label for=\"nucleic_acid_type\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"addTargetForm.get('nucleic_acid_type').invalid && (addTargetForm.get('nucleic_acid_type').dirty || addTargetForm.get('nucleic_acid_type').touched)\">\r\n                  <select class=\"form-control\" id=\"nucleic_acid_type\" formControlName=\"nucleic_acid_type\">\r\n                    <option *ngFor=\"let type of nucleicAcidTypes\" [value]=\"type.id\">{{type.name}}</option>\r\n                  </select>\r\n                  <span class=\"tooltip-content\">Nucleic Acid Type is required.</span>\r\n                </label>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <label>Notes</label>\r\n                <label for=\"notes\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-sm\">\r\n                  <textarea id=\"notes\" type=\"text\" formControlName=\"notes\" rows=\"2\" style=\"max-width:25em\"></textarea>\r\n                </label>\r\n              </div>\r\n\r\n            </section>\r\n            <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"addTargetForm.invalid\" [clrLoading]=\"submitLoading\">Submit</button>\r\n            <button class=\"btn btn-info\" (click)=\"showHideAdd = !showHideAdd\">Close</button>\r\n\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </clr-modal>\r\n\r\n  <!-- edit target Modal -->\r\n  <clr-modal [(clrModalOpen)]=\"showHideEdit\">\r\n    <h3 class=\"modal-title\">\r\n      <clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit Target</h3>\r\n    <div class=\"modal-body\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showTargetEditError\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Submission error. Target not edited.</span>\r\n              <div class=\"alert-actions\">\r\n                <a class=\"alert-action\" (click)=\"onSubmitTarget('edit', editTargetForm.value)\">Try again</a>\r\n              </div>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showTargetEditSuccess\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Target successfully edited</span>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <form id=\"editTargetForm\" class=\"compact\" [formGroup]=\"editTargetForm\" (ngSubmit)=\"onSubmitTarget('edit', editTargetForm.value)\">\r\n            <section class=\"form-block\">\r\n              <label>Selected Target: {{selectedTargetName}}</label>\r\n              <div class=\"form-group\">\r\n                <label for=\"TargetId\">Target ID</label>\r\n                <input type=\"text\" id=\"TargetId\" size=\"35\" formControlName=\"id\" readonly>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <label class=\"required\">Name</label>\r\n                <label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"editTargetForm.get('name').invalid && (editTargetForm.get('name').dirty || editTargetForm.get('name').touched)\">\r\n                  <input id=\"name\" type=\"text\" formControlName=\"name\" size=\"40\">\r\n                  <span class=\"tooltip-content\">Name is required.</span>\r\n                </label>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <label>Code</label>\r\n                <label for=\"code\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-sm\">\r\n                  <input id=\"code\" type=\"text\" formControlName=\"code\" size=\"40\" readonly>\r\n                </label>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <label class=\"required\">Nucleic Acid Type</label>\r\n                <label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"editTargetForm.get('name').invalid && (editTargetForm.get('name').dirty || editTargetForm.get('name').touched)\">\r\n                  <select class=\"form-control\" id=\"nucleic_acid_type\" formControlName=\"nucleic_acid_type\">\r\n                    <option value=\"DNA\">DNA</option>\r\n                    <option value=\"RNA\">RNA</option>\r\n                  </select>\r\n                  <span class=\"tooltip-content\">Nucleic Acid Type is required.</span>\r\n                </label>\r\n              </div>\r\n\r\n              <div class=\"form-group\">\r\n                <label>Notes</label>\r\n                <label for=\"notes\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-sm\">\r\n                  <textarea id=\"notes\" type=\"text\" formControlName=\"notes\" rows=\"2\" style=\"max-width:25em\"></textarea>\r\n                </label>\r\n              </div>\r\n\r\n              <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"editTargetForm.invalid\" [clrLoading]=\"submitLoading\">Save Edits</button>\r\n              <button class=\"btn btn-info\" (click)=\"showHideEdit = !showHideEdit\">Close</button>\r\n\r\n            </section>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </clr-modal>\r\n\r\n  <!-- delete target Modal -->\r\n  <clr-modal [(clrModalOpen)]=\"showHideDelete\">\r\n    <h3 class=\"modal-title\">\r\n      <clr-icon shape=\"trash\" size=\"16\"></clr-icon> Delete Target</h3>\r\n    <div class=\"modal-body\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showTargetDeleteError\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Submission error. Target not deleted.</span>\r\n              <div class=\"alert-actions\">\r\n                <a class=\"alert-action\" (click)=\"submitDelete()\">Try again</a>\r\n              </div>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showTargetDeleteSuccess\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Target successfully deleted.</span>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <div *ngIf=\"!showTargetDeleteSuccess\">\r\n            <p>Are you sure you want to delete the target\r\n              <b>{{selectedTargetName}}</b> ?</p>\r\n\r\n            <button class=\"btn btn-primary\" type=\"button\" (click)=\"submitDelete()\" [clrLoading]=\"submitLoading\">Delete</button>\r\n            <button class=\"btn btn-info\" (click)=\"showHideDelete = !showHideDelete\">Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </clr-modal>\r\n</div>"

/***/ }),

/***/ "./src/app/admin/targets/targets.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/admin/targets/targets.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
var target_service_1 = __webpack_require__("./src/app/targets/target.service.ts");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var TargetsComponent = (function () {
    function TargetsComponent(_route, _targetService, _cdr) {
        this._route = _route;
        this._targetService = _targetService;
        this._cdr = _cdr;
        this.duplicateCodeFlag = false;
        // add Sample form - declare a reactive form with appropriate Sample fields
        this.addTargetForm = new forms_1.FormGroup({
            name: new forms_1.FormControl('', forms_1.Validators.required),
            code: new forms_1.FormControl(''),
            nucleic_acid_type: new forms_1.FormControl('', forms_1.Validators.required),
            notes: new forms_1.FormControl('')
        });
        // edit Sample form - declare a reactive form
        this.editTargetForm = new forms_1.FormGroup({
            id: new forms_1.FormControl(''),
            name: new forms_1.FormControl('', forms_1.Validators.required),
            code: new forms_1.FormControl(''),
            nucleic_acid_type: new forms_1.FormControl('', forms_1.Validators.required),
            notes: new forms_1.FormControl('')
        });
    }
    TargetsComponent.prototype.ngOnInit = function () {
        this.nucleicAcidTypes = app_settings_1.APP_SETTINGS.NUCLEIC_ACID_TYPES;
        this.showHideAdd = false;
        this.showHideEdit = false;
        this.showHideDelete = false;
        this.showTargetCreateError = false;
        this.showTargetEditError = false;
        this.showTargetDeleteError = false;
        this.showTargetCreateSuccess = false;
        this.showTargetEditSuccess = false;
        this.showTargetDeleteSuccess = false;
        this.submitLoading = false;
    };
    TargetsComponent.prototype.showAddModal = function () {
        this.showHideAdd = !this.showHideAdd;
        // reset these to false in case Add Sample Type is clicked more than once
        this.showTargetCreateError = false;
        this.showTargetCreateSuccess = false;
    };
    TargetsComponent.prototype.editTarget = function (selectedTarget) {
        this.editTargetForm.reset(); // reset here to ensure states are clean (instead of after update complete)
        this.showTargetEditSuccess = false; // reset this
        this.showTargetEditError = false; // reset this
        this.selectedTargetNote = selectedTarget.notes;
        this.selectedTargetType = selectedTarget.nucleic_acid_type;
        this.selectedTargetCode = selectedTarget.code;
        this.selectedTargetName = selectedTarget.name;
        this.selectedTargetId = selectedTarget.id;
        this.editTargetForm.setValue({
            id: this.selectedTargetId,
            name: this.selectedTargetName,
            code: this.selectedTargetCode,
            nucleic_acid_type: this.selectedTargetType,
            notes: this.selectedTargetNote
        });
        // show the edit Sample Type form if not showing already
        if (this.showHideEdit === false) {
            this.showHideEdit = true;
        }
    };
    TargetsComponent.prototype.updateTargetArray = function (newItem) {
        var updateItem = this.Targets.find(this.findIndexToUpdate, newItem.id);
        var index = this.Targets.indexOf(updateItem);
        this.Targets[index] = newItem;
    };
    TargetsComponent.prototype.findIndexToUpdate = function (newItem) {
        return newItem.id === this;
    };
    // create or edit Filter submit
    TargetsComponent.prototype.onSubmitTarget = function (formId, formValue) {
        var _this = this;
        this.duplicateCodeFlag = false;
        this.showTargetCreateError = false;
        this.showTargetEditError = false;
        this.submitLoading = true;
        switch (formId) {
            case 'edit':
                // update a record
                this._targetService.update(formValue)
                    .subscribe(function (updatedTarget) {
                    _this.selectedTargetName = updatedTarget.name;
                    _this.selectedTargetCode = updatedTarget.code;
                    _this.selectedTargetType = updatedTarget.nucleic_acid_type;
                    _this.selectedTargetNote = updatedTarget.notes;
                    _this.updateTargetArray(formValue);
                    _this.selectedTarget = undefined;
                    _this.submitLoading = false;
                    _this.showTargetEditSuccess = true;
                    _this._cdr.detectChanges();
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showTargetEditError = true;
                });
                break;
            case 'add':
                // check if code exists already
                for (var _i = 0, _a = this.Targets; _i < _a.length; _i++) {
                    var target = _a[_i];
                    if (target.code === formValue.code) {
                        this.duplicateCodeFlag = true;
                        this.submitLoading = false;
                        return;
                    }
                }
                // add a record
                this._targetService.create(formValue)
                    .subscribe(function (newTarget) {
                    _this.Targets.push(newTarget);
                    _this.addTargetForm.reset({
                        name: '',
                        code: '',
                        nucleic_acid_type: '',
                        notes: ''
                    });
                    _this.submitLoading = false;
                    _this.showTargetCreateSuccess = true;
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showTargetCreateError = true;
                });
                break;
            default:
        }
    };
    // show delete sample type modal
    TargetsComponent.prototype.deleteTarget = function (selectedST) {
        this.showTargetDeleteSuccess = false; // reset this
        this.showTargetDeleteError = false; // reset this too
        this.selectedTargetName = selectedST.name;
        this.selectedTargetId = selectedST.id;
        // show the delete Filter form if not showing already
        if (this.showHideDelete === false) {
            this.showHideDelete = true;
        }
    };
    TargetsComponent.prototype.submitDelete = function () {
        var _this = this;
        // get the index to be deleted by the id
        var ind;
        this.Targets.some(function (pdh, index, _ary) {
            if (pdh.id === _this.selectedTargetId) {
                ind = index;
            }
            ;
            return pdh.id === _this.selectedTargetId;
        });
        this._targetService.delete(this.selectedTargetId)
            .subscribe(function () {
            _this.selectedTargetName = "";
            _this.Targets.splice(ind, 1);
            _this.selectedTarget = undefined;
            _this.submitLoading = false;
            _this.showTargetDeleteSuccess = true;
            _this._cdr.detectChanges();
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
            _this.showTargetDeleteError = true;
        });
    };
    return TargetsComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], TargetsComponent.prototype, "Targets", void 0);
TargetsComponent = __decorate([
    core_1.Component({
        selector: 'targets',
        template: __webpack_require__("./src/app/admin/targets/targets.component.html"),
        styles: [__webpack_require__("./src/app/admin/targets/targets.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof router_1.ActivatedRoute !== "undefined" && router_1.ActivatedRoute) === "function" && _a || Object, typeof (_b = typeof target_service_1.TargetService !== "undefined" && target_service_1.TargetService) === "function" && _b || Object, typeof (_c = typeof core_1.ChangeDetectorRef !== "undefined" && core_1.ChangeDetectorRef) === "function" && _c || Object])
], TargetsComponent);
exports.TargetsComponent = TargetsComponent;
var _a, _b, _c;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/admin/targets/targets.component.js.map

/***/ }),

/***/ "./src/app/admin/units/units.component.html":
/***/ (function(module, exports) {

module.exports = "<!--<div class=\"row\">-->\r\n<!-- Units table -->\r\n<div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n\t<div class=\"card\">\r\n\t\t<div class=\"card-block\">\r\n\t\t\t<div class=\"card-title\">Units</div>\r\n\t\t\t<div class=\"card-text\">\r\n\t\t\t\t<clr-datagrid [(clrDgSingleSelected)]=\"selectedUnit\">\r\n\t\t\t\t\t<!-- edit and delete Unit buttons -->\r\n\t\t\t\t\t<clr-dg-action-bar>\r\n\t\t\t\t\t\t<div class=\"btn-group\">\r\n\t\t\t\t\t\t\t<button class=\"btn btn-sm\" (click)=\"showAddModal()\">\r\n\t\t\t\t\t\t\t\t<clr-icon shape=\"plus\"></clr-icon> Add </button>\r\n\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedUnit\" (click)=\"editUnit(selectedUnit)\">\r\n\t\t\t\t\t\t\t\t<clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit</button>\r\n\t\t\t\t\t\t\t<!-- <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedUnit\" (click)=\"deleteUnit(selectedUnit)\">\r\n\t\t\t\t\t\t\t\t<clr-icon shape=\"trash\" size=\"16\"></clr-icon> Delete</button> -->\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</clr-dg-action-bar>\r\n\r\n\t\t\t\t\t<!-- table of all units -->\r\n\t\t\t\t\t<clr-dg-column [clrDgField]=\"'id'\">\r\n\t\t\t\t\t\t<ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n\t\t\t\t\t\t\tUnit ID\r\n\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t</clr-dg-column>\r\n\r\n\t\t\t\t\t<clr-dg-column [clrDgField]=\"'name'\">\r\n\t\t\t\t\t\t<ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n\t\t\t\t\t\t\tUnit Name\r\n\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t</clr-dg-column>\r\n\r\n\t\t\t\t\t<clr-dg-column [clrDgField]=\"'description'\">\r\n\t\t\t\t\t\t<ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n\t\t\t\t\t\t\tUnit Description\r\n\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t</clr-dg-column>\r\n\r\n\t\t\t\t\t<clr-dg-row *clrDgItems=\"let u of Units\" [clrDgItem]=\"u\">\r\n\t\t\t\t\t\t<clr-dg-cell>{{u.id}}</clr-dg-cell>\r\n\t\t\t\t\t\t<clr-dg-cell>{{u.name}}</clr-dg-cell>\r\n\t\t\t\t\t\t<clr-dg-cell>{{u.description}}</clr-dg-cell>\r\n\t\t\t\t\t</clr-dg-row>\r\n\t\t\t\t</clr-datagrid>\r\n\t\t\t</div>\r\n\t\t\t<!-- end main Unit card text -->\r\n\t\t</div>\r\n\t\t<!-- end main Unit card block -->\r\n\t</div>\r\n\t<!-- end main Unit card -->\r\n</div>\r\n\r\n<!-- add Unit Modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideAdd\">\r\n\t<h3 class=\"modal-title\">\r\n\t\t<clr-icon shape=\"plus\"></clr-icon> Add Unit</h3>\r\n\t<div class=\"modal-body\">\r\n\t\t<div class=\"row\">\r\n\t\t\t<div class=\"col-lg-12\">\r\n\t\t\t\t<form id=\"addUnitForm\" class=\"compact\" [formGroup]=\"addUnitForm\" (ngSubmit)=\"onSubmitUnit('add', addUnitForm.value)\">\r\n\t\t\t\t\t<div class=\"card-block\">\r\n\t\t\t\t\t\t<clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showUnitCreateError\">\r\n\t\t\t\t\t\t\t<div clr-alert-item class=\"alert-item\">\r\n\t\t\t\t\t\t\t\t<span class=\"alert-text\">Submission error. Unit not submitted. {{errorMessage}}</span>\r\n\t\t\t\t\t\t\t\t<div class=\"alert-actions\">\r\n\t\t\t\t\t\t\t\t\t<a class=\"alert-action\" (click)=\"onSubmitUnit('add', addUnitForm.value)\">Try again</a>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</clr-alert>\r\n\r\n\t\t\t\t\t\t<clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showUnitCreateSuccess\">\r\n\t\t\t\t\t\t\t<div clr-alert-item class=\"alert-item\">\r\n\t\t\t\t\t\t\t\t<span class=\"alert-text\">Unit successfully submitted</span>\r\n\t\t\t\t\t\t\t\t<div class=\"alert-actions\">\r\n\t\t\t\t\t\t\t\t\t<a class=\"alert-action\" (click)=\"showHideAdd = false; showUnitCreateSuccess = false\">Close</a>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</clr-alert>\r\n\r\n\t\t\t\t\t\t<section class=\"form-block\">\r\n\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<label class=\"required\">Name</label>\r\n\t\t\t\t\t\t\t\t<label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"addUnitForm.get('name').invalid && (addUnitForm.get('name').dirty || addUnitForm.get('name').touched)\">\r\n\t\t\t\t\t\t\t\t\t<input id=\"name\" type=\"text\" class=\"form-control\" formControlName=\"name\" size=\"30\">\r\n\t\t\t\t\t\t\t\t\t<span class=\"tooltip-content\">Name is required.</span>\r\n\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t\t<label>Description</label>\r\n\t\t\t\t\t\t\t\t<label for=\"description\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-sm\">\r\n\t\t\t\t\t\t\t\t\t<textarea id=\"description\" type=\"text\" class=\"form-control\" formControlName=\"description\" rows=\"2\" cols=\"30\" style=\"max-width:25em\"></textarea>\r\n\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</section>\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"card-footer\">\r\n\t\t\t\t\t\t<button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"addUnitForm.invalid\" [clrLoading]=\"submitLoading\">Submit</button>\r\n\t\t\t\t\t\t<button class=\"btn btn-info\" (click)=\"showHideAdd = !showHideAdd\">Close</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</clr-modal>\r\n\r\n<!-- edit Unit Modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideEdit\">\r\n\t<h3 class=\"modal-title\">\r\n\t\t<clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit Unit</h3>\r\n\t<div class=\"modal-body\">\r\n\t\t<div class=\"row\">\r\n\t\t\t<div class=\"col-lg-12\">\r\n\t\t\t\t<clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showUnitEditError\">\r\n\t\t\t\t\t<div clr-alert-item class=\"alert-item\">\r\n\t\t\t\t\t\t<span class=\"alert-text\">Submission error. Unit not edited.</span>\r\n\t\t\t\t\t\t<div class=\"alert-actions\">\r\n\t\t\t\t\t\t\t<a class=\"alert-action\" (click)=\"onSubmitUnit('edit', editUnitForm.value)\">Try again</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</clr-alert>\r\n\r\n\t\t\t\t<clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showUnitEditSuccess\">\r\n\t\t\t\t\t<div clr-alert-item class=\"alert-item\">\r\n\t\t\t\t\t\t<span class=\"alert-text\">Unit successfully edited</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</clr-alert>\r\n\r\n\t\t\t\t<form id=\"editUnitForm\" class=\"compact\" [formGroup]=\"editUnitForm\" (ngSubmit)=\"onSubmitUnit('edit', editUnitForm.value)\">\r\n\t\t\t\t\t<section class=\"form-block\">\r\n\t\t\t\t\t\t<label>Selected Unit: {{selectedUnitName}}</label>\r\n\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t<label for=\"UnitId\">Unit ID</label>\r\n\t\t\t\t\t\t\t<input type=\"text\" id=\"UnitId\" size=\"35\" formControlName=\"id\" readonly>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t<label class=\"required\">Name</label>\r\n\t\t\t\t\t\t\t<label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"editUnitForm.get('name').invalid && (editUnitForm.get('name').dirty || editUnitForm.get('name').touched)\">\r\n\t\t\t\t\t\t\t\t<input id=\"name\" type=\"text\" formControlName=\"name\" size=\"40\">\r\n\t\t\t\t\t\t\t\t<span class=\"tooltip-content\">Name is required.</span>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t\t\t<label>Description</label>\r\n\t\t\t\t\t\t\t<label for=\"description\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-sm\">\r\n\t\t\t\t\t\t\t\t<textarea id=\"description\" type=\"text\" formControlName=\"description\" rows=\"2\" style=\"max-width:25em\"></textarea>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"editUnitForm.invalid\" [clrLoading]=\"submitLoading\">Save Edits</button>\r\n\t\t\t\t\t\t<button class=\"btn btn-info\" (click)=\"showHideEdit = !showHideEdit\">Close</button>\r\n\r\n\t\t\t\t\t</section>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</clr-modal>\r\n\r\n<!-- delete Unit type Modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideDelete\">\r\n\t<h3 class=\"modal-title\">\r\n\t\t<clr-icon shape=\"trash\" size=\"16\"></clr-icon> Delete Unit</h3>\r\n\t<div class=\"modal-body\">\r\n\t\t<div class=\"row\">\r\n\t\t\t<div class=\"col-lg-12\">\r\n\t\t\t\t<clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showUnitDeleteError\">\r\n\t\t\t\t\t<div clr-alert-item class=\"alert-item\">\r\n\t\t\t\t\t\t<span class=\"alert-text\">Submission error. Unit not deleted.</span>\r\n\t\t\t\t\t\t<div class=\"alert-actions\">\r\n\t\t\t\t\t\t\t<a class=\"alert-action\" (click)=\"submitDelete()\">Try again</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</clr-alert>\r\n\r\n\t\t\t\t<clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showUnitDeleteSuccess\">\r\n\t\t\t\t\t<div clr-alert-item class=\"alert-item\">\r\n\t\t\t\t\t\t<span class=\"alert-text\">Unit successfully deleted.</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</clr-alert>\r\n\r\n\t\t\t\t<div *ngIf=\"!showUnitDeleteSuccess\">\r\n\t\t\t\t\t<p>Are you sure you want to delete the unit\r\n\t\t\t\t\t\t<b>{{selectedUnitName}}</b> ?</p>\r\n\r\n\t\t\t\t\t<button class=\"btn btn-primary\" type=\"button\" (click)=\"submitDelete()\" [clrLoading]=\"submitLoading\">Delete</button>\r\n\t\t\t\t\t<button class=\"btn btn-info\" (click)=\"showHideDelete = !showHideDelete\">Close</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</clr-modal>\r\n<!--</div>-->"

/***/ }),

/***/ "./src/app/admin/units/units.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/admin/units/units.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
var unit_service_1 = __webpack_require__("./src/app/units/unit.service.ts");
var UnitsComponent = (function () {
    function UnitsComponent(_route, _unitService, _cdr) {
        this._route = _route;
        this._unitService = _unitService;
        this._cdr = _cdr;
        // add Unit form - declare a reactive form with appropriate Unit fields
        this.addUnitForm = new forms_1.FormGroup({
            name: new forms_1.FormControl('', forms_1.Validators.required),
            description: new forms_1.FormControl('')
        });
        // edit Unit form - declare a reactive form
        this.editUnitForm = new forms_1.FormGroup({
            id: new forms_1.FormControl(''),
            name: new forms_1.FormControl('', forms_1.Validators.required),
            description: new forms_1.FormControl('')
        });
    }
    UnitsComponent.prototype.ngOnInit = function () {
        this.showHideAdd = false;
        this.showHideEdit = false;
        this.showHideDelete = false;
        this.showUnitCreateError = false;
        this.showUnitEditError = false;
        this.showUnitDeleteError = false;
        this.showUnitCreateSuccess = false;
        this.showUnitEditSuccess = false;
        this.showUnitDeleteSuccess = false;
        this.submitLoading = false;
    };
    UnitsComponent.prototype.showAddModal = function () {
        this.showHideAdd = !this.showHideAdd;
        // reset these to false in case Add Unit is clicked more than once
        this.showUnitCreateError = false;
        this.showUnitCreateSuccess = false;
    };
    UnitsComponent.prototype.editUnit = function (selectedUnit) {
        this.editUnitForm.reset(); // reset here to ensure states are clean (instead of after update complete)
        this.showUnitEditSuccess = false; // reset this 
        this.showUnitEditError = false; // reset this 
        this.selectedUnitDesc = selectedUnit.description;
        this.selectedUnitName = selectedUnit.name;
        this.selectedUnitId = selectedUnit.id;
        this.editUnitForm.setValue({
            id: this.selectedUnitId,
            name: this.selectedUnitName,
            description: this.selectedUnitDesc
        });
        // show the edit Unit form if not showing already
        if (this.showHideEdit === false) {
            this.showHideEdit = true;
        }
    };
    UnitsComponent.prototype.updateUnitArray = function (newItem) {
        var updateItem = this.Units.find(this.findIndexToUpdate, newItem.id);
        var index = this.Units.indexOf(updateItem);
        this.Units[index] = newItem;
    };
    UnitsComponent.prototype.findIndexToUpdate = function (newItem) {
        return newItem.id === this;
    };
    // create or edit Unit submit
    UnitsComponent.prototype.onSubmitUnit = function (formId, formValue) {
        var _this = this;
        this.showUnitCreateError = false;
        this.showUnitEditError = false;
        this.submitLoading = true;
        switch (formId) {
            case 'edit':
                // update a record
                this._unitService.update(formValue)
                    .subscribe(function (updatedUnit) {
                    _this.selectedUnitName = updatedUnit.name;
                    _this.selectedUnitDesc = updatedUnit.description;
                    _this.updateUnitArray(formValue);
                    _this.selectedUnit = undefined;
                    _this.submitLoading = false;
                    _this.showUnitEditSuccess = true;
                    _this._cdr.detectChanges();
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showUnitEditError = true;
                });
                break;
            case 'add':
                // add a record
                this._unitService.create(formValue)
                    .subscribe(function (newUnit) {
                    _this.Units.push(newUnit);
                    _this.addUnitForm.reset();
                    _this.submitLoading = false;
                    _this.showUnitCreateSuccess = true;
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showUnitCreateError = true;
                });
                break;
            default:
        }
    };
    // show delete Unit type modal
    UnitsComponent.prototype.deleteUnit = function (selectedUnit) {
        this.showUnitDeleteSuccess = false; //reset this
        this.showUnitDeleteError = false; //reset this too
        this.selectedUnitName = selectedUnit.name;
        this.selectedUnitId = selectedUnit.id;
        // show the delete Unit form if not showing already
        if (this.showHideDelete === false) {
            this.showHideDelete = true;
        }
    };
    UnitsComponent.prototype.submitDelete = function () {
        var _this = this;
        //get the index to be deleted by the id
        var ind;
        this.Units.some(function (pdh, index, _ary) {
            if (pdh.id === _this.selectedUnitId)
                ind = index;
            return pdh.id === _this.selectedUnitId;
        });
        this._unitService.delete(this.selectedUnitId)
            .subscribe(function () {
            _this.selectedUnitName = "";
            _this.Units.splice(ind, 1);
            _this.selectedUnit = undefined;
            _this.submitLoading = false;
            _this.showUnitDeleteSuccess = true;
            _this._cdr.detectChanges();
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
            _this.showUnitDeleteError = true;
        });
    };
    return UnitsComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], UnitsComponent.prototype, "Units", void 0);
UnitsComponent = __decorate([
    core_1.Component({
        selector: 'units',
        template: __webpack_require__("./src/app/admin/units/units.component.html"),
        styles: [__webpack_require__("./src/app/admin/units/units.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof router_1.ActivatedRoute !== "undefined" && router_1.ActivatedRoute) === "function" && _a || Object, typeof (_b = typeof unit_service_1.UnitService !== "undefined" && unit_service_1.UnitService) === "function" && _b || Object, typeof (_c = typeof core_1.ChangeDetectorRef !== "undefined" && core_1.ChangeDetectorRef) === "function" && _c || Object])
], UnitsComponent);
exports.UnitsComponent = UnitsComponent;
var _a, _b, _c;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/admin/units/units.component.js.map

/***/ }),

/***/ "./src/app/admin/users/users.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n  <div class=\"card\">\r\n    <div class=\"card-block\">\r\n      <div class=\"card-title\">Users</div>\r\n      <div class=\"card-text\">\r\n\r\n        <clr-datagrid [(clrDgSingleSelected)]=\"selectedUser\">\r\n          <!-- edit and delete CT buttons -->\r\n          <clr-dg-action-bar>\r\n            <div class=\"btn-group\">\r\n              <button class=\"btn btn-sm\" (click)=\"showAddModal()\">\r\n                <clr-icon shape=\"plus\"></clr-icon> Add</button>\r\n              <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedUser\" (click)=\"editUser(selectedUser)\">\r\n                <clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit</button>\r\n              <!-- <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedUser\" (click)=\"deleteUser(selectedUser)\">\r\n                <clr-icon shape=\"trash\" size=\"16\"></clr-icon> Delete</button> -->\r\n            </div>\r\n          </clr-dg-action-bar>\r\n\r\n          <!-- table of all users -->\r\n          <clr-dg-column [clrDgField]=\"'id'\">\r\n            <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n              User ID\r\n            </ng-container>\r\n          </clr-dg-column>\r\n\r\n          <clr-dg-column [clrDgField]=\"'name'\">\r\n            <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n              User First Name\r\n            </ng-container>\r\n          </clr-dg-column>\r\n\r\n          <clr-dg-column [clrDgField]=\"'description'\">\r\n            <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n              User Last Name\r\n            </ng-container>\r\n          </clr-dg-column>\r\n\r\n          <clr-dg-column [clrDgField]=\"'description'\">\r\n            <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n              User Username\r\n            </ng-container>\r\n          </clr-dg-column>\r\n\r\n          <clr-dg-column [clrDgField]=\"'description'\">\r\n            <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n              User Email\r\n            </ng-container>\r\n          </clr-dg-column>\r\n\r\n          <clr-dg-row *clrDgItems=\"let user of Users\" [clrDgItem]=\"user\">\r\n            <clr-dg-cell>{{user.id}}</clr-dg-cell>\r\n            <clr-dg-cell>{{user.first_name}}</clr-dg-cell>\r\n            <clr-dg-cell>{{user.last_name}}</clr-dg-cell>\r\n            <clr-dg-cell>{{user.username}}</clr-dg-cell>\r\n            <clr-dg-cell>{{user.email}}</clr-dg-cell>\r\n          </clr-dg-row>\r\n\r\n        </clr-datagrid>\r\n      </div>\r\n      <!-- end main user card text -->\r\n    </div>\r\n    <!-- end main user card block -->\r\n  </div>\r\n  <!-- end main user card -->\r\n</div>\r\n\r\n<!-- add user Modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideAdd\">\r\n  <h3 class=\"modal-title\">\r\n    <clr-icon shape=\"plus\"></clr-icon> Add User</h3>\r\n  <div class=\"modal-body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-12\">\r\n        <form id=\"addUserForm\" class=\"compact\" [formGroup]=\"addUserForm\" (ngSubmit)=\"onSubmitUser('add', addUserForm.value)\">\r\n\r\n          <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showUserCreateError\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Submission error. User not submitted. {{errorMessage}}</span>\r\n              <div class=\"alert-actions\">\r\n                <a class=\"alert-action\" (click)=\"onSubmitUser('add', addUserForm.value)\">Try again</a>\r\n              </div>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showUserCreateSuccess\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">User successfully submitted</span>\r\n              <div class=\"alert-actions\">\r\n                <a class=\"alert-action\" (click)=\"showHideAdd = false; showUserCreateSuccess = false\">Close</a>\r\n              </div>\r\n            </div>\r\n          </clr-alert>\r\n\r\n\r\n          <section class=\"form-block\">\r\n            <div class=\"form-group\">\r\n              <label>First Name</label>\r\n              <label for=\"first_name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"addUserForm.get('first_name').invalid && (addUserForm.get('first_name').dirty || addUserForm.get('first_name').touched)\">\r\n                <input id=\"first_name\" type=\"text\" class=\"form-control\" formControlName=\"first_name\" size=\"30\">\r\n                <span class=\"tooltip-content\">First Name is required.</span>\r\n              </label>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label>Last Name</label>\r\n              <label for=\"last_name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"addUserForm.get('last_name').invalid && (addUserForm.get('last_name').dirty || addUserForm.get('last_name').touched)\">\r\n                <input id=\"last_name\" type=\"text\" class=\"form-control\" formControlName=\"last_name\" size=\"30\">\r\n                <span class=\"tooltip-content\">Last Name is required.</span>\r\n              </label>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label>User Name</label>\r\n              <label for=\"username\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"addUserForm.get('username').invalid && (addUserForm.get('username').dirty || addUserForm.get('username').touched)\">\r\n                <input id=\"username\" type=\"text\" class=\"form-control\" formControlName=\"username\" size=\"30\">\r\n                <span class=\"tooltip-content\">User Name is required.</span>\r\n              </label>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label>Email</label>\r\n              <label for=\"email\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"addUserForm.get('email').invalid && (addUserForm.get('email').dirty || addUserForm.get('email').touched)\">\r\n                <input id=\"email\" type=\"email\" class=\"form-control\" formControlName=\"email\" size=\"30\">\r\n                <span class=\"tooltip-content\">Email is required.</span>\r\n              </label>\r\n            </div>\r\n          </section>\r\n          <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"addUserForm.invalid\" [clrLoading]=\"submitLoading\">Submit</button>\r\n          <button class=\"btn btn-info\" (click)=\"showHideAdd = !showHideAdd\">Close</button>\r\n\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</clr-modal>\r\n\r\n<!-- edit user Modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideEdit\">\r\n  <h3 class=\"modal-title\">\r\n    <clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit User</h3>\r\n  <div class=\"modal-body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-12\">\r\n        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showUserEditError\">\r\n          <div clr-alert-item class=\"alert-item\">\r\n            <span class=\"alert-text\">Submission error. User not edited.</span>\r\n            <div class=\"alert-actions\">\r\n              <a class=\"alert-action\" (click)=\"onSubmitUser('edit', editUserForm.value)\">Try again</a>\r\n            </div>\r\n          </div>\r\n        </clr-alert>\r\n\r\n        <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showUserEditSuccess\">\r\n          <div clr-alert-item class=\"alert-item\">\r\n            <span class=\"alert-text\">User successfully edited</span>\r\n          </div>\r\n        </clr-alert>\r\n\r\n        <form id=\"editCTForm\" class=\"compact\" [formGroup]=\"editUserForm\" (ngSubmit)=\"onSubmitUser('edit', editUserForm.value)\">\r\n          <section class=\"form-block\">\r\n            <label>Selected User: {{selectedUserFirstName}}</label>\r\n            <div class=\"form-group\">\r\n              <label for=\"UserId\">User ID</label>\r\n              <input type=\"text\" id=\"UserId\" size=\"35\" formControlName=\"id\" readonly>\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n              <label>First Name</label>\r\n              <label for=\"first_name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"editUserForm.get('first_name').invalid && (editUserForm.get('first_name').dirty || editUserForm.get('first_name').touched)\">\r\n                <input id=\"first_name\" type=\"text\" formControlName=\"first_name\" size=\"40\">\r\n                <span class=\"tooltip-content\">First Name is required.</span>\r\n              </label>\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n              <label>Last Name</label>\r\n              <label for=\"last_name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"editUserForm.get('last_name').invalid && (editUserForm.get('last_name').dirty || editUserForm.get('last_name').touched)\">\r\n                <input id=\"last_name\" type=\"text\" formControlName=\"last_name\" size=\"40\">\r\n                <span class=\"tooltip-content\">First Name is required.</span>\r\n              </label>\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n              <label>User Name</label>\r\n              <label for=\"username\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"editUserForm.get('username').invalid && (editUserForm.get('username').dirty || editUserForm.get('username').touched)\">\r\n                <input id=\"username\" type=\"text\" formControlName=\"username\" size=\"40\">\r\n                <span class=\"tooltip-content\">User Name is required.</span>\r\n              </label>\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n              <label>Email</label>\r\n              <label for=\"email\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"editUserForm.get('email').invalid && (editUserForm.get('email').dirty || editUserForm.get('email').touched)\">\r\n                <input id=\"email\" type=\"email\" formControlName=\"email\" size=\"40\">\r\n                <span class=\"tooltip-content\">Email is required with proper formatting.</span>\r\n              </label>\r\n            </div>\r\n\r\n            <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"editUserForm.invalid\" [clrLoading]=\"submitLoading\">Save Edits</button>\r\n            <button class=\"btn btn-info\" (click)=\"showHideEdit = !showHideEdit\">Close</button>\r\n\r\n          </section>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</clr-modal>\r\n\r\n<!-- delete User Modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideDelete\">\r\n  <h3 class=\"modal-title\">\r\n    <clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Delete User</h3>\r\n  <div class=\"modal-body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-12\">\r\n        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showUserDeleteError\">\r\n          <div clr-alert-item class=\"alert-item\">\r\n            <span class=\"alert-text\">Submission error. User not deleted.</span>\r\n            <div class=\"alert-actions\">\r\n              <a class=\"alert-action\" (click)=\"submitDelete()\">Try again</a>\r\n            </div>\r\n          </div>\r\n        </clr-alert>\r\n\r\n        <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showUserDeleteSuccess\">\r\n          <div clr-alert-item class=\"alert-item\">\r\n            <span class=\"alert-text\">User successfully deleted.</span>\r\n          </div>\r\n        </clr-alert>\r\n\r\n        <div *ngIf=\"!showUserDeleteSuccess\">\r\n          <p>Are you sure you want to delete the user\r\n            <b>{{selectedUserFirstName}}</b> ?</p>\r\n\r\n          <button class=\"btn btn-primary\" type=\"button\" (click)=\"submitDelete()\" [clrLoading]=\"submitLoading\">Delete</button>\r\n          <button class=\"btn btn-info\" (click)=\"showHideDelete = !showHideDelete\">Close</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</clr-modal>"

/***/ }),

/***/ "./src/app/admin/users/users.component.scss":
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/admin/users/users.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
var user_service_1 = __webpack_require__("./src/app/SHARED/user.service.ts");
var UsersComponent = (function () {
    function UsersComponent(_route, _userService, _cdr) {
        this._route = _route;
        this._userService = _userService;
        this._cdr = _cdr;
        // add Sample form - declare a reactive form with appropriate Sample fields
        this.addUserForm = new forms_1.FormGroup({
            first_name: new forms_1.FormControl('', forms_1.Validators.required),
            last_name: new forms_1.FormControl('', forms_1.Validators.required),
            email: new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.email]),
            username: new forms_1.FormControl('', forms_1.Validators.required)
        });
        // edit Sample form - declare a reactive form
        this.editUserForm = new forms_1.FormGroup({
            id: new forms_1.FormControl(''),
            first_name: new forms_1.FormControl('', forms_1.Validators.required),
            last_name: new forms_1.FormControl('', forms_1.Validators.required),
            email: new forms_1.FormControl('', [forms_1.Validators.required, forms_1.Validators.email]),
            username: new forms_1.FormControl('', forms_1.Validators.required)
        });
    }
    UsersComponent.prototype.ngOnInit = function () {
        this.showHideAdd = false;
        this.showHideEdit = false;
        this.showHideDelete = false;
        this.showUserCreateError = false;
        this.showUserEditError = false;
        this.showUserDeleteError = false;
        this.showUserCreateSuccess = false;
        this.showUserEditSuccess = false;
        this.showUserDeleteSuccess = false;
        this.submitLoading = false;
    };
    UsersComponent.prototype.showAddModal = function () {
        this.showHideAdd = !this.showHideAdd;
        // reset these to false in case Add Sample Type is clicked more than once
        this.showUserCreateError = false;
        this.showUserCreateSuccess = false;
    };
    UsersComponent.prototype.editUser = function (selectedUser) {
        this.editUserForm.reset(); // reset here to ensure states are clean (instead of after update complete)
        this.showUserEditSuccess = false; // reset this
        this.showUserEditError = false; // reset this
        this.selectedUserEmail = selectedUser.email;
        this.selectedUserUsername = selectedUser.username;
        this.selectedUserLastName = selectedUser.last_name;
        this.selectedUserFirstName = selectedUser.first_name;
        this.selectedUserId = selectedUser.id;
        this.editUserForm.setValue({
            id: this.selectedUserId,
            first_name: this.selectedUserFirstName,
            last_name: this.selectedUserLastName,
            email: this.selectedUserEmail,
            username: this.selectedUserUsername
        });
        // show the edit Sample Type form if not showing already
        if (this.showHideEdit === false) {
            this.showHideEdit = true;
        }
    };
    UsersComponent.prototype.updateUserArray = function (newItem) {
        var updateItem = this.Users.find(this.findIndexToUpdate, newItem.id);
        var index = this.Users.indexOf(updateItem);
        this.Users[index] = newItem;
    };
    UsersComponent.prototype.findIndexToUpdate = function (newItem) {
        return newItem.id === this;
    };
    // create or edit Filter submit
    UsersComponent.prototype.onSubmitUser = function (formId, formValue) {
        var _this = this;
        this.showUserCreateError = false;
        this.showUserEditError = false;
        this.submitLoading = true;
        switch (formId) {
            case 'edit':
                // update a record
                this._userService.update(formValue)
                    .subscribe(function (updatedUser) {
                    _this.selectedUserFirstName = updatedUser.first_name;
                    _this.selectedUserLastName = updatedUser.last_name;
                    _this.selectedUserUsername = updatedUser.username;
                    _this.selectedUserEmail = updatedUser.email;
                    _this.updateUserArray(formValue);
                    _this.selectedUser = undefined;
                    _this.submitLoading = false;
                    _this.showUserEditSuccess = true;
                    _this._cdr.detectChanges();
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showUserEditError = true;
                });
                break;
            case 'add':
                // add a record
                this._userService.create(formValue)
                    .subscribe(function (newST) {
                    _this.Users.push(newST);
                    _this.addUserForm.reset();
                    _this.submitLoading = false;
                    _this.showUserCreateSuccess = true;
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showUserCreateError = true;
                });
                break;
            default:
        }
    };
    // show delete sample type modal
    UsersComponent.prototype.deleteST = function (selectedUser) {
        this.showUserDeleteSuccess = false; //reset this
        this.showUserDeleteError = false; //reset this too
        this.selectedUserLastName = selectedUser.last_name;
        this.selectedUserFirstName = selectedUser.first_name;
        this.selectedUserId = selectedUser.id;
        // show the delete Filter form if not showing already
        if (this.showHideDelete === false) {
            this.showHideDelete = true;
        }
    };
    UsersComponent.prototype.submitDelete = function () {
        var _this = this;
        //get the index to be deleted by the id
        var ind;
        this.Users.some(function (pdh, index, _ary) {
            if (pdh.id === _this.selectedUserId)
                ind = index;
            return pdh.id === _this.selectedUserId;
        });
        this._userService.delete(this.selectedUserId)
            .subscribe(function () {
            _this.selectedUserFirstName = "";
            _this.selectedUserLastName = "";
            _this.Users.splice(ind, 1);
            _this.selectedUser = undefined;
            _this.submitLoading = false;
            _this.showUserDeleteSuccess = true;
            _this._cdr.detectChanges();
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
            _this.showUserDeleteError = true;
        });
    };
    return UsersComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], UsersComponent.prototype, "Users", void 0);
UsersComponent = __decorate([
    core_1.Component({
        selector: 'users',
        template: __webpack_require__("./src/app/admin/users/users.component.html"),
        styles: [__webpack_require__("./src/app/admin/users/users.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof router_1.ActivatedRoute !== "undefined" && router_1.ActivatedRoute) === "function" && _a || Object, typeof (_b = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" && _b || Object, typeof (_c = typeof core_1.ChangeDetectorRef !== "undefined" && core_1.ChangeDetectorRef) === "function" && _c || Object])
], UsersComponent);
exports.UsersComponent = UsersComponent;
var _a, _b, _c;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/admin/users/users.component.js.map

/***/ }),

/***/ "./src/app/aliquots/aliquot.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var AliquotService = (function () {
    function AliquotService(_http) {
        this._http = _http;
    }
    AliquotService.prototype.create = function (submissionArray) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        // JSON object submission (formValue) need to be within an array
        return this._http.post(app_settings_1.APP_SETTINGS.ALIQUOTS_URL, submissionArray, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    AliquotService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return AliquotService;
}());
AliquotService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], AliquotService);
exports.AliquotService = AliquotService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/aliquots/aliquot.service.js.map

/***/ }),

/***/ "./src/app/aliquots/freezer-locations.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var FreezerLocationsService = (function () {
    function FreezerLocationsService(_http) {
        this._http = _http;
    }
    FreezerLocationsService.prototype.getLastOccupiedSpot = function () {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.FREEZER_LOCATIONS_URL + '?last_occupied=true', options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    FreezerLocationsService.prototype.getNextAvailable = function (studyID) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.FREEZER_LOCATIONS_URL + 'get_next_available/?study=' + studyID, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    FreezerLocationsService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return FreezerLocationsService;
}());
FreezerLocationsService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], FreezerLocationsService);
exports.FreezerLocationsService = FreezerLocationsService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/aliquots/freezer-locations.service.js.map

/***/ }),

/***/ "./src/app/aliquots/freezer.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var FreezerService = (function () {
    function FreezerService(_http) {
        this._http = _http;
    }
    FreezerService.prototype.getFreezers = function () {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS });
        return this._http.get(app_settings_1.APP_SETTINGS.FREEZERS_URL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    FreezerService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return FreezerService;
}());
FreezerService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], FreezerService);
exports.FreezerService = FreezerService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/aliquots/freezer.service.js.map

/***/ }),

/***/ "./src/app/analysis-batches/analysis-batch-detail/analysis-batch-detail.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\r\n  <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n    <div class=\"card ab-detail-card\">\r\n      <div class=\"card-block\">\r\n        <h3 class=\"card-title\">Extractions</h3>\r\n        <p class=\"card-text\">\r\n          <div class=\"row extraction-row\">\r\n            <span class=\"spinner spinner-lg\" *ngIf=\"ABDetailsLoading\">\r\n              Loading...\r\n            </span>\r\n            <span *ngIf=\"noExtractionsFlag\">\r\n              <clr-icon shape=\"neutral-face\"></clr-icon> There are no Extractions from this Analysis Batch.\r\n            </span>\r\n\r\n            <clr-tree-node *ngFor=\"let extractionbatch of extractionBatchArray\">\r\n              <span>Extraction {{extractionbatch.extraction_number}}&nbsp;&nbsp;&nbsp;&nbsp;{{extractionbatch.extraction_date |\r\n                date:'shortDate'}}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n              </span>\r\n\r\n              <button class=\"stack-action btn btn-sm btn-link \" (click)=\"editExtractionBatch(extractionbatch)\"\r\n                type=\"button\">Edit</button>\r\n              <ng-template [clrIfExpanded]=\"false\">\r\n                <clr-tree-node>\r\n                  <div class=\"extraction-row\">\r\n\r\n                    <button class=\"btn btn-sm btn-outline\" type=\"button\"\r\n                      (click)=\"openBulkSubmitNegResults(extractionbatch)\">Bulk\r\n                      Submit Negative Results</button>\r\n\r\n                    <div>\r\n                      <table class=\"table table-vertical table-compact \">\r\n                        <tbody>\r\n                          <tr>\r\n                            <th>Volume Extracted</th>\r\n                            <td>{{extractionbatch.extraction_volume}} µL</td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th>Volume Eluted</th>\r\n                            <td>{{extractionbatch.elution_volume}} µL</td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th>Extraction Method</th>\r\n                            <td>{{extractionbatch.extraction_method.name}}</td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th>Extraction Positive Cq Value</th>\r\n                            <td>{{extractionbatch.ext_pos_dna_cq_value}}</td>\r\n                          </tr>\r\n                          <!-- <tr>\r\n                            <th>Extraction Positive GC/Reaction</th>\r\n                            <td>{{extractionbatch.ext_pos_dna_cq_value}}</td>\r\n                          </tr> -->\r\n                          <tr>\r\n                            <th>Extraction Positive Validity</th>\r\n                            <td>{{ext_pos_dna_invalid ? \"Invalid\" : \"Valid\"}}</td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n\r\n                    <div *ngFor=\"let rt of extractionbatch.reverse_transcriptions\">\r\n                      <label>\r\n                        <span>Reverse\r\n                          Transcription&nbsp;&nbsp;&nbsp;&nbsp;{{rt.rt_date | date:'shortDate'}}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n                        <button class=\"stack-action btn btn-sm btn-link \" (click)=\"editRT(rt)\"\r\n                          type=\"button\">Edit</button>\r\n                      </label>\r\n                      <table class=\"table table-vertical table-compact\">\r\n                        <tbody>\r\n                          <tr>\r\n                            <th>Template Volume</th>\r\n                            <td>{{rt.template_volume}} µL</td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th>Reaction Volume</th>\r\n                            <td>{{rt.reaction_volume}} µL</td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <label>Targets </label>\r\n                      <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n                      <table class=\"table table-vertical table-compact \">\r\n                        <tbody>\r\n                          <tr *ngFor=\"let target of extractionbatch.targets\">\r\n                            <th>\r\n                              {{target.id | displayValue:'name':this.allTargets}}&nbsp;({{target.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes}})\r\n                            </th>\r\n                            <td>{{target.replicates}}&nbsp;replicate<span *ngIf=\"target.replicates > 1\">s</span></td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n                  </div>\r\n                </clr-tree-node>\r\n              </ng-template>\r\n            </clr-tree-node>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n    <div class=\"card ab-detail-card\">\r\n      <div class=\"card-block\">\r\n        <h3 class=\"card-title\">Samples</h3>\r\n        <p class=\"card-text\">\r\n          <div class=\"row extraction-row\">\r\n            <span class=\"spinner spinner-lg\" *ngIf=\"ABDetailsLoading\">\r\n              Loading...\r\n            </span>\r\n            <!-- <span *ngIf=\"noSamplesFlag\">\r\n              <clr-icon shape=\"neutral-face\"></clr-icon> There are no Samples in this Analysis Batch.\r\n            </span> -->\r\n\r\n            <clr-tree-node *ngFor=\"let sample of samplesArray\">\r\n              Sample {{sample.id}}\r\n              <ng-template clrIfExpanded>\r\n                <clr-tree-node>\r\n\r\n                  <div class=\"extraction-row\">\r\n\r\n                    <table class=\"table table-vertical table-compact\">\r\n                      <tbody>\r\n                        <tr>\r\n                          <th>Collaborator Sample ID</th>\r\n                          <td>{{sample.collaborator_sample_id}}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th>Sample Type</th>\r\n                          <td>{{sample.sample_type.name}}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th>Matrix</th>\r\n                          <td>{{sample.matrix.name}}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th>Study</th>\r\n                          <td>{{sample.study.id}}</td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n\r\n                    <clr-tree-node>\r\n                      Inhibitions\r\n                      <ng-template clrIfExpanded>\r\n                        <div *ngFor=\"let inhibition of sample.inhibitions; let i = index\">\r\n                          <label>Inhibition {{i+1}}</label>\r\n                          <table class=\"table table-vertical table-compact\">\r\n                            <tbody>\r\n                              <tr>\r\n                                <th>Inhibition Date</th>\r\n                                <td>{{inhibition.inhibition_date | date:'shortDate' }}</td>\r\n                              </tr>\r\n                              <tr>\r\n                                <th>Dilution Factor</th>\r\n                                <td>\r\n                                  {{inhibition.dilution_factor == null ? \"Not Calculated\": inhibition.dilution_factor}}\r\n                                </td>\r\n                              </tr>\r\n                              <tr>\r\n                                <th>Inhibition Type</th>\r\n                                <td>{{inhibition.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes}}</td>\r\n                              </tr>\r\n                            </tbody>\r\n                          </table>\r\n                        </div>\r\n\r\n                      </ng-template>\r\n                    </clr-tree-node>\r\n                  </div>\r\n                </clr-tree-node>\r\n              </ng-template>\r\n            </clr-tree-node>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<clr-modal class=\"modal-sm\" [(clrModalOpen)]=\"showHideEditExtractionDetail\" [clrModalClosable]=\"false\">\r\n  <h3 class=\"modal-title\">Edit Extraction</h3>\r\n  <div class=\"modal-body\">\r\n    <span>Analysis Batch {{selectedABID}}</span>\r\n    <form id=\"editExtractionBatchForm\" class=\"compact\" [formGroup]=\"editExtractionBatchForm\"\r\n      (ngSubmit)=\"onSubmit('editEB', editExtractionBatchForm.value)\">\r\n      <section class=\"form-block\">\r\n        <div class=\"form-group\">\r\n          <label for=\"extractionNo\">Extraction No.</label>\r\n          <input type=\"text\" id=\"extractionNo\" size=\"10\" formControlName=\"extraction_number\" readonly>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"extractionVol\">Extraction Volume</label>\r\n          <input type=\"text\" id=\"extractionVol\" size=\"10\" formControlName=\"extraction_volume\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"extractionVol\">Elution Volume</label>\r\n          <input type=\"text\" id=\"elutionVol\" size=\"10\" formControlName=\"elution_volume\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"elutionVol\">Extraction Method</label>\r\n          <div class=\"select\">\r\n            <select id=\"extractionMethodSelect\" name=\"extraction_method\" formControlName=\"extraction_method\">\r\n              <option *ngFor=\"let method of allExtractionMethods\" [value]=\"method.id\">{{method.name}}</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"extractionDateInput\">Extraction Date</label>\r\n          <input type=\"date\" id=\"extractionDateInput\" formControlName=\"extraction_date\">\r\n        </div>\r\n\r\n        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"extractionEditErrorFlag\">\r\n          <div clr-alert-item class=\"alert-item\">\r\n            <span class=\"alert-text\">Submission error. Extraction data not updated.</span>\r\n            <div class=\"alert-actions\">\r\n              <a class=\"alert-action\" (click)=\"onSubmit('editEB', editExtractionBatchForm.value)\">Try again</a>\r\n            </div>\r\n          </div>\r\n        </clr-alert>\r\n\r\n        <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"extractionEditSuccessFlag\">\r\n          <div clr-alert-item class=\"alert-item\">\r\n            <span class=\"alert-text\">Extraction data successfully updated</span>\r\n            <div class=\"alert-actions\">\r\n              <a class=\"alert-action\"\r\n                (click)=\"showHideEditExtractionDetail = false; extractionEditSuccessFlag = false; extractionEditErrorFlag = false;\">Close</a>\r\n            </div>\r\n          </div>\r\n        </clr-alert>\r\n\r\n        <button class=\"btn btn-warning\"\r\n          (click)=\"showHideEditExtractionDetail = false; showHideEBDeleteConfirm = true\">Delete Extraction</button>\r\n        <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"editExtractionBatchForm.invalid\"\r\n          [clrLoading]=\"submitLoading\">Save Edits</button>\r\n        <button class=\"btn btn-info\"\r\n          (click)=\"showHideEditExtractionDetail = !showHideEditExtractionDetail\">Close</button>\r\n      </section>\r\n    </form>\r\n  </div>\r\n</clr-modal>\r\n\r\n<clr-modal class=\"modal-sm\" *ngIf=\"selectedABDetail\" [(clrModalOpen)]=\"showHideEditRTDetail\" [clrModalClosable]=\"false\">\r\n  <h3 class=\"modal-title\">Edit RT Details</h3>\r\n  <div class=\"modal-body\">\r\n    <span>Analysis Batch {{selectedABID}}</span>\r\n\r\n    <form id=\"editRTForm\" class=\"compact\" [formGroup]=\"editRTForm\" (ngSubmit)=\"onSubmit('editRT', editRTForm.value)\">\r\n      <section class=\"form-block\">\r\n\r\n        <!-- <div class=\"form-group\">\r\n          <label for=\"rtNo\">RT No. </label>\r\n          <input type=\"text\" id=\"rtNo\" size=\"10\" formControlName=\"rt_number\" readonly>\r\n        </div> -->\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"templateVol\">Template Volume</label>\r\n          <input id=\"templateVol\" type=\"text\" size=\"10\" formControlName=\"template_volume\">\r\n          <span>µL</span>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"reactionVol\">Reaction Volume</label>\r\n          <input id=\"reactionVol\" type=\"text\" size=\"10\" formControlName=\"reaction_volume\">\r\n          <span>µL</span>\r\n          <!-- <div class=\"select\">\r\n            <select id=\"rtReactionVolUnits\" formControlName=\"reaction_volume_units\">\r\n              <option *ngFor=\"let unit of units\" [value]=\"unit.id\">{{unit.symbol}}</option>\r\n            </select>\r\n          </div> -->\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"rtDateInput\">RT Date</label>\r\n          <input type=\"date\" id=\"rtDateInput\" formControlName=\"rt_date\">\r\n        </div>\r\n\r\n        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"rtEditErrorFlag\">\r\n          <div clr-alert-item class=\"alert-item\">\r\n            <span class=\"alert-text\">Submission error. RT data not updated.</span>\r\n            <div class=\"alert-actions\">\r\n              <a class=\"alert-action\" (click)=\"onSubmit('editRT', editRTForm.value)\">Try again</a>\r\n            </div>\r\n          </div>\r\n        </clr-alert>\r\n\r\n        <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"rtEditSuccessFlag\">\r\n          <div clr-alert-item class=\"alert-item\">\r\n            <span class=\"alert-text\">RT data successfully updated</span>\r\n            <div class=\"alert-actions\">\r\n              <a class=\"alert-action\"\r\n                (click)=\"showHideEditRTDetail = false; rtEditSuccessFlag = false; rtEditErrorFlag = false;\">Close</a>\r\n            </div>\r\n          </div>\r\n        </clr-alert>\r\n\r\n        <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"editRTForm.invalid\" [clrLoading]=\"submitLoading\">Save\r\n          Edits</button>\r\n        <button class=\"btn btn-info\"\r\n          (click)=\"showHideEditRTDetail= !showHideEditRTDetail; rtEditSuccessFlag = false; rtEditErrorFlag = false;\">Close</button>\r\n\r\n      </section>\r\n    </form>\r\n  </div>\r\n</clr-modal>\r\n\r\n<!-- edit target list modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideEditTargetList\" [clrModalSize]=\"'xl'\">\r\n  <h3 class=\"modal-title\">Edit Target List for Extraction # {{currentExtractionNo}} </h3>\r\n  <div class=\"modal-body\">\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-12\">\r\n\r\n        <!-- <clr-alert [clrAlertClosable]=\"false\" *ngIf=\"targetListEditLocked\">\r\n          <div clr-alert-item class=\"alert-item\">\r\n            <span class=\"alert-text\">\r\n            This Analysis Batch has been extracted. Editing of the target list is locked. \r\n            </span>\r\n          </div>\r\n        </clr-alert> -->\r\n\r\n        <form *ngIf=\"!targetListEditLocked\">\r\n          <section class=\"form-block\">\r\n\r\n            <clr-datagrid class=\"target-select-datagrid\" [(clrDgSelected)]=\"selected\" [clDgRowSelection]=\"true\">\r\n              <clr-dg-action-bar>\r\n                <div class=\"btn-group\">\r\n                  <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"deselectAll()\">\r\n                    <clr-icon shape=\"window-close\" size=\"16\"></clr-icon> Deselect All\r\n                  </button>\r\n                </div>\r\n              </clr-dg-action-bar>\r\n\r\n              <clr-dg-column [clrDgField]=\"'name'\">Name</clr-dg-column>\r\n              <clr-dg-column [clrDgField]=\"'code'\">Code</clr-dg-column>\r\n              <clr-dg-column [clrDgField]=\"'type'\">Type</clr-dg-column>\r\n              <!-- <clr-dg-column [clrDgField]=\"'type'\">Replicates</clr-dg-column> -->\r\n\r\n              <clr-dg-row *clrDgItems=\"let target of allTargets\" [clrDgItem]=\"target\">\r\n                <clr-dg-cell>{{target.name}}</clr-dg-cell>\r\n                <clr-dg-cell>{{target.code}}</clr-dg-cell>\r\n                <clr-dg-cell>{{target.nucleic_acid_type}}</clr-dg-cell>\r\n                <!-- <clr-dg-cell>{{target.replicates}}</clr-dg-cell> -->\r\n              </clr-dg-row>\r\n\r\n              <clr-dg-footer>{{allTargets.length}} targets</clr-dg-footer>\r\n            </clr-datagrid>\r\n\r\n          </section>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-12\">\r\n        <button class=\"btn btn-primary\" type=\"submit\" (click)=\"updateABTargetList()\">Save Edits</button>\r\n        <button class=\"btn btn-info\" (click)=\"showHideEditTargetList= !showHideEditTargetList\">Close</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</clr-modal>\r\n\r\n<!-- delete Extraction confirm Modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideEBDeleteConfirm\">\r\n  <h3 class=\"modal-title\">\r\n    <clr-icon shape=\"times\" size=\"16\"></clr-icon> Delete Extraction Batch\r\n  </h3>\r\n  <div class=\"modal-body\">\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-12\">\r\n        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showEBDeleteError\">\r\n          <div clr-alert-item class=\"alert-item\">\r\n            <span class=\"alert-text\">Submission error. Extraction not deleted.</span>\r\n            <div class=\"alert-actions\">\r\n              <a class=\"alert-action\" (click)=\"deleteExtractionBatch(editExtractionBatchForm.get('id').value)\">Try\r\n                again</a>\r\n            </div>\r\n          </div>\r\n        </clr-alert>\r\n\r\n        <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showEBDeleteSuccess\">\r\n          <div clr-alert-item class=\"alert-item\">\r\n            <span class=\"alert-text\">Extraction successfully deleted.</span>\r\n          </div>\r\n        </clr-alert>\r\n\r\n        <div>\r\n          <p>Are you sure you want to delete the Extraction Batch\r\n            <b>{{editExtractionBatchForm.get('analysis_batch').value}} - {{editExtractionBatchForm.get('extraction_number').value}}</b> ?</p>\r\n\r\n          <button class=\"btn btn-primary\" type=\"button\"\r\n            (click)=\"deleteExtractionBatch(editExtractionBatchForm.get('id').value)\"\r\n            [clrLoading]=\"submitLoading\">Delete</button>\r\n          <button class=\"btn btn-info\" (click)=\"showHideEBDeleteConfirm = !showHideEBDeleteConfirm\">Close</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</clr-modal>\r\n\r\n\r\n<!-- bulk submit negative results modal -->\r\n<clr-modal [(clrModalOpen)]=\"showBulkSubmitNegResults\" [clrModalSize]=\"'lg'\">\r\n  <h3 class=\"modal-title\">Bulk Submit Negative Results for Extraction {{currentExtractionNo}} </h3>\r\n  <div class=\"modal-body\">\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-12\">\r\n        Each target replicate for this Extraction is listed below. Check \"Negative Results\" box to submit negative qPCR\r\n        results for the specific target replicate and provide the PCR Positive Cq value. Target replicates not checked\r\n        will not be updated. Target replicates that already have a PCR Positive Cq value recorded show that value\r\n        and are not editable in this form.\r\n      </div>\r\n\r\n      <div class=\"col-lg-12\" *ngIf=\"pcrreplicatebatch_array.controls.length === 0\">\r\n        <h3>There are no targets or replicates created for this Extraction.</h3>\r\n      </div>\r\n\r\n      <div class=\"col-lg-12\" *ngIf=\"pcrreplicatebatch_array.controls.length > 0\">\r\n\r\n        <form class=\"compact\" [formGroup]=\"bulkSubmitNegResultsForm\"\r\n          (ngSubmit)=\"onSubmit('bulkSubmitNegResults', bulkSubmitNegResultsForm.value)\">\r\n          <section class=\"form-block\">\r\n            <div formArrayName=\"pcr_batches\">\r\n\r\n              <div class=\"row\">\r\n                <div class=\"col-lg-4 col-md-4 col-sm-6 col-xs-6\">\r\n                </div>\r\n                <div class=\"col-lg-3 col-md-3 col-sm-4 col-xs-4\">\r\n                  <label class=\"text-bold required\">PCR Pos Cq Value</label>\r\n                </div>\r\n                <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">\r\n                  <label class=\"text-bold required\">Negative Results</label>\r\n                </div>\r\n                <div class=\"col-lg-3 col-md-3 col-sm-0 col-xs-0\">\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-group row\" *ngFor=\"let target of pcrreplicatebatch_array.controls; let i = index\"\r\n                [formGroupName]=\"i\">\r\n                <div class=\"col-lg-4 col-md-4 col-sm-6 col-xs-6\">\r\n                  <label><span\r\n                      class=\"text-bold\">{{target.controls.target.value | displayValue:'name':this.allTargets}}</span>\r\n                    Rep {{target.controls.replicate_number.value}} </label>\r\n                </div>\r\n                <div class=\"col-lg-3 col-md-3 col-sm-4 col-xs-4\">\r\n                  <input class=\"form-control\" type=\"number\" placeholder=\"Enter PCR Pos Cq\" size=\"10\"\r\n                    formControlName=\"pcr_pos_cq_value\">\r\n                </div>\r\n                <div class=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">\r\n                  <input type=\"checkbox\" formControlName=\"include\">\r\n                </div>\r\n                <div class=\"col-lg-3 col-md-3 col-sm-0 col-xs-0\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"batchSubmitNegResultsErrorFlag\">\r\n              <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">Submission error. Negative results not submitted.</span>\r\n                <div class=\"alert-actions\">\r\n                  <a class=\"alert-action\" (click)=\"onSubmit('editRT', editRTForm.value)\">Try again</a>\r\n                </div>\r\n              </div>\r\n            </clr-alert>\r\n\r\n            <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"batchSubmitNegResultsSuccessFlag \">\r\n              <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">Negative results successfully submitted</span>\r\n                <div class=\"alert-actions\">\r\n                  <a class=\"alert-action\"\r\n                    (click)=\"showBulkSubmitNegResults = false; batchSubmitNegResultsSuccessFlag = false; batchSubmitNegResultsErrorFlag = false;\">Close</a>\r\n                </div>\r\n              </div>\r\n            </clr-alert>\r\n            <button class=\"btn btn-primary\" type=\"submit\" [clrLoading]=\"submitLoading\">Submit</button>\r\n            <button class=\"btn btn-info\"\r\n              (click)=\"showBulkSubmitNegResults= !showBulkSubmitNegResults; batchSubmitNegResultsSuccessFlag = false; batchSubmitNegResultsErrorFlag = false;\">Close</button>\r\n\r\n          </section>\r\n        </form>\r\n\r\n      </div>\r\n    </div>\r\n    <!-- <div class=\"row\">\r\n      <div class=\"col-lg-12\">\r\n        <button class=\"btn btn-primary\" type=\"submit\" (click)=\"updateABTargetList()\">Submit</button>\r\n        <button class=\"btn btn-info\" (click)=\"showBulkSubmitNegResults= !showBulkSubmitNegResults\">Close</button>\r\n      </div>\r\n    </div> -->\r\n  </div>\r\n</clr-modal>"

/***/ }),

/***/ "./src/app/analysis-batches/analysis-batch-detail/analysis-batch-detail.component.scss":
/***/ (function(module, exports) {

module.exports = ".ab-detail-card {\n  min-height: 15em;\n  margin: 1em; }\n\n.ab-detail-header {\n  margin-left: 1em;\n  margin-right: 1em; }\n\n.btn-ab-detail-edit {\n  float: right; }\n\n.target-select-datagrid {\n  max-height: 24em; }\n\n.table {\n  margin-top: 0px !important; }\n\n.extract-detail-header {\n  font-weight: bolder; }\n\n.extraction-row {\n  display: inline-block; }\n\n.text-bold {\n  font-weight: bold; }\n"

/***/ }),

/***/ "./src/app/analysis-batches/analysis-batch-detail/analysis-batch-detail.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var _1 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var analysis_batch_summary_1 = __webpack_require__("./src/app/analysis-batches/analysis-batch-summary.ts");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var analysis_batch_service_1 = __webpack_require__("./src/app/analysis-batches/analysis-batch.service.ts");
var extraction_method_service_1 = __webpack_require__("./src/app/extraction-batches/extraction-method.service.ts");
var target_service_1 = __webpack_require__("./src/app/targets/target.service.ts");
var unit_service_1 = __webpack_require__("./src/app/units/unit.service.ts");
var extraction_batch_service_1 = __webpack_require__("./src/app/extraction-batches/extraction-batch.service.ts");
var reverse_transcription_service_1 = __webpack_require__("./src/app/SHARED/reverse-transcription.service.ts");
var pcr_replicate_batch_service_1 = __webpack_require__("./src/app/pcr-replicates/pcr-replicate-batch.service.ts");
var AnalysisBatchDetailComponent = (function () {
    function AnalysisBatchDetailComponent(_analysisBatchService, _extractionMethodService, _extractionBatchService, _reverseTranscriptionService, _targetService, _unitService, pcrReplicateBatchService, formBuilder) {
        this._analysisBatchService = _analysisBatchService;
        this._extractionMethodService = _extractionMethodService;
        this._extractionBatchService = _extractionBatchService;
        this._reverseTranscriptionService = _reverseTranscriptionService;
        this._targetService = _targetService;
        this._unitService = _unitService;
        this.pcrReplicateBatchService = pcrReplicateBatchService;
        this.formBuilder = formBuilder;
        this.ABDetailsLoading = false;
        this.noExtractionsFlag = false;
        this.showHideEditExtractionDetail = false;
        this.showHideEditRTDetail = false;
        this.extractionDetailArray = [];
        this.inhibitionDetailArray = [];
        this.rtDetailArray = [];
        this.allTargets = [];
        this.extractionTargetArray = [];
        this.samplesArray = [];
        this.showHideEditTargetList = false;
        this.showHideEBDeleteConfirm = false;
        this.showEBDeleteSuccess = false;
        this.showEBDeleteError = false;
        this.showBulkSubmitNegResults = false;
        this.targetListEditLocked = false;
        this.expanded = false;
        this.submitLoading = false;
        this.extractionEditErrorFlag = false;
        this.extractionEditSuccessFlag = false;
        this.batchSubmitNegResultsErrorFlag = false;
        this.batchSubmitNegResultsSuccessFlag = false;
        this.rtEditErrorFlag = false;
        this.rtEditSuccessFlag = false;
        this.selected = [];
        this.nucleicAcidTypes = [];
        this.editExtractionBatchForm = new _1.FormGroup({
            id: new _1.FormControl(''),
            analysis_batch: new _1.FormControl(''),
            extraction_method: new _1.FormControl(''),
            extraction_number: new _1.FormControl(''),
            extraction_volume: new _1.FormControl(''),
            extraction_date: new _1.FormControl(''),
            elution_volume: new _1.FormControl(''),
            re_extraction: new _1.FormControl(null),
            sample_dilution_factor: new _1.FormControl(null)
        });
        // editInhibitionForm = new FormGroup({
        //   id: new FormControl(''),
        //   inhibition_no: new FormControl(''),
        //   dilution_factor:new FormControl(''),
        //   type: new FormControl(''),
        //   inhibition_date: new FormControl('')
        // });
        this.editRTForm = new _1.FormGroup({
            id: new _1.FormControl(''),
            // rt_number: new FormControl(''),
            template_volume: new _1.FormControl(''),
            reaction_volume: new _1.FormControl(''),
            rt_date: new _1.FormControl('')
        });
        this.buildBulkSubmitNegResultsForm();
    }
    AnalysisBatchDetailComponent.prototype.buildBulkSubmitNegResultsForm = function () {
        this.bulkSubmitNegResultsForm = this.formBuilder.group({
            pcr_batches: this.formBuilder.array([
                this.formBuilder.group({
                    extraction_batch: null,
                    target: null,
                    replicate_number: null,
                    pcr_pos_cq_value: null,
                    include: false
                })
            ])
        });
        this.pcrreplicatebatch_array = this.bulkSubmitNegResultsForm.get("pcr_batches");
    };
    AnalysisBatchDetailComponent.prototype.ngOnInit = function () {
        var _this = this;
        // this.ABDetailsLoading = true;
        this.nucleicAcidTypes = app_settings_1.APP_SETTINGS.NUCLEIC_ACID_TYPES;
        this.retrieveABData();
        // call the getAnalysisBatchDetail function of the AnalyisBatchService, set results to selectedABDetail var
        // this._analysisBatchService.getAnalysisBatchDetail(this.selectedABSummary.id)
        //   .subscribe(
        //     (analysisBatchDetail) => {
        //       this.selectedABDetail = analysisBatchDetail;
        //       this.extractionBatchArray = analysisBatchDetail.extractionbatches
        //       this.samplesArray = analysisBatchDetail.samples;
        //       this.selectedABID = analysisBatchDetail.id;
        //       // this.extractionDetailArray = this.buildABExtractionArray(analysisBatchDetail.extractionbatches);
        //       this.ABDetailsLoading = false;
        //       if (analysisBatchDetail.extractionbatches.length < 1) {
        //         this.noExtractionsFlag = true;
        //       }
        //     },
        //     error => {
        //       this.ABDetailsLoading = false;
        //       this.errorMessage = <any>error
        //     }
        //   );
        // on init, call getExtractionMethods function of the EXtractionMethodService, set results to allExtractionMethods var
        this._extractionMethodService.getExtractionMethods()
            .subscribe(function (extractionMethods) { return _this.allExtractionMethods = extractionMethods; }, function (error) { return _this.errorMessage = error; });
        // on init, call getTargets function of the TargetService, set results to allTargets var
        this._targetService.getTargets()
            .subscribe(function (targets) {
            _this.allTargets = targets;
            _this.allTargets.sort(function (a, b) {
                if (a.name < b.name) {
                    return -1;
                }
                ;
                if (a.name > b.name) {
                    return 1;
                }
                ;
                return 0;
            });
        }, function (error) { _this.errorMessage = error; });
        // on init, call getUnits function of the UnitService, set results to the units var
        this._unitService.getUnits()
            .subscribe(function (units) { return _this.units = units; }, function (error) { return _this.errorMessage = error; });
        // build the inhibition list by looping through the AB data and adding all inhibitions to a local array
        // for (let extraction of this.extractionDetailArray) {
        //   for (let inhibition of extraction.inhibitions) {
        //     this.inhibitionDetailArray.push(inhibition)
        //   }
        // }
        // build the rt list by looping through the AB data and adding all rts to a local array
        //  for (let extraction of this.extractionDetailArray) {
        //   for (let rt of extraction.reverse_transcriptions) {
        //     this.rtDetailArray.push(rt)
        //   }
        // }
    };
    AnalysisBatchDetailComponent.prototype.retrieveABData = function () {
        var _this = this;
        this.ABDetailsLoading = true;
        // call the getAnalysisBatchDetail function of the AnalyisBatchService, set results to selectedABDetail var
        this._analysisBatchService.getAnalysisBatchDetail(this.selectedABSummary.id)
            .subscribe(function (analysisBatchDetail) {
            _this.selectedABDetail = analysisBatchDetail;
            _this.extractionBatchArray = analysisBatchDetail.extractionbatches;
            _this.samplesArray = analysisBatchDetail.samples;
            _this.selectedABID = analysisBatchDetail.id;
            // this.extractionDetailArray = this.buildABExtractionArray(analysisBatchDetail.extractionbatches);
            _this.ABDetailsLoading = false;
            if (analysisBatchDetail.extractionbatches.length < 1) {
                _this.noExtractionsFlag = true;
            }
        }, function (error) {
            _this.ABDetailsLoading = false;
            _this.errorMessage = error;
        });
    };
    AnalysisBatchDetailComponent.prototype.deselectAll = function () {
        this.selected = [];
    };
    AnalysisBatchDetailComponent.prototype.deleteExtractionBatch = function (extractionBatchID) {
        var _this = this;
        this.showEBDeleteSuccess = false;
        this.showEBDeleteError = false;
        this._extractionBatchService.delete(extractionBatchID)
            .subscribe(function () {
            _this.showEBDeleteSuccess = true;
            _this.retrieveABData();
        }, function (error) {
            _this.showEBDeleteError = true;
            _this.errorMessage = error;
        });
    };
    AnalysisBatchDetailComponent.prototype.buildABExtractionArray = function (extractionBatchArray) {
        var abExtractionArray = [];
        for (var _i = 0, extractionBatchArray_1 = extractionBatchArray; _i < extractionBatchArray_1.length; _i++) {
            var extractionbatch = extractionBatchArray_1[_i];
            for (var _a = 0, _b = extractionbatch.extractions; _a < _b.length; _a++) {
                var extraction = _b[_a];
                abExtractionArray.push(extraction);
            }
        }
        console.log(abExtractionArray);
        return abExtractionArray;
    };
    AnalysisBatchDetailComponent.prototype.editExtractionBatch = function (extractionbatch) {
        this.editExtractionBatchForm.setValue({
            id: extractionbatch.id,
            analysis_batch: extractionbatch.analysis_batch,
            extraction_method: extractionbatch.extraction_method.id,
            extraction_number: extractionbatch.extraction_number,
            extraction_volume: extractionbatch.extraction_volume,
            extraction_date: extractionbatch.extraction_date,
            elution_volume: extractionbatch.elution_volume,
            sample_dilution_factor: extractionbatch.sample_dilution_factor,
            re_extraction: null
        });
        // show the edit detail modal if not showing already
        if (this.showHideEditExtractionDetail === false) {
            this.showHideEditExtractionDetail = true;
        }
    };
    AnalysisBatchDetailComponent.prototype.openBulkSubmitNegResults = function (extractionbatch) {
        this.currentExtractionNo = extractionbatch.extraction_number;
        // reset the pcrreplicate batch form array controls to a blank array
        this.pcrreplicatebatch_array.controls = [];
        // for (let target of extractionbatch.targets) {
        //   for (let i = 0; i < target.replicates; i++) {
        //     let pcrRepBatchFormGroup: FormGroup = this.formBuilder.group({
        //       extraction_batch: this.formBuilder.control(extractionbatch.id),
        //       target: this.formBuilder.control(target.id),
        //       replicate_number: this.formBuilder.control(i + 1),
        //       pcr_pos_cq_value: this.formBuilder.control(null),
        //     });
        //     this.pcrreplicatebatch_array.push(pcrRepBatchFormGroup);
        //   }
        //   // these lines are for creating a replicate columns, but not used in current design
        //   // instantiate a blank array to store a list of replicate counts for all the targets
        //   // let replicateCountArray = [];
        //   // add the replicate count for each target to the replicateCountArray
        //   // replicateCountArray.push(target.replicates);
        //   //this.replicateColumnCount = Math.max.apply(null, replicateCountArray);
        // }
        for (var _i = 0, _a = extractionbatch.pcrreplicatebatches; _i < _a.length; _i++) {
            var replicate = _a[_i];
            var pcrRepBatchFormGroup = this.formBuilder.group({
                extraction_batch: this.formBuilder.control(replicate.extraction_batch),
                target: this.formBuilder.control(replicate.target),
                replicate_number: this.formBuilder.control(replicate.replicate_number),
                pcr_pos_cq_value: this.formBuilder.control({ value: replicate.pcr_pos_cq_value, disabled: replicate.pcr_pos_cq_value === null ? false : true }),
                include: this.formBuilder.control({ value: false, disabled: replicate.pcr_pos_cq_value === null ? false : true })
            });
            this.pcrreplicatebatch_array.push(pcrRepBatchFormGroup);
        }
        // show the bulk submit neg results modal if not showing already
        if (this.showBulkSubmitNegResults === false) {
            this.showBulkSubmitNegResults = true;
        }
    };
    AnalysisBatchDetailComponent.prototype.resetAB = function () {
        this.selected = [];
        this.extractionTargetArray = [];
    };
    AnalysisBatchDetailComponent.prototype.editRT = function (rt) {
        this.editRTForm.setValue({
            id: rt.id,
            // rt_number: rt.rt_number,
            template_volume: rt.template_volume,
            reaction_volume: rt.reaction_volume,
            rt_date: rt.rt_date
        });
        // show the edit rt detail modal if not showing already
        if (this.showHideEditRTDetail === false) {
            this.showHideEditRTDetail = true;
        }
    };
    AnalysisBatchDetailComponent.prototype.editExtractionTargets = function (extraction) {
        this.resetAB();
        this.currentExtractionNo = extraction.extraction_number;
        // build the target list by looping through the AB data and adding all targets to a local array
        for (var _i = 0, _a = extraction.targets; _i < _a.length; _i++) {
            var extTarget = _a[_i];
            for (var _b = 0, _c = this.allTargets; _b < _c.length; _b++) {
                var target = _c[_b];
                if (extTarget.id === target.id) {
                    this.extractionTargetArray.push(target);
                }
            }
        }
        this.selected = this.extractionTargetArray;
        // show the edit edit target list modal if not showing already
        if (this.showHideEditTargetList === false) {
            this.showHideEditTargetList = true;
        }
    };
    AnalysisBatchDetailComponent.prototype.updateABTargetList = function () {
    };
    AnalysisBatchDetailComponent.prototype.onSubmit = function (formID, formValue) {
        var _this = this;
        this.submitLoading = true;
        if (formID === "editEB") {
            this._extractionBatchService.update(formValue)
                .subscribe(function (updatedExtractionBatch) {
                _this.extractionEditSuccessFlag = true;
                _this.extractionEditErrorFlag = false;
                _this.submitLoading = false;
                _this.retrieveABData();
            }, function (error) {
                _this.errorMessage = error;
                _this.extractionEditSuccessFlag = false;
                _this.extractionEditErrorFlag = true;
                _this.submitLoading = false;
            });
        }
        else if (formID === 'editRT') {
            this._reverseTranscriptionService.update(formValue)
                .subscribe(function (updatedRT) {
                _this.rtEditSuccessFlag = true;
                _this.rtEditErrorFlag = false;
                _this.submitLoading = false;
                _this.retrieveABData();
            }, function (error) {
                _this.errorMessage = error;
                _this.rtEditSuccessFlag = false;
                _this.rtEditErrorFlag = true;
                _this.submitLoading = false;
            });
        }
        else if (formID === 'bulkSubmitNegResults') {
            // remove the include = false replicates and then remove the include field
            var pcrBatchArray = [];
            for (var _i = 0, _a = formValue.pcr_batches; _i < _a.length; _i++) {
                var rep = _a[_i];
                if (rep.include) {
                    if (rep.include) {
                        delete rep.include;
                        pcrBatchArray.push(rep);
                    }
                }
            }
            this.pcrReplicateBatchService.postBulkNegativeResults(pcrBatchArray)
                .subscribe(function (response) {
                _this.batchSubmitNegResultsSuccessFlag = true;
                _this.batchSubmitNegResultsErrorFlag = false;
                _this.submitLoading = false;
                _this.retrieveABData();
            }, function (error) {
                _this.errorMessage = error;
                _this.batchSubmitNegResultsSuccessFlag = false;
                _this.batchSubmitNegResultsErrorFlag = true;
                _this.submitLoading = false;
            });
        }
    };
    return AnalysisBatchDetailComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", typeof (_a = typeof analysis_batch_summary_1.IAnalysisBatchSummary !== "undefined" && analysis_batch_summary_1.IAnalysisBatchSummary) === "function" && _a || Object)
], AnalysisBatchDetailComponent.prototype, "selectedABSummary", void 0);
AnalysisBatchDetailComponent = __decorate([
    core_1.Component({
        selector: 'analysis-batch-detail',
        template: __webpack_require__("./src/app/analysis-batches/analysis-batch-detail/analysis-batch-detail.component.html"),
        styles: [__webpack_require__("./src/app/analysis-batches/analysis-batch-detail/analysis-batch-detail.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_b = typeof analysis_batch_service_1.AnalysisBatchService !== "undefined" && analysis_batch_service_1.AnalysisBatchService) === "function" && _b || Object, typeof (_c = typeof extraction_method_service_1.ExtractionMethodService !== "undefined" && extraction_method_service_1.ExtractionMethodService) === "function" && _c || Object, typeof (_d = typeof extraction_batch_service_1.ExtractionBatchService !== "undefined" && extraction_batch_service_1.ExtractionBatchService) === "function" && _d || Object, typeof (_e = typeof reverse_transcription_service_1.ReverseTranscriptionService !== "undefined" && reverse_transcription_service_1.ReverseTranscriptionService) === "function" && _e || Object, typeof (_f = typeof target_service_1.TargetService !== "undefined" && target_service_1.TargetService) === "function" && _f || Object, typeof (_g = typeof unit_service_1.UnitService !== "undefined" && unit_service_1.UnitService) === "function" && _g || Object, typeof (_h = typeof pcr_replicate_batch_service_1.PcrReplicateBatchService !== "undefined" && pcr_replicate_batch_service_1.PcrReplicateBatchService) === "function" && _h || Object, typeof (_j = typeof _1.FormBuilder !== "undefined" && _1.FormBuilder) === "function" && _j || Object])
], AnalysisBatchDetailComponent);
exports.AnalysisBatchDetailComponent = AnalysisBatchDetailComponent;
var _a, _b, _c, _d, _e, _f, _g, _h, _j;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/analysis-batches/analysis-batch-detail/analysis-batch-detail.component.js.map

/***/ }),

/***/ "./src/app/analysis-batches/analysis-batch-summary.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=D:/projects/lili/src/src/src/app/analysis-batches/analysis-batch-summary.js.map

/***/ }),

/***/ "./src/app/analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component.html":
/***/ (function(module, exports) {

module.exports = "<button class=\"btn btn-primary\" (click)=\"printPDF()\">Download worksheet as PDF</button>\r\n<div #batchWorksheet id=\"batchWorksheet\">\r\n\r\n  <div>\r\n    <!-- date title -->\r\n    <div id=\"row1\" class=\"row\" style=\"margin-top: 15px;\">\r\n      <div class=\"col-sm-12\">\r\n        <!-- <span class=\"col-sm-4\" style=\"padding-top:15px;\">{{nowDate | date: 'MM/dd/yyyy'}}</span> -->\r\n        <h3 class=\"text-center\">Analysis Batch Worksheet\r\n          <span *ngIf=\"abWorksheet?.isReprint\">&nbsp;Reprint</span>\r\n        </h3>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- top section -->\r\n    <div id=\"row2\" class=\"row\">\r\n      <!-- Top Left Table -->\r\n      <div class=\"col-md-6 pull-left\">\r\n        <table id=\"topLeftTable\" #topLeftTable class=\"col-md-8 table\">\r\n          <tr>\r\n            <td>Analysis Batch:</td>\r\n            <td>{{abWorksheet?.analysis_batch}}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Creation Date:</td>\r\n            <td>{{abWorksheet?.creation_date | date: 'MM/dd/yyyy'}}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Studies:</td>\r\n            <td>{{abWorksheet?.str_studies}}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Description:</td>\r\n            <td>{{abWorksheet?.description}}</td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n      <!-- Top Right Table -->\r\n      <div class=\"col-md-6 pull-right\">\r\n        <table id=\"topRightTable\" #topRightTable class=\"col-md-8 table\">\r\n          <tr>\r\n            <td>Extraction No.:</td>\r\n            <td>{{abWorksheet?.extraction_no}}</td>\r\n            <td></td>\r\n            <td></td>\r\n          </tr>\r\n          <tr>\r\n            <td>Extraction date:</td>\r\n            <td>{{abWorksheet?.extraction_date | date: 'MM/dd/yyyy'}}</td>\r\n            <td>Extraction sample volume:</td>\r\n            <td>{{abWorksheet?.extraction_sample_volume}}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Extraction method:</td>\r\n            <td>{{abWorksheet?.extraction_method?.name}}</td>\r\n            <td>Eluted extracted volume:</td>\r\n            <td>{{abWorksheet?.eluted_extraction_volume}}</td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n    </div>\r\n\r\n    <br clear=\"all\" />\r\n    <!-- middle section -->\r\n    <div id=\"row3\" class=\"row\">\r\n      <!-- sample location table -->\r\n\r\n      <div class=\"col-md-6 pull-left\">\r\n        <div class=\"col-md-11\">\r\n          <span *ngIf=\"abWorksheet?.isReprint\">This is a reprint. Aliquot listed is first aliquot of sample.</span>\r\n          <table class=\"table table-collapse\" [class.noTopMargin]=\"abWorksheet?.isReprint\" id=\"sampleTable\" #sampleTable>\r\n            <thead>\r\n              <tr>\r\n                <th></th>\r\n                <th>Sample</th>\r\n                <th>Rack</th>\r\n                <th>Box</th>\r\n                <th>Row</th>\r\n                <th>Spot</th>\r\n                <th>DNA Inhibition Dilution Factor</th>\r\n                <th>RNA Inhibition Dilution Factor</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr *ngFor=\"let extraction of abWorksheet?.extraction_submission; let i = index\">\r\n                <!-- aliquot_string?: string; aliquots?: any; box?: number; rack?: number; row?: number; sample: number; spot?: number;-->\r\n                <td>{{i+1}}</td>\r\n                <td>{{extraction.aliquot_string}}</td>\r\n                <td>{{extraction.rack}}</td>\r\n                <td>{{extraction.box}}</td>\r\n                <td>{{extraction.row}}</td>\r\n                <td>{{extraction.spot}}</td>\r\n                <td>{{extraction.dna_dilution_factor}}</td>\r\n                <td>{{extraction.rna_dilution_factor}}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n          <div style=\"font-weight:bold;\">\r\n            <div>Ext Neg:</div>\r\n            <div>Ext Pos:</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!-- target table -->\r\n      <div class=\"col-md-6 pull-right\">\r\n        <div class=\"col-md-11\">\r\n          <table class=\"table\" id=\"targetTable\" #targetTable>\r\n            <thead>\r\n              <tr>\r\n                <th>Target</th>\r\n                <th>Date</th>\r\n                <th>Positive ID</th>\r\n                <th>Cq</th>\r\n                <th>Detections</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr *ngFor=\"let target of abWorksheet?.targetNames\">\r\n                <td class=\"text-smaller\">{{target}}</td>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- end middle 2 tables -->\r\n\r\n    <!-- bottom section -->\r\n    <div id=\"row4\" class=\"row\">\r\n      <div class=\"col-md-6 pull-left\" style=\"margin-bottom:15px;\">\r\n        <table id=\"bottomTable\" class=\"col-md-8 table\" *ngIf=\"abWorksheet?.rt_reaction_volume > 0\">\r\n          <tr>\r\n            <td>RT No.</td>\r\n            <td>{{abWorksheet?.reverse_extraction_no}}</td>\r\n            <td colspan=\"2\"></td>\r\n          </tr>\r\n          <tr>\r\n            <td>RT reaction volume</td>\r\n            <td>{{abWorksheet?.rt_reaction_volume}}&nbsp;µL</td>\r\n          </tr>\r\n          <tr>\r\n            <td>RT template volume</td>\r\n            <td>{{abWorksheet?.rt_template_volume}}&nbsp;µL</td>\r\n          </tr>\r\n          <tr>\r\n            <td>RT Date</td>\r\n            <td>{{abWorksheet?.rt_date | date:'shortDate'}}</td>\r\n          </tr>\r\n        </table>\r\n        <span *ngIf=\"abWorksheet?.rt_reaction_volume === 0\">No RT for this extraction.</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div id=\"row5\" class=\"row col-md-12\" id=\"notes\">\r\n      <div class=\"col-md-12 line_break\">Notes</div>\r\n      <br clear=\"all\" />\r\n      <div id=\"notesSpace\">&nbsp;</div>\r\n    </div>\r\n\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./src/app/analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component.scss":
/***/ (function(module, exports) {

module.exports = "#topLeftTable, #topRightTable, #bottomTable {\n  border: none; }\n\n#topLeftTable tr td:first-child {\n  padding: 2px;\n  border: none;\n  width: 25%;\n  font-weight: bold;\n  text-align: right; }\n\n#topLeftTable tr td:last-child {\n  padding: 2px;\n  padding-left: 5px;\n  border: none;\n  text-align: left; }\n\n#topRightTable tr td:nth-child(odd) {\n  padding: 2px;\n  border: none;\n  width: 40%;\n  font-weight: bold;\n  text-align: right; }\n\n#topRightTable tr td:nth-child(even) {\n  padding: 2px;\n  padding-left: 5px;\n  border: none;\n  text-align: left; }\n\n#batchWorksheet {\n  background: white; }\n\n#bottomTable tr td:nth-child(odd) {\n  padding: 2px;\n  border: none;\n  width: 47%;\n  font-weight: bold;\n  text-align: right; }\n\n#bottomTable tr td:nth-child(even) {\n  padding: 2px;\n  padding-left: 5px;\n  border: none;\n  text-align: left; }\n\n.noTopMargin {\n  margin-top: 0; }\n\ntable {\n  border-collapse: collapse; }\n\ntable thead tr th {\n  border: black 1.01px solid;\n  border: black 1.01px solid; }\n\ntable tbody tr td {\n  border: black 1.01px solid;\n  border: black 1.01px solid; }\n\n#targetTable {\n  border: none;\n  border-collapse: collapse;\n  border-bottom: black 1px solid; }\n\n.line_break {\n  width: 100%;\n  color: black;\n  background-color: rgba(255, 255, 255, 0.5);\n  border: none;\n  border-bottom: 1.1px solid black; }\n\n#notesSpace {\n  min-height: 400px;\n  height: 400px; }\n\n.text-smaller {\n  font-size: small; }\n"

/***/ }),

/***/ "./src/app/analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var analysis_batch_service_1 = __webpack_require__("./src/app/analysis-batches/analysis-batch.service.ts");
// declare let html2pdf: any;
// used for right-aligning the text added to pdf
var splitRegex = /\r\n|\r|\n/g;
jsPDF.API.textEx = function (text, x, y, hAlign, vAlign) {
    var fontSize = ((this.internal.getFontSize()) / (this.internal.scaleFactor));
    // As defined in jsPDF source code
    var lineHeightProportion = 1.15;
    var splittedText;
    var lineCount = 1;
    if (vAlign === 'middle' || vAlign === 'bottom' ||
        hAlign === 'center' || hAlign === 'right') {
        splittedText = typeof text === 'string' ?
            text.split(splitRegex) :
            text;
        lineCount = splittedText.length || 1;
    }
    // Align the top
    y += fontSize * (2 - lineHeightProportion);
    if (vAlign === 'middle') {
        y -= (lineCount / 2) * fontSize;
    }
    else if (vAlign === 'bottom') {
        y -= lineCount * fontSize;
    }
    ;
    if (hAlign === 'center' ||
        hAlign === 'right') {
        var alignSize = fontSize;
        if (hAlign === 'center')
            alignSize *= 0.5;
        if (lineCount > 1) {
            for (var iLine = 0; iLine < splittedText.length; iLine++) {
                this.text(splittedText[iLine], x - this.getStringUnitWidth(splittedText[iLine]) * alignSize, y);
                y += fontSize;
            }
            return this;
        }
        x -= this.getStringUnitWidth(text) * alignSize;
    }
    this.text(text, x, y);
    return this;
};
var AnalysisBatchWorksheetComponent = (function () {
    function AnalysisBatchWorksheetComponent(_batchServices) {
        this._batchServices = _batchServices;
    }
    AnalysisBatchWorksheetComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.worksheetElement = this.pdfWorksheet.nativeElement;
        // header style for the tables in the pdf
        this.headerStyle = {
            fillColor: [211, 211, 211],
            fontSize: 8,
            textColor: [0, 0, 0]
        };
        // table header row for samples
        this.sampleColumns = [{
                title: "",
                dataKey: "index"
            },
            {
                title: "Sample",
                dataKey: "Sample"
            },
            {
                title: "Rack",
                dataKey: "Rack"
            },
            {
                title: "Box",
                dataKey: "Box"
            },
            {
                title: "Row",
                dataKey: "Row"
            },
            {
                title: "Spot",
                dataKey: "Spot"
            },
            {
                title: "DNA Inhibition\nDilution Factor",
                dataKey: "DNA Inhibition Dilution Factor"
            },
            {
                title: "RNA Inhibition\nDilution Factor",
                dataKey: "RNA Inhibition Dilution Factor"
            }
        ];
        this.sampleRows = [];
        this.sampleEndingY = 0;
        this.targetEndingY = 0;
        // table header row for targets
        this.targetColumns = [{
                title: "Target",
                dataKey: "Target"
            },
            {
                title: "Date",
                dataKey: "Date"
            },
            {
                title: "Positive\nID",
                dataKey: "Positive ID"
            },
            {
                title: "Cq",
                dataKey: "Cq"
            },
            {
                title: "Detections",
                dataKey: "Detections"
            }
        ];
        this.targetRows = [];
        this._batchServices.WorksheetObject.subscribe(function (values) {
            _this.abWorksheet = values;
            var studyArray = [];
            values.studies.forEach(function (study) {
                studyArray.push(study.name);
            });
            _this.abWorksheet.str_studies = studyArray.join(", ");
        });
    };
    AnalysisBatchWorksheetComponent.prototype.printPDF = function () {
        var pdf = new jsPDF('p', 'pt', 'a4', true);
        pdf.setFontSize(8);
        pdf.setFontType("normal");
        pdf.text(10, 20, new Date().toLocaleDateString());
        pdf.setFontSize(10);
        pdf.setFontType("bold");
        if (this.abWorksheet.isReprint) {
            pdf.text(200, 20, 'Analysis Batch Worksheet Reprint');
        }
        else {
            pdf.text(200, 20, 'Analysis Batch Worksheet');
        }
        pdf.setFontSize(8);
        pdf.setFontType("bold");
        // Top left Table /////////////////////////////
        pdf.textEx('Analysis batch:', 70, 50, 'right', 'middle');
        pdf.setFontType("normal");
        pdf.textEx(this.abWorksheet.analysis_batch.toString(), 75, 50, 'left', 'middle');
        pdf.setFontType("bold");
        pdf.textEx('Creation date:', 70, 60, 'right', 'middle');
        pdf.setFontType("normal");
        pdf.textEx(this.abWorksheet.creation_date, 75, 60, 'left', 'middle');
        // split the studies comma separated string in case too long.
        var studySplit = pdf.splitTextToSize(this.abWorksheet.str_studies, 240);
        var studyRows = studySplit.length;
        // if rows are greater than 5, need to strip off and add '...' at end of 5
        if (studyRows > 5) {
            studySplit = studySplit.slice(0, 5);
            studySplit[4] = studySplit[4].slice(0, -3) + '...';
            studyRows = studySplit.length;
        }
        // how much should the description move down based on the number of rows here
        if (studyRows > 1) {
            var moveDown = 0;
            switch (studyRows) {
                case 5:
                    moveDown = 115;
                    break;
                case 4:
                    moveDown = 105;
                    break;
                case 3:
                    moveDown = 97;
                    break;
                case 2:
                    moveDown = 87;
                    break;
            }
            // multiple rows, bump down more
            pdf.setFontType("bold");
            pdf.textEx('Studies:', 70, 70, 'right', 'middle');
            pdf.setFontType("normal");
            pdf.text(75, 72, studySplit);
            pdf.setFontType("bold");
            pdf.textEx('Description:', 70, moveDown, 'right', 'middle');
            pdf.setFontType("normal");
            pdf.textEx(this.abWorksheet.description, 75, moveDown, 'left', 'middle');
        }
        else {
            // only 1 row, proceed as normal
            pdf.setFontType("bold");
            pdf.textEx('Studies:', 70, 70, 'right', 'middle');
            pdf.setFontType("normal");
            pdf.textEx(studySplit[0], 75, 70, 'left', 'middle');
            pdf.setFontType("bold");
            pdf.textEx('Description:', 70, 80, 'right', 'middle');
            pdf.setFontType("normal");
            pdf.textEx(this.abWorksheet.description, 75, 80, 'left', 'middle');
        }
        // END Top left Table /////////////////////////////
        // Top right Table /////////////////////////////
        pdf.setFontType("bold");
        pdf.textEx('Extraction No.:', 405, 50, 'right', 'middle');
        pdf.setFontType("normal");
        pdf.textEx(this.abWorksheet.extraction_no.toString(), 410, 50, 'left', 'middle');
        pdf.setFontType("bold");
        pdf.textEx('Extraction date:', 405, 60, 'right', 'middle');
        pdf.setFontType("normal");
        pdf.textEx(this.abWorksheet.extraction_date, 410, 60, 'left', 'middle');
        pdf.setFontType("bold");
        pdf.textEx('Extraction sample volume:', 560, 60, 'right', 'middle');
        pdf.setFontType("normal");
        pdf.textEx(this.abWorksheet.extraction_sample_volume.toString(), 565, 60, 'left', 'middle');
        pdf.setFontType("bold");
        pdf.textEx('Extraction method:', 405, 70, 'right', 'middle');
        pdf.setFontType("normal");
        pdf.textEx(this.abWorksheet.extraction_method["name"], 410, 70, 'left', 'middle');
        pdf.setFontType("bold");
        pdf.textEx('Eluted extracted volume:', 560, 70, 'right', 'middle');
        pdf.setFontType("normal");
        pdf.textEx(this.abWorksheet.eluted_extraction_volume.toString(), 565, 70, 'left', 'middle');
        // END Top right Table /////////////////////////////
        // Sample middle Table /////////////////////////////
        this.sampleRows = this.tableToJson(this.sampleTable.nativeElement);
        this.sampleRows.forEach(function (r, i) {
            r['index'] = i + 1;
        });
        if (this.abWorksheet.isReprint) {
            pdf.text("This is a reprint. Aliquot listed is first aliquot of sample.", 20, 130);
        }
        pdf.autoTable(this.sampleColumns, this.sampleRows, {
            startY: 135,
            margin: 10,
            theme: 'grid',
            tableWidth: 315,
            headerStyles: this.headerStyle
        });
        pdf.text('Ext Neg:', 20, pdf.autoTable.previous.finalY + 10);
        pdf.text('Ext Pos:', 20, pdf.autoTable.previous.finalY + 20);
        this.sampleEndingY = pdf.autoTable.previous.finalY + 20;
        // END Sample middle Table //////////////////////////////////
        // Target middle Table /////////////////////////////
        this.targetRows = this.tableToJson(this.targetTable.nativeElement);
        pdf.autoTable(this.targetColumns, this.targetRows, {
            startY: 135,
            margin: {
                left: 338
            },
            theme: 'grid',
            tableWidth: 245,
            headerStyles: this.headerStyle,
            columnStyles: {
                Target: {
                    columnWidth: 70
                },
                Date: {
                    columnWidth: 60
                },
                'Positive ID': {
                    columnWidth: 42
                },
                Cq: {
                    columnWidth: 24
                },
                Detections: {
                    columnWidth: 51
                }
            }
        });
        this.targetEndingY = pdf.autoTable.previous.finalY + 20;
        // END Target middle Table //////////////////////////////////
        // Lower section //////////////////////////////////////
        var nextNewStartingY = 0;
        // which table is longer, need this info to go under both middle tables
        if (this.targetEndingY > this.sampleEndingY) {
            nextNewStartingY = this.targetEndingY;
        }
        else {
            nextNewStartingY = this.sampleEndingY;
        }
        pdf.textEx('Reverse transcription No.:', 110, nextNewStartingY + 20, 'right', 'middle');
        pdf.textEx(this.abWorksheet.reverse_extraction_no.toString(), 115, nextNewStartingY + 20, 'left', 'middle');
        pdf.textEx('RT reaction volume:', 110, nextNewStartingY + 30, 'right', 'middle');
        pdf.textEx(this.abWorksheet.rt_reaction_volume.toString(), 115, nextNewStartingY + 30, 'left', 'middle');
        /*pdf.textEx('qPCR replicates:', 110, nextNewStartingY + 40, 'right', 'middle');
        pdf.textEx('---', 115, nextNewStartingY + 40, 'left', 'middle');*/
        pdf.text('Notes:', 20, nextNewStartingY + 70);
        pdf.line(15, nextNewStartingY + 75, 580, nextNewStartingY + 75);
        pdf.save("worksheet.pdf");
    };
    // convert table element to json for the .autoTable()
    AnalysisBatchWorksheetComponent.prototype.tableToJson = function (table) {
        var data = [];
        // first row needs to be headers
        var headers = [];
        for (var i = 0; i < table.rows[0].cells.length; i++) {
            headers[i] = table.rows[0].cells[i].innerHTML;
        }
        // go through cells
        for (var i = 1; i < table.rows.length; i++) {
            var tableRow = table.rows[i];
            var rowData = {};
            for (var j = 0; j < tableRow.cells.length; j++) {
                rowData[headers[j]] = tableRow.cells[j].innerHTML;
            }
            data.push(rowData);
        }
        return data;
    };
    return AnalysisBatchWorksheetComponent;
}());
__decorate([
    core_1.ViewChild('batchWorksheet'),
    __metadata("design:type", Object)
], AnalysisBatchWorksheetComponent.prototype, "pdfWorksheet", void 0);
__decorate([
    core_1.ViewChild('sampleTable'),
    __metadata("design:type", typeof (_a = typeof core_1.ElementRef !== "undefined" && core_1.ElementRef) === "function" && _a || Object)
], AnalysisBatchWorksheetComponent.prototype, "sampleTable", void 0);
__decorate([
    core_1.ViewChild('targetTable'),
    __metadata("design:type", typeof (_b = typeof core_1.ElementRef !== "undefined" && core_1.ElementRef) === "function" && _b || Object)
], AnalysisBatchWorksheetComponent.prototype, "targetTable", void 0);
AnalysisBatchWorksheetComponent = __decorate([
    core_1.Component({
        selector: 'analysis-batch-worksheet',
        template: __webpack_require__("./src/app/analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component.html"),
        styles: [__webpack_require__("./src/app/analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_c = typeof analysis_batch_service_1.AnalysisBatchService !== "undefined" && analysis_batch_service_1.AnalysisBatchService) === "function" && _c || Object])
], AnalysisBatchWorksheetComponent);
exports.AnalysisBatchWorksheetComponent = AnalysisBatchWorksheetComponent;
var _a, _b, _c;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component.js.map

/***/ }),

/***/ "./src/app/analysis-batches/analysis-batch.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var Subject_1 = __webpack_require__("./node_modules/rxjs/_esm5/Subject.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var AnalysisBatchService = (function () {
    function AnalysisBatchService(_http) {
        this._http = _http;
        // subject, getter,setter for extraction form values
        this._ExtractionWorksheetObj = new Subject_1.Subject();
    }
    AnalysisBatchService.prototype.extractData = function (res) {
        var body = res.json();
        return body.data || {};
    };
    // need for analysis-batches.component to open worksheet in new window
    AnalysisBatchService.prototype.getNativeWindow = function () {
        return window;
    };
    Object.defineProperty(AnalysisBatchService.prototype, "WorksheetObject", {
        get: function () { return this._ExtractionWorksheetObj.asObservable(); },
        enumerable: true,
        configurable: true
    });
    AnalysisBatchService.prototype.setWorksheetObject = function (worksheetObj) {
        this._ExtractionWorksheetObj.next(worksheetObj);
    };
    // get Analysis Batch Detail - for individual AB record retrieval 
    AnalysisBatchService.prototype.getAnalysisBatchDetail = function (abID) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.ANALYSIS_BATCH_DETAIL_URL + abID + '/?format=json', options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    // get Analysis Batch Summaries - for populating table of ABs
    AnalysisBatchService.prototype.getAnalysisBatchSummaries = function () {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.get(app_settings_1.APP_SETTINGS.ANALYSIS_BATCH_SUMMARY_URL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    AnalysisBatchService.prototype.queryAnalysisBatchesCount = function (queryFormValue) {
        var queryString = '?';
        if (queryFormValue.from_id !== null && queryFormValue.from_id !== '') {
            queryString = queryString + '&from_id=' + queryFormValue.from_id.toString();
        }
        if (queryFormValue.to_id !== null && queryFormValue.to_id !== '') {
            queryString = queryString + '&to_id=' + queryFormValue.to_id.toString();
        }
        if (queryFormValue.study !== null && queryFormValue.study !== '') {
            queryString = queryString + '&study=' + queryFormValue.study.toString();
        }
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.ANALYSIS_BATCH_SUMMARY_URL + 'get_count/' + queryString, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    AnalysisBatchService.prototype.queryAnalysisBatches = function (queryFormValue) {
        var queryString = '?';
        if (queryFormValue.from_id !== null && queryFormValue.from_id !== '') {
            queryString = queryString + '&from_id=' + queryFormValue.from_id.toString();
        }
        if (queryFormValue.to_id !== null && queryFormValue.to_id !== '') {
            queryString = queryString + '&to_id=' + queryFormValue.to_id.toString();
        }
        if (queryFormValue.study !== null && queryFormValue.study !== '') {
            queryString = queryString + '&study=' + queryFormValue.study.toString();
        }
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.ANALYSIS_BATCH_SUMMARY_URL + queryString, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    // get sample-inhibition objects, i.e. inhibitions per sample
    AnalysisBatchService.prototype.getSampleInhibitions = function (sampleList) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.SAMPLE_INHIBITIONS_URL + '?id=' + sampleList, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    AnalysisBatchService.prototype.create = function (formValue) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.post(app_settings_1.APP_SETTINGS.ANALYSIS_BATCH_URL, formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    AnalysisBatchService.prototype.update = function (formValue) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS
        });
        return this._http.put(app_settings_1.APP_SETTINGS.ANALYSIS_BATCH_URL + formValue.id + '/', formValue, options)
            .map(this.extractData)
            .catch(this.handleError);
    };
    AnalysisBatchService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return AnalysisBatchService;
}());
AnalysisBatchService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], AnalysisBatchService);
exports.AnalysisBatchService = AnalysisBatchService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/analysis-batches/analysis-batch.service.js.map

/***/ }),

/***/ "./src/app/analysis-batches/analysis-batches.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\r\n    <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n        <h3>Analysis Batches</h3>\r\n    </div>\r\n</div>\r\n<!-- Extract wizard -->\r\n<clr-wizard #wizardExtract [(clrWizardOpen)]=\"extractWizardOpen\"\r\n    (clrWizardOnFinish)=\"finishExtractWizard(selectedAnalysisBatchID, extractForm.value, createInhibitionForm.value)\"\r\n    (clrWizardOnCancel)=\"resetExtractWizard()\" clrWizardSize=\"xl\">\r\n    <clr-wizard-title>Extract Samples in Analysis Batch {{selectedAnalysisBatchID}}</clr-wizard-title>\r\n\r\n    <clr-wizard-button [type]=\"'cancel'\">Cancel</clr-wizard-button>\r\n    <clr-wizard-button [type]=\"'previous'\">Back</clr-wizard-button>\r\n    <clr-wizard-button [type]=\"'next'\">Next</clr-wizard-button>\r\n    <!-- <clr-wizard-button [type]=\"'finish'\">Finish</clr-wizard-button> -->\r\n\r\n    <!-- Aliquot selection page -->\r\n    <clr-wizard-page (clrWizardPageCustomButton)=\"doCustomClick($event)\">\r\n        <ng-template clrPageTitle>Aliquot Selection</ng-template>\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-10 col-md-10\">\r\n                <p>Select an aliquot for each Sample in this Analysis Batch\r\n\r\n                    <form class=\"compact\">\r\n                        <section class=\"form-block\">\r\n\r\n                            <div class=\"form-group\" *ngFor=\"let sample of abSampleList\">\r\n                                <label for=\"\">Sample {{sample.id}}</label>\r\n\r\n                                <span *ngIf=\"sample.aliquots.length === 0\">No aliquots recorded</span>\r\n                                <div class=\"select\" *ngIf=\"sample.aliquots.length > 0\">\r\n                                    <select name=\"aliquot_select\"\r\n                                        (change)=\"onAliquotSelect(sample.id, $event.target.value)\">\r\n                                        <option [value]=\"\">Select</option>\r\n                                        <option *ngFor=\"let aliquot of sample.aliquots\" [value]=\"aliquot.id\">\r\n                                            {{aliquot.aliquot_string}}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </section>\r\n                    </form>\r\n\r\n                    <!-- alternative method using the embedded aliquots form array -->\r\n                    <!-- <form class=\"compact\" [formGroup]=\"extractForm\">\r\n                        <section class=\"form-block\">\r\n                            <p>Select desired number of PCR replicates for each selected target. To update the targets list,\r\n                                return to Target Selection page.\r\n                                <div formArrayName=\"new_sample_extractions\" *ngIf=\"extractionArray.controls.length > 0\">\r\n                                    <div class=\"form-group\" *ngFor=\"let extraction of extractionArray.controls; let i = index\" [formGroupName]=\"i\">\r\n                                        <label>Sample {{extraction.controls.sample.value}}</label>\r\n                                        <div class=\"select\" formArrayName=\"aliquots\">\r\n                                            <select formControlName=\"selected_aliquot\">\r\n                                                <option *ngFor=\"let aliquot of extraction.controls.aliquots.controls\" [value]=\"aliquot.controls.aliquot_string.value\">{{aliquot.controls.aliquot_string.value}}</option>\r\n                                            </select>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                        </section>\r\n                    </form> -->\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"aliquotSelectErrorFlag\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">Missing aliquot selection for one or more samples. Please ensure that all\r\n                    samples have aliquots recorded\r\n                    and that one is selected for this Extraction.</span>\r\n            </div>\r\n        </clr-alert>\r\n\r\n        <ng-template clrPageButtons>\r\n            <clr-wizard-button [type]=\"'custom-cancel'\">Cancel</clr-wizard-button>\r\n            <clr-wizard-button [type]=\"'custom-previous'\">Back</clr-wizard-button>\r\n            <clr-wizard-button [type]=\"'custom-next-aliquotPage'\">Next</clr-wizard-button>\r\n        </ng-template>\r\n    </clr-wizard-page>\r\n    <!-- end Aliquot selection page -->\r\n\r\n    <!-- Target selection page -->\r\n    <clr-wizard-page (clrWizardPageCustomButton)=\"doCustomClick($event)\">\r\n        <ng-template clrPageTitle>Target Selection</ng-template>\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12 col-md-12 col-sm-12\">\r\n                Select targets to analyze for this extraction from the table below\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12 col-md-12 col-sm-12\">\r\n\r\n                <clr-datagrid class=\"target-select-datagrid\" [(clrDgSelected)]=\"selected\">\r\n\r\n                    <clr-dg-column [clrDgField]=\"'name'\" class=\"name-column\">Name</clr-dg-column>\r\n                    <clr-dg-column [clrDgField]=\"'code'\">Code</clr-dg-column>\r\n                    <clr-dg-column [clrDgField]=\"'type'\">Type</clr-dg-column>\r\n\r\n                    <clr-dg-row *clrDgItems=\"let target of allTargets\" [clrDgItem]=\"target\">\r\n                        <clr-dg-cell>{{target.name}}</clr-dg-cell>\r\n                        <clr-dg-cell>{{target.code}}</clr-dg-cell>\r\n                        <clr-dg-cell>{{target.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes }}\r\n                        </clr-dg-cell>\r\n                    </clr-dg-row>\r\n\r\n                    <clr-dg-footer>{{allTargets.length}} targets</clr-dg-footer>\r\n                </clr-datagrid>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"targetSelectErrorFlag\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">Please select at least one target to continue.</span>\r\n            </div>\r\n        </clr-alert>\r\n\r\n        <ng-template clrPageButtons>\r\n            <clr-wizard-button [type]=\"'custom-cancel'\">Cancel</clr-wizard-button>\r\n            <clr-wizard-button [type]=\"'custom-previous'\">Back</clr-wizard-button>\r\n            <clr-wizard-button [type]=\"'custom-next-targetPage'\">Next</clr-wizard-button>\r\n        </ng-template>\r\n\r\n    </clr-wizard-page>\r\n    <!-- end Target selection page -->\r\n\r\n    <!-- qPCR details page -->\r\n    <clr-wizard-page>\r\n        <ng-template clrPageTitle>qPCR Details</ng-template>\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12 col-md-12 col-sm-12\">\r\n                <form class=\"compact\" [formGroup]=\"extractForm\" (ngSubmit)=\"onSubmit('add', extractForm.value)\">\r\n                    <section class=\"form-block\">\r\n\r\n                        <div class=\"form-group\">\r\n                            <label class=\"required\">qPCR Template Volume (µL)</label>\r\n                            <label for=\"qpcrTemplateVol\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                class=\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\"\r\n                                [class.invalid]=\"extractForm.get('qpcr_template_volume').invalid && (extractForm.get('qpcr_template_volume').dirty || extractForm.get('qpcr_template_volume').touched)\">\r\n                                <input id=\"qpcrTemplateVol\" type=\"text\" size=\"5\" formControlName=\"qpcr_template_volume\">\r\n                                <span class=\"tooltip-content\">\r\n                                    This field cannot be empty!\r\n                                </span>\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label class=\"required\">qPCR Reaction Volume(µL)</label>\r\n                            <label for=\"qpcrReactionVol\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                class=\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\"\r\n                                [class.invalid]=\"extractForm.get('qpcr_reaction_volume').invalid && (extractForm.get('qpcr_reaction_volume').dirty || extractForm.get('qpcr_reaction_volume').touched)\">\r\n                                <input id=\"qpcrReactionVol\" type=\"text\" size=\"5\" formControlName=\"qpcr_reaction_volume\">\r\n                                <span class=\"tooltip-content\">\r\n                                    This field cannot be empty!\r\n                                </span>\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label class=\"required\">qPCR Date</label>\r\n                            <label for=\"qpcrDateInput\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                class=\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\"\r\n                                [class.invalid]=\"extractForm.get('qpcr_reaction_volume').invalid && (extractForm.get('qpcr_reaction_volume').dirty || extractForm.get('qpcr_reaction_volume').touched)\">\r\n                                <input type=\"date\" id=\"qpcrDateInput\" formControlName=\"qpcr_date\">\r\n                                <span class=\"tooltip-content\">\r\n                                    This field cannot be empty!\r\n                                </span>\r\n\r\n                            </label>\r\n                        </div>\r\n\r\n                    </section>\r\n\r\n                    <section class=\"form-block\" *ngIf=\"x\">\r\n                        <p>Select desired number of PCR replicates for each selected target. To update the targets list,\r\n                            return\r\n                            to Target Selection page. Minimum value of 1.\r\n                            <div formArrayName=\"new_replicates\">\r\n\r\n                                <div class=\"form-group\" *ngFor=\"let target of replicateArray.controls; let i = index\"\r\n                                    [formGroupName]=\"i\">\r\n\r\n                                    <label\r\n                                        class=\"required\">{{target.controls.target.value | displayValue:'name':this.allTargets}}</label>\r\n                                    <input formControlName=\"count\" type=\"number\" min=\"1\" class=\"target-count-input\">\r\n\r\n                                    <!-- count input with validation feedback. does not seem to work for number inputs. -->\r\n                                    <!-- <label for=\"count{{i}}\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\"\r\n                                        [class.invalid]=\"extractForm.get('new_replicates').controls[i].get('count').invalid && (extractForm.get('new_replicates').controls[i].get('count').dirty || extractForm.get('new_replicates').controls[i].get('count').touched)\">\r\n                                        <input id=\"count{{i}}\" formControlName=\"count\" type=\"text\"  class=\"target-count-input\">\r\n                                        <span class=\"tooltip-content\">\r\n                                            This field cannot be empty!\r\n                                        </span>\r\n                                    </label> -->\r\n\r\n                                </div>\r\n                            </div>\r\n                    </section>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </clr-wizard-page>\r\n    <!-- end qPCR details page -->\r\n\r\n    <!-- extraction (batch) details page -->\r\n    <clr-wizard-page>\r\n        <ng-template clrPageTitle>Extraction Details</ng-template>\r\n\r\n        <form class=\"compact\" [formGroup]=\"extractForm\" (ngSubmit)=\"onSubmit('add', extractForm.value)\">\r\n            <section class=\"form-block\">\r\n\r\n                <div class=\"form-group\">\r\n                    <label class=\"required\">Extraction Volume (µL)</label>\r\n                    <label for=\"extractVol\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                        class=\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\"\r\n                        [class.invalid]=\"extractForm.get('extraction_volume').invalid && (extractForm.get('extraction_volume').dirty || extractForm.get('extraction_volume').touched)\">\r\n                        <input id=\"extractVol\" type=\"text\" size=\"10\" formControlName=\"extraction_volume\">\r\n                        <span class=\"tooltip-content\">\r\n                            This field cannot be empty and must be a number!\r\n                        </span>\r\n                    </label>\r\n\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label class=\"required\">Elution Volume (µL)</label>\r\n                    <label for=\"elutionVol\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                        class=\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\"\r\n                        [class.invalid]=\"extractForm.get('elution_volume').invalid && (extractForm.get('elution_volume').dirty || extractForm.get('elution_volume').touched)\">\r\n                        <input id=\"elutionVol\" type=\"text\" size=\"10\" formControlName=\"elution_volume\">\r\n                        <span class=\"tooltip-content\">\r\n                            This field cannot be empty and must be a number!\r\n                        </span>\r\n                    </label>\r\n\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label class=\"required\">Extraction Method</label>\r\n                    <label for=\"extractionMethodSelect\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                        class=\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\"\r\n                        [class.invalid]=\"extractForm.get('extraction_method').invalid && (extractForm.get('extraction_method').dirty || extractForm.get('extraction_method').touched)\">\r\n                        <div class=\"select\">\r\n                            <select id=\"extractionMethodSelect\" name=\"extraction_method\"\r\n                                formControlName=\"extraction_method\">\r\n                                <option *ngFor=\"let method of allExtractionMethods\" [value]=\"method.id\">{{method.name}}\r\n                                </option>\r\n                            </select>\r\n                        </div>\r\n                        <span class=\"tooltip-content\">\r\n                            This field cannot be empty!\r\n                        </span>\r\n                    </label>\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label class=\"required\">Dilution factor of Sample</label>\r\n                    <label for=\"sampleDilution\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                        class=\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\"\r\n                        [class.invalid]=\"extractForm.get('sample_dilution_factor').invalid && (extractForm.get('sample_dilution_factor').dirty || extractForm.get('sample_dilution_factor').touched)\">\r\n                        <input id=\"sampleDilution\" type=\"number\" size=\"10\" min=\"1\"\r\n                            formControlName=\"sample_dilution_factor\">\r\n                        <span class=\"tooltip-content\">\r\n                            This field cannot be empty!\r\n                        </span>\r\n                    </label>\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label class=\"required\">Extraction Date</label>\r\n                    <label for=\"extractionDateInput\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                        class=\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\"\r\n                        [class.invalid]=\"extractForm.get('extraction_date').invalid && (extractForm.get('extraction_date').dirty || extractForm.get('extraction_date').touched)\">\r\n                        <input type=\"date\" id=\"extractionDateInput\" formControlName=\"extraction_date\">\r\n                        <span class=\"tooltip-content\">\r\n                            This field cannot be empty!\r\n                        </span>\r\n                    </label>\r\n                </div>\r\n            </section>\r\n        </form>\r\n    </clr-wizard-page>\r\n    <!-- extraction (batch) details page -->\r\n\r\n    <!-- Reverse Transcription page -->\r\n    <clr-wizard-page>\r\n        <ng-template clrPageTitle>Reverse Transcription</ng-template>\r\n        <clr-alert [clrAlertClosable]=\"false\" *ngIf=\"rnaTargetsSelected\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">\r\n                    You have selected RNA targets for this extraction. Please enter RT data below.\r\n                </span>\r\n            </div>\r\n        </clr-alert>\r\n\r\n        <clr-alert [clrAlertClosable]=\"false\" *ngIf=\"!rnaTargetsSelected\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">\r\n                    You have not selected any RNA targets for this extraction. No RT record will be created. Please\r\n                    click Next to skip to the\r\n                    next step.\r\n                </span>\r\n            </div>\r\n        </clr-alert>\r\n\r\n        <form class=\"compact\" [formGroup]=\"extractForm\" *ngIf=\"rnaTargetsSelected\">\r\n            <section class=\"form-block\">\r\n\r\n                <div formGroupName=\"new_rt\">\r\n                    <div class=\"form-group\">\r\n                        <label class=\"required\">Template Volume (µL)</label>\r\n                        <label for=\"rtTemplateVol\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                            class=\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\"\r\n                            [class.invalid]=\"extractForm.get('new_rt').get('template_volume').invalid && (extractForm.get('new_rt').get('template_volume').dirty || extractForm.get('new_rt').get('template_volume').touched)\">\r\n                            <input id=\"rTtemplateVol\" type=\"text\" size=\"10\" formControlName=\"template_volume\">\r\n                            <span class=\"tooltip-content\">\r\n                                This field cannot be empty and must be a number!\r\n                            </span>\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label class=\"required\">Reaction Volume (µL)</label>\r\n                        <label for=\"rtReactionVol\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                            class=\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\"\r\n                            [class.invalid]=\"extractForm.get('new_rt').get('reaction_volume').invalid && (extractForm.get('new_rt').get('reaction_volume').dirty || extractForm.get('new_rt').get('reaction_volume').touched)\">\r\n                            <input id=\"rtReactionVol\" type=\"text\" size=\"10\" formControlName=\"reaction_volume\">\r\n                            <span class=\"tooltip-content\">\r\n                                This field cannot be empty and must be a number!\r\n                            </span>\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div class=\"form-group\">\r\n                        <label class=\"required\">RT Date</label>\r\n                        <label for=\"rtDateInput\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                            class=\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\"\r\n                            [class.invalid]=\"extractForm.get('new_rt').get('rt_date').invalid && (extractForm.get('new_rt').get('rt_date').dirty || extractForm.get('new_rt').get('rt_date').touched)\">\r\n                            <input type=\"date\" id=\"rtDateInput\" formControlName=\"rt_date\">\r\n                            <span class=\"tooltip-content\">\r\n                                This field cannot be empty!\r\n                            </span>\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n\r\n            </section>\r\n        </form>\r\n    </clr-wizard-page>\r\n    <!-- end Reverse Transcription page -->\r\n\r\n    <!-- Inhibition page -->\r\n    <clr-wizard-page (clrWizardPageCustomButton)=\"doCustomClick($event)\">\r\n        <ng-template clrPageTitle>Inhibition</ng-template>\r\n        <div>\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-10 col-md-10 col-sm-12 col-xs-12\">\r\n\r\n                    <div class=\"spinner\" *ngIf=\"loadingFlag\">\r\n                        Loading...\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-10 col-md-10 col-sm-12 col-xs-12\">\r\n                    <clr-alert [clrAlertClosable]=\"false\" *ngIf=\"inhibitionsExist && !loadingFlag\">\r\n                        <div clr-alert-item class=\"alert-item\">\r\n                            <span class=\"alert-text\">\r\n                                lili has detected existing inhibitions for samples in this Analysis Batch.\r\n                            </span>\r\n                        </div>\r\n                    </clr-alert>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-10 col-md-10 col-sm-12 col-xs-12\">\r\n                    <div class=\"card\" *ngIf=\"!loadingFlag\">\r\n                        <div class=\"card-block\">\r\n                            <div class=\"card-title\">\r\n                                Create New Inhibitions\r\n                                <clr-signpost>\r\n                                    <clr-signpost-content *clrIfOpen>\r\n                                        <p>This option allows you to create new inhibitions for all DNA targets in the\r\n                                            batch,\r\n                                            all RNA targets in the batch, or both.\r\n                                        </p>\r\n                                    </clr-signpost-content>\r\n                                </clr-signpost>\r\n                            </div>\r\n                            <div class=\"card-text\">\r\n                                <form id=\"createInhibitionForm\" class=\"compact\" [formGroup]=\"createInhibitionForm\"\r\n                                    (ngSubmit)=\"onSubmit('add', createInhibitionForm.value)\">\r\n                                    <section class=\"form-block\">\r\n                                        <label>Create new for all samples in this Analysis Batch</label>\r\n                                        <div class=\"form-group\">\r\n                                            <label>DNA Inhibitions (DNA targets)</label>\r\n                                            <div class=\"checkbox\">\r\n                                                <input type=\"checkbox\" formControlName=\"dna\" id=\"dnaCheck\">\r\n                                                <label for=\"dnaCheck\"></label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"form-group\" *ngIf=\"rnaTargetsSelected\">\r\n                                            <label>RNA Inhibitions (RNA targets)</label>\r\n                                            <div class=\"checkbox\">\r\n                                                <input type=\"checkbox\" formControlName=\"rna\" id=\"rnaCheck\">\r\n                                                <label for=\"rnaCheck\"></label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div *ngIf=\"!rnaTargetsSelected\">\r\n                                            <label>Note: No RNA targets selected.</label>\r\n                                        </div>\r\n                                    </section>\r\n                                    <section class=\"form-block\">\r\n                                        <label>Inhibition date for new inhibitions</label>\r\n                                        <div class=\"form-group\">\r\n                                            <label>New DNA Inhibitions Date</label>\r\n                                            <input type=\"date\" id=\"inhibitionDateInput\"\r\n                                                formControlName=\"inhibition_date_dna\">\r\n                                        </div>\r\n                                        <div class=\"form-group\" *ngIf=\"rnaTargetsSelected\">\r\n                                            <label>New RNA Inhibitions Date</label>\r\n                                            <input type=\"date\" id=\"inhibitionDateInput\"\r\n                                                formControlName=\"inhibition_date_rna\">\r\n                                        </div>\r\n                                    </section>\r\n                                </form>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <div class=\"card-block\" *ngIf=\"inhibitionsExist\">\r\n                            <div\r\n                                *ngIf=\"createInhibitionForm.value.dna === false || createInhibitionForm.value.rna === false\">\r\n                                <div class=\"card-title\">\r\n                                    Apply Existing Inhibitions\r\n                                    <clr-signpost>\r\n                                        <clr-signpost-content *clrIfOpen>\r\n                                            <p>Select existing inhibitions to apply to DNA targets and RNA targets for\r\n                                                each\r\n                                                sample individually.\r\n                                                <p>'DF' = Dilution Factor\r\n                                        </clr-signpost-content>\r\n                                    </clr-signpost>\r\n                                </div>\r\n                                <div class=\"card-text\">\r\n\r\n                                    <form class=\"compact\" [formGroup]=\"extractForm\">\r\n                                        <section class=\"form-block\">\r\n                                            <div formArrayName=\"new_sample_extractions\">\r\n                                                <div>\r\n                                                    <table class=\"table table-noborder\">\r\n                                                        <thead>\r\n                                                            <tr>\r\n                                                                <th class=\"left\">Sample</th>\r\n                                                                <th class=\"left\"\r\n                                                                    *ngIf=\"createInhibitionForm.value.dna === false\">\r\n                                                                    Inhibition for DNA Targets</th>\r\n                                                                <th class=\"left\"\r\n                                                                    *ngIf=\"createInhibitionForm.value.rna === false && rnaTargetsSelected\">\r\n                                                                    Inhibition for RNA Targets</th>\r\n                                                            </tr>\r\n                                                        </thead>\r\n\r\n                                                        <tbody>\r\n                                                            <tr *ngFor=\"let sample of abSampleInhibitions; let i = index\"\r\n                                                                [formGroupName]=\"i\">\r\n                                                                <td class=\"left\">\r\n                                                                    <label class=\"required\">Sample {{sample.id}}</label>\r\n                                                                </td>\r\n                                                                <td *ngIf=\"createInhibitionForm.value.dna === false\">\r\n                                                                    <div class=\"select\">\r\n                                                                        <select name=\"dnaInhibition\"\r\n                                                                            formControlName=\"inhibition_dna\">\r\n                                                                            <option [value]=\"'new'\">Create New</option>\r\n                                                                            <option\r\n                                                                                *ngFor=\"let inhibition of sample.inhibitions\"\r\n                                                                                [value]=\"inhibition.id\"> DF:\r\n                                                                                {{inhibition.dilution_factor == null ? \"None\"\r\n                                                                                : inhibition.dilution_factor}}&nbsp;|&nbsp;{{inhibition.nucleic_acid_type\r\n                                                                                | displayValue:'name':this.nucleicAcidTypes}}&nbsp;|&nbsp;\r\n                                                                                {{inhibition.inhibition_date | date:'shortDate'}}\r\n                                                                            </option>\r\n                                                                        </select>\r\n                                                                    </div>\r\n                                                                </td>\r\n                                                                <td\r\n                                                                    *ngIf=\"createInhibitionForm.value.rna === false && rnaTargetsSelected\">\r\n                                                                    <div class=\"select\">\r\n                                                                        <select name=\"rnaInhibition\"\r\n                                                                            formControlName=\"inhibition_rna\">\r\n                                                                            <option [value]=\"'new'\">Create New</option>\r\n                                                                            <option\r\n                                                                                *ngFor=\"let inhibition of sample.inhibitions\"\r\n                                                                                [value]=\"inhibition.id\"> DF:\r\n                                                                                {{inhibition.dilution_factor == null ? \"None\"\r\n                                                                                : inhibition.dilution_factor}}&nbsp;|&nbsp;{{inhibition.nucleic_acid_type\r\n                                                                                | displayValue:'name':this.nucleicAcidTypes}}&nbsp;|&nbsp;\r\n                                                                                {{inhibition.inhibition_date | date:'shortDate'}}\r\n                                                                            </option>\r\n                                                                        </select>\r\n                                                                    </div>\r\n                                                                </td>\r\n                                                            </tr>\r\n                                                        </tbody>\r\n\r\n                                                        <!-- <tbody>\r\n                                                            <tr *ngFor=\"let extraction of extractionArray.controls; let i = index\" [formGroupName]=\"i\">\r\n                                                                <td class=\"left\">\r\n                                                                    <label class=\"required\">Sample {{extraction.controls.sample.value}}</label>\r\n                                                                </td>\r\n                                                                <td *ngIf=\"createInhibitionForm.value.dna === false\">\r\n                                                                    <div class=\"select\">\r\n                                                                        <select name=\"dnaInhibition\" formControlName=\"inhibition_dna\">\r\n                                                                            <option [value]=\"'new'\">Create New</option>\r\n                                                                            <option *ngFor=\"let inhibition of sampleInhibitions\" [value]=\"inhibition.id\">Inh {{inhibition.id}} ({{inhibition.nucleic_acid_type\r\n                                                                                | displayValue:'name':this.nucleicAcidTypes}})\r\n                                                                                - Sample {{inhibition.sample}}</option>\r\n                                                                        </select>\r\n                                                                    </div>\r\n                                                                </td>\r\n                                                                <td *ngIf=\"createInhibitionForm.value.rna === false && rnaTargetsSelected\">\r\n                                                                    <div class=\"select\">\r\n                                                                        <select name=\"rnaInhibition\" formControlName=\"inhibition_rna\">\r\n                                                                            <option [value]=\"'new'\">Create New</option>\r\n                                                                            <option *ngFor=\"let inhibition of sampleInhibitions\" [value]=\"inhibition.id\">Inh {{inhibition.id}} ({{inhibition.nucleic_acid_type\r\n                                                                                | displayValue:'name':this.nucleicAcidTypes}})\r\n                                                                                - Sample {{inhibition.sample}}</option>\r\n                                                                        </select>\r\n                                                                    </div>\r\n                                                                </td>\r\n                                                            </tr>\r\n                                                        </tbody> -->\r\n\r\n                                                    </table>\r\n                                                </div>\r\n                                            </div>\r\n                                        </section>\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <p>\r\n                <span>Extract Wizard form status: {{extractForm.status}}.</span>\r\n                <span *ngIf=\"extractForm.status === 'INVALID'\">There are missing or invalid values. </span>\r\n        </div>\r\n        <div>\r\n            <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"inhibitionErrorFlag\">\r\n                <div clr-alert-item class=\"alert-item\">\r\n                    <span class=\"alert-text\">{{inhibitionError}}</span>\r\n                </div>\r\n            </clr-alert>\r\n        </div>\r\n\r\n        <ng-template clrPageButtons>\r\n            <clr-wizard-button [type]=\"'custom-cancel'\">Cancel</clr-wizard-button>\r\n            <clr-wizard-button [type]=\"'custom-previous'\">Back</clr-wizard-button>\r\n            <clr-wizard-button [type]=\"'custom-next-inhPage'\">Next</clr-wizard-button>\r\n        </ng-template>\r\n    </clr-wizard-page>\r\n    <!-- end Inhibition page -->\r\n\r\n    <!-- Confirmation page -->\r\n    <clr-wizard-page (clrWizardPageCustomButton)=\"doCustomClick($event)\">\r\n        <ng-template clrPageTitle>Confirmation</ng-template>\r\n\r\n        <clr-alert *ngIf=!extractForm.valid [clrAlertType]=\"'alert-danger'\">\r\n            <div class=\"alert-item\">\r\n                There are required values missing. Please return to previous pages and enter all required fields.\r\n            </div>\r\n        </clr-alert>\r\n\r\n        <div class=\"spinner\" *ngIf=\"loadingFlag\">\r\n            Loading...\r\n        </div>\r\n\r\n        <clr-alert *ngIf=\"extractionErrorFlag\" [clrAlertType]=\"'alert-danger'\">\r\n            <div class=\"alert-item\">\r\n                New extraction submission failed. Please try again.\r\n            </div>\r\n        </clr-alert>\r\n\r\n        <clr-alert *ngIf=\"extractionFinished && !extractionErrorFlag\" [clrAlertType]=\"'alert-success'\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">New extraction successfully created!</span>\r\n            </div>\r\n        </clr-alert>\r\n        <div *ngIf=\"extractionFinished && !extractionErrorFlag\">\r\n            <button class=\"btn btn-primary\" (click)=\"createWorksheet(false, false)\">Create Extraction Worksheet</button>\r\n        </div>\r\n\r\n\r\n        <div *ngIf=\"extractForm.valid && !loadingFlag && !extractionFinished\">\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12 col-md-12 col-sm-12\">\r\n                    <h4>You are about to extract Analysis Batch\r\n                        <b>{{selectedAnalysisBatchID}}</b>. Please confirm the details below.</h4>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12 col-md-12 col-sm-12\">\r\n                    <h4>Extraction</h4>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-6 col-md-6 col-sm-12\">\r\n\r\n                    <table class=\"table table-vertical table-compact\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Extraction Volume</th>\r\n                                <td>{{extractForm.value.extraction_volume}} µL</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Elution Volume</th>\r\n                                <td>{{extractForm.value.elution_volume}} µL</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Extraction Method</th>\r\n                                <td>{{extractForm.value.extraction_method | displayValue:'name':this.allExtractionMethods}}\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Extraction Date</th>\r\n                                <td>{{extractForm.value.extraction_date | date:'shortDate'}}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Re-Extraction</th>\r\n                                <td>{{(extractForm.value.re_extraction) === null ? 'No' : 'Yes'}}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Sample Dilution Factor</th>\r\n                                <td>{{extractForm.value.sample_dilution_factor}}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>qPCR Template Volume</th>\r\n                                <td>{{extractForm.value.qpcr_template_volume}} µL</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>qPCR Reaction Volume</th>\r\n                                <td>{{extractForm.value.qpcr_reaction_volume}} µL</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>qPCR Date</th>\r\n                                <td>{{extractForm.value.qpcr_date | date:'shortDate'}}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row\" *ngIf=\"rnaTargetsSelected\">\r\n                <div class=\"col-lg-12 col-md-12 col-sm-12\">\r\n                    <h4>Reverse Transcription</h4>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row\" *ngIf=\"rnaTargetsSelected\">\r\n                <div class=\"col-lg-6 col-md-6 col-sm-12\">\r\n                    <table class=\"table table-vertical table-compact\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Template Volume</th>\r\n                                <td>{{extractForm.value.new_rt.template_volume}} µL</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Reaction Volume</th>\r\n                                <td>{{extractForm.value.new_rt.reaction_volume}} µL</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>RT Date</th>\r\n                                <td>{{extractForm.value.new_rt.rt_date | date:'shortDate' }}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Re-RT</th>\r\n                                <td>{{ extractForm.value.new_rt.re_rt === null ? 'No' : 'Yes'}}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n\r\n            <label>\r\n                <h4>Inhibitions</h4>\r\n            </label>\r\n            <div *ngIf=\"createInhibitionForm.value.dna\">Creating new inhibitions for all DNA targets, with inhibition\r\n                date {{createInhibitionForm.value.inhibition_date_dna\r\n                | date:'shortDate'}}</div>\r\n\r\n            <div *ngIf=\"createInhibitionForm.value.rna\">Creating new inhibitions for all RNA targets, with inhibition\r\n                date {{createInhibitionForm.value.inhibition_date_rna\r\n                | date:'shortDate'}}</div>\r\n\r\n            <div *ngIf=\"!createInhibitionForm.value.dna\">Applying existing inhibitions for DNA targets for the following\r\n                samples:\r\n                <ul>\r\n                    <li *ngFor=\"let sample of dnaApplyList\">{{sample}}</li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div *ngIf=\"!createInhibitionForm.value.rna\">Applying existing inhibitions for RNA targets for the following\r\n                samples:\r\n                <ul>\r\n                    <li *ngFor=\"let sample of rnaApplyList\">{{sample}}</li>\r\n                </ul>\r\n            </div>\r\n\r\n            <div>\r\n                <label>\r\n                    <h4>Targets</h4>\r\n                </label>\r\n                <label>This Analysis Batch is being analyzed for the following targets:</label>\r\n                <ul>\r\n                    <li *ngFor=\"let replicate of extractForm.value.new_replicates\">{{replicate.count}} replicates\r\n                        {{replicate.target | displayValue:'name':this.allTargets}}</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n\r\n        <ng-template clrPageButtons>\r\n            <clr-wizard-button [type]=\"'cancel'\">Cancel</clr-wizard-button>\r\n            <clr-wizard-button [type]=\"'previous'\">Back</clr-wizard-button>\r\n            <clr-wizard-button [type]=\"'custom-finish-confirmPage'\">\r\n                {{ extractionFinished ? \"Finish\" : \"Submit Extraction\" }}</clr-wizard-button>\r\n        </ng-template>\r\n    </clr-wizard-page>\r\n    <!-- end Confirmation page -->\r\n</clr-wizard>\r\n<!-- end Extract Wizard -->\r\n\r\n<!-- begin print worksheet modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHidePrintModal\" [clrModalSize]=\"'md'\">\r\n    <h3 class=\"modal-title\">Re-print Analysis Batch Worksheet</h3>\r\n    <div class=\"modal-body\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12\">\r\n\r\n                <div *ngIf=\"noExtractionsFlag\">\r\n                    There are no Extractions for this Analysis Batch.\r\n                </div>\r\n\r\n                <div *ngIf=\"oneExtractionFlag\">\r\n                    There is one extraction for this analysis batch.\r\n                    <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedAB\"\r\n                        (click)=\"createWorksheet(true, false)\" [clrLoading]=\"printSubmitLoading\">\r\n                        <clr-icon shape=\"clipboard\"></clr-icon> Create Extraction Worksheet\r\n                    </button>\r\n                </div>\r\n\r\n                <div *ngIf=\"multipleExtractionsFlag\">\r\n                    There are multiple Extractions of this Analysis Batch. Please select the extraction data you would\r\n                    like to print.\r\n                    <form class=\"compact\" [formGroup]=\"extractionBatchSelectForm\">\r\n                        <div class=\"form-group\">\r\n                            <label class=\"required\">Selection</label>\r\n                            <label for=\"extractionBatchSelect\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                class=\"tooltip tooltip-validation tooltip-sm tooltip-bottom-right\"\r\n                                [class.invalid]=\"extractionBatchSelectForm.get('extraction_batch').invalid && (extractionBatchSelectForm.get('extraction_batch').dirty || extractionBatchSelectForm.get('extraction_batch').touched)\">\r\n                                <div class=\"select\">\r\n                                    <select id=\"extractionBatchSelect\" name=\"extraction_batch\"\r\n                                        formControlName=\"extraction_batch\">\r\n                                        <option *ngFor=\"let eb of extractionBatchArray\" [value]=\"eb.id\">Extraction\r\n                                            {{eb.extraction_number}}</option>\r\n                                    </select>\r\n                                </div>\r\n                                <span class=\"tooltip-content\">\r\n                                    This field cannot be empty!\r\n                                </span>\r\n                            </label>\r\n                        </div>\r\n                    </form>\r\n                    <div>\r\n                        <button class=\"btn btn-primary\" (click)=\"createWorksheet(true, true)\"\r\n                            [disabled]=\"extractionBatchSelectForm.invalid\">Create Extraction Worksheet</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <!--<div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-outline\" (click)=\"showHideEdit = !showHideEdit\">Close</button>\r\n            <button type=\"submit\" class=\"btn btn-primary\"  [disabled]=\"editSampleForm.invalid\">Save Edits</button>\r\n        </div>-->\r\n</clr-modal>\r\n<!-- end print worksheet modal -->\r\n\r\n<clr-modal [(clrModalOpen)]=\"showWorksheet\" [clrModalSize]=\"'xl'\">\r\n    <h3 class=\"modal-title\">Worksheet Preview</h3>\r\n    <div class=\"modal-body\">\r\n        <analysis-batch-worksheet #batchWorksheet></analysis-batch-worksheet>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-outline\" (click)=\"showWorksheet = !showWorksheet\">Close</button>\r\n    </div>\r\n</clr-modal>\r\n\r\n<!-- begin edit analysis batch modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideEdit\" [clrModalSize]=\"'xl'\">\r\n    <h3 class=\"modal-title\">Edit Analysis Batch {{editABForm.value.id}}</h3>\r\n    <div class=\"modal-body\">\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12\">\r\n                <clr-tabs>\r\n                    <clr-tab>\r\n                        <button clrTabLink>Details</button>\r\n                        <ng-template [(clrIfActive)]=\"detailsActive\">\r\n                            <clr-tab-content>\r\n                                <form id=\"editABForm\" class=\"compact\" [formGroup]=\"editABForm\"\r\n                                    (ngSubmit)=\"onSubmit('editAB', editABForm.value)\">\r\n                                    <section class=\"form-block\">\r\n                                        <div class=\"form-group\">\r\n                                            <label for=\"studyId\">Analysis Batch ID</label>\r\n                                            <input type=\"text\" size=\"35\" formControlName=\"id\" readonly>\r\n                                        </div>\r\n\r\n                                        <div class=\"form-group\">\r\n                                            <label for=\"abDescInput\">Analysis Batch Name</label>\r\n                                            <input type=\"text\" formControlName=\"name\">\r\n                                        </div>\r\n\r\n                                        <div class=\"form-group\">\r\n                                            <label for=\"abDescInput\">Analysis Batch Description</label>\r\n                                            <textarea id=\"abDescInput\" rows=\"2\"\r\n                                                formControlName=\"analysis_batch_description\"\r\n                                                style=\"max-width:25em\"></textarea>\r\n                                        </div>\r\n\r\n                                        <div class=\"form-group\">\r\n                                            <label for=\"abNotesInput\">Analysis Batch Notes</label>\r\n                                            <textarea id=\"abNotesInput\" rows=\"2\" formControlName=\"analysis_batch_notes\"\r\n                                                style=\"max-width:25em\"></textarea>\r\n                                        </div>\r\n\r\n                                        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showABEditError\">\r\n                                            <div clr-alert-item class=\"alert-item\">\r\n                                                <span class=\"alert-text\">Submission error. Analysis Batch not\r\n                                                    updated. Error: {{errorMessage}}</span>\r\n                                                <div class=\"alert-actions\">\r\n                                                    <a class=\"alert-action\"\r\n                                                        (click)=\"onSubmitSample('add', editABForm.value)\">Try\r\n                                                        again</a>\r\n                                                </div>\r\n                                            </div>\r\n                                        </clr-alert>\r\n\r\n                                        <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showABEditSuccess\">\r\n                                            <div clr-alert-item class=\"alert-item\">\r\n                                                <span class=\"alert-text\">Analysis Batch successfully updated</span>\r\n                                                <div class=\"alert-actions\">\r\n                                                    <a class=\"alert-action\"\r\n                                                        (click)=\"showHideEdit = false; showABEditSuccess = false\">Close</a>\r\n                                                </div>\r\n                                            </div>\r\n                                        </clr-alert>\r\n\r\n                                        <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"editABForm.invalid\"\r\n                                            [clrLoading]=\"submitLoading\">Save Edits</button>\r\n                                        <button class=\"btn btn-info\"\r\n                                            (click)=\"showHideEdit = !showHideEdit\">Close</button>\r\n\r\n                                    </section>\r\n                                </form>\r\n\r\n                            </clr-tab-content>\r\n                        </ng-template>\r\n                    </clr-tab>\r\n\r\n                    <clr-tab>\r\n                        <button clrTabLink>Sample List</button>\r\n                        <ng-template [(clrIfActive)]=\"sampleListActive\">\r\n                            <clr-tab-content>\r\n                                <div class=\"row\">\r\n                                    <div class=\"col-lg-4\" *ngIf=\"abSampleListPopulated\">\r\n                                        <!-- form tags used here strictly for formatting convenience. no actual form contained within. -->\r\n                                        <form>\r\n                                            <section class=\"form-block\">\r\n                                                <label>Samples in this Analysis Batch\r\n                                                    <span class=\"badge badge-light-blue\">{{abSampleList.length}}</span>\r\n                                                </label>\r\n                                                <ul class=\"list\">\r\n                                                    <li *ngFor=\"let sample of abSampleList\">{{sample.id}}\r\n                                                        ({{sample.study_string}})\r\n                                                        <!-- <button class=\"btn btn-sm\" (click)=\"removeSample(sample)\">\r\n                                                            <clr-icon shape=\"trash\" size=\"16\"></clr-icon>\r\n                                                        </button> -->\r\n\r\n                                                        <button type=\"button\" class=\"btn btn-icon btn-danger\"\r\n                                                            (click)=\"removeSample(sample)\">\r\n                                                            <clr-icon shape=\"times-circle\"></clr-icon>\r\n                                                        </button>\r\n                                                    </li>\r\n                                                </ul>\r\n                                            </section>\r\n                                        </form>\r\n                                    </div>\r\n                                    <div class=\"col-lg-8\">\r\n\r\n                                        <clr-alert [clrAlertClosable]=\"false\" *ngIf=\"sampleListEditLocked\">\r\n                                            <div clr-alert-item class=\"alert-item\">\r\n                                                <span class=\"alert-text\">\r\n                                                    This Analysis Batch has been extracted. Editing of the sample list\r\n                                                    is locked.\r\n                                                </span>\r\n\r\n                                            </div>\r\n                                        </clr-alert>\r\n\r\n                                        <!-- <div class=\"row\">\r\n                                            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\"> -->\r\n                                        <!-- <span *ngIf=\"samplesLoading\" class=\"text-italic text-small\">Samples\r\n                                            loading.</span> <br> -->\r\n                                        <!-- </div>\r\n                                        </div> -->\r\n\r\n                                        <form *ngIf=\"!sampleListEditLocked\">\r\n                                            <section class=\"form-block\">\r\n\r\n                                                <label>Samples\r\n                                                    <a href=\"\" role=\"tooltip\" aria-haspopup=\"true\"\r\n                                                        class=\"tooltip tooltip-lg\">\r\n                                                        <clr-icon shape=\"info-circle\" size=\"24\"></clr-icon>\r\n                                                        <span class=\"tooltip-content\">Check/uncheck to add/remove Sample\r\n                                                            from Analysis Batch</span>\r\n                                                        <span *ngIf=\"samplesLoading\"\r\n                                                            class=\"text-italic text-small\">Samples loading.</span> <br>\r\n                                                    </a>\r\n                                                </label>\r\n                                                <br>\r\n\r\n                                                <!-- Begin Sample query form -->\r\n                                                <div class=\"card-text\">\r\n                                                    <form class=\"form compact\" [formGroup]=\"sampleQueryForm\"\r\n                                                        (ngSubmit)=\"onSubmitSampleQuery(sampleQueryForm.value)\">\r\n                                                        <section class=\"form-block\">\r\n\r\n                                                            <div class=\"form-group\">\r\n                                                                <label>Study</label>\r\n                                                                <label for=\"studySelect\" aria-haspopup=\"true\"\r\n                                                                    role=\"tooltip\"\r\n                                                                    class=\"tooltip tooltip-validation tooltip-sm\">\r\n                                                                    <div class=\"select\">\r\n                                                                        <select id=\"studySelect\" name=\"study\"\r\n                                                                            formControlName=\"study\">\r\n                                                                            <option value=\"\">\r\n                                                                                <span class=\"all\">ALL STUDIES</span>\r\n                                                                            </option>\r\n                                                                            <option *ngFor=\"let study of studies\"\r\n                                                                                [value]=\"study.id\">{{study.name}}\r\n                                                                            </option>\r\n                                                                        </select>\r\n                                                                    </div>\r\n                                                                </label>\r\n                                                            </div>\r\n\r\n                                                            <div class=\"form-group\">\r\n                                                                <label>Sample ID Range</label>\r\n                                                                <span>From</span>\r\n                                                                <input type=\"number\" formControlName=\"from_id\">\r\n                                                                <span>To</span>\r\n                                                                <input type=\"number\" formControlName=\"to_id\">\r\n                                                            </div>\r\n\r\n                                                            <div class=\"form-group\">\r\n                                                                <label>Collection Start Date Range</label>\r\n                                                                <span>From</span>\r\n                                                                <input type=\"date\"\r\n                                                                    formControlName=\"from_collection_start_date\">\r\n                                                                <span>To</span>\r\n                                                                <input type=\"date\"\r\n                                                                    formControlName=\"to_collection_start_date\">\r\n                                                            </div>\r\n\r\n                                                            <div class=\"form-group\">\r\n                                                                <label>Collaborator Sample ID</label>\r\n                                                                <input id=\"collabSampleIdInput\" type=\"text\"\r\n                                                                    formControlName=\"collaborator_sample_id\">\r\n                                                            </div>\r\n\r\n                                                            <div class=\"form-group\">\r\n                                                                <label>Matrix</label>\r\n                                                                <div class=\"select\">\r\n                                                                    <select id=\"matrixSelect\" name=\"matrix\"\r\n                                                                        formControlName=\"matrix\">\r\n                                                                        <option value=\"\">\r\n                                                                            <span class=\"all\">ALL MATRICES</span>\r\n                                                                        </option>\r\n                                                                        <option *ngFor=\"let matrix of matrices\"\r\n                                                                            [value]=\"matrix.id\">{{matrix.name}}</option>\r\n                                                                    </select>\r\n                                                                </div>\r\n                                                            </div>\r\n\r\n                                                            <div class=\"form-group\">\r\n                                                                <label>Sample type</label>\r\n                                                                <div class=\"select\">\r\n                                                                    <select id=\"sampleTypeSelect\" name=\"sample_type\"\r\n                                                                        formControlName=\"sample_type\">\r\n                                                                        <option value=\"\">\r\n                                                                            <span class=\"all\">ALL SAMPLE TYPES</span>\r\n                                                                        </option>\r\n                                                                        <option *ngFor=\"let sampleType of sampleTypes\"\r\n                                                                            [value]=\"sampleType.id\">{{sampleType.name}}\r\n                                                                        </option>\r\n                                                                    </select>\r\n                                                                </div>\r\n                                                            </div>\r\n\r\n                                                            <div class=\"form-group\">\r\n                                                                <label>Peg Neg (returns associated samples)</label>\r\n                                                                <input type=\"number\" formControlName=\"peg_neg\">\r\n                                                            </div>\r\n\r\n                                                        </section>\r\n\r\n                                                        <clr-alert [clrAlertType]=\"'alert-danger'\"\r\n                                                            *ngIf=\"sampleQuerySizeErrorFlag\">\r\n                                                            <div class=\"alert-item\">\r\n                                                                <span class=\"alert-text\">Your query results are too\r\n                                                                    large (greater than {{queryCountLimit}}). Please\r\n                                                                    narrow\r\n                                                                    your search.</span>\r\n                                                            </div>\r\n                                                        </clr-alert>\r\n\r\n                                                        <button class=\"btn btn-primary\" type=\"submit\"\r\n                                                            [clrLoading]=\"submitLoading\">Filter Samples</button>\r\n                                                    </form>\r\n                                                </div>\r\n                                                <!-- End Sample query form -->\r\n\r\n                                                <span>Remove samples from AB or add new from list below. </span>\r\n\r\n                                                <clr-datagrid class=\"target-select-datagrid\"\r\n                                                    [(clrDgSelected)]=\"samplesSelected\">\r\n\r\n                                                    <clr-dg-action-bar>\r\n                                                        <div class=\"btn-group\">\r\n                                                            <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                                                                (click)=\"deselectAll()\">\r\n                                                                <clr-icon shape=\"window-close\" size=\"16\"></clr-icon>\r\n                                                                Deselect All\r\n                                                            </button>\r\n                                                        </div>\r\n                                                    </clr-dg-action-bar>\r\n\r\n                                                    <!-- filter column header for Sample ID -->\r\n                                                    <clr-dg-column [clrDgField]=\"'id'\">\r\n                                                        Sample ID\r\n                                                        <clr-dg-filter [clrDgFilter]=\"rangeFilter\">\r\n\r\n                                                            <range-filter #rangeFilter></range-filter>\r\n                                                        </clr-dg-filter>\r\n                                                    </clr-dg-column>\r\n\r\n                                                    <clr-dg-column [clrDgField]=\"'collaborator_sample_id'\">\r\n                                                        <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                            Collaborator Sample ID\r\n                                                        </ng-container>\r\n                                                    </clr-dg-column>\r\n\r\n                                                    <!-- filter column header for study -->\r\n                                                    <clr-dg-column [clrDgField]=\"'study'\">\r\n                                                        Study\r\n                                                        <clr-dg-filter [clrDgFilter]=\"studyFilter\">\r\n                                                            <study-filter #studyFilter></study-filter>\r\n                                                        </clr-dg-filter>\r\n                                                    </clr-dg-column>\r\n\r\n                                                    <!-- filter column header for sample type -->\r\n                                                    <clr-dg-column [clrDgField]=\"'sample_type'\">\r\n                                                        Sample Type\r\n                                                        <clr-dg-filter [clrDgFilter]=\"sampleTypeFilter\">\r\n                                                            <sample-type-filter #sampleTypeFilter></sample-type-filter>\r\n                                                        </clr-dg-filter>\r\n                                                    </clr-dg-column>\r\n\r\n                                                    <!-- filter column header for collection start date -->\r\n                                                    <clr-dg-column [clrDgField]=\"'collection_start_date'\">\r\n                                                        Collect Start Date\r\n                                                        <clr-dg-filter [clrDgFilter]=\"CollectionStartDateFilter\">\r\n                                                            <collection-start-date-filter\r\n                                                                [dateField]=\"'collection_start_date'\"\r\n                                                                #CollectionStartDateFilter>\r\n                                                            </collection-start-date-filter>\r\n                                                        </clr-dg-filter>\r\n                                                    </clr-dg-column>\r\n\r\n                                                    <clr-dg-row *clrDgItems=\"let sample of filteredSamples\"\r\n                                                        [clrDgItem]=\"sample\">\r\n                                                        <clr-dg-cell>{{sample.id}}</clr-dg-cell>\r\n                                                        <clr-dg-cell>{{sample.collaborator_sample_id}}</clr-dg-cell>\r\n                                                        <clr-dg-cell>{{sample.study_string}}</clr-dg-cell>\r\n                                                        <clr-dg-cell>{{sample.sample_type_string}}</clr-dg-cell>\r\n                                                        <clr-dg-cell>{{sample.collection_start_date | date:'shortDate'}}\r\n                                                        </clr-dg-cell>\r\n                                                    </clr-dg-row>\r\n\r\n                                                    <clr-dg-footer>{{filteredSamples.length}} samples\r\n                                                        {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of\r\n                                                        {{pagination.totalItems}} samples\r\n                                                        <clr-dg-pagination #pagination [clrDgPageSize]=\"10\">\r\n                                                        </clr-dg-pagination>\r\n                                                    </clr-dg-footer>\r\n                                                </clr-datagrid>\r\n                                            </section>\r\n                                        </form>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"row\">\r\n                                    <div class=\"col-lg-6\">\r\n                                        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showABEditError\">\r\n                                            <div clr-alert-item class=\"alert-item\">\r\n                                                <span class=\"alert-text\">Submission error. Analysis Batch not\r\n                                                    updated. Error: {{errorMessage}}</span>\r\n                                                <div class=\"alert-actions\">\r\n                                                    <a class=\"alert-action\"\r\n                                                        (click)=\"updateABSampleList(editABForm.value,samplesSelected)\">Try\r\n                                                        again</a>\r\n                                                </div>\r\n                                            </div>\r\n                                        </clr-alert>\r\n\r\n                                        <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showABEditSuccess\">\r\n                                            <div clr-alert-item class=\"alert-item\">\r\n                                                <span class=\"alert-text\">Analysis Batch successfully updated</span>\r\n                                                <div class=\"alert-actions\">\r\n                                                    <a class=\"alert-action\"\r\n                                                        (click)=\"showHideEdit = false; showABEditSuccess = false\">Close</a>\r\n                                                </div>\r\n                                            </div>\r\n                                        </clr-alert>\r\n\r\n                                        <button class=\"btn btn-primary\" type=\"submit\"\r\n                                            [disabled]=\"editABForm.invalid || sampleListEditLocked\"\r\n                                            (click)=\"updateABSampleList(editABForm.value,samplesSelected)\"\r\n                                            [clrLoading]=\"submitLoading\">Save Edits</button>\r\n                                        <button class=\"btn btn-info\"\r\n                                            (click)=\"showHideEdit = !showHideEdit\">Close</button>\r\n                                    </div>\r\n                                </div>\r\n                            </clr-tab-content>\r\n                        </ng-template>\r\n                    </clr-tab>\r\n\r\n                </clr-tabs>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</clr-modal>\r\n<!-- end edit analysis batch modal -->\r\n\r\n<!-- begin batch submit ext pos modal -->\r\n<clr-modal [(clrModalOpen)]=\"batchExtPosModalActive\" [clrModalSize]=\"'lg'\">\r\n    <h3 class=\"modal-title\">\r\n        <clr-icon shape=\"view-list\"></clr-icon>&nbsp;Batch Submit Extraction Positive Controls\r\n        <br>\r\n        <span *ngIf=\"selectedAB\">Analysis Batch {{selectedAB.id}}</span>\r\n    </h3>\r\n    <div class=\"modal-body\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-lg-12\">\r\n                        <form class=\"compact\" [formGroup]=\"batchExtPosForm\"\r\n                            (ngSubmit)=\"onSubmitBatchExtPos(batchExtPosForm.value)\">\r\n                            <section class=\"form-block\">\r\n\r\n                                <div formArrayName=\"extraction_batches\">\r\n\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col-lg-2 col-md-2 col-sm-12 col-xs-12\">\r\n                                        </div>\r\n                                        <div class=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                                            <label class=\"text-bold required\">Ext Pos DNA</label>\r\n                                        </div>\r\n                                        <div class=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                                            <label class=\"text-bold required\">Ext/RT Pos RNA</label>\r\n                                        </div>\r\n                                        <div class=\"col-lg-4 col-md-4 col-sm-12 col-xs-12\">\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div class=\"form-group row\" *ngFor=\"let EB of EB_array.controls, let i = index\"\r\n                                        [formGroupName]=\"i\">\r\n                                        <div class=\"col-lg-2 col-md-2 col-sm-12 col-xs-12\">\r\n                                            <label>Extraction {{EB.controls.number.value}}</label>\r\n                                        </div>\r\n                                        <div class=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                                            <input class=\"form-control\" type=\"number\" placeholder=\"Ext Pos DNA\"\r\n                                                size=\"10\" class=\"fcsv-input\" formControlName=\"ext_pos_dna_cq_value\">\r\n                                        </div>\r\n                                        <div class=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                                            <input class=\"form-control\" type=\"number\" placeholder=\"Ext/RT Pos RNA\"\r\n                                                size=\"35\" formControlName=\"ext_pos_rna_rt_cq_value\">\r\n                                        </div>\r\n                                        <div class=\"col-lg-4 col-md-4 col-sm-12 col-xs-12\">\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showBatchExtPosError\">\r\n                                    <div clr-alert-item class=\"alert-item\">\r\n                                        <span class=\"alert-text\">Submission error. Ext Pos values not submitted.</span>\r\n                                        <div class=\"alert-actions\">\r\n                                            <a class=\"alert-action\"\r\n                                                (click)=\"onSubmitBatchExtPos(batchExtPosForm.value)\">Try again</a>\r\n                                        </div>\r\n                                    </div>\r\n                                </clr-alert>\r\n\r\n                                <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showBatchExtPosSuccess\">\r\n                                    <div clr-alert-item class=\"alert-item\">\r\n                                        <span class=\"alert-text\">Ext Pos values successfully submitted.</span>\r\n                                        <div class=\"alert-actions\">\r\n                                            <a class=\"alert-action\"\r\n                                                (click)=\"batchExtPosModalActive = false; showBatchExtPosSuccess = false; resetFlags();\">Close</a>\r\n                                        </div>\r\n                                    </div>\r\n                                </clr-alert>\r\n\r\n                                <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"batchExtPosForm.invalid\"\r\n                                    [clrLoading]=\"submitLoading\">Submit</button>\r\n                                <button class=\"btn btn-info\"\r\n                                    (click)=\"batchExtPosModalActive = !batchExtPosModalActive; resetFlags();\">Close</button>\r\n\r\n                            </section>\r\n\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</clr-modal>\r\n<!-- end batch submit ext pos modal -->\r\n\r\n<!-- begin target detail modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideTargetDetailModal\" [clrModalSize]=\"'sm'\">\r\n    <h3 class=\"modal-title\">Targets analyzed in Analysis Batch {{focusAnalysisBatchID}}</h3>\r\n    <div class=\"modal-body\">\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n\r\n                <table class=\"table table-compact\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Target</th>\r\n                            <th>Nucleic Acid Type</th>\r\n                            <th>Replicates</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr *ngFor=\"let target of targetDetailArray\">\r\n                            <td>{{target.code}}</td>\r\n                            <td>{{target.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes}}</td>\r\n                            <td>{{target.replicates}}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</clr-modal>\r\n<!-- end target detail modal -->\r\n\r\n<!-- begin no targets error modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideNoTargetErrorModal\" [clrModalSize]=\"'md'\">\r\n    <h3 class=\"modal-title\">\r\n        <clr-icon shape=\"warning-standard\" class=\"is-error\" size=\"36\"></clr-icon> No targets error\r\n    </h3>\r\n    <div class=\"modal-body\">\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n                <p>This Analysis Batch has not been extracted, so no targets have been selected.\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-outline\" (click)=\"showHideNoTargetErrorModal = false\">Return</button>\r\n    </div>\r\n</clr-modal>\r\n<!-- end no target error modal -->\r\n\r\n\r\n<div class=\"card-text\">\r\n    <!-- begin sample query form -->\r\n    <form class=\"form compact\" [formGroup]=\"abQueryForm\" (ngSubmit)=\"onSubmitABQuery(abQueryForm.value)\">\r\n        <section class=\"form-block\">\r\n\r\n            <div class=\"form-group\">\r\n                <label>Study</label>\r\n                <div class=\"select\">\r\n                    <select id=\"studySelect\" name=\"study\" formControlName=\"study\">\r\n                        <option value=\"\">\r\n                            <span class=\"all\">ALL STUDIES</span>\r\n                        </option>\r\n                        <option *ngFor=\"let study of studies\" [value]=\"study.id\">{{study.name}}</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n                <label>Analysis Batch ID Range</label>\r\n                <span>From</span>\r\n                <input type=\"number\" formControlName=\"from_id\">\r\n                <span>To</span>\r\n                <input type=\"number\" formControlName=\"to_id\">\r\n            </div>\r\n\r\n        </section>\r\n\r\n        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"abQuerySizeErrorFlag\">\r\n            <div class=\"alert-item\">\r\n                <span class=\"alert-text\">Your query results are too large (greater than {{queryCountLimit}}). Please\r\n                    narrow your search.</span>\r\n            </div>\r\n        </clr-alert>\r\n\r\n        <button class=\"btn btn-primary\" type=\"submit\" [clrLoading]=\"submitLoading\">\r\n            <clr-icon shape=\"filter\"></clr-icon> Filter Analysis Batches\r\n        </button>\r\n    </form>\r\n</div>\r\n\r\n<div *ngIf=\"abQueryComplete\">\r\n    <h4>Query returned {{abCount}} Analysis Batch records</h4>\r\n</div>\r\n\r\n<!-- begin Analysis batches table -->\r\n<div class=\"row\">\r\n    <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n        <clr-datagrid [(clrDgSingleSelected)]=\"selectedAB\" [clrDgLoading]=\"analysisBatchesLoading\">\r\n\r\n            <clr-dg-action-bar>\r\n                <div class=\"btn-group\">\r\n                    <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedAB\"\r\n                        (click)=\"extractAB(selectedAB)\" [clrLoading]=\"submitLoading\">\r\n                        <clr-icon shape=\"upload\"></clr-icon>&nbsp;Extract\r\n                    </button>\r\n                    <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedAB\"\r\n                        (click)=\"editAB(selectedAB)\" [clrLoading]=\"editABLoading\">\r\n                        <clr-icon shape=\"note-edit\" size=\"16\"></clr-icon>&nbsp;Edit Analysis Batch\r\n                    </button>\r\n                    <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedAB\"\r\n                        (click)=\"reprintWorksheet(selectedAB)\" [clrLoading]=\"printSubmitLoading\">\r\n                        <clr-icon shape=\"clipboard\"></clr-icon>&nbsp;Re-Print Worksheet\r\n                    </button>\r\n                    <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedAB\"\r\n                        (click)=\"openBatchExtPos(selectedAB)\" [clrLoading]=\"batchExtPosLoading\">\r\n                        <clr-icon shape=\"view-list\"></clr-icon>&nbsp;Batch Submit Ext Pos Controls\r\n                    </button>\r\n                </div>\r\n            </clr-dg-action-bar>\r\n\r\n\r\n            <clr-dg-column [clrDgField]=\"'id'\">\r\n                Analysis Batch ID\r\n                <clr-dg-filter [clrDgFilter]=\"rangeFilter\">\r\n                    <range-filter #rangeFilter></range-filter>\r\n                </clr-dg-filter>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'studies'\">\r\n                Studies\r\n                <clr-dg-filter [clrDgFilter]=\"multiStudyFilterComponent\">\r\n                    <multi-study-filter #multiStudyFilterComponent></multi-study-filter>\r\n                </clr-dg-filter>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'analysis_batch_description'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Analysis Batch Description\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column>\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Extraction Count\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column>\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Inhibition Count\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column>\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    RT Count\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column>\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Target Count\r\n                    <span class=\"spinner spinner-inline\" *ngIf=\"targetDetailLoading\"></span>\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column>\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Analysis Batch Notes\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'created_by'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Added by\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <!-- filter column header for date added -->\r\n            <clr-dg-column [clrDgField]=\"'created_date'\">\r\n                Date Added\r\n                <clr-dg-filter [clrDgFilter]=\"dateAddedFilter\">\r\n                    <date-added-filter [dateField]=\"'created_date'\" #dateAddedFilter></date-added-filter>\r\n                </clr-dg-filter>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'modified_by'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: true}\">\r\n                    Updated by\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <!-- filter column header for date updated -->\r\n            <clr-dg-column [clrDgField]=\"'modified_date'\">\r\n                Date Updated\r\n                <clr-dg-filter [clrDgFilter]=\"dateUpdatedFilter\">\r\n                    <date-updated-filter [dateField]=\"'modified_date'\" #dateUpdatedFilter></date-updated-filter>\r\n                </clr-dg-filter>\r\n            </clr-dg-column>\r\n\r\n            <!-- begin data table rows -->\r\n\r\n            <clr-dg-placeholder>No Analysis Batches</clr-dg-placeholder>\r\n\r\n            <clr-dg-row *clrDgItems=\"let ab of allAnalysisBatchSummaries\" [clrDgItem]=\"ab\">\r\n\r\n                <clr-dg-cell>{{ab.id}}</clr-dg-cell>\r\n                <clr-dg-cell>\r\n                    <span *ngFor=\"let study of ab.studies\">&#8226;&nbsp;{{study.name}}\r\n                        <br>\r\n                    </span>\r\n                </clr-dg-cell>\r\n                <clr-dg-cell>{{ab.analysis_batch_description}}</clr-dg-cell>\r\n                <clr-dg-cell>{{ab.summary.extraction_batch_count}}</clr-dg-cell>\r\n                <clr-dg-cell>{{ab.summary.inhibition_count}}</clr-dg-cell>\r\n                <clr-dg-cell>{{ab.summary.reverse_transcription_count}}</clr-dg-cell>\r\n                <clr-dg-cell>\r\n                    <a class=\"label label-blue clickable\"\r\n                        (click)=\"openTargetDetails(ab.id)\">{{ab.summary.target_count}}</a>\r\n                </clr-dg-cell>\r\n                <clr-dg-cell>{{ab.analysis_batch_notes}}</clr-dg-cell>\r\n                <clr-dg-cell>{{ab.created_by}}</clr-dg-cell>\r\n                <clr-dg-cell>{{ab.created_date | date:'shortDate'}}</clr-dg-cell>\r\n                <clr-dg-cell>{{ab.modified_by }}</clr-dg-cell>\r\n                <clr-dg-cell>{{ab.modified_date | date:'shortDate'}}</clr-dg-cell>\r\n\r\n                <analysis-batch-detail *clrIfExpanded [selectedABSummary]=\"ab\" ngProjectAs=\"clr-dg-row-detail\">\r\n                </analysis-batch-detail>\r\n\r\n            </clr-dg-row>\r\n\r\n            <clr-dg-footer>\r\n                {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{pagination.totalItems}} Analysis Batches\r\n                <clr-dg-pagination #pagination [clrDgPageSize]=\"20\"></clr-dg-pagination>\r\n            </clr-dg-footer>\r\n        </clr-datagrid>\r\n    </div>\r\n</div>\r\n<!-- end samples table -->"

/***/ }),

/***/ "./src/app/analysis-batches/analysis-batches.component.scss":
/***/ (function(module, exports) {

module.exports = ".modal .stack-view {\n  display: inline-block !important;\n  height: 100% !important;\n  margin-bottom: 0 !important; }\n\n.clr-modal .clr-stack-view {\n  display: inline-block !important;\n  height: 100% !important;\n  margin-bottom: 0 !important; }\n\n.target-count-input {\n  width: 5em; }\n\n.study-list-select {\n  height: 24em !important; }\n\nselect[multiple], select[size] {\n  height: 22em !important; }\n\n.remove-sample {\n  margin: 1em; }\n\n.datagrid .datagrid-column, .datagrid .datagrid-cell .no-padding {\n  padding: 0px; }\n\nlabel.required:after {\n  content: \"*\";\n  font-size: 1.1em;\n  color: #c92100;\n  margin-left: 6px; }\n\n.text-italic {\n  font-style: italic; }\n\n.text-small {\n  font-size: small; }\n"

/***/ }),

/***/ "./src/app/analysis-batches/analysis-batches.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var _1 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var clarity_angular_1 = __webpack_require__("./node_modules/clarity-angular/clarity-angular.es5.js");
var study_service_1 = __webpack_require__("./src/app/studies/study.service.ts");
var sample_service_1 = __webpack_require__("./src/app/samples/sample.service.ts");
var analysis_batch_service_1 = __webpack_require__("./src/app/analysis-batches/analysis-batch.service.ts");
var target_service_1 = __webpack_require__("./src/app/targets/target.service.ts");
var inhibition_service_1 = __webpack_require__("./src/app/inhibitions/inhibition.service.ts");
var extraction_method_service_1 = __webpack_require__("./src/app/extraction-batches/extraction-method.service.ts");
var extraction_batch_service_1 = __webpack_require__("./src/app/extraction-batches/extraction-batch.service.ts");
var unit_service_1 = __webpack_require__("./src/app/units/unit.service.ts");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var AnalysisBatchesComponent = (function () {
    function AnalysisBatchesComponent(formBuilder, _studyService, _sampleService, _analysisBatchService, _targetService, _inhibitionService, _extractionMethodService, _extractionBatchService, _unitService) {
        this.formBuilder = formBuilder;
        this._studyService = _studyService;
        this._sampleService = _sampleService;
        this._analysisBatchService = _analysisBatchService;
        this._targetService = _targetService;
        this._inhibitionService = _inhibitionService;
        this._extractionMethodService = _extractionMethodService;
        this._extractionBatchService = _extractionBatchService;
        this._unitService = _unitService;
        this.showWorksheet = false;
        // testing
        this.loadingFlag = false;
        this.inhibitionErrorFlag = false;
        this.extractionErrorFlag = false;
        this.checked = false;
        this.inhibitionFinished = false;
        this.extractionFinished = false;
        // testing
        this.analysisBatchesLoading = false;
        this.samplesLoading = false;
        this.showWarning = false;
        this.rnaTargetsSelected = false;
        this.sampleListEditLocked = false;
        this.inhibitionsExist = false;
        this.submitLoading = false;
        this.targetDetailLoading = false;
        // for print modal
        this.printSubmitLoading = false;
        this.noExtractionsFlag = false;
        this.oneExtractionFlag = false;
        this.multipleExtractionsFlag = false;
        this.extractWizardOpen = false;
        this.useExistingInhibition = false;
        this.allTargets = [];
        this.filteredSamples = [];
        this.abSampleList = [];
        this.abSampleIDList = [];
        this.abSampleListPopulated = false;
        this.showABEditError = false;
        this.showABEditSuccess = false;
        this.nucleicAcidTypes = [];
        this.showHidePrintModal = false;
        this.aliquotSelectErrorFlag = false;
        this.targetSelectErrorFlag = false;
        this.showHideNoTargetErrorModal = false;
        this.editABLoading = false;
        // aliquotSelectionArray: IAliquotSelection[] = [];
        this.inhibitionsPerSample = [];
        // may not need this abInhibitionCount var, consider removing
        this.abInhibitionCount = 0;
        this.showHideEdit = false;
        this.showHideExtractionDetailModal = false;
        this.showHideRTDetailModal = false;
        this.showHideInhibitionDetailModal = false;
        this.showHideTargetDetailModal = false;
        this.extractionDetailArray = [];
        this.inhibitionDetailArray = [];
        this.rtDetailArray = [];
        this.targetDetailArray = [];
        this.selected = [];
        this.selectedSamples = [];
        this.samplesSelected = [];
        this.abQueryComplete = false;
        this.abQuerySizeErrorFlag = false;
        this.x = false;
        this.rnaApplyList = [];
        this.dnaApplyList = [];
        this.rtValuesExist = false;
        this.inhibitionError = "";
        this.batchExtPosModalActive = false;
        this.showBatchExtPosError = false;
        this.showBatchExtPosSuccess = false;
        this.batchExtPosLoading = false;
        this.sampleQuerySizeErrorFlag = false;
        this.inhibitionErrors = {
            "dnaInhibitionSelection": "Missing one or more inhibition selections. Please make a DNA inhibition selection for each sample.",
            "rnaInhibitionSelection": "Missing one or more inhibition selections. Please make a RNA inhibition selection for each sample.",
            "dnaInhibitionDate": "Please select a date for new DNA inhibitions.",
            "rnaInhibitionDate": "Please select a date for new RNA inhibitions."
        };
        this.isNumberPattern = (/^[0-9]*$/);
        // edit AB form
        this.editABForm = new _1.FormGroup({
            id: new _1.FormControl(''),
            name: new _1.FormControl(''),
            analysis_batch_description: new _1.FormControl(''),
            analysis_batch_notes: new _1.FormControl(''),
            new_samples: new _1.FormControl('')
        });
        // add inhibition form
        this.createInhibitionForm = new _1.FormGroup({
            dna: new _1.FormControl(false),
            rna: new _1.FormControl(false),
            inhibition_date_dna: new _1.FormControl(''),
            inhibition_date_rna: new _1.FormControl('')
        });
        // extractionBatch select form
        this.extractionBatchSelectForm = new _1.FormGroup({
            extraction_batch: new _1.FormControl('', _1.Validators.required)
        });
        this.buildSampleQueryForm();
        this.buildABQueryForm();
        this.buildExtractForm();
        this.buildBatchExtPosForm();
    }
    AnalysisBatchesComponent.nonZero = function (control) {
        if (Number(control.value) < 0) {
            return { nonZero: true };
        }
        else {
            return null;
        }
    };
    AnalysisBatchesComponent.prototype.buildSampleQueryForm = function () {
        this.sampleQueryForm = this.formBuilder.group({
            study: null,
            from_id: null,
            to_id: null,
            from_collection_start_date: null,
            to_collection_start_date: null,
            collaborator_sample_id: null,
            sample_type: null,
            matrix: null,
            record_type: null,
            peg_neg: null
        });
    };
    AnalysisBatchesComponent.prototype.buildABQueryForm = function () {
        this.abQueryForm = this.formBuilder.group({
            study: null,
            from_id: null,
            to_id: null
        });
    };
    AnalysisBatchesComponent.prototype.buildBatchExtPosForm = function () {
        this.batchExtPosForm = this.formBuilder.group({
            extraction_batches: this.formBuilder.array([
                this.formBuilder.group({
                    id: null,
                    number: null,
                    ext_pos_dna_cq_value: null,
                    ext_pos_rna_rt_cq_value: null
                })
            ])
        });
        this.EB_array = this.batchExtPosForm.get("extraction_batches");
    };
    AnalysisBatchesComponent.prototype.buildExtractForm = function () {
        this.extractForm = this.formBuilder.group({
            analysis_batch: '',
            extraction_volume: ['', [_1.Validators.required, _1.Validators.pattern('[-+]?[0-9]*\.?[0-9]+')]],
            elution_volume: ['', [_1.Validators.required, _1.Validators.pattern('[-+]?[0-9]*\.?[0-9]+')]],
            extraction_method: ['', _1.Validators.required],
            extraction_date: [null, _1.Validators.required],
            re_extraction: null,
            re_extraction_notes: '',
            sample_dilution_factor: ['', _1.Validators.required],
            qpcr_template_volume: ['6', [_1.Validators.required, _1.Validators.pattern('[-+]?[0-9]*\.?[0-9]+')]],
            qpcr_reaction_volume: ['20', [_1.Validators.required, _1.Validators.pattern('[-+]?[0-9]*\.?[0-9]+')]],
            qpcr_date: [null, _1.Validators.required],
            new_rt: this.formBuilder.group({
                template_volume: ['8.6', [_1.Validators.required, _1.Validators.pattern('[-+]?[0-9]*\.?[0-9]+')]],
                reaction_volume: ['50', [_1.Validators.required, _1.Validators.pattern('[-+]?[0-9]*\.?[0-9]+')]],
                rt_date: [null, [_1.Validators.required]],
                re_rt: null,
                re_rt_notes: ''
            }),
            new_replicates: this.formBuilder.array([
                this.formBuilder.group({
                    target: '',
                    count: ['2', [_1.Validators.required, _1.Validators.min(1)]]
                })
            ]),
            new_sample_extractions: this.formBuilder.array([])
        });
        this.replicateArray = this.extractForm.get('new_replicates');
        this.extractionArray = this.extractForm.get('new_sample_extractions');
    };
    AnalysisBatchesComponent.prototype.onAliquotSelect = function (sampleID, aliquotID) {
        for (var _i = 0, _a = this.extractionArray.controls; _i < _a.length; _i++) {
            var extraction = _a[_i];
            if (sampleID === extraction.get('sample').value) {
                for (var _b = 0, _c = this.abSampleList; _b < _c.length; _b++) {
                    var sample = _c[_b];
                    if (sampleID === sample.id) {
                        for (var _d = 0, _e = sample.aliquots; _d < _e.length; _d++) {
                            var aliquot = _e[_d];
                            if (aliquot.id === (parseInt(aliquotID, 10))) {
                                extraction.get('aliquot_string').setValue(aliquot.aliquot_string);
                                extraction.get('rack').setValue(aliquot.freezer_location.rack);
                                extraction.get('box').setValue(aliquot.freezer_location.box);
                                extraction.get('row').setValue(aliquot.freezer_location.row);
                                extraction.get('spot').setValue(aliquot.freezer_location.spot);
                            }
                        }
                    }
                }
            }
        }
    };
    AnalysisBatchesComponent.prototype.ngOnInit = function () {
        // this.analysisBatchesLoading = true;
        var _this = this;
        this.queryCountLimit = app_settings_1.APP_SETTINGS.QUERY_COUNT_LIMIT;
        this.nucleicAcidTypes = app_settings_1.APP_SETTINGS.NUCLEIC_ACID_TYPES;
        // on init, call getTargets function of the TargetService, set results to allTargets var
        this._targetService.getTargets()
            .subscribe(function (targets) { return _this.allTargets = targets; }, function (error) { return _this.errorMessage = error; });
        // on init, call getAnalysisBatchSummaries function of the AnalysisBatchService, set results to the allAnalysisBatches var
        // this._analysisBatchService.getAnalysisBatchSummaries()
        //   .subscribe(
        //     (analysisBatches) => {
        //       this.allAnalysisBatchSummaries = analysisBatches;
        //       this.analysisBatchesLoading = false;
        //     },
        //     error => { this.errorMessage = <any>error }
        //   );
        // on init, call getExtractionMethods function of the EXtractionMethodService, set results to allExtractionMethods var
        this._extractionMethodService.getExtractionMethods()
            .subscribe(function (extractionMethods) { return _this.allExtractionMethods = extractionMethods; }, function (error) { return _this.errorMessage = error; });
        // on init, call getStudies function of the StudyService, set results to the studies var
        this._studyService.getStudies()
            .subscribe(function (studies) {
            _this.studies = studies;
            _this.studies.sort(function (a, b) {
                if (a.name < b.name) {
                    return -1;
                }
                if (a.name > b.name) {
                    return 1;
                }
                return 0;
            });
        }, function (error) { return _this.errorMessage = error; });
        // DEPRECATED
        // on init, call getSamples function of the SampleService, set results to the allSamples var
        // this.samplesLoading = true;
        // this._sampleService.getSamples()
        //   .subscribe(
        //     samples => {
        //       this.allSamples = samples
        //       this.samplesLoading = false;
        //     },
        //     error => {
        //       this.errorMessage = <any>error
        //     });
        // on init, call getUnits function of the UnitService, set results to the units var
        this._unitService.getUnits()
            .subscribe(function (units) { return _this.units = units; }, function (error) { return _this.errorMessage = error; });
    };
    AnalysisBatchesComponent.prototype.doCustomClick = function (buttonType) {
        if ("custom-next-aliquotPage" === buttonType) {
            this.aliquotSelectErrorFlag = false;
            // boolean for missingAliquotSelection
            var missingAliquotSelection = false;
            // loop through extractions and check that an aliquot is selected for each one
            for (var _i = 0, _a = this.extractionArray.controls; _i < _a.length; _i++) {
                var extraction = _a[_i];
                if (extraction.get('aliquot_string').value === null && extraction.get('rack').value === null) {
                    missingAliquotSelection = true;
                }
            }
            // throw error if aliquot selection missiing, else advance the wizard
            if (missingAliquotSelection === true) {
                this.aliquotSelectErrorFlag = true;
            }
            else {
                this.wizardExtract.next();
            }
        }
        if ("custom-next-targetPage" === buttonType) {
            this.targetSelectErrorFlag = false;
            if (this.selected.length < 1) {
                this.targetSelectErrorFlag = true;
            }
            else {
                // add the 'count' property to the selected (targets) object
                // set the default count to 2
                this.selected.map(function (target) {
                    target.count = 2;
                    return target;
                });
                // reset rnaTargetsSelected to false to ensure its value does not carry over from previous use of the extract wizard
                this.rnaTargetsSelected = false;
                this.extractForm.controls.new_rt.disable();
                for (var _b = 0, _c = this.extractionArray.controls; _b < _c.length; _b++) {
                    var extraction = _c[_b];
                    extraction.get('inhibition_rna').disable();
                }
                // check for RNA targets in current selection, set rnaTargetsSelected var to true if any exist
                for (var _d = 0, _e = this.selected; _d < _e.length; _d++) {
                    var target = _e[_d];
                    if (target.nucleic_acid_type === 2) {
                        this.rnaTargetsSelected = true;
                        this.extractForm.controls.new_rt.enable();
                        for (var _f = 0, _g = this.extractionArray.controls; _f < _g.length; _f++) {
                            var extraction = _g[_f];
                            extraction.get('inhibition_rna').enable();
                        }
                        break;
                    }
                }
                // reset the replicate form array controls to a blank array so it doesnt get populated twice
                this.replicateArray.controls = [];
                // loop through selected to create replicates form
                for (var _h = 0, _j = this.selected; _h < _j.length; _h++) {
                    var target = _j[_h];
                    var formGroup = this.formBuilder.group({
                        target: this.formBuilder.control(target.id),
                        count: this.formBuilder.control(target.count)
                    });
                    this.replicateArray.push(formGroup);
                }
                this.x = true;
                this.wizardExtract.next();
            }
        }
        if ("custom-next-inhPage" === buttonType) {
            this.inhibitionErrorFlag = false;
            this.inhibitionError = '';
            // if the user has opted to apply existing inhibitions for both DNA and RNA targets
            if (this.createInhibitionForm.value.dna === false && this.createInhibitionForm.value.rna === false) {
                // if create new inhibitions for DNA targets is not selected, loop through the new_sample_extractions object.
                // if any are null, alert user to select an inhibition for each sample extraction.
                if (this.createInhibitionForm.value.dna === false) {
                    for (var _k = 0, _l = this.extractForm.value.new_sample_extractions; _k < _l.length; _k++) {
                        var extraction = _l[_k];
                        if (extraction.inhibition_dna === null) {
                            this.inhibitionError = this.inhibitionErrors.dnaInhibitionSelection;
                            this.inhibitionErrorFlag = true;
                            // alert("Missing one or more inhibition selections. Please make a DNA inhibition selection for each sample.")
                            return;
                        }
                    }
                }
                // if create new inhibitions for RNA targets is not selected and there are RNA targets selected,
                // loop through the new_sample_extractions object. if any are null, alert user to select an inhibition for each sample extraction.
                if (this.createInhibitionForm.value.rna === false && this.rnaTargetsSelected) {
                    for (var _m = 0, _o = this.extractForm.value.new_sample_extractions; _m < _o.length; _m++) {
                        var extraction = _o[_m];
                        if (extraction.inhibition_rna === null) {
                            this.inhibitionError = this.inhibitionErrors.rnaInhibitionSelection;
                            this.inhibitionErrorFlag = true;
                            // alert("Missing one or more inhibition selections. Please make a RNA inhibition selection for each sample.")
                            return;
                        }
                    }
                }
                // if the user has opted to apply existing inhibitions for one target type but not the other
            }
            else if (this.createInhibitionForm.value.dna === true || this.createInhibitionForm.value.rna === true) {
                // if user has opted to create new inhibitions for all DNA targets but has not chosen a date for them
                if (this.createInhibitionForm.value.dna === true && this.createInhibitionForm.value.inhibition_date_dna === '') {
                    this.inhibitionError = this.inhibitionErrors.dnaInhibitionDate;
                    this.inhibitionErrorFlag = true;
                    // alert("Please select a date for DNA inhibitions");
                    return;
                }
                // if user has opted to create new inhibitions for all RNA targets but has not chosen a date for them
                if (this.createInhibitionForm.value.rna === true && this.createInhibitionForm.value.inhibition_date_rna === '') {
                    this.inhibitionError = this.inhibitionErrors.rnaInhibitionDate;
                    this.inhibitionErrorFlag = true;
                    // alert("Please select a date for RNA inhibitions");
                    return;
                }
                // if create new inhibitions for DNA targets is not selected, loop through the new_sample_extractions object.
                // if any are null, alert user to select an inhibition for each sample extraction.
                if (this.createInhibitionForm.value.dna === false) {
                    for (var _p = 0, _q = this.extractForm.value.new_sample_extractions; _p < _q.length; _p++) {
                        var extraction = _q[_p];
                        if (extraction.inhibition_dna === null) {
                            this.inhibitionError = this.inhibitionErrors.dnaInhibitionSelection;
                            this.inhibitionErrorFlag = true;
                            // alert("Missing one or more inhibition selections. Please make a DNA inhibition selection for each sample.")
                            return;
                        }
                    }
                }
                // if create new inhibitions for RNA targets is not selected and there are RNA targets selected,
                // loop through the new_sample_extractions object. if any are null, alert user to select an inhibition for each sample extraction.
                if (this.createInhibitionForm.value.rna === false && this.rnaTargetsSelected) {
                    for (var _r = 0, _s = this.extractForm.value.new_sample_extractions; _r < _s.length; _r++) {
                        var extraction = _s[_r];
                        if (extraction.inhibition_rna === null) {
                            this.inhibitionError = this.inhibitionErrors.rnaInhibitionSelection;
                            this.inhibitionErrorFlag = true;
                            // alert("Missing one or more inhibition selections. Please make a RNA inhibition selection for each sample.")
                            return;
                        }
                    }
                }
            }
            this.populateInhibitions();
        }
        if ("custom-finish-confirmPage" === buttonType) {
            if (this.extractionFinished) {
                this.wizardExtract.finish();
                this.resetExtractWizard();
                return;
            }
            this.submitExtractionBatch();
        }
        if ("custom-previous" === buttonType) {
            this.wizardExtract.previous();
        }
        if ("custom-cancel" === buttonType) {
            this.wizardExtract.cancel();
            this.resetExtractWizard();
        }
    };
    AnalysisBatchesComponent.prototype.reloadAnalysisBatchesTable = function () {
        var _this = this;
        this.allAnalysisBatchSummaries = [];
        // set sample loading to true to put spinner over table while it updates.
        this.analysisBatchesLoading = true;
        // set functional limit for amount of samples to display in the table at once
        var countLimit = app_settings_1.APP_SETTINGS.QUERY_COUNT_LIMIT;
        this._analysisBatchService.queryAnalysisBatchesCount(this.abQueryForm.value)
            .subscribe(function (count) {
            _this.submitLoading = false;
            // if count exceeds limit, show error message
            if (count.count >= countLimit) {
                _this.abQuerySizeErrorFlag = true;
            }
            else if (count.count < countLimit) {
                _this.analysisBatchesLoading = true;
                // if AB query count does not exceed limit, query for actual results, set results to the allAnalysisBatchSummaries var
                _this._analysisBatchService.queryAnalysisBatches(_this.abQueryForm.value)
                    .subscribe(function (analysisBatches) {
                    _this.abCount = count.count;
                    _this.abQueryComplete = true;
                    _this.allAnalysisBatchSummaries = analysisBatches;
                    _this.analysisBatchesLoading = false;
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.analysisBatchesLoading = false;
                });
            }
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
        });
    };
    AnalysisBatchesComponent.prototype.resetExtractWizard = function () {
        // reset extract form, specifying default values for neccesary fields
        this.extractForm.reset({ qpcr_template_volume: 6, qpcr_reaction_volume: 20, new_rt: { template_volume: 8.6, reaction_volume: 50 } });
        // clear out the new_replicates formArray
        var newReplicateControls = this.extractForm.get('new_replicates');
        for (var index = newReplicateControls.length - 1; index >= 0; index--) {
            // Remove all but one occurrence and then add back only what the model dictates.
            newReplicateControls.removeAt(index);
        }
        // clear out the new_sample_extractions formArray
        var newSampleExtractionControls = this.extractForm.get('new_sample_extractions');
        for (var index = newSampleExtractionControls.length - 1; index >= 0; index--) {
            // Remove all but one occurrence and then add back only what the model dictates.
            newSampleExtractionControls.removeAt(index);
        }
        // reset createInhibition form
        this.createInhibitionForm.reset({ dna: false, rna: false });
        // set the extractionFinished var back to false
        this.extractionFinished = false;
        // set the inhibitionFinished var back to false
        this.inhibitionFinished = false;
        // reset the extract wizard
        this.wizardExtract.reset();
    };
    AnalysisBatchesComponent.prototype.deselectAll = function () {
        this.selected = [];
    };
    AnalysisBatchesComponent.prototype.resetFlags = function () {
        this.submitLoading = false;
        this.showBatchExtPosError = false;
        this.showBatchExtPosSuccess = false;
        this.abQuerySizeErrorFlag = false;
        this.abQueryComplete = false;
        this.sampleQuerySizeErrorFlag = false;
    };
    AnalysisBatchesComponent.prototype.retrieveABData = function (abID) {
        // return this._analysisBatchService.getAnalysisBatchData(abID);
        var _this = this;
        this._analysisBatchService.getAnalysisBatchDetail(abID)
            .subscribe(function (analysisBatchDetail) {
            console.log(analysisBatchDetail);
            _this.focusAnalysisBatchData = analysisBatchDetail;
            // this.extractionDetailArray = this.focusAnalysisBatchData.sampleextractions;
        }, function (error) {
            _this.errorMessage = error;
        });
        return this.focusAnalysisBatchData;
    };
    AnalysisBatchesComponent.prototype.resetAB = function () {
        this.selected = [];
        this.abSampleList = [];
        this.abSampleListPopulated = false;
        this.abInhibitionCount = 0;
        this.abInhibitions = [];
        this.sampleInhibitions = [];
        this.abSampleIDList = [];
        this.sampleListEditLocked = false;
    };
    AnalysisBatchesComponent.prototype.reprintWorksheet = function (selectedAB) {
        var _this = this;
        this.printSubmitLoading = true;
        this.noExtractionsFlag = false;
        this.oneExtractionFlag = false;
        this.multipleExtractionsFlag = false;
        // get the AB detail from web services
        this._analysisBatchService.getAnalysisBatchDetail(selectedAB.id)
            .subscribe(function (analysisBatchDetail) {
            _this.selectedAnalysisBatchData = analysisBatchDetail;
            if (analysisBatchDetail.extractionbatches.length === 0) {
                _this.noExtractionsFlag = true;
            }
            else if (analysisBatchDetail.extractionbatches.length === 1) {
                // since only one extractionBatch, can go immediately to populating the rePrintWorksheetData
                _this.rePrintWorksheetData = analysisBatchDetail.extractionbatches[0];
                _this.oneExtractionFlag = true;
            }
            else if (analysisBatchDetail.extractionbatches.length > 1) {
                // because more than one extractionBatch, user input is needed to choose the desired one.
                // set the extractionBatch array, which populates the extraction select form for the user to choose
                _this.extractionBatchArray = analysisBatchDetail.extractionbatches;
                _this.multipleExtractionsFlag = true;
            }
            _this.printSubmitLoading = false;
            _this.showHidePrintModal = true;
        }, function (error) {
            _this.errorMessage = error;
        });
    };
    // called from createWorksheet in success and failure to get samples to ensure worksheet obj gets populated regardless
    AnalysisBatchesComponent.prototype.buildReprintWorksheetObj = function (es, tn) {
        if (this.rePrintWorksheetData.reverse_transcriptions.length === 0) {
            this.rePrintWorksheetData.reverse_transcriptions.push({ reaction_volume: 0, template_volume: 0, rt_date: "N/A" });
            this.rtValuesExist = false;
        }
        var ABWorksheetObj;
        ABWorksheetObj = {
            isReprint: true,
            // TOP TABLE:
            analysis_batch: this.selectedAnalysisBatchData.id,
            creation_date: this.selectedAnalysisBatchData.created_date,
            studies: this.selectedAnalysisBatchData.studies,
            description: this.selectedAnalysisBatchData.analysis_batch_description,
            // extraction_no: (this.selectedAnalysisBatchData.extractionbatches.length) + 1,
            extraction_no: this.rePrintWorksheetData.extraction_number,
            extraction_date: this.rePrintWorksheetData.extraction_date,
            extraction_method: this.rePrintWorksheetData.extraction_method,
            extraction_sample_volume: this.rePrintWorksheetData.extraction_volume,
            eluted_extraction_volume: this.rePrintWorksheetData.elution_volume,
            // Left TABLE:
            extraction_submission: es,
            // Right TABLE:
            targetNames: tn,
            // BOTTOM TABLE:
            reverse_extraction_no: this.rePrintWorksheetData.extraction_number,
            rt_reaction_volume: this.rePrintWorksheetData.reverse_transcriptions[0].reaction_volume,
            rt_template_volume: this.rePrintWorksheetData.reverse_transcriptions[0].template_volume,
            rt_date: this.rePrintWorksheetData.reverse_transcriptions[0].rt_date
        };
        this._analysisBatchService.setWorksheetObject(ABWorksheetObj);
        this.showWorksheet = true;
    };
    AnalysisBatchesComponent.prototype.createWorksheet = function (isReprint, hasMultipleExtractions) {
        var _this = this;
        var targetNameArray = [];
        var ABWorksheetObj;
        if (isReprint) {
            if (hasMultipleExtractions) {
                // set the rePrintWorksheetData to the user selection from the extract batch select form.
                // Note: rePrintWorksheetData was set in the reprintWorksheet function if AB only had one extractionBatch
                for (var _i = 0, _a = this.selectedAnalysisBatchData.extractionbatches; _i < _a.length; _i++) {
                    var extractionBatch = _a[_i];
                    if (extractionBatch.id === Number(this.extractionBatchSelectForm.value.extraction_batch)) {
                        this.rePrintWorksheetData = extractionBatch;
                    }
                }
                ;
            }
            for (var _b = 0, _c = this.rePrintWorksheetData.targets; _b < _c.length; _b++) {
                var item = _c[_b];
                for (var _d = 0, _e = this.allTargets; _d < _e.length; _d++) {
                    var target = _e[_d];
                    if (item.id === target.id) {
                        targetNameArray.push(target.name);
                    }
                }
                ;
            }
            ;
            var sampleList = [];
            sampleList = this.selectedAnalysisBatchData.samples.map(function (ab) { return ab.id; });
            var extractionSubmission_1 = [];
            // TODO: need to look up the first aliquot of every sample in this analysis batch
            this._sampleService.getSampleSelection(sampleList)
                .subscribe(function (sampleSelection) {
                // sort the sample selection by sample ID
                sampleSelection.sort(function (a, b) {
                    return (a.id - b.id);
                });
                for (var _i = 0, _a = _this.rePrintWorksheetData.sampleextractions; _i < _a.length; _i++) {
                    var extraction = _a[_i];
                    for (var _b = 0, sampleSelection_1 = sampleSelection; _b < sampleSelection_1.length; _b++) {
                        var sample = sampleSelection_1[_b];
                        if (sample.id === extraction.sample) {
                            // place the aliquot freezer location data into the extraction_submission
                            if (sample.aliquots) {
                                if (sample.aliquots.length > 0) {
                                    // create an extractionSubmission from it
                                    var extractionSubmit = {
                                        aliquot_string: sample.aliquots[0].aliquot_string,
                                        box: sample.aliquots[0].freezer_location.box,
                                        rack: sample.aliquots[0].freezer_location.rack,
                                        row: sample.aliquots[0].freezer_location.row,
                                        sample: sample.aliquots[0].sample,
                                        spot: sample.aliquots[0].freezer_location.spot,
                                    };
                                    extractionSubmission_1.push(extractionSubmit);
                                } // end if aliquots.length
                            } // end if sample.aliquots
                        }
                    }
                }
                // proceed in opening worksheet modal with the extractionsubmission
                _this.buildReprintWorksheetObj(extractionSubmission_1, targetNameArray);
            }, function (error) {
                // proceed in opening worksheet modal without the extractionsubmission
                _this.buildReprintWorksheetObj(extractionSubmission_1, targetNameArray);
                _this.errorMessage = error;
            });
        }
        else if (!isReprint) {
            // use this.extractWizWorksheetData
            for (var _f = 0, _g = this.extractWizWorksheetData.new_replicates; _f < _g.length; _f++) {
                var replicate = _g[_f];
                for (var _h = 0, _j = this.allTargets; _h < _j.length; _h++) {
                    var target = _j[_h];
                    if (replicate.target === target.id) {
                        targetNameArray.push(target.name);
                    }
                }
            }
            /// lookup inhibition dilution values, append to this.extractWizWorksheetData.new_sample_extractions
            // this.sampleInhibitions
            // check if extraction.inhibition_dna is a number
            for (var _k = 0, _l = this.extractWizWorksheetData.new_sample_extractions; _k < _l.length; _k++) {
                var extraction = _l[_k];
                for (var _m = 0, _o = this.sampleInhibitions; _m < _o.length; _m++) {
                    var inh = _o[_m];
                    if (inh.id === extraction.inhibition_dna) {
                        if (typeof extraction.inhibition_dna === 'number') {
                            extraction.dna_dilution_factor = inh.dilution_factor;
                        }
                        else {
                            extraction.dna_dilution_factor = null;
                        }
                    }
                    if (inh.id === extraction.inhibition_rna) {
                        if (typeof extraction.inhibition_rna === 'number') {
                            extraction.rna_dilution_factor = inh.dilution_factor;
                        }
                        else {
                            extraction.rna_dilution_factor = null;
                        }
                    }
                }
            }
            // sort the sample selection by sample ID
            this.extractWizWorksheetData.new_sample_extractions.sort(function (a, b) {
                return (a.sample - b.sample);
            });
            // local var to hold extraction number
            var extractionNumber = void 0;
            // add 1 to length of extractionBatches array to get current extraction number
            extractionNumber = (this.selectedAnalysisBatchData.extractionbatches.length) + 1;
            // details for AB worksheet:
            ABWorksheetObj = {
                isReprint: false,
                // TOP TABLE:
                analysis_batch: this.extractWizWorksheetData.analysis_batch,
                creation_date: this.selectedAnalysisBatchData.created_date,
                studies: this.selectedAnalysisBatchData.studies,
                description: this.selectedAnalysisBatchData.analysis_batch_description,
                extraction_no: extractionNumber,
                extraction_date: this.extractWizWorksheetData.extraction_date,
                extraction_method: this.allExtractionMethods.filter(function (em) { return em.id = _this.extractWizWorksheetData.extraction_method; })[0],
                extraction_sample_volume: this.extractWizWorksheetData.extraction_volume,
                eluted_extraction_volume: this.extractWizWorksheetData.elution_volume,
                // Left TABLE:
                extraction_submission: this.extractWizWorksheetData.new_sample_extractions,
                // Right TABLE:
                targetNames: targetNameArray,
                // BOTTOM TABLE:
                reverse_extraction_no: extractionNumber,
                rt_reaction_volume: this.extractForm.controls.new_rt.value.reaction_volume,
                rt_template_volume: this.extractForm.controls.new_rt.value.template_volume,
                rt_date: this.extractForm.controls.new_rt.value.rt_date
            };
            this._analysisBatchService.setWorksheetObject(ABWorksheetObj);
            this.showWorksheet = true;
        }
    };
    AnalysisBatchesComponent.prototype.buildAliquotArray = function (index, sampleID, aliquots) {
        var aliquotsArray = this.formBuilder.array([]);
        for (var _i = 0, aliquots_1 = aliquots; _i < aliquots_1.length; _i++) {
            var aliquot = aliquots_1[_i];
            var aliquotFormGroup = this.formBuilder.group({
                aliquot_id: this.formBuilder.control(aliquot.id),
                aliquot_string: this.formBuilder.control(aliquot.aliquot_string),
                rack: this.formBuilder.control(aliquot.freezer_location.rack),
                box: this.formBuilder.control(aliquot.freezer_location.box),
                row: this.formBuilder.control(aliquot.freezer_location.row),
                spot: this.formBuilder.control(aliquot.freezer_location.spot)
            });
            aliquotsArray.push(aliquotFormGroup);
        }
        return aliquotsArray;
    };
    AnalysisBatchesComponent.prototype.extractAB = function (selectedAB) {
        var _this = this;
        this.submitLoading = true;
        this.resetAB();
        this.selectedAnalysisBatchID = selectedAB.id;
        this.extractForm.patchValue({
            analysis_batch: selectedAB.id
        });
        // get the AB detail from web services
        this._analysisBatchService.getAnalysisBatchDetail(selectedAB.id)
            .subscribe(function (analysisBatchDetail) {
            _this.selectedAnalysisBatchData = analysisBatchDetail;
            // reset the extraction form array controls to a blank array
            // this.extractionArray.controls = [];
            // get sample id for each sample in the AB, add those to abSampleList array and abSampleIDList
            if (analysisBatchDetail.samples.length > 0) {
                // populate the abSampleIDList from a simple loop of the samples array of the AB details
                for (var _i = 0, _a = _this.selectedAnalysisBatchData.samples; _i < _a.length; _i++) {
                    var sampleSummary = _a[_i];
                    _this.abSampleIDList.push(sampleSummary.id);
                }
                // query the needed samples to populate the abSampleList array, needed for the extract step
                var formValue = { "id": _this.abSampleIDList };
                _this._sampleService.querySamples(formValue)
                    .subscribe(function (samples) {
                    _this.abSampleList = samples;
                    _this.abSampleListPopulated = true;
                    // the abSampleList must be populated before this is called
                    for (var i = 0; i < _this.abSampleList.length; i++) {
                        var extractionFormGroup = _this.formBuilder.group({
                            sample: _this.formBuilder.control(_this.abSampleList[i].id),
                            inhibition_dna: _this.formBuilder.control(null),
                            inhibition_rna: _this.formBuilder.control(null),
                            aliquot_string: _this.formBuilder.control(null),
                            rack: _this.formBuilder.control(null),
                            box: _this.formBuilder.control(null),
                            row: _this.formBuilder.control(null),
                            spot: _this.formBuilder.control(null),
                            aliquots: _this.buildAliquotArray(i, _this.abSampleList[i].id, _this.abSampleList[i].aliquots)
                        });
                        _this.extractionArray.push(extractionFormGroup);
                    }
                    // call to services to retrieve a list of all inhibitions for each sample in this AB
                    // this must be called AFTER abSampleIDLIst is populated
                    _this._analysisBatchService.getSampleInhibitions(_this.abSampleIDList)
                        .subscribe(function (abSampleInhibitions) {
                        for (var _i = 0, abSampleInhibitions_1 = abSampleInhibitions; _i < abSampleInhibitions_1.length; _i++) {
                            var sample = abSampleInhibitions_1[_i];
                            _this.abSampleInhibitions = abSampleInhibitions;
                            // populate sampleInhibitions var with all the inhibitions associated with any sample in this AB
                            // used for the sample level inhibition apply select dropdowns
                            for (var _a = 0, _b = sample.inhibitions; _a < _b.length; _a++) {
                                var inhibition = _b[_a];
                                _this.sampleInhibitions.push(inhibition);
                            }
                            // check if any of the samples in the list have inhibitions, for inhibitions exist alert
                            // if so set inhibitionsExists var to true
                            if (sample.inhibitions.length > 0) {
                                _this.inhibitionsExist = true;
                            }
                        }
                        _this.submitLoading = false;
                        _this.extractWizardOpen = true;
                    }, function (error) {
                        _this.errorMessage = error;
                    });
                }, function (error) {
                    _this.errorMessage = error;
                });
            }
            else {
                _this.submitLoading = false;
                alert("No samples in this analysis batch. Please add samples before extracting.");
            }
        }, function (error) {
            _this.errorMessage = error;
        });
    };
    AnalysisBatchesComponent.prototype.populateInhibitions = function () {
        this.dnaApplyList = [];
        this.rnaApplyList = [];
        var createInhibitionFormValue = this.createInhibitionForm.value;
        var extractFormValue = this.extractForm.value;
        if (createInhibitionFormValue.dna === true) {
            for (var _i = 0, _a = this.extractForm.value.new_sample_extractions; _i < _a.length; _i++) {
                var extraction = _a[_i];
                extraction.inhibition_dna = createInhibitionFormValue.inhibition_date_dna;
            }
        }
        if (createInhibitionFormValue.rna === true) {
            for (var _b = 0, _c = extractFormValue.new_sample_extractions; _b < _c.length; _b++) {
                var extraction = _c[_b];
                extraction.inhibition_rna = createInhibitionFormValue.inhibition_date_rna;
            }
        }
        for (var _d = 0, _e = extractFormValue.new_sample_extractions; _d < _e.length; _d++) {
            var extraction = _e[_d];
            if (this.isNumberPattern.test(extraction.inhibition_dna)) {
                extraction.inhibition_dna = parseInt(extraction.inhibition_dna, 10);
                this.dnaApplyList.push(extraction.sample);
            }
            if (this.isNumberPattern.test(extraction.inhibition_rna)) {
                extraction.inhibition_rna = parseInt(extraction.inhibition_rna, 10);
                this.rnaApplyList.push(extraction.sample);
            }
            if (extraction.inhibition_dna === 'new') {
                extraction.inhibition_dna = createInhibitionFormValue.inhibition_date_dna;
            }
            if (extraction.inhibition_rna === 'new') {
                extraction.inhibition_rna = createInhibitionFormValue.inhibition_date_rna;
            }
        }
        this.wizardExtract.next();
    };
    AnalysisBatchesComponent.prototype.finishExtractWizard = function (abID, extractFormValue, createInhibitionFormValue) {
        // end finishExtractWizard func
    };
    AnalysisBatchesComponent.prototype.submitExtractionBatch = function () {
        var _this = this;
        this.loadingFlag = true;
        this.extractionErrorFlag = false;
        // copy the extractForm value to the worksheetdata var before altering the extractForm value schema
        // not working - need to use a deep copy appropriate for a nested object
        var extractFormValue = this.extractForm.value;
        this.extractWizWorksheetData = JSON.parse(JSON.stringify(extractFormValue));
        extractFormValue.elution_volume = Number(extractFormValue.elution_volume);
        extractFormValue.extraction_method = Number(extractFormValue.extraction_method);
        extractFormValue.extraction_volume = Number(extractFormValue.extraction_volume);
        extractFormValue.qpcr_reaction_volume = Number(extractFormValue.qpcr_reaction_volume);
        extractFormValue.qpcr_template_volume = Number(extractFormValue.qpcr_template_volume);
        if (extractFormValue.new_rt) {
            extractFormValue.new_rt.reaction_volume = Number(extractFormValue.new_rt.reaction_volume);
            extractFormValue.new_rt.template_volume = Number(extractFormValue.new_rt.template_volume);
        }
        var extractFormValueCopy = extractFormValue;
        for (var _i = 0, _a = extractFormValueCopy.new_sample_extractions; _i < _a.length; _i++) {
            var extraction = _a[_i];
            delete extraction.aliquot_string;
            delete extraction.rack;
            delete extraction.box;
            delete extraction.row;
            delete extraction.spot;
            delete extraction.aliquots;
        }
        // if no RNA targets were included in this extraction, remove the new_rt object from the submission
        // Note: not needed if using the disable new_rt formGroup approach - the group is already absent in this case.
        // if (this.rnaTargetsSelected === false) {
        //   delete extractFormValueCopy.new_rt;
        // }
        this.extractionBatchSubmission = extractFormValueCopy;
        // TEMPORARY solution to lack of a re_extraction_notes field causing null value which server rejects
        this.extractionBatchSubmission.re_extraction_notes = '';
        if (this.extractionBatchSubmission.new_rt) {
            this.extractionBatchSubmission.new_rt.re_rt_notes = '';
        }
        ;
        // submit the extractFormValue to the extraction batch service
        this._extractionBatchService.create(this.extractionBatchSubmission)
            .subscribe(function (extractionBatch) {
            console.log(extractionBatch);
            _this.loadingFlag = false;
            _this.extractionFinished = true;
            // this.reloadAnalysisBatchesTable();
        }, function (error) {
            _this.errorMessage = error;
            _this.loadingFlag = false;
            _this.extractionErrorFlag = true;
        });
    };
    AnalysisBatchesComponent.prototype.onSubmit = function (formID, formValue) {
        var _this = this;
        switch (formID) {
            case 'editAB': {
                this.submitLoading = true;
                this._analysisBatchService.update(formValue)
                    .subscribe(function (ab) {
                    // this.updateSamplesArray(formValue);
                    _this.editABForm.reset();
                    _this.submitLoading = false;
                    _this.showABEditSuccess = true;
                    _this.reloadAnalysisBatchesTable();
                }, function (error) {
                    _this.errorMessage = error.toString();
                    _this.submitLoading = false;
                    _this.showABEditError = true;
                });
            }
        }
    };
    // TODO: adjust this function to update the AB Summary array that populates the AB table
    // private updateABArray(newItem) {
    //   let updateItem = this.allSamples.find(this.findIndexToUpdate, newItem.id);
    //   let index = this.allSamples.indexOf(updateItem);
    //   this.allSamples[index] = newItem;
    // }
    // private findIndexToUpdate(newItem) {
    //   return newItem.id === this;
    // }
    AnalysisBatchesComponent.prototype.searchInArray = function (array, field, value) {
        for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
            var item = array_1[_i];
            if (item[field] === value) {
                // console.log('Duplicate detected. Already existing ID: ' + value);
                return true;
            }
        }
    };
    AnalysisBatchesComponent.prototype.openTargetDetails = function (abID) {
        var _this = this;
        this.targetDetailLoading = true;
        this.showHideNoTargetErrorModal = false;
        this.targetDetailArray = [];
        // check if AB ID matches the current focusAnalysisBatchID.
        // This will mean the desired AB data is already stored in the variable and does not need to be retrieved
        if (abID === this.focusAnalysisBatchID) {
            if (this.extractionBatchArray.length > 0) {
                // build the target list by looping through the targets array of the first extractionBatch and adding all targets to a local array
                // all extraction batches of the same analysis batch have identical target list so only first one is needed
                for (var _i = 0, _a = this.extractionBatchArray[0].targets; _i < _a.length; _i++) {
                    var target = _a[_i];
                    this.targetDetailArray.push(target);
                }
                this.showHideTargetDetailModal = true;
                this.targetDetailLoading = false;
            }
            else {
                this.showHideNoTargetErrorModal = true;
                this.targetDetailLoading = false;
            }
        }
        else {
            // set the focusAnalysisBatchID to the AB ID of the just-clicked AB record
            this.focusAnalysisBatchID = abID;
            // call to retrieve AB detail data
            this._analysisBatchService.getAnalysisBatchDetail(abID)
                .subscribe(function (analysisBatchDetail) {
                if (analysisBatchDetail.extractionbatches.length > 0) {
                    _this.focusAnalysisBatchData = analysisBatchDetail;
                    _this.extractionBatchArray = _this.focusAnalysisBatchData.extractionbatches;
                    // build target list by looping through the targets array of the first extractionBatch and adding all targets to a local array
                    // all extraction batches of the same analysis batch have identical target list so only first one is needed
                    for (var _i = 0, _a = _this.focusAnalysisBatchData.extractionbatches; _i < _a.length; _i++) {
                        var extractionbatch = _a[_i];
                        for (var _b = 0, _c = extractionbatch.targets; _b < _c.length; _b++) {
                            var target = _c[_b];
                            // add only if does not exist yet
                            if (_this.searchInArray(_this.targetDetailArray, 'id', target.id)) {
                                break;
                            }
                            else {
                                _this.targetDetailArray.push(target);
                            }
                        }
                    }
                    // show the target details modal if not showing already
                    if (_this.showHideTargetDetailModal === false) {
                        _this.showHideTargetDetailModal = true;
                    }
                    _this.targetDetailLoading = false;
                }
                else {
                    _this.targetDetailLoading = false;
                    _this.showHideNoTargetErrorModal = true;
                }
            }, function (error) {
                _this.errorMessage = error;
                _this.targetDetailLoading = false;
            });
        }
    };
    AnalysisBatchesComponent.prototype.updateABSampleList = function (editABFormValue, selected) {
        // grab the selected array and patch it in as the samples array for the editABForm
        var samples = [];
        for (var _i = 0, selected_1 = selected; _i < selected_1.length; _i++) {
            var sample = selected_1[_i];
            samples.push(sample.id);
        }
        for (var _a = 0, _b = this.abSampleList; _a < _b.length; _a++) {
            var sample = _b[_a];
            samples.push(sample.id);
        }
        this.editABForm.patchValue({
            new_samples: samples
        });
        this.onSubmit('editAB', this.editABForm.value);
    };
    AnalysisBatchesComponent.prototype.removeSample = function (sample) {
        // remove from abSampleList
        // get index of object with id:37
        var removeIndex = this.abSampleList.map(function (item) { return item.id; }).indexOf(sample.id);
        // remove object
        this.abSampleList.splice(removeIndex, 1);
        // add to filteredSamples
        this.filteredSamples.push(sample);
    };
    AnalysisBatchesComponent.prototype.editAB = function (selectedAB) {
        var _this = this;
        this.editABLoading = true;
        this.showABEditError = false;
        this.showABEditSuccess = false;
        this.resetAB();
        if (selectedAB.summary.extraction_batch_count > 0) {
            this.sampleListEditLocked = true;
        }
        // call to retrieve AB detail data
        this._analysisBatchService.getAnalysisBatchDetail(selectedAB.id)
            .subscribe(function (analysisBatchDetail) {
            console.log(analysisBatchDetail);
            _this.selectedAnalysisBatchData = analysisBatchDetail;
            if (_this.selectedAnalysisBatchData.samples.length > 0) {
                // populate the abSampleIDList from a simple loop of the samples array of the AB details
                for (var _i = 0, _a = _this.selectedAnalysisBatchData.samples; _i < _a.length; _i++) {
                    var sampleSummary = _a[_i];
                    _this.abSampleIDList.push(sampleSummary.id);
                }
                // query the needed samples to populate the abSampleList array
                var formValue = { "id": _this.abSampleIDList };
                _this._sampleService.querySamples(formValue)
                    .subscribe(function (samples) {
                    _this.abSampleList = samples;
                    _this.abSampleListPopulated = true;
                    _this.editABForm.setValue({
                        id: selectedAB.id,
                        name: _this.selectedAB.name,
                        analysis_batch_description: selectedAB.analysis_batch_description,
                        analysis_batch_notes: selectedAB.analysis_batch_notes,
                        new_samples: _this.abSampleIDList
                    });
                    _this.editABLoading = false;
                    // show the edit analysis batch modal if not showing already
                    if (_this.showHideEdit === false) {
                        _this.showHideEdit = true;
                    }
                }, function (error) {
                    _this.errorMessage = error;
                    _this.editABLoading = false;
                });
            }
            else { }
        }, function (error) {
            _this.errorMessage = error;
        });
    };
    AnalysisBatchesComponent.prototype.openBatchExtPos = function (selectedAB) {
        var _this = this;
        this.batchExtPosLoading = true;
        var ext_pos_rna_rt_cq_value;
        // reset the extraction form array controls to a blank array
        this.EB_array.controls = [];
        // call to retrieve AB detail data
        this._analysisBatchService.getAnalysisBatchDetail(selectedAB.id)
            .subscribe(function (analysisBatchDetail) {
            for (var _i = 0, _a = analysisBatchDetail.extractionbatches; _i < _a.length; _i++) {
                var extractionBatch = _a[_i];
                if (extractionBatch.reverse_transcriptions.length > 0) {
                    ext_pos_rna_rt_cq_value = extractionBatch.reverse_transcriptions[0].ext_pos_rna_rt_cq_value;
                }
                else {
                    ext_pos_rna_rt_cq_value = null;
                }
                var ebFormGroup = _this.formBuilder.group({
                    id: _this.formBuilder.control(extractionBatch.id),
                    number: _this.formBuilder.control(extractionBatch.extraction_number),
                    ext_pos_dna_cq_value: _this.formBuilder.control(extractionBatch.ext_pos_dna_cq_value),
                    ext_pos_rna_rt_cq_value: _this.formBuilder.control(ext_pos_rna_rt_cq_value),
                });
                _this.EB_array.push(ebFormGroup);
            }
            // show the edit analysis batch modal if not showing already
            if (_this.batchExtPosModalActive === false) {
                _this.batchExtPosModalActive = true;
            }
            _this.batchExtPosLoading = false;
        }, function (error) {
            _this.errorMessage = error;
            _this.batchExtPosLoading = false;
        });
    };
    AnalysisBatchesComponent.prototype.onSubmitBatchExtPos = function (formValue) {
        var _this = this;
        this.showBatchExtPosSuccess = false;
        this.showBatchExtPosError = false;
        this.submitLoading = true;
        var ebSubmissionArray = [];
        for (var _i = 0, _a = formValue.extraction_batches; _i < _a.length; _i++) {
            var extraction_batch = _a[_i];
            // remove 'number' field only used for display - not needed for PATCH request
            delete extraction_batch.number;
            ebSubmissionArray.push(extraction_batch);
        }
        this._extractionBatchService.bulkUpdate(ebSubmissionArray)
            .subscribe(function (extractionBatches) {
            _this.submitLoading = false;
            _this.showBatchExtPosSuccess = true;
            _this.showBatchExtPosError = false;
        }, function (error) {
            _this.errorMessage = error;
            _this.showBatchExtPosError = true;
            _this.showBatchExtPosSuccess = false;
            _this.submitLoading = false;
        });
    };
    AnalysisBatchesComponent.prototype.onSubmitABQuery = function (formValue) {
        var _this = this;
        this.resetFlags();
        this.submitLoading = true;
        // set functional limit for amount of samples to display in the table at once
        var countLimit = app_settings_1.APP_SETTINGS.QUERY_COUNT_LIMIT;
        this._analysisBatchService.queryAnalysisBatchesCount(formValue)
            .subscribe(function (count) {
            _this.submitLoading = false;
            // if count exceeds limit, show error message
            if (count.count >= countLimit) {
                _this.abQuerySizeErrorFlag = true;
            }
            else if (count.count < countLimit) {
                _this.analysisBatchesLoading = true;
                // if AB query count does not exceed limit, query for actual results, set results to the allAnalysisBatchSummaries var
                _this._analysisBatchService.queryAnalysisBatches(formValue)
                    .subscribe(function (analysisBatches) {
                    _this.abCount = count.count;
                    _this.abQueryComplete = true;
                    _this.allAnalysisBatchSummaries = analysisBatches;
                    _this.analysisBatchesLoading = false;
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.analysisBatchesLoading = false;
                });
            }
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
        });
    };
    AnalysisBatchesComponent.prototype.onSubmitSampleQuery = function (formValue) {
        var _this = this;
        this.resetFlags();
        this.submitLoading = true;
        this.samplesLoading = true;
        // set functional limit for amount of samples to display in the table at once
        var countLimit = 2000;
        this._sampleService.querySamplesCount(formValue)
            .subscribe(function (count) {
            _this.submitLoading = false;
            // if count exceeds limit, show error message
            if (count.count >= countLimit) {
                _this.sampleQuerySizeErrorFlag = true;
            }
            else if (count.count < countLimit) {
                _this.samplesLoading = true;
                _this._sampleService.querySamples(formValue)
                    .subscribe(function (samples) {
                    _this.filteredSamples = samples;
                    _this.samplesLoading = false;
                    // remove the current samples form the filteredSamples list for the table
                    for (var i = _this.filteredSamples.length - 1; i >= 0; i--) {
                        for (var j = 0; j < _this.abSampleList.length; j++) {
                            if (_this.filteredSamples[i] && (_this.filteredSamples[i].id === _this.abSampleList[j].id)) {
                                _this.filteredSamples.splice(i, 1);
                            }
                        }
                    }
                }, function (error) {
                    _this.errorMessage = error;
                    _this.samplesLoading = false;
                });
            }
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
        });
    };
    return AnalysisBatchesComponent;
}());
__decorate([
    core_1.ViewChild("wizardExtract"),
    __metadata("design:type", typeof (_a = typeof clarity_angular_1.Wizard !== "undefined" && clarity_angular_1.Wizard) === "function" && _a || Object)
], AnalysisBatchesComponent.prototype, "wizardExtract", void 0);
__decorate([
    core_1.ViewChild("inhibitionPage"),
    __metadata("design:type", typeof (_b = typeof clarity_angular_1.WizardPage !== "undefined" && clarity_angular_1.WizardPage) === "function" && _b || Object)
], AnalysisBatchesComponent.prototype, "inhibitionPage", void 0);
AnalysisBatchesComponent = __decorate([
    core_1.Component({
        selector: 'app-analysis-batches',
        template: __webpack_require__("./src/app/analysis-batches/analysis-batches.component.html"),
        styles: [__webpack_require__("./src/app/analysis-batches/analysis-batches.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_c = typeof _1.FormBuilder !== "undefined" && _1.FormBuilder) === "function" && _c || Object, typeof (_d = typeof study_service_1.StudyService !== "undefined" && study_service_1.StudyService) === "function" && _d || Object, typeof (_e = typeof sample_service_1.SampleService !== "undefined" && sample_service_1.SampleService) === "function" && _e || Object, typeof (_f = typeof analysis_batch_service_1.AnalysisBatchService !== "undefined" && analysis_batch_service_1.AnalysisBatchService) === "function" && _f || Object, typeof (_g = typeof target_service_1.TargetService !== "undefined" && target_service_1.TargetService) === "function" && _g || Object, typeof (_h = typeof inhibition_service_1.InhibitionService !== "undefined" && inhibition_service_1.InhibitionService) === "function" && _h || Object, typeof (_j = typeof extraction_method_service_1.ExtractionMethodService !== "undefined" && extraction_method_service_1.ExtractionMethodService) === "function" && _j || Object, typeof (_k = typeof extraction_batch_service_1.ExtractionBatchService !== "undefined" && extraction_batch_service_1.ExtractionBatchService) === "function" && _k || Object, typeof (_l = typeof unit_service_1.UnitService !== "undefined" && unit_service_1.UnitService) === "function" && _l || Object])
], AnalysisBatchesComponent);
exports.AnalysisBatchesComponent = AnalysisBatchesComponent;
;
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/analysis-batches/analysis-batches.component.js.map

/***/ }),

/***/ "./src/app/app.component.html":
/***/ (function(module, exports) {

module.exports = "<clr-main-container>\r\n    <clr-header>\r\n        <div class=\"branding\">\r\n            <a href=\"#\" class=\"nav-link\">\r\n                <!--<span class=\"clr-icon ars-logo\"></span>-->\r\n                <span class=\"clr-icon lili-icon\"></span>\r\n                <span class=\"title\">\r\n                    <span style=\"font-size:xx-large; font-weight: bold;\">lili</span>\r\n                    <span style=\"font-size:x-large; font-weight: bold;\">L</span>aboratory for\r\n                    <span style=\"font-size:x-large; font-weight: bold;\">I</span>nfectious Disease and Environment\r\n                    <span style=\"font-size:x-large; font-weight: bold;\">LI</span>MS</span>\r\n            </a>\r\n        </div>\r\n\r\n        <div class=\"header-actions\">\r\n            <clr-dropdown>\r\n                <button class=\"nav-text\" clrDropdownTrigger>\r\n                    <!-- {{ first_name }} {{ last_name }} -->\r\n                    {{currentUser.first_name}} {{currentUser.last_name}}\r\n                    <clr-icon shape=\"caret down\"></clr-icon>\r\n                </button>\r\n                <clr-dropdown-menu *clrIfOpen clrPosition=\"bottom-right\">\r\n                    <a href=\"javascript:void(0)\" (click)=\"onLogout();\" clrDropdownItem>Log out</a>\r\n                </clr-dropdown-menu>\r\n            </clr-dropdown>\r\n        </div>\r\n    </clr-header>\r\n\r\n    <div *ngIf=\"servicesFailFlag\" class=\"alert alert-app-level alert-danger\" style=\"margin-bottom:24px\">\r\n        <div class=\"alert-items\">\r\n            <div class=\"alert-item static\">\r\n                <div class=\"alert-icon-wrapper\">\r\n                    <clr-icon class=\"alert-icon\" shape=\"exclamation-circle\"></clr-icon>\r\n                </div>\r\n                <div class=\"alert-text\">\r\n                    Warning: Lili data services are not responding. Please try again later or contact server administrator.\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"content-container\">\r\n        <div class=\"content-area\">\r\n            <router-outlet></router-outlet>\r\n        </div>\r\n        <nav class=\"sidenav\" [clr-nav-level]=\"1\">\r\n            <section class=\"sidenav-content\">\r\n\r\n                <!-- <a class=\"nav-link \" href=\"#\" [routerLink]=\"['/login']\" routerLinkActive=\"active\">\r\n                    <clr-icon shape=\"login\"></clr-icon> Login\r\n                </a> -->\r\n\r\n                <a class=\"nav-link \" href=\"#\" [routerLink]=\"['/home']\" routerLinkActive=\"active\">\r\n                    <clr-icon shape=\"home\"></clr-icon> Home\r\n                </a>\r\n\r\n                <a class=\"nav-link\" href=\"#\" [routerLink]=\"['/studies']\" routerLinkActive=\"active\">\r\n                    <clr-icon shape=\"view-list\"></clr-icon> Studies\r\n                </a>\r\n\r\n                <a class=\"nav-link\" href=\"#\" [routerLink]=\"['/samples']\" routerLinkActive=\"active\">\r\n                    <clr-icon shape=\"view-list\"></clr-icon> Samples\r\n                </a>\r\n\r\n                <a class=\"nav-link\" href=\"#\" [routerLink]=\"['/analysisbatches']\" routerLinkActive=\"active\">\r\n                    <clr-icon shape=\"view-list\"></clr-icon> Analysis Batches\r\n                </a>\r\n\r\n                <!-- <section class=\"nav-group collapsible\">\r\n                    <input id=\"results\" type=\"checkbox\">\r\n                    <label for=\"results\" ><clr-icon shape=\"line-chart\"></clr-icon> Results</label>\r\n                    <ul class=\"nav-list\">\r\n                        <li>\r\n                            <a class=\"nav-link\" href=\"#\" [routerLink]=\"['/results']\" routerLinkActive=\"active\">\r\n                                <clr-icon shape=\"upload\"></clr-icon> Upload \r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a class=\"nav-link\"><clr-icon shape=\"check-circle\"></clr-icon> Review</a>\r\n                        </li>\r\n                    </ul>\r\n                </section> -->\r\n\r\n                <a class=\"nav-link\" href=\"#\" [routerLink]=\"['/dataupload']\" routerLinkActive=\"active\">\r\n                    <clr-icon shape=\"upload\"></clr-icon> Data Upload\r\n                </a>\r\n\r\n                <a class=\"nav-link\" href=\"#\" [routerLink]=\"['/results']\" routerLinkActive=\"active\">\r\n                    <clr-icon shape=\"line-chart\"></clr-icon> Results\r\n                </a>\r\n\r\n                <a class=\"nav-link\" href=\"#\" [routerLink]=\"['/reports']\" routerLinkActive=\"active\">\r\n                    <clr-icon shape=\"clipboard\"></clr-icon> Reports\r\n                </a>\r\n\r\n                <a class=\"nav-link\" href=\"#\" [routerLink]=\"['/admin']\" routerLinkActive=\"active\">\r\n                    <clr-icon shape=\"cog\"></clr-icon> Admin\r\n                </a>\r\n\r\n                <div class=\"colophon\">\r\n                    <span>lili Lab Information Management System</span>\r\n                    <br>\r\n                    <span>Laboratory for Infectious Disease and Environment</span>\r\n                    <br>\r\n                    <span>Developed by USGS Web Informatics and Mapping (WIM)</span>\r\n                    <br>\r\n                    <span>Version {{liliVersion}}</span>\r\n                </div>\r\n\r\n            </section>\r\n\r\n        </nav>\r\n    </div>\r\n\r\n</clr-main-container>"

/***/ }),

/***/ "./src/app/app.component.scss":
/***/ (function(module, exports) {

module.exports = ".clr-icon.ars-logo {\n  background-image: url(\"data:image/svg+xml,%3C%3Fxml version%3D%221.0%22 encoding%3D%22utf-8%22%3F%3E%0D%3C!-- Generator%3A Adobe Illustrator 13.0.2%2C SVG Export Plug-In . SVG Version%3A 6.00 Build 14948)  --%3E%0D%3C!DOCTYPE svg PUBLIC %22-%2F%2FW3C%2F%2FDTD SVG 1.1%2F%2FEN%22 %22http%3A%2F%2Fwww.w3.org%2FGraphics%2FSVG%2F1.1%2FDTD%2Fsvg11.dtd%22%3E%0D%3Csvg version%3D%221.1%22 id%3D%22Layer_1%22 xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22 xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22 x%3D%220px%22 y%3D%220px%22%0D%09 width%3D%22720px%22 height%3D%22475px%22 viewBox%3D%220 0 142.137 93.613%22 enable-background%3D%22new 0 0 142.137 93.613%22%0D%09 xml%3Aspace%3D%22preserve%22%3E%0D%3Cg%3E%0D%09%3Cpath d%3D%22M61.174%2C31.226H85.09c0%2C0%2C16.559%2C0%2C16.559%2C18.59c0%2C17.299-11.41%2C17.299-11.41%2C17.299s-13.066%2C0-13.066%2C7.174%0D%09%09c0%2C5.895%2C4.785%2C5.893%2C6.625%2C5.893c1.844%2C0%2C38.281%2C0%2C38.281%2C0s7.918%2C0%2C7.918-5.893c0-7.174-8.012-6.672-12.703-7.174%0D%09%09c-5.154-0.553-12.516-2.578-12.516-17.299c0-17.119%2C13.254-18.406%2C17.301-18.59s20.059%2C0%2C20.059%2C0v12.332h-20.246%0D%09%09c0%2C0-4.598%2C0-4.598%2C6.258c0%2C6.07%2C4.785%2C6.07%2C4.785%2C6.07s20.059%2C0%2C20.059%2C18.402c0%2C18.406-18.406%2C18.406-19.688%2C18.406%0D%09%09c-1.289%2C0-40.309%2C0-40.309%2C0s-16.746%2C0-16.746-18.406c0-18.402%2C18.695-18.283%2C20.426-18.402c1.299-0.086%2C4.418%2C0%2C4.418-6.256%0D%09%09c0-6.072-3.867-5.889-5.148-6.072c-1.293-0.186-23.928%2C0-23.928%2C0L61.174%2C31.226z%22%2F%3E%0D%09%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M48.281%2C31.226%22%2F%3E%0D%09%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M61.162%2C31.226%22%2F%3E%0D%09%3Cpath d%3D%22M48.305%2C43.558L27.93%2C43.624c0%2C0-16.258%2C1.938-15.629%2C20.59L0.062%2C64.077c0%2C0-0.141-5.016%2C0-6.672%0D%09%09c0.137-1.656%2C0.092-3.727%2C0.828-6.627c0.73-2.896%2C2.066-6.117%2C2.672-6.994c0.598-0.871%2C2.711-4.094%2C4.781-5.793%0D%09%09c2.07-1.707%2C5.062-3.684%2C8.465-4.832c3.406-1.152%2C7.133-1.934%2C8.145-1.934c1.008%2C0%2C36.852%2C0%2C36.852%2C0l0.094%2C12.332H48.305z%22%2F%3E%0D%09%3Cpath d%3D%22M12.295%2C63.868c0.061%2C1.84%2C3.041%2C17.229%2C17.213%2C17.229c19.324%2C0%2C18.773-16.379%2C18.773-16.379l0.094-22.293L61%2C42.679%0D%09%09l0.162%2C24.156c0%2C0-1.652%2C26.871-29.814%2C26.777C3.375%2C93.522%2C0.062%2C64.812%2C0.062%2C63.985L12.295%2C63.868z%22%2F%3E%0D%09%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M61.162%2C43.558%22%2F%3E%0D%09%3Cpath d%3D%22M48.125%2C31.823c0%2C0%2C1.258-9.25-1.684-13.848c-3.715-5.805-13.617-5.52-13.617-5.52H10.922l0.074-12.449h22.637%0D%09%09c0%2C0%2C16.117-0.621%2C23.113%2C10.055C61.949%2C18.007%2C61%2C32.075%2C61%2C32.075L48.125%2C31.823z%22%2F%3E%0D%3C%2Fg%3E%0D%3C%2Fsvg%3E%0D\"); }\n\n.clr-icon.USDA-logo {\n  background-image: url(\"data:image/svg+xml,%3C%3Fxml version%3D%221.0%22 encoding%3D%22UTF-8%22 standalone%3D%22no%22%3F%3E%0D%3Csvg xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22 version%3D%221.1%22 width%3D%2273.427002%22 height%3D%2250.223%22%3E%0D  %3Cg fill%3D%22%23000066%22%3E%0D    %3Cpath d%3D%22m 16.6555%2C2.043 -0.0903%2C12.6625 c 0%2C5.2625 -3.1297%2C7.305 -7.33473%2C7.305 -3.625%2C0 -8.238282%2C-1.6082 -8.238282%2C-7.0898 V 2.043 C 0.992188%2C1.3301 0.494922%2C0.8973 0%2C0.6492 H 5.94375 C 5.45078%2C0.8973 4.98477%2C1.3301 4.98477%2C2.043 v 12.9711 c 0%2C2.1675 0.74375%2C5.2332 4.76523%2C5.2332 3.6855%2C0 5.0191%2C-2.4153 5.0191%2C-5.4813 L 14.709%2C2.043 c 0%2C-0.7129 -0.3715%2C-1.1457 -0.8375%2C-1.3938 h 3.5926 C 16.9973%2C0.8973 16.6555%2C1.3301 16.6555%2C2.043%22 %2F%3E%0D    %3Cpath d%3D%22m 25.0414%2C22.0105 c -2.8125%2C0 -4.8578%2C-0.9597 -5.9391%2C-1.4843 l -0.1574%2C-5.2321 c 0.5895%2C2.1961 2.4438%2C5.1082 5.666%2C5.1082 3.0661%2C0 3.995%2C-2.1984 3.995%2C-3.716 0%2C-2.9734 -2.6977%2C-3.3758 -5.5102%2C-4.8922 -2.8492%2C-1.5793 -4.0875%2C-3.2492 -4.0875%2C-5.6027 0%2C-4.2102 3.9309%2C-5.882 6.75%2C-5.882 1.052%2C0 3.0926%2C0.2148 4.6727%2C1.1449 l 0.1535%2C4.5816 C 30.1539%2C4.3953 28.3883%2C1.918 25.4137%2C1.918 c -2.3516%2C0 -3.2789%2C1.641 -3.2789%2C2.9726 0%2C1.8879 1.332%2C2.602 4.2402%2C3.9324 2.8824%2C1.3625 5.8832%2C2.384 5.8832%2C6.6887 0%2C3.8692 -3.4074%2C6.4988 -7.2168%2C6.4988%22 %2F%3E%0D    %3Cpath d%3D%22m 41.8867%2C2.1973 c -0.7461%2C0 -2.3851%2C0 -2.8508%2C0.0625 v 17.832 h 2.4762 c 6.9996%2C0 8.9504%2C-4.707 8.9504%2C-9.2266 0%2C-3.7129 -2.1687%2C-8.6679 -8.5758%2C-8.6679 z m 0.3684%2C19.5043 -7.9539%2C0 c 0.4629%2C-0.2789 0.8066%2C-0.7125 0.8066%2C-1.3938 V 2.043 c 0%2C-0.7129 -0.3437%2C-1.1457 -0.8066%2C-1.3938 h 8.2371 c 10.1828%2C0 12.225%2C7.2149 12.225%2C10.216 0%2C5.3879 -4.1473%2C10.8364 -12.5082%2C10.8364%22 %2F%3E%0D    %3Cpath d%3D%22m 61.9086%2C6.6875 c 0%2C0 -2.1066%2C5.2633 -3.0957%2C7.584 h 6.2539 c -1.4539%2C-3.4379 -3.1582%2C-7.584 -3.1582%2C-7.584 z m 4.8906%2C15.0141 c 0.8028%2C-0.4336 0.9613%2C-0.8668 0.7446%2C-1.5157 -0.095%2C-0.3101 -0.8985%2C-2.2004 -1.7641%2C-4.3039 h -7.5859 c -0.9293%2C2.1035 -1.6719%2C3.9313 -1.736%2C4.2723 -0.2766%2C0.743 -0.1226%2C1.1754 0.7145%2C1.5473 h -4.2707 c 0.866%2C-0.5875 1.1429%2C-0.9282 1.4504%2C-1.5157 C 54.9418%2C19.009 63.0855%2C0 63.0855%2C0 c 0%2C0 8.2372%2C19.009 8.793%2C20.1859 0.309%2C0.6489 0.5235%2C0.9899 1.5485%2C1.5157 h -6.6278%22 %2F%3E%0D  %3C%2Fg%3E%0D  %3Cg fill%3D%22%23006600%22%3E%0D    %3Cpath d%3D%22m 72.4973%2C24.6754 c 0%2C0 -45.0547%2C-1.1184 -71.737925%2C13.1008 0%2C0 28.280125%2C-11.184 71.737925%2C-10.0653 v -3.0355%22 %2F%3E%0D    %3Cpath d%3D%22m 0.759375%2C24.6754 c 0%2C0 15.178525%2C0.1594 24.603525%2C3.6746 0%2C0 -19.33126%2C-1.598 -24.603525%2C-0.798 v -2.8766%22 %2F%3E%0D    %3Cpath d%3D%22m 0.759375%2C29.6297 c 0%2C0 10.865225%2C-0.4805 17.414025%2C0.1594 0%2C0 -15.81402%2C1.9156 -17.414025%2C2.7132 v -2.8726%22 %2F%3E%0D    %3Cpath d%3D%22M 65.0309%2C30.1176 C 64.9579%2C30.1129 64.860546%2C30.1215 64.798%2C30.123 51.6965%2C30.3742 24.2219%2C31.9539 0.771875%2C40.2391 l 0%2C9.9839 71.733225%2C0 0%2C-20.1054 c 0%2C0 -2.784%2C-0.086 -7.4742%2C0%22 %2F%3E%0D  %3C%2Fg%3E%0D%3C%2Fsvg%3E%0D\"); }\n\n.clr-icon.clr-clarity-logo {\n  background-image: url(\"data:image/svg+xml,%3C%3Fxml version%3D%221.0%22 encoding%3D%22UTF-8%22 standalone%3D%22no%22%3F%3E%0D%3C!--%0D  ~ Copyright (c) 2016 VMware%2C Inc. All Rights Reserved.%0D  ~ This software is released under MIT license.%0D  ~ The full license information can be found in LICENSE in the root directory of this project.%0D  --%3E%0D%3Csvg width%3D%2236px%22 height%3D%2236px%22 viewBox%3D%220 0 36 36%22 version%3D%221.1%22 xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22 xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%3E%0D    %3C!-- Generator%3A Sketch 40.3 (33839) - http%3A%2F%2Fwww.bohemiancoding.com%2Fsketch --%3E%0D    %3Ctitle%3Elogo%3C%2Ftitle%3E%0D    %3Cdesc%3ECreated with Sketch.%3C%2Fdesc%3E%0D    %3Cdefs%3E%3C%2Fdefs%3E%0D    %3Cg id%3D%22Page-1%22 stroke%3D%22none%22 stroke-width%3D%221%22 fill%3D%22none%22 fill-rule%3D%22evenodd%22%3E%0D        %3Cg id%3D%22logo%22 transform%3D%22translate(0.000000%2C 4.500000)%22%3E%0D            %3Cg id%3D%22large%22 transform%3D%22translate(0.000000%2C 0.044118)%22%3E%0D                %3Cpolyline id%3D%22Fill-3%22 fill%3D%22%230095D3%22 points%3D%2224.7018129 0.0388840336 35.979641 6.71768066 35.9614589 20.2811697 24.7018129 26.9417748 18.0173463 22.9707846 29.6688177 16.4295126 29.6688177 10.5321277 24.9216504 7.92742184 18.0321077 3.99030785%22%3E%3C%2Fpolyline%3E%0D                %3Cpolyline id%3D%22Fill-4%22 fill%3D%22%23F38B00%22 points%3D%2211.3313965 0.0388840336 0.0535685039 6.71768066 0.0717505512 20.2811697 11.3313965 26.9417748 18.0166889 22.970061 7.35448694 16.4295126 7.35448694 10.5321277 18.0324642 3.98991663%22%3E%3C%2Fpolyline%3E%0D                %3Cpolyline id%3D%22Fill-5%22 fill%3D%22%23004B70%22 points%3D%2218.017374 22.9708988 11.4990488 18.9719838 18.0212495 15.1272387 24.9510827 19.0786297%22%3E%3C%2Fpolyline%3E%0D                %3Cpolyline id%3D%22Fill-6%22 fill%3D%22%2398441E%22 points%3D%2218.0314053 3.98921729 11.5267517 7.97364692 18.0439938 11.8578324 24.9058951 7.91831944%22%3E%3C%2Fpolyline%3E%0D            %3C%2Fg%3E%0D        %3C%2Fg%3E%0D    %3C%2Fg%3E%0D%3C%2Fsvg%3E%0D\"); }\n\n.clr-icon.lili-icon {\n  background-image: url(\"data:image/svg+xml,%3C%3Fxml version%3D%221.0%22 encoding%3D%22utf-8%22%3F%3E%0D%3C!-- Generator%3A Adobe Illustrator 17.0.0%2C SVG Export Plug-In . SVG Version%3A 6.00 Build 0)  --%3E%0D%3C!DOCTYPE svg PUBLIC %22-%2F%2FW3C%2F%2FDTD SVG 1.1%2F%2FEN%22 %22http%3A%2F%2Fwww.w3.org%2FGraphics%2FSVG%2F1.1%2FDTD%2Fsvg11.dtd%22%3E%0D%3Csvg version%3D%221.1%22 id%3D%22Layer_1%22 xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22 xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22 x%3D%220px%22 y%3D%220px%22%0D%09 width%3D%22500px%22 height%3D%22500px%22 viewBox%3D%220 0 500 500%22 enable-background%3D%22new 0 0 500 500%22 xml%3Aspace%3D%22preserve%22%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M495.588%2C231.151c-0.266-4.598-2.366-9.578-5.022-14.22c-2.669-4.686-6.036-9.127-9.563-13.448%0D%09c-3.539-4.311-13.26-14.166-13.26-14.166l-7.722-6.463l-3.228-2.499c-4.37-3.456-9.152-6.893-13.879-10.191l-3.182-2.068%0D%09l-11.027-4.521c-2.577-0.848-5.297-1.424-7.995-2.053c-2.748-0.503-5.502-1.068-8.285-1.423c-2.735-0.426-5.647-0.747-8.534-1.069%0D%09l-8.563-0.771l-17.316-1.515c-5.74-0.516-11.399-0.73-17.038-0.765l-4.184%2C0.173l-8.07%2C0.746c-1.398%2C0.266-6.151%2C1.299-6.151%2C1.299%0D%09l-5.369%2C2.289l-3.558%2C1.904l-1.732%2C1.002c-0.579%2C0.336-4.13%2C2.809-4.13%2C2.809l-4.569%2C3.437c-2.303%2C1.745-4.617%2C3.484-6.871%2C5.253%0D%09c-4.515%2C3.533-8.92%2C7.162-12.857%2C11.102l-2.807%2C2.963l-2.779%2C3.354l-2.268%2C3.244c-0.622%2C1.075-1.189%2C2.166-1.792%2C3.248l-0.724%2C3.971%0D%09c-0.151%2C1.443-0.067%2C9.759-0.067%2C9.759l0.797%2C5.088l0.665%2C2.665l2.808%2C8.794l0.744%2C2.132c0.265%2C0.703%2C2.77%2C2.672%2C3.386%2C2.242%0D%09c0.241-0.168%2C12.832-11.453%2C23.144-12.276c14.948-1.193%2C30.502%2C0.373%2C46.828%2C7.745c13.873%2C6.264%2C27.705%2C11.207%2C38.197%2C17.753%0D%09c14.259%2C8.896%2C22.547%2C19.355%2C22.547%2C19.355s3.313-3.377%2C4.446-4.004l3.43-1.846c1.155-0.591%2C2.355-1.075%2C3.539-1.603%0D%09c0%2C0%2C6.001-2.444%2C7.216-2.896l3.664-1.31c1.226-0.426%2C7.444-2.219%2C7.444-2.219c1.249-0.341%2C2.51-0.605%2C3.766-0.913l3.775-0.891%0D%09l7.589-1.493l-0.259%2C0.047l3.564-1.028l3.839-1.47l-0.072%2C0.023l0.154-0.075l2.982-1.59l2.824-2.11c0%2C0%2C3.64-3.313%2C4.487-5.209%0D%09C495.418%2C235.55%2C495.728%2C233.434%2C495.588%2C231.151z%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M79.245%2C275.08c-6.34-0.319-36.902-12.218-59.284-17.525c-32.406-9.048-5.565-34.053%2C2.981-51.892%0D%09c1.792-2.748%2C3.634-5.5%2C5.473-8.266c1.84-2.764%2C3.664-5.546%2C5.468-8.345s3.589-5.619%2C5.347-8.461%0D%09c27.555-34.23%2C77.914-22.288%2C116.58-23.704c2.412%2C0.284%2C4.591%2C0.908%2C6.416%2C2.066c16.58%2C8.791%2C28.481%2C24.254%2C40.51%2C40.075%0D%09c2.406%2C3.165%2C4.816%2C6.343%2C7.258%2C9.459c2.009%2C2.735%2C3.383%2C5.566%2C4.225%2C8.45c0.844%2C2.884%2C1.309%2C5.831%2C1.05%2C8.766%0D%09c-0.306%2C3.468-7.051-1.481-16.114-3.45c-10.082-2.191-21.586-2.441-22.876-1.885c0%2C0-24.314%2C2.671-36.094%2C7.204%0D%09c-10.717%2C4.124-9.378%2C4.6-13.059%2C5.968c-2.115%2C0.787-4.978%2C2.05-10.261%2C4.965c-4.224%2C2.33-7.124%2C5-9.709%2C7.475%0D%09c-0.892%2C0.854-1.797%2C1.61-2.704%2C2.325c-1.721%2C1.356-3.451%2C2.556-5.122%2C3.977C94.084%2C256.743%2C79.924%2C275.133%2C79.245%2C275.08z%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M449.626%2C358.897c-0.192-3.336-0.392-6.729-0.614-10.116c-1.297-19.758-4.352-38.959-13.796-55.247%0D%09c-1.888-3.257-15.728-16.302-19.273-17.964c-13.221-6.195-21.108-10.309-27.686-13.468c-10.464-5.027-17.614-7.643-37.642-12.395%0D%09c-3.266-0.775-11.504-1.524-21.689-0.363c-7.933%2C0.904-12.958%2C5.389-14.076%2C5.802c-5.032%2C1.859%2C1.771%2C22.252%2C3.258%2C29.218%0D%09c1.487%2C6.967%2C12.298%2C73.331%2C12.854%2C79.232c0.613%2C6.493%2C1.544%2C13.717%2C3.103%2C16.937c2.343%2C4.844%2C1.098%2C3.419%2C3.719%2C6.903%0D%09c3.055%2C4.064%2C6.378%2C7.653%2C9.881%2C11.169c8.424%2C10.609%2C17.455%2C11.731%2C24.514%2C13.724c12.664%2C3.574%2C23.308%2C1.363%2C43.458%2C0.709%0D%09c5.452-0.975%2C23.517-0.917%2C26.745-4.43C450.692%2C400.749%2C451.172%2C376.831%2C449.626%2C358.897z%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M312.146%2C381.962c-7.323%2C8.294-12.349%2C18.284-17.29%2C28.032c-1.647%2C3.248-3.539%2C6.309-5.566%2C9.373%0D%09c-1.945%2C3.172-5.223%2C7.709-7.305%2C10.78c-2.083%2C3.071-5.294%2C6.61-7.573%2C9.516c-2.273%2C2.719-4.643%2C4.208-7.52%2C6.533%0D%09c-2.877%2C2.325-3.516%2C2.249-7.118%2C3.431c-3.248%2C1.56-5.97%2C2.279-9.325%2C2.64c-6.71%2C0.724-12.847-2.188-18.847-8.183%0D%09c-17.405-17.392-24.248-40.735-35.783-64.885c-1.435-2.954-4.516-11.119-5.718-14.103c-2.103-5.221-1.958-6.817-2.948-12.061%0D%09c-0.496-2.622-0.386-4.205-0.317-6.847c0.097-3.709%2C1.944-8.978%2C3.447-14.258c0.752-2.64%2C0.987-3.557%2C1.989-6.374%0D%09c8.841-41.552%2C24.574-77.892%2C72.066-67.741c2.934-0.578%2C7.485-1.789%2C10.504-2.864c16.416-1.958%2C20.111%2C10.248%2C24.617%2C23.921%0D%09c1.126%2C3.418%2C10.982%2C61.125%2C11.551%2C63.594c1.663%2C7.214%2C2.299%2C19.211%2C1.895%2C27.278C312.551%2C376.812%2C312.146%2C381.962%2C312.146%2C381.962z%0D%09%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M187.963%2C142.378c17.671%2C3.197%2C25.753%2C21.755%2C31.176%2C36.902c5.717%2C15.967%2C8.203%2C33.387%2C15.551%2C48.732%0D%09c1.03%2C2.15%2C9.192-0.775%2C8.477-2.271c-7.574-15.818-10.218-33.839-16.115-50.31c-5.524-15.429-14.398-33.184-32.138-36.393%0D%09C192.881%2C138.669%2C185.535%2C141.939%2C187.963%2C142.378z%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M200.685%2C142.401c-4.18%2C4.345-11.103%2C5.201-16.724%2C1.647c-19.728-15.461-22.941-38.421-24.735-59.735%0D%09c-1.506-6.183%2C5.419-7.039%2C9.648-3.617c15.498%2C12.041%2C28.331%2C29.87%2C30.317%2C50.937C200.088%2C137.54%2C200.685%2C142.401%2C200.685%2C142.401z%22%0D%09%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M311.472%2C140.563c-38.316%2C8.921-34.888%2C61.707-46.962%2C90.524c-0.646%2C1.543%2C7.444%2C0.741%2C8.368-1.462%0D%09c6.128-14.625%2C7.985-30.977%2C12.174-46.207c3.921-14.255%2C10.6-36.262%2C27.153-40.116C317.219%2C142.131%2C316.431%2C139.407%2C311.472%2C140.563%0D%09z%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M298.379%2C139.359c-0.227%2C4.016%2C2.026%2C6.805%2C5.272%2C8.156c3.263%2C1.446%2C7.516%2C1.419%2C11.219-0.627%0D%09c22.438-14.977%2C38.86-43.399%2C27.498-60.856c-9.379-15.671-23.166%2C11.761-32.22%2C29.728c-1.811%2C3.593-3.432%2C6.808-4.791%2C9.224%0D%09C301.55%2C132.758%2C298.379%2C139.359%2C298.379%2C139.359z%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M257.808%2C91.003c-2.738%2C18.404-1.574%2C7.65-2.656%2C24.084c-0.74%2C11.241-3.253%2C22.446-3.757%2C33.658%0D%09c-1.073%2C23.839%2C0.644%2C47.885-1.495%2C71.664c-0.113%2C1.246%2C8.243%2C0.328%2C8.477-2.271c1.976-21.981%2C0.642-44.249%2C1.296-66.29%0D%09c0.339-11.418%2C0.989-22.901%2C3.004-34.159c1.193-6.663%2C0.698-14.765%2C1.686-22.108C265.226%2C89.168%2C260.843%2C93.111%2C257.808%2C91.003z%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M258.408%2C127.95c-7.64-2.632-9.962-11.037-12.285-19.442c-2.849-19.608%2C8.291-74.432%2C19.545-57.777%0D%09c10.985%2C16.257%2C6.78%2C47.364-2.774%2C67.323C260.387%2C123.532%2C258.408%2C127.95%2C258.408%2C127.95z%22%2F%3E%0D%3Cpath fill%3D%22%23FFFFFF%22 d%3D%22M175.975%2C394.934c-1.958%2C1.404-3.283%2C2.888-5.518%2C4.266c-4.057%2C2.501-7.219%2C4.123-10.305%2C5.413%0D%09c-5.145%2C2.15-8.376%2C4.035-18.321%2C5.885c-2.964%2C0.551-16.134%2C1.1-19.176%2C1.381c-3.043%2C0.279-8.478%2C1.193-11.229%2C1.936%0D%09c-8.722%2C2.903-17.393%2C6.932-24.902%2C9.786c-6.828%2C2.594-12.754%2C4.379-15.707%2C0.322c-4.588-5.794-3.443-14.568-2.26-23.303%0D%09c1.449-10.704%2C3.639-21.096%2C3.807-22.724c0.848-8.212%2C0.51-7.813%2C0.841-16.974c0.11-3.054-0.307-29.267%2C0.038-32.156%0D%09c2.511-15.26%2C6.591-23.669%2C12.345-31.553c4.301-5.895%2C8.991-11.887%2C17.63-18.107c2.899-2.087%2C15.943-12.468%2C19.143-13.957%0D%09c3.75-1.973%2C9.132-4.85%2C13.154-6.376c2.975-1.17%2C16.877-6.005%2C20.111-6.665c10.395-2.001%2C19.78-4.371%2C30.914-2.909%0D%09c3.715%2C0.488%2C16.86%2C2.776%2C17.012%2C6.436c0.221%2C5.307-15.668%2C15.473-20.169%2C26.307c-6.698%2C16.118-9.727%2C20.96-14.305%2C44.897%0D%09c-1.575%2C8.237-4.004%2C15.889-5.565%2C23.005C159.979%2C365.95%2C178.633%2C392.767%2C175.975%2C394.934z%22%2F%3E%0D%3C%2Fsvg%3E%0D\"); }\n\n.alert-icon, .clr-icon {\n  display: inline-block;\n  height: 30px;\n  width: 30px;\n  padding: 0;\n  background-repeat: no-repeat;\n  background-size: contain;\n  vertical-align: middle; }\n\n.sidenav-content {\n  position: relative;\n  padding-bottom: 50px; }\n\n.colophon {\n  font-size: x-small;\n  padding: 5px;\n  bottom: 2px;\n  position: absolute;\n  vertical-align: bottom;\n  height: 50px;\n  line-height: 1.5em; }\n\n@media only screen and (max-height: 450px) {\n  .colophon {\n    display: none; } }\n"

/***/ }),

/***/ "./src/app/app.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
var study_service_1 = __webpack_require__("./src/app/studies/study.service.ts");
var sample_service_1 = __webpack_require__("./src/app/samples/sample.service.ts");
var analysis_batch_service_1 = __webpack_require__("./src/app/analysis-batches/analysis-batch.service.ts");
var server_test_service_1 = __webpack_require__("./src/app/SHARED/server-test.service.ts");
var authentication_service_1 = __webpack_require__("./src/app/authentication/authentication.service.ts");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var current_user_service_1 = __webpack_require__("./src/app/authentication/current-user.service.ts");
var AppComponent = (function () {
    function AppComponent(router, _serverTestService, authenticationService, currentUserService) {
        var _this = this;
        this.router = router;
        this._serverTestService = _serverTestService;
        this.authenticationService = authenticationService;
        this.currentUserService = currentUserService;
        this.servicesFailFlag = false;
        this.liliVersion = '';
        currentUserService.currentUser.subscribe(function (user) {
            _this.currentUser = user;
        });
    }
    AppComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.liliVersion = app_settings_1.APP_SETTINGS.VERSION;
        this._serverTestService.testLIDEServices()
            .subscribe(function (response) {
            // console.log(response);
        }, function (error) {
            console.log(error);
            _this.servicesFailFlag = true;
        });
        if ((!!sessionStorage.getItem('username') && !!sessionStorage.getItem('password'))) {
            this.currentUserService.updateCurrentUser({
                "first_name": sessionStorage.getItem('first_name'),
                "last_name": sessionStorage.getItem('last_name')
            });
        }
        else {
            this.currentUserService.updateCurrentUser({
                "first_name": "Logged Out",
                "last_name": ""
            });
        }
    };
    AppComponent.prototype.onLogout = function () {
        this.authenticationService.logout();
    };
    return AppComponent;
}());
AppComponent = __decorate([
    core_1.Component({
        selector: 'my-app',
        template: __webpack_require__("./src/app/app.component.html"),
        styles: [__webpack_require__("./src/app/app.component.scss")],
        providers: [
            study_service_1.StudyService,
            sample_service_1.SampleService,
            analysis_batch_service_1.AnalysisBatchService
        ]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof router_1.Router !== "undefined" && router_1.Router) === "function" && _a || Object, typeof (_b = typeof server_test_service_1.ServerTestService !== "undefined" && server_test_service_1.ServerTestService) === "function" && _b || Object, typeof (_c = typeof authentication_service_1.AuthenticationService !== "undefined" && authentication_service_1.AuthenticationService) === "function" && _c || Object, typeof (_d = typeof current_user_service_1.CurrentUserService !== "undefined" && current_user_service_1.CurrentUserService) === "function" && _d || Object])
], AppComponent);
exports.AppComponent = AppComponent;
var _a, _b, _c, _d;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/app.component.js.map

/***/ }),

/***/ "./src/app/app.module.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var animations_1 = __webpack_require__("./node_modules/@angular/platform-browser/@angular/platform-browser/animations.es5.js");
var platform_browser_1 = __webpack_require__("./node_modules/@angular/platform-browser/@angular/platform-browser.es5.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var forms_2 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var clarity_angular_1 = __webpack_require__("./node_modules/clarity-angular/clarity-angular.es5.js");
var app_component_1 = __webpack_require__("./src/app/app.component.ts");
var app_routing_1 = __webpack_require__("./src/app/app.routing.ts");
var home_component_1 = __webpack_require__("./src/app/home/home.component.ts");
var studies_component_1 = __webpack_require__("./src/app/studies/studies.component.ts");
var samples_component_1 = __webpack_require__("./src/app/samples/samples.component.ts");
var analysis_batches_component_1 = __webpack_require__("./src/app/analysis-batches/analysis-batches.component.ts");
var results_component_1 = __webpack_require__("./src/app/results/results.component.ts");
var reports_component_1 = __webpack_require__("./src/app/reports/reports.component.ts");
var admin_component_1 = __webpack_require__("./src/app/admin/admin.component.ts");
var display_value_pipe_1 = __webpack_require__("./src/app/SHARED/display-value.pipe.ts");
var study_filter_component_1 = __webpack_require__("./src/app/FILTERS/study-filter/study-filter.component.ts");
var sample_type_filter_component_1 = __webpack_require__("./src/app/FILTERS/sample-type-filter/sample-type-filter.component.ts");
var matrix_type_filter_component_1 = __webpack_require__("./src/app/FILTERS/matrix-type-filter/matrix-type-filter.component.ts");
var sampler_name_filter_component_1 = __webpack_require__("./src/app/FILTERS/sampler-name-filter/sampler-name-filter.component.ts");
var filter_type_filter_component_1 = __webpack_require__("./src/app/FILTERS/filter-type-filter/filter-type-filter.component.ts");
var range_filter_component_1 = __webpack_require__("./src/app/FILTERS/range-filter/range-filter.component.ts");
var collection_start_date_filter_component_1 = __webpack_require__("./src/app/FILTERS/collection-start-date-filter/collection-start-date-filter.component.ts");
var collection_end_date_filter_component_1 = __webpack_require__("./src/app/FILTERS/collection-end-date-filter/collection-end-date-filter.component.ts");
var filter_born_on_date_filter_component_1 = __webpack_require__("./src/app/FILTERS/filter-born-on-date-filter/filter-born-on-date-filter.component.ts");
var date_added_filter_component_1 = __webpack_require__("./src/app/FILTERS/date-added-filter/date-added-filter.component.ts");
var date_updated_filter_component_1 = __webpack_require__("./src/app/FILTERS/date-updated-filter/date-updated-filter.component.ts");
var analysis_batch_detail_component_1 = __webpack_require__("./src/app/analysis-batches/analysis-batch-detail/analysis-batch-detail.component.ts");
var concentration_types_component_1 = __webpack_require__("./src/app/admin/concentration-types/concentration-types.component.ts");
var concentration_types_resolve_1 = __webpack_require__("./src/app/concentration-types/concentration-types.resolve.ts");
var concentration_types_service_1 = __webpack_require__("./src/app/concentration-types/concentration-types.service.ts");
var units_component_1 = __webpack_require__("./src/app/admin/units/units.component.ts");
var extraction_methods_component_1 = __webpack_require__("./src/app/admin/extraction-methods/extraction-methods.component.ts");
var matrix_types_component_1 = __webpack_require__("./src/app/admin/matrix-types/matrix-types.component.ts");
var sample_types_component_1 = __webpack_require__("./src/app/admin/sample-types/sample-types.component.ts");
var filter_types_component_1 = __webpack_require__("./src/app/admin/filter-types/filter-types.component.ts");
var targets_component_1 = __webpack_require__("./src/app/admin/targets/targets.component.ts");
var users_component_1 = __webpack_require__("./src/app/admin/users/users.component.ts");
var unit_resolve_1 = __webpack_require__("./src/app/units/unit.resolve.ts");
var unit_service_1 = __webpack_require__("./src/app/units/unit.service.ts");
var extraction_method_service_1 = __webpack_require__("./src/app/extraction-batches/extraction-method.service.ts");
var extraction_method_resolve_1 = __webpack_require__("./src/app/extraction-batches/extraction-method.resolve.ts");
var filter_type_service_1 = __webpack_require__("./src/app/SHARED/filter-type.service.ts");
var filter_type_resolve_1 = __webpack_require__("./src/app/SHARED/filter-type.resolve.ts");
var matrix_resolve_1 = __webpack_require__("./src/app/SHARED/matrix.resolve.ts");
var matrix_service_1 = __webpack_require__("./src/app/SHARED/matrix.service.ts");
var sample_type_resolve_1 = __webpack_require__("./src/app/SHARED/sample-type.resolve.ts");
var sample_type_service_1 = __webpack_require__("./src/app/SHARED/sample-type.service.ts");
var target_service_1 = __webpack_require__("./src/app/targets/target.service.ts");
var target_resolve_1 = __webpack_require__("./src/app/targets/target.resolve.ts");
var user_service_1 = __webpack_require__("./src/app/SHARED/user.service.ts");
var user_resolve_1 = __webpack_require__("./src/app/SHARED/user.resolve.ts");
var analysis_batch_worksheet_component_1 = __webpack_require__("./src/app/analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component.ts");
var inhibition_service_1 = __webpack_require__("./src/app/inhibitions/inhibition.service.ts");
var extraction_batch_service_1 = __webpack_require__("./src/app/extraction-batches/extraction-batch.service.ts");
var pcr_replicate_batch_service_1 = __webpack_require__("./src/app/pcr-replicates/pcr-replicate-batch.service.ts");
var final_concentrated_sample_volume_service_1 = __webpack_require__("./src/app/fcsv/final-concentrated-sample-volume.service.ts");
var aliquot_service_1 = __webpack_require__("./src/app/aliquots/aliquot.service.ts");
var freezer_locations_service_1 = __webpack_require__("./src/app/aliquots/freezer-locations.service.ts");
var freezer_service_1 = __webpack_require__("./src/app/aliquots/freezer.service.ts");
var sample_label_component_1 = __webpack_require__("./src/app/samples/sample-label/sample-label.component.ts");
var pcr_replicate_service_1 = __webpack_require__("./src/app/pcr-replicates/pcr-replicate.service.ts");
var server_test_service_1 = __webpack_require__("./src/app/SHARED/server-test.service.ts");
var record_type_filter_component_1 = __webpack_require__("./src/app/FILTERS/record-type-filter/record-type-filter.component.ts");
var record_type_service_1 = __webpack_require__("./src/app/SHARED/record-type.service.ts");
var multi_study_filter_component_1 = __webpack_require__("./src/app/FILTERS/multi-study-filter/multi-study-filter.component.ts");
var data_upload_component_1 = __webpack_require__("./src/app/data-upload/data-upload.component.ts");
var final_sample_mean_concentration_service_1 = __webpack_require__("./src/app/results/final-sample-mean-concentration.service.ts");
var authentication_component_1 = __webpack_require__("./src/app/authentication/authentication.component.ts");
var authentication_service_1 = __webpack_require__("./src/app/authentication/authentication.service.ts");
var authentication_guard_1 = __webpack_require__("./src/app/authentication/authentication.guard.ts");
var current_user_service_1 = __webpack_require__("./src/app/authentication/current-user.service.ts");
var target_filter_component_1 = __webpack_require__("./src/app/FILTERS/target-filter/target-filter.component.ts");
var reverse_transcription_service_1 = __webpack_require__("./src/app/SHARED/reverse-transcription.service.ts");
var quality_control_report_service_1 = __webpack_require__("./src/app/reports/quality-control-report.service.ts");
var control_results_report_service_1 = __webpack_require__("./src/app/reports/control-results-report.service.ts");
var report_file_service_1 = __webpack_require__("./src/app/reports/report-file.service.ts");
var report_types_service_1 = __webpack_require__("./src/app/reports/report-types.service.ts");
var report_status_service_1 = __webpack_require__("./src/app/reports/report-status.service.ts");
var AppModule = (function () {
    function AppModule() {
    }
    return AppModule;
}());
AppModule = __decorate([
    core_1.NgModule({
        declarations: [
            app_component_1.AppComponent,
            home_component_1.HomeComponent,
            studies_component_1.StudiesComponent,
            samples_component_1.SamplesComponent,
            analysis_batches_component_1.AnalysisBatchesComponent,
            results_component_1.ResultsComponent,
            reports_component_1.ReportsComponent,
            admin_component_1.AdminComponent,
            display_value_pipe_1.DisplayValuePipe,
            study_filter_component_1.StudyFilter,
            sample_type_filter_component_1.SampleTypeFilter,
            matrix_type_filter_component_1.MatrixTypeFilter,
            sampler_name_filter_component_1.SamplerNameFilter,
            filter_type_filter_component_1.FilterTypeFilter,
            range_filter_component_1.RangeFilter,
            collection_start_date_filter_component_1.CollectionStartDateFilter,
            collection_end_date_filter_component_1.CollectionEndDateFilter,
            filter_born_on_date_filter_component_1.FilterBornOnDateFilter,
            date_added_filter_component_1.DateAddedFilter,
            date_updated_filter_component_1.DateUpdatedFilter,
            analysis_batch_detail_component_1.AnalysisBatchDetailComponent,
            concentration_types_component_1.ConcentrationTypesComponent,
            units_component_1.UnitsComponent,
            extraction_methods_component_1.ExtractionMethodsComponent,
            matrix_types_component_1.MatrixTypesComponent,
            sample_types_component_1.SampleTypesComponent,
            filter_types_component_1.FilterTypesComponent,
            targets_component_1.TargetsComponent,
            users_component_1.UsersComponent,
            analysis_batch_worksheet_component_1.AnalysisBatchWorksheetComponent,
            sample_label_component_1.SampleLabelComponent,
            record_type_filter_component_1.RecordTypeFilter,
            multi_study_filter_component_1.MultiStudyFilterComponent,
            data_upload_component_1.DataUploadComponent,
            authentication_component_1.AuthenticationComponent,
            target_filter_component_1.TargetFilter
        ],
        imports: [
            animations_1.BrowserAnimationsModule,
            platform_browser_1.BrowserModule,
            forms_1.FormsModule,
            forms_2.ReactiveFormsModule,
            http_1.HttpModule,
            clarity_angular_1.ClarityModule.forRoot(),
            app_routing_1.ROUTING
        ],
        providers: [
            authentication_service_1.AuthenticationService,
            concentration_types_service_1.ConcentrationTypeService,
            concentration_types_resolve_1.ConcentrationResolve,
            unit_service_1.UnitService,
            unit_resolve_1.UnitResolve,
            inhibition_service_1.InhibitionService,
            extraction_method_service_1.ExtractionMethodService,
            extraction_batch_service_1.ExtractionBatchService,
            aliquot_service_1.AliquotService,
            freezer_service_1.FreezerService,
            freezer_locations_service_1.FreezerLocationsService,
            extraction_method_resolve_1.ExtractionResolve,
            filter_type_service_1.FilterTypeService,
            pcr_replicate_batch_service_1.PcrReplicateBatchService,
            pcr_replicate_service_1.PcrReplicateService,
            final_concentrated_sample_volume_service_1.FinalConcentratedSampleVolumeService,
            filter_type_resolve_1.FilterResolve,
            matrix_service_1.MatrixService,
            matrix_resolve_1.MatrixResolve,
            sample_type_service_1.SampleTypeService,
            sample_type_resolve_1.SampleTypeResolve,
            target_service_1.TargetService,
            target_resolve_1.TargetResolve,
            user_service_1.UserService,
            user_resolve_1.UserResolve,
            server_test_service_1.ServerTestService,
            record_type_service_1.RecordTypeService,
            final_sample_mean_concentration_service_1.FinalSampleMeanConcentrationService,
            quality_control_report_service_1.QualityControlReportService,
            control_results_report_service_1.ControlResultsReportService,
            reverse_transcription_service_1.ReverseTranscriptionService,
            authentication_guard_1.AuthenticationGuard,
            current_user_service_1.CurrentUserService,
            report_file_service_1.ReportFileService,
            report_types_service_1.ReportTypesService,
            report_status_service_1.ReportStatusService
        ],
        bootstrap: [app_component_1.AppComponent]
    })
], AppModule);
exports.AppModule = AppModule;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/app.module.js.map

/***/ }),

/***/ "./src/app/app.routing.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var router_1 = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
var authentication_component_1 = __webpack_require__("./src/app/authentication/authentication.component.ts");
var authentication_guard_1 = __webpack_require__("./src/app/authentication/authentication.guard.ts");
var home_component_1 = __webpack_require__("./src/app/home/home.component.ts");
var studies_component_1 = __webpack_require__("./src/app/studies/studies.component.ts");
var samples_component_1 = __webpack_require__("./src/app/samples/samples.component.ts");
var analysis_batches_component_1 = __webpack_require__("./src/app/analysis-batches/analysis-batches.component.ts");
var results_component_1 = __webpack_require__("./src/app/results/results.component.ts");
var reports_component_1 = __webpack_require__("./src/app/reports/reports.component.ts");
var admin_component_1 = __webpack_require__("./src/app/admin/admin.component.ts");
var concentration_types_resolve_1 = __webpack_require__("./src/app/concentration-types/concentration-types.resolve.ts");
var unit_resolve_1 = __webpack_require__("./src/app/units/unit.resolve.ts");
var extraction_method_resolve_1 = __webpack_require__("./src/app/extraction-batches/extraction-method.resolve.ts");
var filter_type_resolve_1 = __webpack_require__("./src/app/SHARED/filter-type.resolve.ts");
var matrix_resolve_1 = __webpack_require__("./src/app/SHARED/matrix.resolve.ts");
var sample_type_resolve_1 = __webpack_require__("./src/app/SHARED/sample-type.resolve.ts");
var target_resolve_1 = __webpack_require__("./src/app/targets/target.resolve.ts");
var user_resolve_1 = __webpack_require__("./src/app/SHARED/user.resolve.ts");
var analysis_batch_worksheet_component_1 = __webpack_require__("./src/app/analysis-batches/analysis-batch-worksheet/analysis-batch-worksheet.component.ts");
var data_upload_component_1 = __webpack_require__("./src/app/data-upload/data-upload.component.ts");
exports.ROUTES = [
    { path: 'login', component: authentication_component_1.AuthenticationComponent },
    { path: '', redirectTo: 'login', pathMatch: 'full' },
    { path: 'home', component: home_component_1.HomeComponent, canActivate: [authentication_guard_1.AuthenticationGuard] },
    { path: 'studies', component: studies_component_1.StudiesComponent, canActivate: [authentication_guard_1.AuthenticationGuard] },
    { path: 'samples', component: samples_component_1.SamplesComponent, canActivate: [authentication_guard_1.AuthenticationGuard] },
    { path: 'analysisbatches', component: analysis_batches_component_1.AnalysisBatchesComponent, canActivate: [authentication_guard_1.AuthenticationGuard] },
    { path: 'analysisbatchworksheet/:id', component: analysis_batch_worksheet_component_1.AnalysisBatchWorksheetComponent, canActivate: [authentication_guard_1.AuthenticationGuard] },
    { path: 'dataupload', component: data_upload_component_1.DataUploadComponent, canActivate: [authentication_guard_1.AuthenticationGuard] },
    { path: 'results', component: results_component_1.ResultsComponent, canActivate: [authentication_guard_1.AuthenticationGuard] },
    { path: 'reports', component: reports_component_1.ReportsComponent, canActivate: [authentication_guard_1.AuthenticationGuard] },
    {
        path: 'admin',
        component: admin_component_1.AdminComponent,
        canActivate: [authentication_guard_1.AuthenticationGuard],
        resolve: {
            concentrationTypes: concentration_types_resolve_1.ConcentrationResolve,
            units: unit_resolve_1.UnitResolve,
            extractionMethods: extraction_method_resolve_1.ExtractionResolve,
            filterTypes: filter_type_resolve_1.FilterResolve,
            matrixTypes: matrix_resolve_1.MatrixResolve,
            sampleTypes: sample_type_resolve_1.SampleTypeResolve,
            targets: target_resolve_1.TargetResolve,
            users: user_resolve_1.UserResolve
        }
    }
];
exports.ROUTING = router_1.RouterModule.forRoot(exports.ROUTES);
//# sourceMappingURL=D:/projects/lili/src/src/src/app/app.routing.js.map

/***/ }),

/***/ "./src/app/app.settings.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var environment_1 = __webpack_require__("./src/environments/environment.ts");
var APP_SETTINGS = APP_SETTINGS_1 = (function () {
    function APP_SETTINGS() {
    }
    Object.defineProperty(APP_SETTINGS, "environment", {
        // private static _API_ENDPOINT: string = APP_SETTINGS._environment === 'production' ? 'https://lidetest.wim.usgs.gov/lideservices/' : 'https://lidetest.wim.usgs.gov/lideservices/';
        set: function (env) { this._environment = env; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "API_USERNAME", {
        get: function () { return 'admin'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "API_PASSWORD", {
        get: function () { return 'lideadmin'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "IS_LOGGEDIN", {
        get: function () { return (!!sessionStorage.getItem('username') && !!sessionStorage.getItem('password')); },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "QUERY_COUNT_LIMIT", {
        get: function () { return 2000; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "ROOT_URL", {
        get: function () { return this._API_ENDPOINT; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "AUTH_URL", {
        get: function () { return this._API_ENDPOINT + 'auth/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "STUDIES_URL", {
        get: function () { return this._API_ENDPOINT + 'studies/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "SAMPLES_URL", {
        get: function () { return this._API_ENDPOINT + 'samples/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "FREEZERS_URL", {
        get: function () { return this._API_ENDPOINT + 'freezers/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "FREEZER_LOCATIONS_URL", {
        get: function () { return this._API_ENDPOINT + 'freezerlocations/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "ALIQUOTS_URL", {
        get: function () { return this._API_ENDPOINT + 'aliquots/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "SAMP_TYPES_URL", {
        get: function () { return this._API_ENDPOINT + 'sampletypes/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "MATRICES_URL", {
        get: function () { return this._API_ENDPOINT + 'matrices/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "SAMPLE_ENV_URL", {
        get: function () { return this._API_ENDPOINT + 'sampleenvironments/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "UNITS_URL", {
        get: function () { return this._API_ENDPOINT + 'units/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "SAMP_LOC_URL", {
        get: function () { return this._API_ENDPOINT + 'samplelocations/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "FCSV_URL", {
        get: function () { return this._API_ENDPOINT + 'finalconcentratedsamplevolumes/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "FILTER_TYPES_URL", {
        get: function () { return this._API_ENDPOINT + 'filtertypes/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "RECORD_TYPES_URL", {
        get: function () { return this._API_ENDPOINT + 'recordtypes/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "WATER_TYPES_URL", {
        get: function () { return this._API_ENDPOINT + 'watertypes/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "ANALYSIS_BATCH_URL", {
        get: function () { return this._API_ENDPOINT + 'analysisbatches/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "ANALYSIS_BATCH_DETAIL_URL", {
        get: function () { return this._API_ENDPOINT + 'analysisbatchdetail/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "ANALYSIS_BATCH_SUMMARY_URL", {
        get: function () { return this._API_ENDPOINT + 'analysisbatchsummary/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "EXTRACTIONS_URL", {
        get: function () { return this._API_ENDPOINT + 'sampleextractions/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "EXTRACTION_BATCHES_URL", {
        get: function () { return this._API_ENDPOINT + 'extractionbatches/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "EXTRACTION_METHODS_URL", {
        get: function () { return this._API_ENDPOINT + 'extractionmethods/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "INHIBITIONS_URL", {
        get: function () { return this._API_ENDPOINT + 'inhibitions/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "SAMPLE_INHIBITIONS_URL", {
        get: function () { return this._API_ENDPOINT + 'sampleinhibitions'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "INHIBITIONS_RAW_RESULTS_URL", {
        get: function () { return this._API_ENDPOINT + 'inhibitionscalculatedilutionfactor/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "CONCENTRATION_TYPES_URL", {
        get: function () { return this._API_ENDPOINT + 'concentrationtype/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "RT_URL", {
        get: function () { return this._API_ENDPOINT + 'reversetranscriptions/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "REPLICATES_URL", {
        get: function () { return this._API_ENDPOINT + 'pcrreplicates/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "REPLICATE_BATCH_URL", {
        get: function () { return this._API_ENDPOINT + 'pcrreplicatebatches/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "STANDARD_CURVES_URL", {
        get: function () { return this._API_ENDPOINT + 'standardcurves/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "TARGETS_URL", {
        get: function () { return this._API_ENDPOINT + 'targets/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "CONTROLS_URL", {
        get: function () { return this._API_ENDPOINT + 'controls/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "OTHER_ANALYSES_URL", {
        get: function () { return this._API_ENDPOINT + 'otheranalyses/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "USERS_URL", {
        get: function () { return this._API_ENDPOINT + 'users/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "FINALSAMPLEMEANCONCENTRATIONS_URL", {
        get: function () { return this._API_ENDPOINT + 'finalsamplemeanconcentrations/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "QUALITY_CONTROL_REPORT_URL", {
        get: function () { return this._API_ENDPOINT + 'qualitycontrolreport/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "CONTROL_RESULTS_REPORT_URL", {
        get: function () { return this._API_ENDPOINT + 'controlresultsreport/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "REPORT_FILES_URL", {
        get: function () { return this._API_ENDPOINT + 'reportfiles/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "REPORT_TYPES_URL", {
        get: function () { return this._API_ENDPOINT + 'reporttypes/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "REPORT_STATUSES_URL", {
        get: function () { return this._API_ENDPOINT + 'statuses/'; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "VERSION", {
        get: function () {
            // return require('../../package.json').version
            return environment_1.environment.version;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(APP_SETTINGS, "NUCLEIC_ACID_TYPES", {
        get: function () {
            return [
                { "id": 1, "name": "DNA" },
                { "id": 2, "name": "RNA" }
            ];
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "SAMPLE_RECORD_TYPES", {
        get: function () {
            return [
                { "id": 1, "name": "Data" },
                { "id": 2, "name": "Control" }
            ];
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "PEGNEG_FIELD_VALUES", {
        get: function () {
            return {
                "study": 1,
                "matrix": 1,
                // "filter_type": 8,
                "sample_type": 4,
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(APP_SETTINGS, "MIN_JSON_HEADERS", {
        get: function () { return new http_1.Headers({ 'Accept': 'application/json' }); },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "JSON_HEADERS", {
        get: function () { return new http_1.Headers({ 'Accept': 'application/json', 'Content-Type': 'application/json' }); },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "AUTH_HEADERS", {
        get: function () {
            return new http_1.Headers({
                'Authorization': 'Basic ' +
                    btoa(sessionStorage.getItem('username') + ':' + sessionStorage.getItem('password'))
            });
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "MIN_AUTH_JSON_HEADERS", {
        get: function () {
            return new http_1.Headers({
                'Authorization': 'Basic ' + btoa(sessionStorage.getItem('username') + ':' + sessionStorage.getItem('password')),
                'Accept': 'application/json'
            });
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "AUTH_JSON_HEADERS", {
        get: function () {
            return new http_1.Headers({
                'Authorization': 'Basic ' + btoa(sessionStorage.getItem('username') + ':' + sessionStorage.getItem('password')),
                'Accept': 'application/json', 'Content-Type': 'application/json'
            });
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "ADMIN_MIN_AUTH_JSON_HEADERS", {
        // public static get WATER_MATRIX_ID() {
        //     return 1;
        // }
        // public static get ULTRAFILTER_FILTER_TYPE_ID() {
        //     return 8;
        // }
        // public static get QC_SAMPLE_TYPE_ID() {
        //     return 4;
        // }
        // line below is for headers stored in local storage. todo: revisit and implement this
        // public static get AUTH_HEADERS() { return new Headers({ 'Authorization': 'Basic ' + btoa(sessionStorage.getItem('username') + ':' + sessionStorage.getItem('password'))}) };
        // public static get AUTH_HEADERS() {
        //     return new Headers({
        //         'Authorization': 'Basic ' + btoa(this.API_USERNAME + ':' + this.API_PASSWORD)
        //     });
        // };
        get: function () {
            return new http_1.Headers({
                'Authorization': 'Basic ' + btoa(this.API_USERNAME + ':' + this.API_PASSWORD),
                'Accept': 'application/json'
            });
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(APP_SETTINGS, "ADMIN_AUTH_JSON_HEADERS", {
        get: function () {
            return new http_1.Headers({
                'Authorization': 'Basic ' + btoa(this.API_USERNAME + ':' + this.API_PASSWORD),
                'Accept': 'application/json', 'Content-Type': 'application/json'
            });
        },
        enumerable: true,
        configurable: true
    });
    ;
    return APP_SETTINGS;
}());
APP_SETTINGS._environment = 'development';
APP_SETTINGS.production = false;
APP_SETTINGS._API_ENDPOINT = APP_SETTINGS_1._environment === 'production' ? 'https://lidedev.wim.usgs.gov/api/' : 'https://lidedev.wim.usgs.gov/api/';
APP_SETTINGS = APP_SETTINGS_1 = __decorate([
    core_1.Injectable()
], APP_SETTINGS);
exports.APP_SETTINGS = APP_SETTINGS;
var APP_SETTINGS_1;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/app.settings.js.map

/***/ }),

/***/ "./src/app/app.utilities.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var APP_UTILITIES = (function () {
    function APP_UTILITIES() {
    }
    Object.defineProperty(APP_UTILITIES, "TODAY", {
        get: function () { return new Date().toISOString().substr(0, 10); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(APP_UTILITIES, "TIME", {
        get: function () { return new Date().toISOString().substr(14, 22); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(APP_UTILITIES, "SAMPLE_FORM_CONFIG", {
        // SAMPLE_FORM_CONFIG is the config JSON object for the sample form, based on matrix selection
        // object keys match the matrix ID
        get: function () {
            return {
                "6": {
                    "matrix": false,
                    "study": false,
                    "sample_type": false,
                    "collaborator_sample_id": false,
                    "filter_flag": false,
                    "secondary_concentration_flag": false,
                    "study_site_name": false,
                    "sample_description": false,
                    "sampler_name": false,
                    "sample_notes": false,
                    "arrival_date": false,
                    "arrival_notes": false,
                    "collection_start_date": false,
                    "collection_start_time": false,
                    "collection_end_date": false,
                    "collection_end_time": false,
                    "meter_reading_initial": true,
                    "meter_reading_final": true,
                    "meter_reading_unit": true,
                    "total_volume_sampled_initial": false,
                    "total_volume_sampled_unit_initial": false,
                    "post_dilution_volume": true,
                    "filter_type": false,
                    "filter_born_on_date": true,
                    "dissolution_volume": false,
                    "elution_notes": true,
                    "technician_initials": true,
                    "sample_volume_initial": true
                },
                "4": {
                    "matrix": false,
                    "study": false,
                    "sample_type": false,
                    "collaborator_sample_id": false,
                    "filter_flag": false,
                    "secondary_concentration_flag": false,
                    "study_site_name": false,
                    "sample_description": false,
                    "sampler_name": false,
                    "sample_notes": false,
                    "arrival_date": false,
                    "arrival_notes": false,
                    "collection_start_date": false,
                    "collection_start_time": true,
                    "collection_end_date": true,
                    "collection_end_time": true,
                    "meter_reading_initial": true,
                    "meter_reading_final": true,
                    "meter_reading_unit": true,
                    "total_volume_sampled_initial": false,
                    "total_volume_sampled_unit_initial": false,
                    "post_dilution_volume": true,
                    "filter_type": true,
                    "filter_born_on_date": true,
                    "dissolution_volume": true,
                    "elution_notes": false,
                    "technician_initials": false,
                    "sample_volume_initial": false
                },
                "5": {
                    "matrix": false,
                    "study": false,
                    "sample_type": false,
                    "collaborator_sample_id": false,
                    "filter_flag": false,
                    "secondary_concentration_flag": false,
                    "study_site_name": false,
                    "sample_description": false,
                    "sampler_name": false,
                    "sample_notes": false,
                    "arrival_date": false,
                    "arrival_notes": false,
                    "collection_start_date": false,
                    "collection_start_time": true,
                    "collection_end_date": true,
                    "collection_end_time": true,
                    "meter_reading_initial": false,
                    "meter_reading_final": false,
                    "meter_reading_unit": false,
                    "total_volume_sampled_initial": false,
                    "total_volume_sampled_unit_initial": false,
                    "post_dilution_volume": true,
                    "filter_type": true,
                    "filter_born_on_date": true,
                    "dissolution_volume": true,
                    "elution_notes": true,
                    "technician_initials": true,
                    "sample_volume_initial": true
                },
                "3": {
                    "matrix": false,
                    "study": false,
                    "sample_type": false,
                    "collaborator_sample_id": false,
                    "filter_flag": false,
                    "secondary_concentration_flag": false,
                    "study_site_name": false,
                    "sample_description": false,
                    "sampler_name": false,
                    "sample_notes": false,
                    "arrival_date": false,
                    "arrival_notes": false,
                    "collection_start_date": false,
                    "collection_start_time": true,
                    "collection_end_date": true,
                    "collection_end_time": true,
                    "meter_reading_initial": true,
                    "meter_reading_final": true,
                    "meter_reading_unit": true,
                    "total_volume_sampled_initial": false,
                    "total_volume_sampled_unit_initial": false,
                    "post_dilution_volume": false,
                    "filter_type": true,
                    "filter_born_on_date": true,
                    "dissolution_volume": true,
                    "elution_notes": true,
                    "technician_initials": true,
                    "sample_volume_initial": true
                },
                "2": {
                    "matrix": false,
                    "study": false,
                    "sample_type": false,
                    "collaborator_sample_id": false,
                    "filter_flag": false,
                    "secondary_concentration_flag": false,
                    "study_site_name": false,
                    "sample_description": false,
                    "sampler_name": false,
                    "sample_notes": false,
                    "arrival_date": false,
                    "arrival_notes": false,
                    "collection_start_date": false,
                    "collection_start_time": false,
                    "collection_end_date": false,
                    "collection_end_time": false,
                    "meter_reading_initial": true,
                    "meter_reading_final": true,
                    "meter_reading_unit": true,
                    "total_volume_sampled_initial": false,
                    "total_volume_sampled_unit_initial": false,
                    "post_dilution_volume": true,
                    "filter_type": true,
                    "filter_born_on_date": true,
                    "dissolution_volume": true,
                    "elution_notes": true,
                    "technician_initials": true,
                    "sample_volume_initial": true
                },
                "1": {
                    "matrix": false,
                    "study": false,
                    "sample_type": false,
                    "collaborator_sample_id": false,
                    "filter_flag": false,
                    "secondary_concentration_flag": false,
                    "study_site_name": false,
                    "sample_description": false,
                    "sampler_name": false,
                    "sample_notes": false,
                    "arrival_date": false,
                    "arrival_notes": false,
                    "collection_start_date": false,
                    "collection_start_time": false,
                    "collection_end_date": false,
                    "collection_end_time": false,
                    "meter_reading_initial": false,
                    "meter_reading_final": false,
                    "meter_reading_unit": false,
                    "total_volume_sampled_initial": false,
                    "total_volume_sampled_unit_initial": false,
                    "post_dilution_volume": true,
                    "filter_type": false,
                    "filter_born_on_date": false,
                    "dissolution_volume": true,
                    "elution_notes": false,
                    "technician_initials": false,
                    "sample_volume_initial": false
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    APP_UTILITIES.mapOrder = function (array, order, key) {
        array.sort(function (a, b) {
            var A = a[key], B = b[key];
            if (order.indexOf(A) > order.indexOf(B)) {
                return 1;
            }
            else {
                return -1;
            }
        });
        return array;
    };
    ;
    APP_UTILITIES.convertArrayOfObjectsToCSV = function (args) {
        var result, counter, keys = [], columnDelimiter, lineDelimiter, data, headers, unorderedKeys;
        headers = [];
        data = args.data || null;
        if (data == null || !data.length) {
            return null;
        }
        columnDelimiter = args.columnDelimiter || ',';
        lineDelimiter = args.lineDelimiter || '\n';
        unorderedKeys = Object.keys(data[0]);
        args.headers.forEach(function (col) {
            var found = false;
            unorderedKeys = unorderedKeys.filter(function (item) {
                if (!found && item === col.fieldName) {
                    keys.push(item);
                    found = true;
                    return false;
                }
                else {
                    return true;
                }
            });
        });
        // put the headers array in the same order as the data keys
        keys.forEach(function (item) {
            var obj = args.headers.filter(function (o) {
                return o.fieldName === item;
            })[0];
            if (obj) {
                headers.push(obj.colName);
            }
        });
        // remove keys that aren't in the headers array, ensuring those data columns won't be exported
        // keys.forEach(function (item) {
        //     if (headers.indexOf(item) < 0) {
        //         let ndx = keys.indexOf(item);
        //         keys.splice(ndx, 1);
        //     }
        // });
        result = '';
        result += (args.headers) ? headers.join(columnDelimiter) : keys.join(columnDelimiter);
        result += lineDelimiter;
        data.forEach(function (item) {
            counter = 0;
            keys.forEach(function (key) {
                if (counter > 0) {
                    result += columnDelimiter;
                }
                if (item[key] == null) {
                    result += '';
                }
                else if (typeof item[key] === 'string' && item[key].includes(',')) {
                    result += '"' + item[key] + '"';
                }
                else {
                    result += item[key];
                }
                counter++;
            });
            result += lineDelimiter;
        });
        return result;
    };
    APP_UTILITIES.generateCSV = function (args) {
        var data, filename, link;
        var csv = this.convertArrayOfObjectsToCSV({
            data: args.data,
            headers: args.headers
        });
        if (csv == null) {
            return;
        }
        filename = args.filename || 'export.csv';
        if (!csv.match(/^data:text\/csv/i)) {
            csv = 'data:text/csv;charset=utf-8,' + csv;
        }
        data = encodeURI(csv);
        link = document.createElement('a');
        link.setAttribute('href', data);
        link.setAttribute('download', filename);
        link.click();
    };
    return APP_UTILITIES;
}());
APP_UTILITIES = __decorate([
    core_1.Injectable()
], APP_UTILITIES);
exports.APP_UTILITIES = APP_UTILITIES;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/app.utilities.js.map

/***/ }),

/***/ "./src/app/authentication/authentication.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\r\n  <div class=\"col-lg-4 col-md-6 col-sm-12 col-xs-12\">\r\n    <div class=\"card\">\r\n      <div class=\"card-block\">\r\n        <div class=\"card-text\">\r\n          <p>Welcome to\r\n            <span class=\"standoutMore\">lili</span>\r\n            <br>\r\n            <!-- <span class=\"standout\">L</span>aboratory for\r\n            <span class=\"standout\">I</span>nfectious Disease and Environment\r\n            <span class=\"standout\">L</span>aboratory\r\n            <span class=\"standout\">I</span>nformation Management System. -->\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"card-block\">\r\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit(loginForm.value)\">\r\n          <label class=\"title\">\r\n            <h5 class=\"hint\">Please login</h5>\r\n          </label>\r\n          <p>\r\n            <div class=\"login-group\">\r\n              <input class=\"username\" type=\"text\" id=\"login_username\" placeholder=\"Username\" formControlName=\"username\">\r\n              <input class=\"password\" type=\"password\" id=\"login_password\" placeholder=\"Password\" formControlName=\"password\">\r\n            </div>\r\n            <p>\r\n\r\n            </p>\r\n            <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"authenticationErrorFlag\">\r\n              <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">Invalid username/password combination</span>\r\n              </div>\r\n            </clr-alert>\r\n            <button type=\"submit\" class=\"btn btn-primary\">Login</button>\r\n        </form>\r\n        <!-- <p>\r\n          <button class=\"btn btn-danger-outline\" (click)=\"onLogout()\">Logout</button> -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./src/app/authentication/authentication.component.scss":
/***/ (function(module, exports) {

module.exports = ".standout {\n  font-size: x-large;\n  font-weight: bold; }\n\n.standoutMore {\n  font-size: xx-large;\n  font-weight: bold; }\n"

/***/ }),

/***/ "./src/app/authentication/authentication.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
var authentication_service_1 = __webpack_require__("./src/app/authentication/authentication.service.ts");
var AuthenticationComponent = (function () {
    function AuthenticationComponent(formBuilder, authenticationService, router) {
        this.authenticationService = authenticationService;
        this.router = router;
        this.authenticationErrorFlag = false;
        this.loginForm = formBuilder.group({
            username: ['', forms_1.Validators.required],
            password: ['', forms_1.Validators.required]
        });
    }
    AuthenticationComponent.prototype.onSubmit = function (formValue) {
        var _this = this;
        if (sessionStorage.getItem('username')) {
            this.authenticationService.logout();
        }
        this.authenticationService.login(formValue.username, formValue.password)
            .subscribe(function (user) {
            _this.router.navigateByUrl('home');
        }, function (error) {
            _this.authenticationErrorFlag = true;
        });
    };
    AuthenticationComponent.prototype.onLogout = function () {
        this.authenticationService.logout();
    };
    return AuthenticationComponent;
}());
AuthenticationComponent = __decorate([
    core_1.Component({
        selector: 'app-authentication',
        template: __webpack_require__("./src/app/authentication/authentication.component.html"),
        styles: [__webpack_require__("./src/app/authentication/authentication.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof forms_1.FormBuilder !== "undefined" && forms_1.FormBuilder) === "function" && _a || Object, typeof (_b = typeof authentication_service_1.AuthenticationService !== "undefined" && authentication_service_1.AuthenticationService) === "function" && _b || Object, typeof (_c = typeof router_1.Router !== "undefined" && router_1.Router) === "function" && _c || Object])
], AuthenticationComponent);
exports.AuthenticationComponent = AuthenticationComponent;
var _a, _b, _c;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/authentication/authentication.component.js.map

/***/ }),

/***/ "./src/app/authentication/authentication.guard.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var AuthenticationGuard = (function () {
    function AuthenticationGuard() {
    }
    AuthenticationGuard.prototype.canActivate = function () {
        return app_settings_1.APP_SETTINGS.IS_LOGGEDIN;
    };
    return AuthenticationGuard;
}());
exports.AuthenticationGuard = AuthenticationGuard;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/authentication/authentication.guard.js.map

/***/ }),

/***/ "./src/app/authentication/authentication.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var Rx_1 = __webpack_require__("./node_modules/rxjs/_esm5/Rx.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/observable/of.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var router_1 = __webpack_require__("./node_modules/@angular/router/@angular/router.es5.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var current_user_service_1 = __webpack_require__("./src/app/authentication/current-user.service.ts");
var AuthenticationService = (function () {
    function AuthenticationService(_http, router, currentUserService) {
        this._http = _http;
        this.router = router;
        this.currentUserService = currentUserService;
    }
    AuthenticationService.prototype.login = function (username, password) {
        var _this = this;
        var options = new http_1.RequestOptions({ headers: new http_1.Headers({ "Authorization": "Basic " + btoa(username + ":" + password) }) });
        return this._http.post(app_settings_1.APP_SETTINGS.AUTH_URL, null, options)
            .map(function (res) {
            _this.user = res.json();
            if (_this.user.is_staff) {
                sessionStorage.setItem('username', username);
                sessionStorage.setItem('password', password);
                sessionStorage.setItem('first_name', _this.user.first_name);
                sessionStorage.setItem('last_name', _this.user.last_name);
                sessionStorage.setItem('email', _this.user.email);
                sessionStorage.setItem('is_staff', _this.user.is_staff.toString());
                // this.userLoggedIn$.emit(res);
                // this.currentUser.emit(res);
                _this.currentUserService.updateCurrentUser(_this.user);
            }
            else {
                // TODO: do something more professional here
                alert('This user is not authorized!');
            }
        });
    };
    AuthenticationService.prototype.logout = function () {
        this.router.navigate(['/login']);
        // this.router.navigateByUrl('login');
        this.user = undefined;
        this.currentUserService.updateCurrentUser({ "first_name": "Logged Out" });
        sessionStorage.removeItem('username');
        sessionStorage.removeItem('password');
        sessionStorage.removeItem('first_name');
        sessionStorage.removeItem('last_name');
        sessionStorage.removeItem('email');
        sessionStorage.removeItem('is_staff');
        return Rx_1.Observable.of(true);
    };
    return AuthenticationService;
}());
AuthenticationService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object, typeof (_b = typeof router_1.Router !== "undefined" && router_1.Router) === "function" && _b || Object, typeof (_c = typeof current_user_service_1.CurrentUserService !== "undefined" && current_user_service_1.CurrentUserService) === "function" && _c || Object])
], AuthenticationService);
exports.AuthenticationService = AuthenticationService;
var _a, _b, _c;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/authentication/authentication.service.js.map

/***/ }),

/***/ "./src/app/authentication/current-user.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var rxjs_1 = __webpack_require__("./node_modules/rxjs/Rx.js");
var CurrentUserService = (function () {
    function CurrentUserService() {
        this.userSource = new rxjs_1.BehaviorSubject('None');
        this.currentUser = this.userSource.asObservable();
    }
    CurrentUserService.prototype.updateCurrentUser = function (user) {
        this.userSource.next(user);
    };
    return CurrentUserService;
}());
CurrentUserService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], CurrentUserService);
exports.CurrentUserService = CurrentUserService;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/authentication/current-user.service.js.map

/***/ }),

/***/ "./src/app/concentration-types/concentration-types.resolve.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var concentration_types_service_1 = __webpack_require__("./src/app/concentration-types/concentration-types.service.ts");
var ConcentrationResolve = (function () {
    function ConcentrationResolve(_concentrationService) {
        this._concentrationService = _concentrationService;
    }
    ConcentrationResolve.prototype.resolve = function (route) {
        return this._concentrationService.getConcentrationTypes();
    };
    return ConcentrationResolve;
}());
ConcentrationResolve = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof concentration_types_service_1.ConcentrationTypeService !== "undefined" && concentration_types_service_1.ConcentrationTypeService) === "function" && _a || Object])
], ConcentrationResolve);
exports.ConcentrationResolve = ConcentrationResolve;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/concentration-types/concentration-types.resolve.js.map

/***/ }),

/***/ "./src/app/concentration-types/concentration-types.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var ConcentrationTypeService = (function () {
    function ConcentrationTypeService(_http) {
        this._http = _http;
    }
    ConcentrationTypeService.prototype.getConcentrationTypes = function () {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.get(app_settings_1.APP_SETTINGS.CONCENTRATION_TYPES_URL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    ConcentrationTypeService.prototype.create = function (formValue) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS });
        return this._http.post(app_settings_1.APP_SETTINGS.CONCENTRATION_TYPES_URL, formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    ConcentrationTypeService.prototype.update = function (formValue) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.put(app_settings_1.APP_SETTINGS.CONCENTRATION_TYPES_URL + formValue.id + '/', formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    ConcentrationTypeService.prototype.delete = function (id) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.delete(app_settings_1.APP_SETTINGS.CONCENTRATION_TYPES_URL + id, options)
            .catch(this.handleError);
    };
    ConcentrationTypeService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return ConcentrationTypeService;
}());
ConcentrationTypeService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], ConcentrationTypeService);
exports.ConcentrationTypeService = ConcentrationTypeService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/concentration-types/concentration-types.service.js.map

/***/ }),

/***/ "./src/app/data-upload/data-upload.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\r\n  <div class=\"col-lg-10 col-md-10 col-sm-12 col-xs-12\">\r\n    <clr-tabs>\r\n\r\n      <!--Upload Replicate PCR File tab -->\r\n      <clr-tab>\r\n        <button clrTabLink>Upload Replicate PCR File</button>\r\n        <clr-tab-content active>\r\n\r\n          <div class=\"card-block\">\r\n            <div class=\"card-title\">\r\n              <clr-icon shape=\"upload\"></clr-icon> Upload Replicate PCR File\r\n            </div>\r\n            <p>\r\n              <div class=\"card-text\">\r\n                <span>File name convention: [Analysis Batch ID]-[Extraction number]-[Target code]-[Replicate\r\n                  number]</span>\r\n                <clr-tree-node>\r\n                  <clr-icon shape=\"search\"></clr-icon>\r\n                  Show Target Code List\r\n                  <ng-template clrIfExpanded>\r\n                    <ng-container>\r\n                      <clr-tree-node>\r\n                        <div class=\"row\">\r\n                          <div class=\"col-xs-12 col-md-12 col-lg-12 col-xl-12\">\r\n\r\n                            <table class=\"table table-vertical table-noborder table-compact\">\r\n                              <tbody>\r\n                                <tr *ngFor=\"let target of allTargets\">\r\n                                  <th>{{target.name}}</th>\r\n                                  <td>{{target.code}}</td>\r\n                                </tr>\r\n                              </tbody>\r\n                            </table>\r\n                          </div>\r\n                        </div>\r\n\r\n                      </clr-tree-node>\r\n                    </ng-container>\r\n                  </ng-template>\r\n                </clr-tree-node>\r\n                <p>\r\n                  <input id=\"targetFileInput\" type=\"file\" (change)=\"loadTargetFile($event)\" placeholder=\"Upload file\"\r\n                    accept=\"*\">\r\n                  <div class=\"alert alert-danger\" *ngIf=\"targetFileNameErrorFlag\">\r\n                    <div class=\"alert-items\">\r\n                      <div class=\"alert-item static\">\r\n                        <div class=\"alert-icon-wrapper\">\r\n                          <clr-icon class=\"alert-icon\" shape=\"exclamation-circle\"></clr-icon>\r\n                        </div>\r\n                        <span class=\"alert-text\">\r\n                          Incorrect file name or extension chosen. Replicate PCR files should have the '.txt' file\r\n                          extension, and have the following\r\n                          name convention: [Analysis Batch ID]-[Extraction number]-[Target code]-[Replicate number].\r\n                          Example:\r\n                          10001-1-PV-1.txt\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n              </div>\r\n          </div>\r\n          <hr>\r\n          <!-- results display div -->\r\n          <div>\r\n            <!-- raw results display -->\r\n            <div *ngIf=\"rawResultsParsed && !validationResponseReady\">\r\n              <div>\r\n                <h4>\r\n                  <b>Text file raw results confirmation</b>\r\n                </h4>\r\n                <label>Text file:\r\n                  {{parsedRawTargetResults.analysis_batch}}-{{parsedRawTargetResults.extraction_number}}-{{textFileNameTargetCode}}-{{parsedRawTargetResults.replicate_number}}</label>\r\n                <div class=\"row\">\r\n                  <div class=\"col-lg-4\">\r\n                    <table class=\"table table-vertical table-compact\">\r\n                      <tbody>\r\n                        <tr>\r\n                          <th>Analysis Batch</th>\r\n                          <td>{{parsedRawTargetResults.analysis_batch}}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th>Extraction Number</th>\r\n                          <td>{{parsedRawTargetResults.extraction_number}}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th>Target</th>\r\n                          <td>{{parsedRawTargetResults.target | displayValue:'name':this.allTargets}}</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <th>Replicate Number</th>\r\n                          <td>{{parsedRawTargetResults.replicate_number}}</td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n                <table class=\"table table-compact\" style=\"width: 15em\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th></th>\r\n                      <th class=\"left\">Sample</th>\r\n                      <th class=\"left\">Cq Value</th>\r\n                      <th class=\"left\">Concentration</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr *ngFor=\"let rep of parsedRawTargetResults.updated_pcrreplicates; let i = index\">\r\n                      <td>{{i+1}}</td>\r\n                      <td class=\"left\">{{rep.sample}}</td>\r\n                      <td class=\"left\">{{rep.cq_value}}</td>\r\n                      <td class=\"left\">{{rep.gc_reaction}}</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n                <br>\r\n                <div class=\"alert alert-danger\" *ngIf=\"pcrReplicateBatchIDErrorFlag\">\r\n                  <div class=\"alert-items\">\r\n                    <div class=\"alert-item static\">\r\n                      <div class=\"alert-icon-wrapper\">\r\n                        <clr-icon class=\"alert-icon\" shape=\"exclamation-circle\"></clr-icon>\r\n                      </div>\r\n                      <span class=\"alert-text\">\r\n                        The submitted analysis batch/extraction number/replicate number combination was not found in the\r\n                        database. Please check filename\r\n                        for errors and try again.\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <button class=\"btn btn-primary\" [disabled]=\"!resultsSubmissionReady\"\r\n                  (click)=\"validateTargetResults(); resetFlags()\">\r\n                  <clr-icon shape=\"check\"></clr-icon> Validate Results\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <!-- end raw results display -->\r\n\r\n            <!---------- Loading spinner---------->\r\n            <span class=\"spinner spinner-lg\" *ngIf=\"validationLoading || replicatesLoading\">\r\n              Loading...\r\n            </span>\r\n            <!---------- Loading spinner---------->\r\n\r\n            <!---------- Success/fail alerts---------->\r\n            <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"resultsSubmissionErrorFlag\">\r\n              <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">Submission error. Results not uploaded to database.</span>\r\n                <span>{{errorMessage}}</span>\r\n                <div class=\"alert-actions\">\r\n                  <a class=\"alert-action\" (click)=\"submitRawTargetResults()\">Try again</a>\r\n                </div>\r\n              </div>\r\n            </clr-alert>\r\n\r\n            <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"resultsSubmissionSuccessFlag\">\r\n              <div clr-alert-item class=\"alert-item\">\r\n                <span class=\"alert-text\">Results successfully submitted.</span>\r\n              </div>\r\n            </clr-alert>\r\n            <!---------- End Success/fail alerts---------->\r\n\r\n            <!-- validation div -->\r\n            <div *ngIf=\"validationResponseReady\">\r\n              <div class=\"card-title\">\r\n                <b>Results Validation</b>\r\n                <br>\r\n                <label>Text file:\r\n                  {{parsedRawTargetResults.analysis_batch}}-{{parsedRawTargetResults.extraction_number}}-{{textFileNameTargetCode}}-{{parsedRawTargetResults.replicate_number}}</label>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                  <h4>Batch Data</h4>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-lg-4 col-sm-6\">\r\n                  <table class=\"table table-vertical table-compact\">\r\n                    <tbody>\r\n                      <tr>\r\n                        <th>Analysis Batch</th>\r\n                        <td>{{parsedRawTargetResults.analysis_batch}}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>Extraction Number</th>\r\n                        <td>{{parsedRawTargetResults.extraction_number}}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>Target</th>\r\n                        <td>{{parsedRawTargetResults.target | displayValue:'name':this.allTargets}}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>Replicate Number</th>\r\n                        <td>{{parsedRawTargetResults.replicate_number}}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>PCR Neg</th>\r\n                        <td>\r\n                          <span class=\"label\"\r\n                            [ngClass]=\"{'label-danger' : pcrResultsValidationObject.pcr_neg_invalid, 'label-success': !pcrResultsValidationObject.pcr_neg_invalid}\">{{pcrResultsValidationObject.pcr_neg_invalid ? \"Invalid\" : \"Valid\"}}</span>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>PCR Pos</th>\r\n                        <td>\r\n                          <span class=\"label\"\r\n                            [ngClass]=\"{'label-danger' : pcrResultsValidationObject.pcr_pos_invalid, 'label-success': !pcrResultsValidationObject.pcr_pos_invalid}\">{{pcrResultsValidationObject.pcr_pos_invalid ? \"Invalid\" : \"Valid\"}}</span>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>Ext Neg</th>\r\n                        <td>\r\n                          <span class=\"label\"\r\n                            [ngClass]=\"{'label-danger' : pcrResultsValidationObject.ext_neg_invalid, 'label-success': !pcrResultsValidationObject.ext_neg_invalid}\">{{pcrResultsValidationObject.ext_neg_invalid ? \"Invalid\" : \"Valid\"}}</span>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>RT Neg</th>\r\n                        <td>\r\n                          <span class=\"label\"\r\n                            [ngClass]=\"{'label-danger' : pcrResultsValidationObject.rt_neg_invalid, 'label-success': !pcrResultsValidationObject.rt_neg_invalid}\">{{pcrResultsValidationObject.rt_neg_invalid ? \"Invalid\" : \"Valid\"}}\r\n                          </span>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>Standard Curve</th>\r\n                        <td></td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                  <div *ngFor=\"let error of pcrResultsValidationObject.validation_errors\">\r\n                    <clr-alert [clrAlertSizeSmall]=\"true\" [clrAlertClosable]=\"false\"\r\n                      [clrAlertType]=\"error.severity == 1 ? 'alert-danger': error.severity == 2 ? 'alert-warning' : 'alert-warning'\">\r\n                      <div clr-alert-item class=\"alert-item\">\r\n                        <span class=\"alert-text\">{{error.message}}</span>\r\n                      </div>\r\n                    </clr-alert>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <!-- title and info -->\r\n              <div class=\"row\">\r\n                <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                  <h4>Replicates</h4>\r\n                </div>\r\n                <div class=\"row\" *ngIf=\"!replicateUpdateSuccessFlag\">\r\n                  <div class=\"col-lg-12 col-sm-12\">\r\n                    <span>\r\n                      <label>Note: validity displayed below is based on negative controls only, including Peg\r\n                        Neg.</label>\r\n                      <clr-signpost>\r\n                        <clr-signpost-content *clrIfOpen>\r\n                          All replicate records are considered invalid by default. They are only made valid if all of\r\n                          the\r\n                          following checks pass:\r\n                          <p>1.All the parent controls (Peg Neg, Ext Neg, RT Neg, PCR Neg) for this replicate have been\r\n                            entered\r\n                            into the database\r\n                            <p>2. The replicate’s related Peg Neg’s replicates with same target as this data replicate\r\n                              are\r\n                              all\r\n                              valid (if no related Peg Neg, this check does not apply), if even a single one of the Peg\r\n                              Neg\r\n                              replicates is invalid then the data replicate is set to invalid.\r\n                              <p>3. The replicate's parent replicate batch negative controls (Ext Neg, RT Neg, PCR Neg)\r\n                                are all\r\n                                valid, if even a single one of the controls is invalid then the data replicate is set to\r\n                                invalid.\r\n                                <p>4. The replicate’s CQ value and GC/reaction are greater than or equal to zero.\r\n                                  <p>Alternately, the user has the option to manually override the system-determined\r\n                                    validity.\r\n\r\n                        </clr-signpost-content>\r\n                      </clr-signpost>\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <!-- End title and info -->\r\n              <!-----------------Validation Table -------------------------------->\r\n              <div class=\"row\" *ngIf=\"validationResponseReady\">\r\n                <div class=\"col-lg-12 col-sm-12\">\r\n                  <clr-datagrid [clrDgLoading]=\"replicatesLoading\">\r\n                    <clr-dg-action-bar>\r\n                      <div class=\"btn-group\">\r\n                        <button type=\"button\" class=\"btn btn-sm btn-warning\" (click)=\"finishResultsSubmission()\">\r\n                          <clr-icon shape=\"window-close\"></clr-icon> Cancel and Reset\r\n                        </button>\r\n                        <button class=\" btn btn-sm btn-success\" (click)=\"submitRawTargetResults()\">\r\n                          <clr-icon shape=\"check\"></clr-icon> Submit Results\r\n                        </button>\r\n                      </div>\r\n                    </clr-dg-action-bar>\r\n\r\n                    <clr-dg-column [clrDgField]=\"'name'\">Sample</clr-dg-column>\r\n                    <clr-dg-column [clrDgField]=\"'code'\">Cq Value</clr-dg-column>\r\n                    <clr-dg-column [clrDgField]=\"'type'\">GC/Reaction</clr-dg-column>\r\n                    <!-- <clr-dg-column [clrDgField]=\"'type'\">Concentration</clr-dg-column> -->\r\n                    <clr-dg-column [clrDgField]=\"'type'\">Validation Errors</clr-dg-column>\r\n\r\n                    <clr-dg-row *clrDgItems=\"let rep of pcrResultsValidationReplicates\" [clrDgItem]=\"rep\">\r\n                      <clr-dg-cell>{{rep.sample}}</clr-dg-cell>\r\n                      <clr-dg-cell>{{rep.cq_value}}</clr-dg-cell>\r\n                      <clr-dg-cell>{{rep.gc_reaction_sci}}</clr-dg-cell>\r\n                      <!-- <clr-dg-cell>{{rep.replicate_concentration_sci}}</clr-dg-cell> -->\r\n                      <clr-dg-cell>\r\n                        <div *ngFor=\"let error of rep.validation_errors\">\r\n                          <clr-alert [clrAlertSizeSmall]=\"true\" [clrAlertClosable]=\"false\"\r\n                            [clrAlertType]=\"error.severity == 1 ? 'alert-danger': error.severity == 2 ? 'alert-warning' : 'alert-warning'\">\r\n                            <div clr-alert-item class=\"alert-item\">\r\n                              <span class=\"alert-text\">{{error.message}}</span>\r\n                            </div>\r\n                          </clr-alert>\r\n                        </div>\r\n\r\n                      </clr-dg-cell>\r\n                      <!-- <clr-dg-cell>\r\n                        <span class=\"label\" [ngClass]=\"{'label-danger' : rep.invalid, 'label-success': !rep.invalid}\">{{rep.invalid ? \"Invalid\" : \"Valid\"}}</span>\r\n                      </clr-dg-cell> -->\r\n                    </clr-dg-row>\r\n                    <clr-dg-footer>{{pcrResultsValidationReplicates.length}} reps</clr-dg-footer>\r\n                  </clr-datagrid>\r\n                </div>\r\n              </div>\r\n              <!-----------------End Validation Table -------------------------------->\r\n            </div>\r\n            <!-- end validation div -->\r\n\r\n            <!-- Submission Review div -->\r\n            <div *ngIf=\"resultsSubmissionSuccessFlag\">\r\n              <div class=\"card-title\">\r\n                <b>Submitted Results Review</b>\r\n                <br>\r\n                <label>Text file:\r\n                  {{parsedRawTargetResults.analysis_batch}}-{{parsedRawTargetResults.extraction_number}}-{{textFileNameTargetCode}}-{{parsedRawTargetResults.replicate_number}}</label>\r\n              </div>\r\n              <!--Finish button-->\r\n              <!-- <div class=\"row finish-button\">\r\n                <div class=\"col-lg-6 col-sm-12\">\r\n                  <button class=\"btn btn-primary\" (click)=\"finishResultsSubmission()\">Finish</button>\r\n                </div>\r\n              </div> -->\r\n              <!-- End Finish button-->\r\n              <div class=\"row\">\r\n                <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                  <h4>Batch Data</h4>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-lg-4 col-sm-6\">\r\n                  <table class=\"table table-vertical table-compact\">\r\n                    <tbody>\r\n                      <tr>\r\n                        <th>Analysis Batch</th>\r\n                        <td>{{parsedRawTargetResults.analysis_batch}}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>Extraction Number</th>\r\n                        <td>{{parsedRawTargetResults.extraction_number}}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>Target</th>\r\n                        <td>{{parsedRawTargetResults.target | displayValue:'name':this.allTargets}}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>Replicate Number</th>\r\n                        <td>{{parsedRawTargetResults.replicate_number}}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>PCR Neg</th>\r\n                        <td>\r\n                          <span class=\"label\"\r\n                            [ngClass]=\"{'label-danger' : pcrResultsObject.pcr_neg_invalid, 'label-success': !pcrResultsObject.pcr_neg_invalid}\">{{pcrResultsObject.pcr_neg_invalid ? \"Invalid\" : \"Valid\"}}</span>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>PCR Pos</th>\r\n                        <td>\r\n                          <span class=\"label\"\r\n                            [ngClass]=\"{'label-danger' : pcrResultsObject.pcr_pos_invalid, 'label-success': !pcrResultsObject.pcr_pos_invalid}\">{{pcrResultsObject.pcr_pos_invalid ? \"Invalid\" : \"Valid\"}}</span>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>Ext Neg</th>\r\n                        <td>\r\n                          <span class=\"label\"\r\n                            [ngClass]=\"{'label-danger' : pcrResultsObject.ext_neg_invalid, 'label-success': !pcrResultsObject.ext_neg_invalid}\">{{pcrResultsObject.ext_neg_invalid ? \"Invalid\" : \"Valid\"}}</span>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>RT Neg</th>\r\n                        <td>\r\n                          <span class=\"label\"\r\n                            [ngClass]=\"{'label-danger' : pcrResultsObject.rt_neg_invalid, 'label-success': !pcrResultsObject.rt_neg_invalid}\">{{pcrResultsObject.rt_neg_invalid ? \"Invalid\" : \"Valid\"}}\r\n                          </span>\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>Standard Curve</th>\r\n                        <td></td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n              <!-- title and info -->\r\n              <div class=\"row\">\r\n                <div class=\"col-lg-12 col-sm-12\">\r\n                  <h4>Replicates</h4>\r\n                </div>\r\n                <div class=\"row\" *ngIf=\"replicateUpdateSuccessFlag\">\r\n                  <div class=\"col-lg-12 col-sm-12\">\r\n                    <span>\r\n                      <label>Note: validity displayed below is based on negative controls only, including Peg\r\n                        Neg.</label>\r\n                      <clr-signpost>\r\n                        <clr-signpost-content *clrIfOpen>\r\n                          All replicate records are considered invalid by default. They are only made valid if all of\r\n                          the\r\n                          following checks pass:\r\n                          <p>1.All the parent controls (Peg Neg, Ext Neg, RT Neg, PCR Neg) for this replicate have been\r\n                            entered\r\n                            into the database\r\n                            <p>2. The replicate’s related Peg Neg’s replicates with same target as this data replicate\r\n                              are\r\n                              all\r\n                              valid (if no related Peg Neg, this check does not apply), if even a single one of the Peg\r\n                              Neg\r\n                              replicates is invalid then the data replicate is set to invalid.\r\n                              <p>3. The replicate's parent replicate batch negative controls (Ext Neg, RT Neg, PCR Neg)\r\n                                are all\r\n                                valid, if even a single one of the controls is invalid then the data replicate is set to\r\n                                invalid.\r\n                                <p>4. The replicate’s CQ value and GC/reaction are greater than or equal to zero.\r\n                                  <p>Alternately, the user has the option to manually override the system-determined\r\n                                    validity.\r\n\r\n                        </clr-signpost-content>\r\n                      </clr-signpost>\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <!-- End title and info -->\r\n              <!-----------------Results Success Table -------------------------------->\r\n              <div class=\"row\">\r\n                <div class=\"col-lg-12 col-sm-12\">\r\n                  <clr-datagrid [(clrDgSelected)]=\"selected\" [clrDgLoading]=\"replicatesLoading\">\r\n                    <clr-dg-action-bar>\r\n                      <div class=\"btn-group\">\r\n                        <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"selected.length < 1\"\r\n                          (click)=\"showHideOverrideValidityModal = true\">\r\n                          <clr-icon shape=\"switch\"></clr-icon> Switch Validity\r\n                        </button>\r\n                        <button class=\"btn btn-sm btn-success\" (click)=\"finishResultsSubmission()\">\r\n                          <clr-icon shape=\"check\"></clr-icon> Finish\r\n                        </button>\r\n                      </div>\r\n                    </clr-dg-action-bar>\r\n                    <clr-dg-column [clrDgField]=\"'name'\">Sample</clr-dg-column>\r\n                    <clr-dg-column [clrDgField]=\"'code'\">Cq Value</clr-dg-column>\r\n                    <clr-dg-column [clrDgField]=\"'type'\">GC/Reaction</clr-dg-column>\r\n                    <clr-dg-column [clrDgField]=\"'type'\">Concentration</clr-dg-column>\r\n                    <clr-dg-column [clrDgField]=\"'type'\">Validity</clr-dg-column>\r\n                    <clr-dg-column [clrDgField]=\"'type'\">Invalid Reasons</clr-dg-column>\r\n\r\n                    <clr-dg-row *clrDgItems=\"let rep of pcrResultsReplicates\" [clrDgItem]=\"rep\">\r\n                      <clr-dg-cell>{{rep.sample}}</clr-dg-cell>\r\n                      <clr-dg-cell>{{rep.cq_value}}</clr-dg-cell>\r\n                      <clr-dg-cell>{{rep.gc_reaction_sci}}</clr-dg-cell>\r\n                      <clr-dg-cell>{{rep.replicate_concentration_sci}}</clr-dg-cell>\r\n                      <clr-dg-cell>\r\n                        <span class=\"label\"\r\n                          [ngClass]=\"{'label-danger' : rep.invalid, 'label-success': !rep.invalid}\">{{rep.invalid ? \"Invalid\" : \"Valid\"}}</span>\r\n                      </clr-dg-cell>\r\n                      <clr-dg-cell>\r\n                        <ul>\r\n                          <li *ngIf=\"rep.invalid_reasons.pcr_neg_missing\">PCR Negative is missing</li>\r\n                          <li *ngIf=\"rep.invalid_reasons.ext_pos_dna_missing\">Ext Pos DNA is missing</li>\r\n                          <li *ngIf=\"rep.invalid_reasons.rt_neg_invalid\">RT Negative is invalid</li>\r\n                          <li *ngIf=\"rep.invalid_reasons.ext_neg_invalid\">Ext Negative is invalid</li>\r\n                          <li *ngIf=\"rep.invalid_reasons.pcr_neg_invalid\">PCR Negative is invalid</li>\r\n                          <li *ngIf=\"rep.invalid_reasons.ext_pos_dna_invalid\">Ext Pos DNA is invalid</li>\r\n                          <li *ngIf=\"rep.invalid_reasons.ext_rt_pos_rna_missing\">Ext Pos RNA/RT is missing</li>\r\n                          <li *ngIf=\"rep.invalid_reasons.cq_value_missing\">Cq value is missing</li>\r\n                          <li *ngIf=\"rep.invalid_reasons.ext_neg_missing\">Ext Negative is missing</li>\r\n                          <li *ngIf=\"rep.invalid_reasons.peg_neg_invalid\">PEG NEG is invalid</li>\r\n                          <li *ngIf=\"rep.invalid_reasons.gc_reaction_missing\">GC/reaction value is missing</li>\r\n                          <li *ngIf=\"rep.invalid_reasons.peg_neg_not_extracted\">PEG NEG not extracted </li>\r\n                          <li *ngIf=\"rep.invalid_reasons.invalid_override\">Invalid Override</li>\r\n\r\n                          <li *ngIf=\"rep.invalid_reasons.peg_neg_reps_invalid\">PEG NEG Replicates Invalid\r\n                            <clr-tree-node><span>Invalid PEG NEG Replicates</span>\r\n                              <ng-template [clrIfExpanded]=\"false\">\r\n                                <clr-tree-node>\r\n                                  <ul>\r\n                                    <li *ngFor=\"let item of rep.invalid_reasons.peg_neg_reps_invalid_list\">\r\n                                      AB {{item.analysis_batch}}, Extraction\r\n                                      {{item.extraction_number}}, Replicate\r\n                                      {{item.replicate_number}}, Sample {{item.sample}},\r\n                                      {{item.target | displayValue:'name': allTargets}}\r\n                                    </li>\r\n                                  </ul>\r\n                                </clr-tree-node>\r\n                              </ng-template>\r\n                            </clr-tree-node>\r\n                          </li>\r\n\r\n                          <li *ngIf=\"rep.invalid_reasons.peg_neg_reps_missing\">PEG NEG Replicates Missing\r\n                            <clr-tree-node><span>Missing PEG NEG Replicates</span>\r\n                              <ng-template [clrIfExpanded]=\"false\">\r\n                                <clr-tree-node>\r\n                                  <ul>\r\n                                    <li *ngFor=\"let item of rep.invalid_reasons.peg_neg_reps_missing_list\">\r\n                                      AB {{item.analysis_batch}}, Extraction\r\n                                      {{item.extraction_number}}, Replicate\r\n                                      {{item.replicate_number}}, Sample {{item.sample}},\r\n                                      {{item.target | displayValue:'name': allTargets}}\r\n                                    </li>\r\n                                  </ul>\r\n                                </clr-tree-node>\r\n                              </ng-template>\r\n                            </clr-tree-node>\r\n                          </li>\r\n\r\n                          <li *ngIf=\"rep.invalid_reasons.ext_rt_pos_rna_invalid\">Ext/RT Pos RNA is invalid</li>\r\n                          <li *ngIf=\"rep.invalid_reasons.rt_neg_missing\">RT Negative is missing</li>\r\n\r\n                          <li *ngIf=\"rep.invalid_reasons.sibling_pcr_rep_controls_missing\">Controls for sibling PCR\r\n                            Replicates in Extraction are missing\r\n                            <clr-tree-node><span>Missing Replicates</span>\r\n                              <ng-template [clrIfExpanded]=\"false\">\r\n                                <clr-tree-node>\r\n                                  <ul>\r\n                                    <li *ngFor=\"let item of rep.invalid_reasons.sibling_pcr_rep_controls_missing_list\">\r\n                                      AB {{item.analysis_batch}}, Extraction\r\n                                      {{item.extraction_number}}, Replicate\r\n                                      {{item.replicate_number}},\r\n                                      {{item.target | displayValue:'name': allTargets}}\r\n                                    </li>\r\n                                  </ul>\r\n                                </clr-tree-node>\r\n                              </ng-template>\r\n                            </clr-tree-node>\r\n                          </li>\r\n\r\n                          <li *ngIf=\"rep.invalid_reasons.sibling_pcr_rep_controls_invalid\">Controls for sibling PCR\r\n                            Replicates in Extraction are invalid\r\n                            <clr-tree-node><span>Invalid Replicates</span>\r\n                              <ng-template [clrIfExpanded]=\"false\">\r\n                                <clr-tree-node>\r\n                                  <ul>\r\n                                    <li *ngFor=\"let item of rep.invalid_reasons.sibling_pcr_rep_controls_invalid_list\">\r\n                                      AB {{item.analysis_batch}}, Extraction\r\n                                      {{item.extraction_number}}, Replicate\r\n                                      {{item.replicate_number}},\r\n                                      {{item.target | displayValue:'name': allTargets}}\r\n                                    </li>\r\n                                  </ul>\r\n                                </clr-tree-node>\r\n                              </ng-template>\r\n                            </clr-tree-node>\r\n                          </li>\r\n\r\n                          <li *ngIf=\"rep.invalid_reasons.peg_neg_replicates_missing\">PEG NEG is missing\r\n                            <clr-tree-node><span>Missing PEG NEGs</span>\r\n                              <ng-template [clrIfExpanded]=\"false\">\r\n                                <clr-tree-node>\r\n                                  <ul>\r\n                                    <li *ngFor=\"let item of rep.invalid_reasons.peg_neg_replicates_missing_list\">\r\n                                      AB {{item.analysis_batch}}, Extraction\r\n                                      {{item.extraction_number}}, Replicate\r\n                                      {{item.replicate_number}}, Sample {{item.sample}},\r\n                                      {{item.target | displayValue:'name': allTargets}}\r\n                                    </li>\r\n                                  </ul>\r\n                                </clr-tree-node>\r\n                              </ng-template>\r\n                            </clr-tree-node>\r\n                          </li>\r\n                        </ul>\r\n                      </clr-dg-cell>\r\n                    </clr-dg-row>\r\n                    <clr-dg-footer>{{pcrResultsReplicates.length}} reps</clr-dg-footer>\r\n                  </clr-datagrid>\r\n                </div>\r\n              </div>\r\n              <!-----------------End Results Success Table -------------------------------->\r\n\r\n            </div>\r\n            <!-- End Submission Review div -->\r\n\r\n          </div>\r\n          <!-- end results display div -->\r\n\r\n        </clr-tab-content>\r\n      </clr-tab>\r\n      <!-- End Upload Replicate PCR File tab -->\r\n\r\n      <!-- inhibition results tab -->\r\n      <clr-tab>\r\n        <button clrTabLink id=\"inhibition\">Upload Inhibition File</button>\r\n        <clr-tab-content id=\"inhibition\">\r\n\r\n          <div class=\"card-block\">\r\n            <div class=\"card-title\">\r\n              <clr-icon shape=\"upload\"></clr-icon> Upload Inhibition File\r\n            </div>\r\n            <p>\r\n              <div class=\"card-text\">\r\n                <span>File name convention: [Analysis Batch ID]-[Extraction Number]-<b>I</b>[First letter of nucleic\r\n                  acid\r\n                  type] (the letter \"I\" precedes nucleic acid type letter)</span>\r\n                <p>\r\n                  <input id=\"inhibitionFileInput\" type=\"file\" (change)=\"loadInhFile($event)\" placeholder=\"Upload file\"\r\n                    accept=\"*\">\r\n                  <!-- <button class=\"btn btn-primary\" (click)=\"parseJSON()\">Parse Data</button> -->\r\n                  <div class=\"alert alert-danger\" *ngIf=\"inhFileNameErrorFlag\">\r\n                    <div class=\"alert-items\">\r\n                      <div class=\"alert-item static\">\r\n                        <div class=\"alert-icon-wrapper\">\r\n                          <clr-icon class=\"alert-icon\" shape=\"exclamation-circle\"></clr-icon>\r\n                        </div>\r\n                        <span class=\"alert-text\">\r\n                          Incorrect file name or extension chosen. Inhibition files should have the '.txt' file\r\n                          extension and have the following name\r\n                          convention: [Analysis Batch ID]-[Extraction Number]-I[First letter of nucleic acid type].\r\n                          Example:\r\n                          10045-2-IR.txt\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"alert alert-danger\" *ngIf=\"inhRawErrorFlag\">\r\n                    <div class=\"alert-items\">\r\n                      <div class=\"alert-item static\">\r\n                        <div class=\"alert-icon-wrapper\">\r\n                          <clr-icon class=\"alert-icon\" shape=\"exclamation-circle\"></clr-icon>\r\n                        </div>\r\n                        <span class=\"alert-text\">\r\n                          The file uploaded refers to inhibitions not found in the database. Please check file name\r\n                          details.\r\n                        </span>\r\n                        <br>\r\n                        <span>{{errorMessage}}</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n              </div>\r\n          </div>\r\n          <hr>\r\n          <!-- raw results display-->\r\n          <div class=\"card-block\" *ngIf=\"rawInhResultsParsed && !dilutionFactorsCalculated\">\r\n            <!-- <div class=\"card-title\">Uploaded Inhibition Results</div> -->\r\n            <div>\r\n              <h4>\r\n                <b>Inhibition file raw results confirmation</b>\r\n              </h4>\r\n              <label>Text file:\r\n                {{parsedRawInhResults.analysis_batch}}-{{parsedRawInhResults.extraction_number}}-{{inhTextFileNameNAType}}</label>\r\n              <div class=\"row\">\r\n                <div class=\"col-lg-4\">\r\n                  <table class=\"table table-vertical table-compact\">\r\n                    <tbody>\r\n                      <tr>\r\n                        <th>Analysis Batch</th>\r\n                        <td>{{parsedRawInhResults.analysis_batch}}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>Extraction Number</th>\r\n                        <td>{{parsedRawInhResults.extraction_number}}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>Nucleic Acid Inhibition Type</th>\r\n                        <td>{{parsedRawInhResults.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes}}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <th>Inhibition Positive Cq </th>\r\n                        <td>{{parsedRawInhResults.inh_pos_cq_value}}</td>\r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n\r\n\r\n              <table class=\"table table-compact\" style=\"width: 15em\">\r\n                <thead>\r\n                  <tr>\r\n                    <th></th>\r\n                    <th class=\"left\">Sample</th>\r\n                    <th class=\"left\">Cq Value</th>\r\n\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr *ngFor=\"let sample of parsedRawInhResults.inhibitions; let i = index\">\r\n                    <td>{{i+1}}</td>\r\n                    <td class=\"left\">{{sample.sample}}</td>\r\n                    <td class=\"left\">{{sample.cq_value}}</td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n              <br>\r\n              <button class=\"btn btn-primary\" (click)=\"submitRawInhibitionResults()\">Calculate Dilution Factors</button>\r\n            </div>\r\n          </div>\r\n          <!-- end raw results display-->\r\n          <!-- inhibition dilution factor confirmation -->\r\n          <div *ngIf=\"dilutionFactorsCalculated\">\r\n            <div class=\"card-title\">\r\n              <b>Inhibition Dilution Factor Confirmation</b>\r\n              <br>\r\n              <label>Text file:\r\n                {{parsedRawInhResults.analysis_batch}}-{{parsedRawInhResults.extraction_number}}-{{inhTextFileNameNAType}}</label>\r\n\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n              <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                <h4>Batch Data</h4>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-lg-4 col-sm-6\">\r\n                <table class=\"table table-vertical table-compact\">\r\n                  <tbody>\r\n                    <tr>\r\n                      <th>Analysis Batch</th>\r\n                      <td>{{parsedRawInhResults.analysis_batch}}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th>Extraction Number</th>\r\n                      <td>{{parsedRawInhResults.extraction_number}}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <th>Nucleic Acid Inhibition Type</th>\r\n                      <td>{{parsedRawInhResults.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes}}</td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                <h4>Confirm Dilution Factors</h4>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                Dilution factors displayed have been calculated and suggested by lili. Update if appropriate or leave as\r\n                is, then click Submit\r\n                to save the inhibition dilution factors.\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-lg-4 col-md-6 col-sm-12\">\r\n                <form class=\"compact\" [formGroup]=\"dilutionsForm\" (ngSubmit)=\"submitInhibitions(dilutionsForm.value)\">\r\n                  <section class=\"form-block\">\r\n\r\n                    <div formArrayName=\"inhibitions\">\r\n\r\n                      <table class=\"table\">\r\n                        <thead>\r\n                          <tr>\r\n                            <th class=\"left\">Sample</th>\r\n                            <th class=\"left\">Dilution Factor</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          <tr *ngFor=\"let inh of inhibitionsArray.controls; let i = index\" [formGroupName]=\"i\">\r\n                            <td class=\"left\">\r\n                              <label class=\"required\">Sample {{inh.controls.sample.value}}</label>\r\n                            </td>\r\n                            <td>\r\n                              <input formControlName=\"dilution_factor\" type=\"number\" min=\"1\"\r\n                                class=\"dilution-factor-input\">\r\n                            </td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </table>\r\n                    </div>\r\n\r\n                  </section>\r\n                  <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"inhibitionUpdateErrorFlag\">\r\n                    <div clr-alert-item class=\"alert-item\">\r\n                      <span class=\"alert-text\">Submission error. Inhibition dilution factors not submitted.</span>\r\n                      <span>{{errorMessage}}</span>\r\n                      <div class=\"alert-actions\">\r\n                        <a class=\"alert-action\" (click)=\"submitInhibitions(dilutionsForm.value)\">Try again</a>\r\n                      </div>\r\n                    </div>\r\n                  </clr-alert>\r\n                  <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"inhibitionUpdateSuccessFlag\">\r\n                    <div clr-alert-item class=\"alert-item\">\r\n                      <span class=\"alert-text\">Inhibition dilution factors successfully submitted.</span>\r\n\r\n                    </div>\r\n                  </clr-alert>\r\n                  <button class=\"btn btn-primary\" *ngIf=\"!inhibitionUpdateSuccessFlag\" type=\"submit\"\r\n                    [clrLoading]=\"submitLoading\">Submit Dilution Factors</button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n            <div class=\"row\">\r\n              <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                <button *ngIf=\"inhibitionUpdateSuccessFlag\" class=\"btn btn-success\"\r\n                  (click)=\"resetInhibitions()\">Finshed</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </clr-tab-content>\r\n      </clr-tab>\r\n      <!-- end inhibition results tab -->\r\n\r\n      <!-- Batch Submit Neg results tab-->\r\n      <clr-tab>\r\n        <button clrTabLink>Bulk Submit Negative Results</button>\r\n        <clr-tab-content>\r\n          <div>\r\n            <div>\r\n              <div>\r\n                <h3>Batch Submit Negative Results</h3>\r\n              </div>\r\n            </div>\r\n            <div class=\"card-block\">\r\n              <div class=\"card-title\"></div>\r\n              <div class=\"card-text\">\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </clr-tab-content>\r\n      </clr-tab>\r\n      <!-- End Batch Submit Neg results tab-->\r\n\r\n    </clr-tabs>\r\n  </div>\r\n</div>\r\n\r\n<!-- begin override validity modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideOverrideValidityModal\">\r\n  <h3 class=\"modal-title\">\r\n    <clr-icon shape=\"switch\" size=\"36\"></clr-icon> Switch (override) validity of individual replicates\r\n  </h3>\r\n  <div class=\"modal-body\">\r\n    <p>You are about to override the validity of the following replicates. This will not change the value of any\r\n      associated\r\n      control, but will overwrite the validity flag of the replicate and\r\n      <b>will affect results calculation.</b>\r\n      <p>\r\n\r\n        <ul class=\"list compact list-unstyled\">\r\n          <li *ngFor=\"let rep of selected\">Overriding sample {{rep.sample}} from\r\n            <span class=\"label\"\r\n              [ngClass]=\"{'label-danger' : rep.invalid, 'label-success': !rep.invalid}\">{{rep.invalid ? \"Invalid\" : \"Valid\"}}</span>\r\n            to\r\n            <span class=\"label\"\r\n              [ngClass]=\"{'label-danger' : !rep.invalid, 'label-success': rep.invalid}\">{{!(rep.invalid) ? \"Invalid\" : \"Valid\"}}</span>\r\n          </li>\r\n        </ul>\r\n        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"replicateUpdateErrorFlag\">\r\n          <div clr-alert-item class=\"alert-item\">\r\n            <span class=\"alert-text\">Submission error. Replicate validity not updated.</span>\r\n            <span>{{errorMessage}}</span>\r\n            <div class=\"alert-actions\">\r\n              <a class=\"alert-action\" (click)=\"onUpdatePCRReplicates(selected)\">Try again</a>\r\n            </div>\r\n          </div>\r\n        </clr-alert>\r\n\r\n        <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"replicateUpdateSuccessFlag \">\r\n          <div clr-alert-item class=\"alert-item\">\r\n            <span class=\"alert-text\">Replicates' validity successfully updated.</span>\r\n            <div class=\"alert-actions\">\r\n              <a class=\"alert-action\"\r\n                (click)=\"showHideOverrideValidityModal  = false; replicateUpdateSuccessFlag = false\">Close</a>\r\n            </div>\r\n          </div>\r\n        </clr-alert>\r\n  </div>\r\n\r\n  <div class=\"modal-footer\">\r\n    <button class=\"btn btn-primary\" (click)=\"onUpdatePCRReplicates(selected)\" [clrLoading]=\"submitLoading\">Save\r\n      Changes</button>\r\n    <button class=\"btn btn-info\" (click)=\"showHideOverrideValidityModal = !showHideOverrideValidityModal\">Close</button>\r\n  </div>\r\n</clr-modal>\r\n<!-- end override validity modal -->"

/***/ }),

/***/ "./src/app/data-upload/data-upload.component.scss":
/***/ (function(module, exports) {

module.exports = ".text-smaller {\n  font-size: smaller; }\n\n.finish-button {\n  padding: 10px;\n  margin: 10px; }\n"

/***/ }),

/***/ "./src/app/data-upload/data-upload.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var _1 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var target_service_1 = __webpack_require__("./src/app/targets/target.service.ts");
var inhibition_service_1 = __webpack_require__("./src/app/inhibitions/inhibition.service.ts");
var extraction_batch_service_1 = __webpack_require__("./src/app/extraction-batches/extraction-batch.service.ts");
var pcr_replicate_batch_service_1 = __webpack_require__("./src/app/pcr-replicates/pcr-replicate-batch.service.ts");
var pcr_replicate_service_1 = __webpack_require__("./src/app/pcr-replicates/pcr-replicate.service.ts");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var DataUploadComponent = (function () {
    function DataUploadComponent(formBuilder, _inhibitionService, _extractionBatchService, _targetService, _pcrReplicateBatchService, _pcrReplicateService) {
        this.formBuilder = formBuilder;
        this._inhibitionService = _inhibitionService;
        this._extractionBatchService = _extractionBatchService;
        this._targetService = _targetService;
        this._pcrReplicateBatchService = _pcrReplicateBatchService;
        this._pcrReplicateService = _pcrReplicateService;
        this.allTargets = [];
        this.selected = [];
        this.inhFileNameErrorFlag = false;
        this.pcrResultsValidationReplicates = [];
        this.pcrResultsReplicates = [];
        // showResultsDisplay: boolean = false;
        this.rawResultsParsed = false;
        this.resultsSubmissionReady = false;
        this.validationResponseReady = false;
        this.rawInhResultsParsed = false;
        this.replicatesLoading = false;
        this.validationLoading = false;
        this.inhLoadingFlag = false;
        this.inhRawErrorMessage = '';
        this.inhRawErrorFlag = false;
        this.dilutionFactorsCalculated = false;
        this.targetFileNameErrorFlag = false;
        this.pcrReplicateBatchIDErrorFlag = false;
        this.resultsSubmissionErrorFlag = false;
        this.resultsSubmissionSuccessFlag = false;
        this.showHideOverrideValidityModal = false;
        this.replicateUpdateSuccessFlag = false;
        this.replicateUpdateErrorFlag = false;
        this.inhibitionUpdateSuccessFlag = false;
        this.inhibitionUpdateErrorFlag = false;
        this.submitLoading = false;
        this.buildDilutionsForm();
    }
    DataUploadComponent.prototype.resetFlags = function () {
        this.resultsSubmissionSuccessFlag = false;
        this.resultsSubmissionErrorFlag = false;
        this.rawResultsParsed = false;
        this.validationResponseReady = false;
    };
    DataUploadComponent.prototype.buildDilutionsForm = function () {
        this.dilutionsForm = this.formBuilder.group({
            inhibitions: this.formBuilder.array([
                this.formBuilder.group({
                    id: null,
                    sample: null,
                    dilution_factor: null
                })
            ])
        });
        this.inhibitionsArray = this.dilutionsForm.get('inhibitions');
    };
    DataUploadComponent.prototype.ngOnInit = function () {
        var _this = this;
        // on init, call getTargets function of the TargetService, set results to allTargets var
        this._targetService.getTargets()
            .subscribe(function (targets) {
            _this.allTargets = targets;
            _this.allTargets.sort(function (a, b) {
                if (a.name < b.name) {
                    return -1;
                }
                ;
                if (a.name > b.name) {
                    return 1;
                }
                ;
                return 0;
            });
        }, function (error) { _this.errorMessage = error; });
        this.nucleicAcidTypes = app_settings_1.APP_SETTINGS.NUCLEIC_ACID_TYPES;
    };
    DataUploadComponent.prototype.tsvJSON = function (tsv) {
        var lines = tsv.split("\n");
        // discard first line of text file (specific to LIDE text files)
        lines.splice(0, 1);
        var result = [];
        var headers = lines[0].split("\t");
        for (var i = 1; i < lines.length; i++) {
            var obj = {};
            var currentline = lines[i].split("\t");
            for (var j = 0; j < headers.length; j++) {
                obj[headers[j]] = currentline[j];
            }
            result.push(obj);
        }
        // return result as JavaScript object
        return result;
    };
    DataUploadComponent.prototype.lookupTargetID = function (targetCode) {
        for (var _i = 0, _a = this.allTargets; _i < _a.length; _i++) {
            var target = _a[_i];
            if (targetCode === target.code) {
                return target.id;
            }
        }
    };
    DataUploadComponent.prototype.clearFileInput = function (ctrl) {
        try {
            ctrl.value = null;
        }
        catch (ex) { }
        if (ctrl.value) {
            ctrl.parentNode.replaceChild(ctrl.cloneNode(true), ctrl);
        }
    };
    DataUploadComponent.prototype.loadInhFile = function (fileInput) {
        this.inhFileNameErrorFlag = false;
        var self = this;
        var input = fileInput.target;
        var fileName = fileInput.target.files[0].name;
        // let fileNamePattern: RegExp = (/\d+-\d-I[DR]\.txt/);
        var fileNamePattern = (/\d+-\d+-I[DR]\.txt/);
        if (!fileNamePattern.test(fileName)) {
            this.inhFileNameErrorFlag = true;
            return;
        }
        var tsv;
        var json = [];
        var fileReader = new FileReader();
        fileReader.onload = function (e) {
            // capture TSV string from file
            tsv = fileReader.result;
            // convert tsv to JSON
            json = self.tsvJSON(tsv);
            // delete superfluous fields from raw data
            for (var _i = 0, json_1 = json; _i < json_1.length; _i++) {
                var item = json_1[_i];
                delete item.Color;
                delete item.Include;
                delete item.Status;
                delete item.Pos;
                delete item.Standard;
            }
            self.parseInhJSON(fileName, json);
        };
        fileReader.readAsText(input.files[0]);
    };
    DataUploadComponent.prototype.loadTargetFile = function (fileInput) {
        this.rawResultsParsed = false;
        this.resultsSubmissionReady = false;
        this.validationResponseReady = false;
        this.resultsSubmissionErrorFlag = false;
        this.replicateUpdateSuccessFlag = false;
        this.resultsSubmissionSuccessFlag = false;
        this.targetFileNameErrorFlag = false;
        var self = this;
        var input = fileInput.target;
        var fileName = fileInput.target.files[0].name;
        // let fileNamePattern: RegExp = (/\d\d\d\d\d-\d-[A-z]+-\d/);
        var fileNamePattern = (/\d+-\d+-[a-zA-Z0-9]+-\d+.txt/);
        if (!fileNamePattern.test(fileName)) {
            this.targetFileNameErrorFlag = true;
            return;
        }
        var tsv;
        var json = [];
        var fileReader = new FileReader();
        fileReader.onload = function (e) {
            // capture TSV string from file
            tsv = fileReader.result;
            // convert tsv to JSON
            json = self.tsvJSON(tsv);
            // delete superfluous fields from raw data
            for (var _i = 0, json_2 = json; _i < json_2.length; _i++) {
                var item = json_2[_i];
                delete item.Color;
                delete item.Include;
                delete item.Status;
                delete item.Pos;
                delete item.Standard;
            }
            self.parseTargetJSON(fileName, json);
        };
        fileReader.readAsText(input.files[0]);
    };
    DataUploadComponent.prototype.parseTargetJSON = function (fileName, rawResults) {
        var _this = this;
        var rawTargetResults = {
            target: null,
            analysis_batch: null,
            extraction_number: null,
            replicate_number: null,
            // ext_neg_cq_value: null,
            // ext_neg_gc_reaction: null,
            // rt_neg_cq_value: null,
            // rt_neg_gc_reaction: null,
            // pcr_neg_cq_value: null,
            // pcr_neg_gc_reaction: null,
            // pcr_pos_cq_value: null,
            // pcr_pos_gc_reaction: null,
            re_pcr: null,
            notes: '',
            updated_pcrreplicates: []
        };
        var fileNameSansExtension = fileName.replace(".txt", "");
        var fileMetadata = fileNameSansExtension.split("-");
        var numbersOnlyPattern = (/^[0-9]*$/);
        rawTargetResults.analysis_batch = Number(fileMetadata[0]);
        rawTargetResults.extraction_number = Number(fileMetadata[1]);
        rawTargetResults.target = this.lookupTargetID(fileMetadata[2]);
        rawTargetResults.replicate_number = Number(fileMetadata[3]);
        // strictly for display on confirmation div
        this.textFileNameTargetCode = fileMetadata[2];
        for (var _i = 0, rawResults_1 = rawResults; _i < rawResults_1.length; _i++) {
            var rep = rawResults_1[_i];
            if (rep.Name === "EXT NEG") {
                if (rep.Cp === "") {
                    rawTargetResults.ext_neg_cq_value = null;
                }
                else {
                    rawTargetResults.ext_neg_cq_value = Number(rep.Cp);
                }
                // tslint:disable-next-line:max-line-length
                if (rep.Concentration === "") {
                    rawTargetResults.ext_neg_gc_reaction = null;
                }
                else {
                    rawTargetResults.ext_neg_gc_reaction = Number(rep.Concentration);
                }
            }
            if (rep.Name === "PCR NEG") {
                if (rep.Cp === "") {
                    rawTargetResults.pcr_neg_cq_value = null;
                }
                else {
                    rawTargetResults.pcr_neg_cq_value = Number(rep.Cp);
                }
                // tslint:disable-next-line:max-line-length
                if (rep.Concentration === "") {
                    rawTargetResults.pcr_neg_gc_reaction = null;
                }
                else {
                    rawTargetResults.pcr_neg_gc_reaction = Number(rep.Concentration);
                }
            }
            if (rep.Name === "POS") {
                if (rep.Cp === "") {
                    rawTargetResults.pcr_pos_cq_value = null;
                }
                else {
                    rawTargetResults.pcr_pos_cq_value = Number(rep.Cp);
                }
                // tslint:disable-next-line:max-line-length
                if (rep.Concentration === "") {
                    rawTargetResults.pcr_pos_gc_reaction = null;
                }
                else {
                    rawTargetResults.pcr_pos_gc_reaction = Number(rep.Concentration);
                }
            }
            if (rep.Name === "RT NEG") {
                if (rep.Cp === "") {
                    rawTargetResults.rt_neg_cq_value = null;
                }
                else {
                    rawTargetResults.rt_neg_cq_value = Number(rep.Cp);
                }
                // tslint:disable-next-line:max-line-length
                if (rep.Concentration === "") {
                    rawTargetResults.rt_neg_gc_reaction = null;
                }
                else {
                    rawTargetResults.rt_neg_gc_reaction = Number(rep.Concentration);
                }
            }
            if (numbersOnlyPattern.test(rep.Name)) {
                // these two lines set blank values to null, and coerce non-blank values to numbers
                if (rep.Cp === "") {
                    rep.Cp = null;
                }
                else {
                    rep.Cp = Number(rep.Cp);
                }
                if (rep.Concentration === "") {
                    rep.Concentration = null;
                }
                else {
                    rep.Concentration = Number(rep.Concentration);
                }
                rawTargetResults.updated_pcrreplicates.push({
                    "sample": Number(rep.Name),
                    "cq_value": rep.Cp,
                    "gc_reaction": rep.Concentration
                });
            }
        }
        this.parsedRawTargetResults = rawTargetResults;
        this.rawResultsParsed = true;
        // retrieve the PCR replicate batch ID based on text file name metadata
        this._pcrReplicateBatchService.getID(rawTargetResults.analysis_batch, rawTargetResults.extraction_number, rawTargetResults.target, rawTargetResults.replicate_number)
            .subscribe(function (pcrReplicateBatch) {
            if (pcrReplicateBatch.length === 0) {
                alert("Replicate #" + rawTargetResults.replicate_number + " not found in database.");
            }
            _this.parsedRawTargetResults_pcrBatchID = pcrReplicateBatch[0].id;
            _this.pcrReplicateBatchIDErrorFlag = false;
            _this.resultsSubmissionReady = true;
        }, function (error) {
            _this.errorMessage = error;
            _this.pcrReplicateBatchIDErrorFlag = true;
            _this.resultsSubmissionReady = false;
        });
    };
    DataUploadComponent.prototype.parseInhJSON = function (fileName, rawInhResults) {
        var inhResults = {
            analysis_batch: null,
            extraction_number: null,
            nucleic_acid_type: null,
            inh_pos_cq_value: null,
            inhibitions: []
        };
        var fileNameSansExtension = fileName.replace(".txt", "");
        var fileMetadata = fileNameSansExtension.split("-");
        var type = fileMetadata[2];
        // strictly for display on confirmation div
        this.inhTextFileNameNAType = fileMetadata[2];
        inhResults.analysis_batch = Number(fileMetadata[0]);
        inhResults.extraction_number = Number(fileMetadata[1]);
        if (type === "ID") {
            inhResults.nucleic_acid_type = 1;
        }
        else if (type === "IR") {
            inhResults.nucleic_acid_type = 2;
        }
        // loop below removes any superfluous blank lines (Name = undefined) with a reverse loop conditional and splice
        for (var i = rawInhResults.length - 1; i >= 0; --i) {
            if (rawInhResults[i].Name === undefined) {
                rawInhResults.splice(i, 1); // Remove blank lines
            }
        }
        for (var _i = 0, rawInhResults_1 = rawInhResults; _i < rawInhResults_1.length; _i++) {
            var sample = rawInhResults_1[_i];
            if (sample.Name === "INH CONT") {
                inhResults.inh_pos_cq_value = Number(sample.Cp);
            }
            else if (sample.Name !== "INH CONT") {
                inhResults.inhibitions.push({ "sample": Number(sample.Name), "cq_value": Number(sample.Cp) });
            }
        }
        this.parsedRawInhResults = inhResults;
        this.rawInhResultsParsed = true;
    };
    DataUploadComponent.prototype.submitRawInhibitionResults = function () {
        var _this = this;
        this.resetInhibitions();
        this._inhibitionService.submitRawInhibitionResults(this.parsedRawInhResults)
            .subscribe(function (calculatedDilutions) {
            _this.inhibitionValidationObject = calculatedDilutions;
            _this.inhibitionsArray.controls = [];
            // populate the dilutions form inhibitions array from the calculatedDilutions response
            for (var _i = 0, calculatedDilutions_1 = calculatedDilutions; _i < calculatedDilutions_1.length; _i++) {
                var inh = calculatedDilutions_1[_i];
                var formGroup = _this.formBuilder.group({
                    id: _this.formBuilder.control(inh.id),
                    sample: _this.formBuilder.control(inh.sample),
                    dilution_factor: _this.formBuilder.control(inh.suggested_dilution_factor),
                    cq_value: _this.formBuilder.control(inh.cq_value)
                });
                _this.inhibitionsArray.push(formGroup);
            }
            // capture the extractionbatch ID calculated by the inh calculation step response for use in the submitInhibitons func
            // the ID is rpeated in each item in the array, so just capture from the first item in the array
            // this.inhExtractionBatchID = calculatedDilutions[0].extraction_batch;
            _this.parsedRawInhResults.extraction_batch = calculatedDilutions[0].extraction_batch;
            _this.inhLoadingFlag = false;
            _this.dilutionFactorsCalculated = true;
        }, function (error) {
            _this.errorMessage = error;
            _this.inhLoadingFlag = false;
            _this.inhRawErrorMessage = error;
            _this.inhRawErrorFlag = true;
        });
    };
    // outgoing, old function
    DataUploadComponent.prototype.submitRawTargetResults = function () {
        var _this = this;
        this.replicatesLoading = true;
        this.validationResponseReady = false;
        this.resultsSubmissionSuccessFlag = false;
        this.errorMessage = '';
        this._pcrReplicateBatchService.update(this.parsedRawTargetResults_pcrBatchID, this.parsedRawTargetResults)
            .subscribe(function (results) {
            _this.pcrResultsObject = results;
            _this.pcrResultsReplicates = results.pcrreplicates;
            _this.pcrResultsReplicates.sort(function (a, b) {
                return a.sample - b.sample;
            });
            _this.resultsSubmissionSuccessFlag = true;
            _this.replicatesLoading = false;
            // this.finishResultsSubmission();
        }, function (error) {
            _this.errorMessage = error;
            _this.resultsSubmissionErrorFlag = true;
            _this.resultsSubmissionSuccessFlag = false;
            _this.replicatesLoading = false;
        });
    };
    // TODO: new validate function
    DataUploadComponent.prototype.validateTargetResults = function () {
        var _this = this;
        this.errorMessage = '';
        this.validationLoading = true;
        this._pcrReplicateBatchService.validate(this.parsedRawTargetResults)
            .subscribe(function (results) {
            console.log(results);
            // use only for testing
            // for (const rep of results.updated_pcrreplicates) {
            //   rep.validation_errors.push({
            //     "field": "cq_value",
            //     "message": "cq_value ('cp') is missing",
            //     "severity": 2
            //   })
            //   rep.validation_errors.push({
            //     "field": "gc_reaction",
            //     "message": "gc_reaction ('concentration') is missing",
            //     "severity": 2
            //   })
            // }
            _this.parsedRawTargetResults_pcrBatchID = results.id;
            _this.pcrReplicateBatchIDErrorFlag = false;
            _this.pcrResultsValidationObject = results;
            _this.pcrResultsValidationReplicates = results.updated_pcrreplicates;
            _this.pcrResultsValidationReplicates.sort(function (a, b) {
                return a.sample - b.sample;
            });
            _this.validationLoading = false;
            _this.validationResponseReady = true;
        }, function (error) {
            _this.errorMessage = error;
            _this.validationLoading = false;
            //this.resultsSubmissionErrorFlag = true;
        });
    };
    DataUploadComponent.prototype.onUpdatePCRReplicates = function (selectedReps) {
        var _this = this;
        this.errorMessage = '';
        this.replicateUpdateSuccessFlag = false;
        this.replicateUpdateErrorFlag = false;
        this.submitLoading = true;
        this.replicatesLoading = true;
        this.pcrResultsReplicates = [];
        var repArray = [];
        for (var _i = 0, selectedReps_1 = selectedReps; _i < selectedReps_1.length; _i++) {
            var rep = selectedReps_1[_i];
            repArray.push({
                "id": rep.id,
                "invalid": !rep.invalid
            });
        }
        this._pcrReplicateService.update(repArray)
            .subscribe(function (results) {
            _this.pcrResultsReplicates = results;
            _this.replicateUpdateSuccessFlag = true;
            _this.replicateUpdateErrorFlag = false;
            _this.submitLoading = false;
            _this.replicatesLoading = false;
        }, function (error) {
            _this.errorMessage = error;
            _this.replicateUpdateSuccessFlag = false;
            _this.replicateUpdateErrorFlag = true;
            _this.submitLoading = false;
            _this.replicatesLoading = false;
        });
    };
    DataUploadComponent.prototype.finishResultsSubmission = function () {
        this.rawResultsParsed = false;
        this.resultsSubmissionReady = false;
        this.validationResponseReady = false;
        this.resultsSubmissionErrorFlag = false;
        this.replicateUpdateSuccessFlag = false;
        this.resultsSubmissionSuccessFlag = false;
        this.clearFileInput(document.getElementById("targetFileInput"));
    };
    DataUploadComponent.prototype.resetResultsUpload = function () {
    };
    DataUploadComponent.prototype.submitInhibitions = function (dilutionsFormValue) {
        var _this = this;
        this.errorMessage = '';
        this.submitLoading = true;
        this.inhibitionUpdateSuccessFlag = false;
        this.inhibitionUpdateErrorFlag = false;
        var inhibitionsSubmission = [];
        for (var _i = 0, _a = dilutionsFormValue.inhibitions; _i < _a.length; _i++) {
            var inh = _a[_i];
            inhibitionsSubmission.push(inh);
        }
        this._inhibitionService.update(inhibitionsSubmission)
            .subscribe(function (results) {
            // build an object to update the EB record with the inh pos cq value (and nucleic acid type)
            var extractionbatchObject = {
                id: _this.parsedRawInhResults.extraction_batch,
                inh_pos_nucleic_acid_type: _this.parsedRawInhResults.nucleic_acid_type,
                inh_pos_cq_value: _this.parsedRawInhResults.inh_pos_cq_value
            };
            // submit PATCH to extractionbatch record with inh_pos_cq_value and inh_pos_nucleic_acid_type
            _this._extractionBatchService.update(extractionbatchObject)
                .subscribe(function (extractionbatch) {
                _this.inhibitionUpdateSuccessFlag = true;
                _this.inhibitionUpdateErrorFlag = false;
                _this.submitLoading = false;
            }, function (error) {
                _this.errorMessage = error;
            });
        }, function (error) {
            _this.errorMessage = error;
            _this.inhibitionUpdateSuccessFlag = false;
            _this.inhibitionUpdateErrorFlag = true;
            _this.submitLoading = false;
        });
    };
    DataUploadComponent.prototype.resetInhibitions = function () {
        this.errorMessage = '';
        this.inhibitionUpdateSuccessFlag = false;
        this.inhibitionUpdateErrorFlag = false;
        this.rawInhResultsParsed = false;
        this.dilutionFactorsCalculated = false;
        this.clearFileInput(document.getElementById("inhibitionFileInput"));
    };
    return DataUploadComponent;
}());
DataUploadComponent = __decorate([
    core_1.Component({
        selector: 'app-data-upload',
        template: __webpack_require__("./src/app/data-upload/data-upload.component.html"),
        styles: [__webpack_require__("./src/app/data-upload/data-upload.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof _1.FormBuilder !== "undefined" && _1.FormBuilder) === "function" && _a || Object, typeof (_b = typeof inhibition_service_1.InhibitionService !== "undefined" && inhibition_service_1.InhibitionService) === "function" && _b || Object, typeof (_c = typeof extraction_batch_service_1.ExtractionBatchService !== "undefined" && extraction_batch_service_1.ExtractionBatchService) === "function" && _c || Object, typeof (_d = typeof target_service_1.TargetService !== "undefined" && target_service_1.TargetService) === "function" && _d || Object, typeof (_e = typeof pcr_replicate_batch_service_1.PcrReplicateBatchService !== "undefined" && pcr_replicate_batch_service_1.PcrReplicateBatchService) === "function" && _e || Object, typeof (_f = typeof pcr_replicate_service_1.PcrReplicateService !== "undefined" && pcr_replicate_service_1.PcrReplicateService) === "function" && _f || Object])
], DataUploadComponent);
exports.DataUploadComponent = DataUploadComponent;
var _a, _b, _c, _d, _e, _f;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/data-upload/data-upload.component.js.map

/***/ }),

/***/ "./src/app/extraction-batches/extraction-batch.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var ExtractionBatchService = (function () {
    function ExtractionBatchService(_http) {
        this._http = _http;
    }
    ExtractionBatchService.prototype.create = function (formValue) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.post(app_settings_1.APP_SETTINGS.EXTRACTION_BATCHES_URL, formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    ExtractionBatchService.prototype.update = function (formValue) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS
        });
        return this._http.patch(app_settings_1.APP_SETTINGS.EXTRACTION_BATCHES_URL + formValue.id + '/', formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    ExtractionBatchService.prototype.delete = function (id) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.delete(app_settings_1.APP_SETTINGS.EXTRACTION_BATCHES_URL + id, options)
            .catch(this.handleError);
    };
    ExtractionBatchService.prototype.bulkUpdate = function (ebSubmissionArray) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS
        });
        return this._http.patch(app_settings_1.APP_SETTINGS.EXTRACTION_BATCHES_URL, ebSubmissionArray, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    ExtractionBatchService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return ExtractionBatchService;
}());
ExtractionBatchService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], ExtractionBatchService);
exports.ExtractionBatchService = ExtractionBatchService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/extraction-batches/extraction-batch.service.js.map

/***/ }),

/***/ "./src/app/extraction-batches/extraction-method.resolve.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var extraction_method_service_1 = __webpack_require__("./src/app/extraction-batches/extraction-method.service.ts");
var ExtractionResolve = (function () {
    function ExtractionResolve(_extractionService) {
        this._extractionService = _extractionService;
    }
    ExtractionResolve.prototype.resolve = function (route) {
        return this._extractionService.getExtractionMethods();
    };
    return ExtractionResolve;
}());
ExtractionResolve = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof extraction_method_service_1.ExtractionMethodService !== "undefined" && extraction_method_service_1.ExtractionMethodService) === "function" && _a || Object])
], ExtractionResolve);
exports.ExtractionResolve = ExtractionResolve;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/extraction-batches/extraction-method.resolve.js.map

/***/ }),

/***/ "./src/app/extraction-batches/extraction-method.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var ExtractionMethodService = (function () {
    function ExtractionMethodService(_http) {
        this._http = _http;
    }
    ExtractionMethodService.prototype.extractData = function (res) {
        var body = res.json();
        return body.data || {};
    };
    ExtractionMethodService.prototype.getExtractionMethods = function () {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.get(app_settings_1.APP_SETTINGS.EXTRACTION_METHODS_URL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    ExtractionMethodService.prototype.create = function (formValue) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS });
        return this._http.post(app_settings_1.APP_SETTINGS.EXTRACTION_METHODS_URL, formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    ExtractionMethodService.prototype.update = function (formValue) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.put(app_settings_1.APP_SETTINGS.EXTRACTION_METHODS_URL + formValue.id + '/', formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    ExtractionMethodService.prototype.delete = function (id) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.delete(app_settings_1.APP_SETTINGS.EXTRACTION_METHODS_URL + id, options)
            .catch(this.handleError);
    };
    ExtractionMethodService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return ExtractionMethodService;
}());
ExtractionMethodService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], ExtractionMethodService);
exports.ExtractionMethodService = ExtractionMethodService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/extraction-batches/extraction-method.service.js.map

/***/ }),

/***/ "./src/app/fcsv/final-concentrated-sample-volume.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var FinalConcentratedSampleVolumeService = (function () {
    function FinalConcentratedSampleVolumeService(_http) {
        this._http = _http;
    }
    FinalConcentratedSampleVolumeService.prototype.create = function (fcsvSubmission) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.post(app_settings_1.APP_SETTINGS.FCSV_URL, fcsvSubmission, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    FinalConcentratedSampleVolumeService.prototype.update = function (fcsvID, formValue) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS
        });
        return this._http.put(app_settings_1.APP_SETTINGS.FCSV_URL + fcsvID + '/', formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    FinalConcentratedSampleVolumeService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return FinalConcentratedSampleVolumeService;
}());
FinalConcentratedSampleVolumeService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], FinalConcentratedSampleVolumeService);
exports.FinalConcentratedSampleVolumeService = FinalConcentratedSampleVolumeService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/fcsv/final-concentrated-sample-volume.service.js.map

/***/ }),

/***/ "./src/app/home/home.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\r\n    <div class=\"col-lg-8 col-md-12 col-sm-12 col-xs-12\">\r\n        <div class=\"card\">\r\n            <div class=\"card-block\">\r\n                <div class=\"card-text\">\r\n                    <p>Welcome to\r\n                        <span class=\"standoutMore\">lili</span>\r\n                        <br>\r\n                        <span class=\"standout\">L</span>aboratory for\r\n                        <span class=\"standout\">I</span>nfectious Disease and Environment\r\n                        <span class=\"standout\">L</span>aboratory\r\n                        <span class=\"standout\">I</span>nformation Management System.\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/home/home.component.scss":
/***/ (function(module, exports) {

module.exports = ".standout {\n  font-size: x-large;\n  font-weight: bold; }\n\n.standoutMore {\n  font-size: xx-large;\n  font-weight: bold; }\n"

/***/ }),

/***/ "./src/app/home/home.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var HomeComponent = (function () {
    function HomeComponent() {
    }
    return HomeComponent;
}());
HomeComponent = __decorate([
    core_1.Component({
        styles: [__webpack_require__("./src/app/home/home.component.scss")],
        template: __webpack_require__("./src/app/home/home.component.html"),
    }),
    __metadata("design:paramtypes", [])
], HomeComponent);
exports.HomeComponent = HomeComponent;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/home/home.component.js.map

/***/ }),

/***/ "./src/app/index.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__("./src/app/app.component.ts"));
__export(__webpack_require__("./src/app/app.module.ts"));
//# sourceMappingURL=D:/projects/lili/src/src/src/app/index.js.map

/***/ }),

/***/ "./src/app/inhibitions/inhibition.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var InhibitionService = (function () {
    function InhibitionService(_http) {
        this._http = _http;
    }
    InhibitionService.prototype.submitRawInhibitionResults = function (rawInhResults) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.post(app_settings_1.APP_SETTINGS.INHIBITIONS_RAW_RESULTS_URL, rawInhResults, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    InhibitionService.prototype.create = function (formValue) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.post(app_settings_1.APP_SETTINGS.INHIBITIONS_URL, formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    InhibitionService.prototype.update = function (inhibitionArray) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.patch(app_settings_1.APP_SETTINGS.INHIBITIONS_URL, inhibitionArray, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    InhibitionService.prototype.getInhibitionReport = function (queryObject) {
        var queryString = '';
        queryString += '?sample=';
        for (var _i = 0, _a = queryObject.samples; _i < _a.length; _i++) {
            var sample = _a[_i];
            queryString += ((sample.toString()) + ',');
        }
        queryString = queryString.slice(0, -1);
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.EXTRACTIONS_URL + 'inhibition_report/' + queryString, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    InhibitionService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return InhibitionService;
}());
InhibitionService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], InhibitionService);
exports.InhibitionService = InhibitionService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/inhibitions/inhibition.service.js.map

/***/ }),

/***/ "./src/app/pcr-replicates/pcr-replicate-batch.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var PcrReplicateBatchService = (function () {
    function PcrReplicateBatchService(_http) {
        this._http = _http;
    }
    PcrReplicateBatchService.prototype.getID = function (analysisBatchID, extractionNo, targetID, replicateNo) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.REPLICATE_BATCH_URL +
            '?analysis_batch=' + analysisBatchID +
            '&extraction_number=' + extractionNo +
            '&target=' + targetID +
            '&replicate_number=' + replicateNo, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    PcrReplicateBatchService.prototype.validate = function (targetResults) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.post(app_settings_1.APP_SETTINGS.REPLICATE_BATCH_URL + 'validate/', targetResults, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    PcrReplicateBatchService.prototype.update = function (pcrBatchID, targetResults) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.put(app_settings_1.APP_SETTINGS.REPLICATE_BATCH_URL + pcrBatchID + '/', targetResults, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    PcrReplicateBatchService.prototype.postBulkNegativeResults = function (replicateArray) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.post(app_settings_1.APP_SETTINGS.REPLICATE_BATCH_URL + 'bulk_load_negatives/', replicateArray, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    PcrReplicateBatchService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return PcrReplicateBatchService;
}());
PcrReplicateBatchService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], PcrReplicateBatchService);
exports.PcrReplicateBatchService = PcrReplicateBatchService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/pcr-replicates/pcr-replicate-batch.service.js.map

/***/ }),

/***/ "./src/app/pcr-replicates/pcr-replicate.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var PcrReplicateService = (function () {
    function PcrReplicateService(_http) {
        this._http = _http;
    }
    // TODO: update this to handle batch (array) patch
    PcrReplicateService.prototype.update = function (replicateArray) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.patch(app_settings_1.APP_SETTINGS.REPLICATES_URL, replicateArray, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    PcrReplicateService.prototype.getPCRReplicates = function (replicateList) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.REPLICATES_URL + '?id=' + replicateList, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    PcrReplicateService.prototype.getSummaryStatistics = function (queryObject) {
        var queryString = '';
        queryString += '?sample=';
        for (var _i = 0, _a = queryObject.samples; _i < _a.length; _i++) {
            var sample = _a[_i];
            queryString += ((sample.toString()) + ',');
        }
        queryString = queryString.slice(0, -1);
        queryString += '&target=';
        for (var _b = 0, _c = queryObject.targets; _b < _c.length; _b++) {
            var target = _c[_b];
            queryString += ((target.toString()) + ',');
        }
        queryString = queryString.slice(0, -1);
        if (queryObject.summary_stats.length > 0) {
            queryString += '&statistic=';
            for (var _d = 0, _e = queryObject.summary_stats; _d < _e.length; _d++) {
                var stat = _e[_d];
                queryString += ((stat.toString()) + ',');
            }
            queryString = queryString.slice(0, -1);
        }
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.REPLICATES_URL + 'summary_statistics/' + queryString, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    PcrReplicateService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return PcrReplicateService;
}());
PcrReplicateService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], PcrReplicateService);
exports.PcrReplicateService = PcrReplicateService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/pcr-replicates/pcr-replicate.service.js.map

/***/ }),

/***/ "./src/app/reports/control-results-report.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var ControlResultsReportService = (function () {
    function ControlResultsReportService(_http) {
        this._http = _http;
    }
    ControlResultsReportService.prototype.getControlResultsReport = function (queryObject) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.post(app_settings_1.APP_SETTINGS.CONTROL_RESULTS_REPORT_URL, queryObject, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    ControlResultsReportService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return ControlResultsReportService;
}());
ControlResultsReportService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], ControlResultsReportService);
exports.ControlResultsReportService = ControlResultsReportService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/reports/control-results-report.service.js.map

/***/ }),

/***/ "./src/app/reports/quality-control-report.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var QualityControlReportService = (function () {
    function QualityControlReportService(_http) {
        this._http = _http;
    }
    QualityControlReportService.prototype.getQualityControlReport = function (sampleArray) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.post(app_settings_1.APP_SETTINGS.QUALITY_CONTROL_REPORT_URL, sampleArray, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    QualityControlReportService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return QualityControlReportService;
}());
QualityControlReportService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], QualityControlReportService);
exports.QualityControlReportService = QualityControlReportService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/reports/quality-control-report.service.js.map

/***/ }),

/***/ "./src/app/reports/report-file.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var ReportFileService = (function () {
    function ReportFileService(_http) {
        this._http = _http;
    }
    ReportFileService.prototype.getReportFiles = function () {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.REPORT_FILES_URL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    ReportFileService.prototype.retrieveReport = function (fileURL) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.get(fileURL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    ReportFileService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return ReportFileService;
}());
ReportFileService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], ReportFileService);
exports.ReportFileService = ReportFileService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/reports/report-file.service.js.map

/***/ }),

/***/ "./src/app/reports/report-status.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var ReportStatusService = (function () {
    function ReportStatusService(_http) {
        this._http = _http;
    }
    ReportStatusService.prototype.getReportStatuses = function () {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.get(app_settings_1.APP_SETTINGS.REPORT_STATUSES_URL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    ReportStatusService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return ReportStatusService;
}());
ReportStatusService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], ReportStatusService);
exports.ReportStatusService = ReportStatusService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/reports/report-status.service.js.map

/***/ }),

/***/ "./src/app/reports/report-types.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var ReportTypesService = (function () {
    function ReportTypesService(_http) {
        this._http = _http;
    }
    ReportTypesService.prototype.getReportTypes = function () {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.get(app_settings_1.APP_SETTINGS.REPORT_TYPES_URL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    ReportTypesService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return ReportTypesService;
}());
ReportTypesService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], ReportTypesService);
exports.ReportTypesService = ReportTypesService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/reports/report-types.service.js.map

/***/ }),

/***/ "./src/app/reports/reports.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\r\n    <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n        <h3>Reports</h3>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div class=\"row\">\r\n    <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n\r\n        <clr-tabs>\r\n            <!-- Generate Reports tab -->\r\n            <clr-tab>\r\n                <button clrTabLink>Generate Reports</button>\r\n                <clr-tab-content>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n                            <p>\r\n                                <button class=\"btn btn-outline\" (click)=\"openReportsQueryWizard()\">\r\n                                    <clr-icon shape=\"search\"></clr-icon> Open Reports Query Builder\r\n                                </button>\r\n\r\n                        </div>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n\r\n                                <clr-wizard #reportsQueryWizard [(clrWizardOpen)]=\"reportsQueryWizardActive\">\r\n                                    <clr-wizard-title>Reports Query Builder</clr-wizard-title>\r\n\r\n                                    <clr-wizard-button [type]=\"'cancel'\">Cancel</clr-wizard-button>\r\n                                    <clr-wizard-button [type]=\"'previous'\">Back</clr-wizard-button>\r\n                                    <clr-wizard-button [type]=\"'next'\">Next</clr-wizard-button>\r\n                                    <clr-wizard-button [type]=\"'finish'\">Finish</clr-wizard-button>\r\n\r\n                                    <clr-wizard-page (clrWizardPageCustomButton)=\"doCustomClick($event)\">\r\n                                        <ng-template clrPageTitle>Select Samples</ng-template>\r\n\r\n                                        <!-- Begin sample query form -->\r\n                                        <div class=\"card-text\">\r\n                                            <form class=\"form compact\" [formGroup]=\"sampleQueryForm\"\r\n                                                (ngSubmit)=\"onSubmitSampleQuery(sampleQueryForm.value)\">\r\n                                                <section class=\"form-block\">\r\n\r\n                                                    <div class=\"form-group\">\r\n                                                        <label\r\n                                                            [ngClass]=\"{'required': sampleQueryForm.get('study').enabled}\">Study</label>\r\n                                                        <label for=\"studySelect\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                                            class=\"tooltip tooltip-validation tooltip-sm\"\r\n                                                            [class.invalid]=\"sampleQueryForm.get('study').invalid && (sampleQueryForm.get('study').dirty || sampleQueryForm.get('study').touched)\">\r\n                                                            <div class=\"select\">\r\n                                                                <select id=\"studySelect\" name=\"study\"\r\n                                                                    formControlName=\"study\">\r\n                                                                    <option value=\"\">\r\n                                                                        <span class=\"all\">ALL STUDIES</span>\r\n                                                                    </option>\r\n                                                                    <option *ngFor=\"let study of studies\"\r\n                                                                        [value]=\"study.id\">{{study.name}}\r\n                                                                    </option>\r\n                                                                </select>\r\n                                                            </div>\r\n                                                        </label>\r\n                                                    </div>\r\n\r\n                                                    <div class=\"form-group\">\r\n                                                        <label>Sample ID Range</label>\r\n                                                        <span>From</span>\r\n                                                        <input type=\"number\" formControlName=\"from_id\">\r\n                                                        <span>To</span>\r\n                                                        <input type=\"number\" formControlName=\"to_id\">\r\n                                                    </div>\r\n\r\n                                                    <div class=\"form-group\">\r\n                                                        <label>Collection Start Date Range</label>\r\n                                                        <span>From</span>\r\n                                                        <input type=\"date\" formControlName=\"from_collection_start_date\">\r\n                                                        <span>To</span>\r\n                                                        <input type=\"date\" formControlName=\"to_collection_start_date\">\r\n                                                    </div>\r\n\r\n                                                    <div class=\"form-group\">\r\n                                                        <label>Collaborator Sample ID</label>\r\n                                                        <input id=\"collabSampleIdInput\" type=\"text\"\r\n                                                            formControlName=\"collaborator_sample_id\">\r\n                                                    </div>\r\n\r\n                                                    <div class=\"form-group\">\r\n                                                        <label>Peg Neg (returns associated samples)</label>\r\n                                                        <input type=\"number\" formControlName=\"peg_neg\">\r\n                                                    </div>\r\n                                                    <!-- <div class=\"form-group\">\r\n                                                                <label>Matrix</label>\r\n                                                                <div class=\"select\">\r\n                                                                    <select id=\"matrixSelect\" name=\"matrix\" formControlName=\"matrix\">\r\n                                                                        <option value=\"\">\r\n                                                                            <span class=\"all\">ALL MATRICES</span>\r\n                                                                        </option>\r\n                                                                        <option *ngFor=\"let matrix of matrices\" [value]=\"matrix.id\">{{matrix.name}}</option>\r\n                                                                    </select>\r\n                                                                </div>\r\n                                                            </div>\r\n                                \r\n                                                            <div class=\"form-group\">\r\n                                                                <label>Sample type</label>\r\n                                                                <div class=\"select\">\r\n                                                                    <select id=\"sampleTypeSelect\" name=\"sample_type\" formControlName=\"sample_type\">\r\n                                                                        <option value=\"\">\r\n                                                                            <span class=\"all\">ALL SAMPLE TYPES</span>\r\n                                                                        </option>\r\n                                                                        <option *ngFor=\"let sampleType of sampleTypes\" [value]=\"sampleType.id\">{{sampleType.name}}</option>\r\n                                                                    </select>\r\n                                                                </div>\r\n                                                            </div> -->\r\n\r\n                                                </section>\r\n\r\n                                                <clr-alert [clrAlertType]=\"'alert-danger'\"\r\n                                                    *ngIf=\"sampleQuerySizeErrorFlag\">\r\n                                                    <div class=\"alert-item\">\r\n                                                        <span class=\"alert-text\">Your query results are too large\r\n                                                            (greater than\r\n                                                            {{queryCountLimit}}). Please narrow your search.</span>\r\n                                                    </div>\r\n                                                </clr-alert>\r\n\r\n                                                <button class=\"btn btn-primary\" type=\"submit\"\r\n                                                    [clrLoading]=\"submitLoading\">\r\n                                                    <clr-icon shape=\"filter\"></clr-icon> Filter Samples\r\n                                                </button>\r\n                                            </form>\r\n                                        </div>\r\n\r\n                                        <div *ngIf=\"sampleQueryComplete\">\r\n                                            <h4>Query returned {{samplesCount}} sample records</h4>\r\n                                        </div>\r\n                                        <!-- End sample query form -->\r\n\r\n\r\n                                        <div class=\"in-wizard-datagrid\">\r\n                                            <clr-datagrid [(clrDgSelected)]=\"selected\" [clrDgLoading]=\"samplesLoading\"\r\n                                                [clDgRowSelection]=\"true\" class=\"datagrid-compact\">\r\n\r\n                                                <clr-dg-action-bar>\r\n                                                    <div class=\"btn-group\">\r\n                                                        <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                                                            (click)=\"selectAll()\">\r\n                                                            <clr-icon shape=\"check\" size=\"16\"></clr-icon> Select All\r\n                                                        </button>\r\n                                                    </div>\r\n                                                    <div class=\"btn-group\">\r\n                                                        <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                                                            (click)=\"deselectAll()\">\r\n                                                            <clr-icon shape=\"window-close\" size=\"16\"></clr-icon>\r\n                                                            Deselect All\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </clr-dg-action-bar>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'id'\">\r\n                                                    Sample ID\r\n                                                    <clr-dg-filter [clrDgFilter]=\"rangeFilter\">\r\n                                                        <range-filter #rangeFilter></range-filter>\r\n                                                    </clr-dg-filter>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'collaborator_sample_id'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Collaborator Sample ID\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'study_string'\">\r\n                                                    Study\r\n                                                    <clr-dg-filter [clrDgFilter]=\"studyFilter\">\r\n                                                        <study-filter #studyFilter></study-filter>\r\n                                                    </clr-dg-filter>\r\n                                                </clr-dg-column>\r\n\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'collection_start_date'\">\r\n                                                    Collect Start Date\r\n                                                    <clr-dg-filter [clrDgFilter]=\"CollectionStartDateFilter\">\r\n                                                        <collection-start-date-filter\r\n                                                            [dateField]=\"'collection_start_date'\"\r\n                                                            #CollectionStartDateFilter></collection-start-date-filter>\r\n                                                    </clr-dg-filter>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-row *clrDgItems=\"let sample of allSamples\" [clrDgItem]=\"sample\">\r\n                                                    <clr-dg-cell>{{sample.id}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{sample.collaborator_sample_id}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{sample.study_string}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{sample.collection_start_date | date:'shortDate'}}\r\n                                                    </clr-dg-cell>\r\n                                                </clr-dg-row>\r\n\r\n                                                <clr-dg-footer>\r\n                                                    {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of\r\n                                                    {{pagination.totalItems}}\r\n                                                    samples\r\n                                                    <clr-dg-pagination #pagination [clrDgPageSize]=\"10\">\r\n                                                    </clr-dg-pagination>\r\n                                                </clr-dg-footer>\r\n                                            </clr-datagrid>\r\n\r\n                                        </div>\r\n                                        <p>\r\n                                            <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"sampleSelectErrorFlag\">\r\n                                                <div clr-alert-item class=\"alert-item\">\r\n                                                    <span class=\"alert-text\">Please select at least one sample to\r\n                                                        continue.</span>\r\n                                                </div>\r\n                                            </clr-alert>\r\n\r\n                                            <ng-template clrPageButtons>\r\n                                                <clr-wizard-button [type]=\"'custom-cancel'\">Cancel</clr-wizard-button>\r\n                                                <clr-wizard-button [type]=\"'custom-previous'\">Back</clr-wizard-button>\r\n                                                <clr-wizard-button [type]=\"'custom-next-sampleSelect'\">Next\r\n                                                </clr-wizard-button>\r\n                                            </ng-template>\r\n                                    </clr-wizard-page>\r\n\r\n                                    <clr-wizard-page (clrWizardPageCustomButton)=\"doCustomClick($event)\">\r\n                                        <ng-template clrPageTitle>Select Targets</ng-template>\r\n                                        <div class=\"in-wizard-datagrid\">\r\n                                            <clr-datagrid [(clrDgSelected)]=\"selected\" [clDgRowSelection]=\"true\"\r\n                                                class=\"datagrid-compact\">\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'name'\">Name</clr-dg-column>\r\n                                                <clr-dg-column [clrDgField]=\"'code'\">Code</clr-dg-column>\r\n                                                <clr-dg-column [clrDgField]=\"'type'\">Type</clr-dg-column>\r\n\r\n                                                <clr-dg-row *clrDgItems=\"let target of allTargets\" [clrDgItem]=\"target\">\r\n                                                    <clr-dg-cell>{{target.name}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{target.code}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>\r\n                                                        {{target.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes }}\r\n                                                    </clr-dg-cell>\r\n                                                </clr-dg-row>\r\n\r\n                                                <clr-dg-footer>{{allTargets.length}} targets</clr-dg-footer>\r\n                                            </clr-datagrid>\r\n                                        </div>\r\n                                        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"targetSelectErrorFlag\">\r\n                                            <div clr-alert-item class=\"alert-item\">\r\n                                                <span class=\"alert-text\">Please select at least one target to\r\n                                                    continue.</span>\r\n                                            </div>\r\n                                        </clr-alert>\r\n                                        <ng-template clrPageButtons>\r\n                                            <clr-wizard-button [type]=\"'custom-cancel'\">Cancel</clr-wizard-button>\r\n                                            <clr-wizard-button [type]=\"'custom-previous'\">Back</clr-wizard-button>\r\n                                            <clr-wizard-button [type]=\"'custom-next-targetSelect'\">Next\r\n                                            </clr-wizard-button>\r\n                                        </ng-template>\r\n                                    </clr-wizard-page>\r\n\r\n                                    <clr-wizard-page (clrWizardPageCustomButton)=\"doCustomClick($event)\">\r\n                                        <ng-template clrPageTitle>Query Summary</ng-template>\r\n                                        <label>Samples:</label>\r\n                                        <ul>\r\n                                            <li *ngFor=\"let sample of reportsQuery.samples\">{{sample}}</li>\r\n                                        </ul>\r\n                                        <p>\r\n                                            <label>Targets:</label>\r\n                                            <ul>\r\n                                                <li *ngFor=\"let target of reportsQuery.targets\">\r\n                                                    {{target | displayValue:'name': allTargets}}\r\n                                                </li>\r\n                                            </ul>\r\n\r\n                                            <ng-template clrPageButtons>\r\n                                                <clr-wizard-button [type]=\"'cancel'\">Cancel</clr-wizard-button>\r\n                                                <clr-wizard-button [type]=\"'custom-previous'\">Back</clr-wizard-button>\r\n                                                <clr-wizard-button [type]=\"'custom-finish'\">Finish</clr-wizard-button>\r\n                                            </ng-template>\r\n\r\n                                    </clr-wizard-page>\r\n                                </clr-wizard>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n                            <div class=\"card\">\r\n                                <div class=\"card-header\">Current Query</div>\r\n                                <div class=\"card-block\"\r\n                                    *ngIf=\"reportsQuery.samples.length === 0 && reportsQuery.targets.length === 0\">\r\n                                    No Samples or Targets Selected\r\n                                </div>\r\n                                <div class=\"card-block\"\r\n                                    *ngIf=\"reportsQuery.samples.length > 0 || reportsQuery.targets.length > 0\">\r\n                                    <div class=\"card-title\">Samples</div>\r\n                                    <div class=\"row list-section\">\r\n                                        <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12 list\">\r\n                                            <!-- <label class=\"text-larger\">Samples:&nbsp;</label> -->\r\n                                            <label></label><span *ngIf=\"reportsQuery.samples.length === 0\">No Samples\r\n                                                Selected </span><span *ngFor=\"let sample of reportsQuery.samples\"\r\n                                                class=\"label list-item\">{{sample}}&nbsp;</span><br>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"card-title\">Targets</div>\r\n                                    <div class=\"row list-section\">\r\n                                        <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12 list\">\r\n                                            <!-- <label class=\"text-larger text-purple\">Targets:&nbsp;</label> -->\r\n                                            <label></label><span *ngIf=\"reportsQuery.targets.length === 0\">No Targets\r\n                                                Selected </span><span *ngFor=\"let target of reportsQuery.targets\"\r\n                                                class=\"label label-purple list-item\">{{target | displayValue:'name': allTargets}}&nbsp;</span>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n                            <div class=\"card\">\r\n                                <div class=\"card-header\">Report Selection</div>\r\n                                <div class=\"card-block\">\r\n\r\n                                    <form [formGroup]=\"reportSelectForm\">\r\n                                        <section class=\"form-block\">\r\n                                            <!-- <label>Choose Report(s)</label> -->\r\n                                            <div class=\"form-group\">\r\n                                                <label>Choose Report(s)</label>\r\n\r\n                                                <!-- <div class=\"checkbox\">\r\n                                                            <input type=\"checkbox\" id=\"inhibitionReport\" formControlName=\"inhibition_report\">\r\n                                                            <label for=\"inhibitionReport\">Inhibition Report</label><br><span\r\n                                                                class=\"text-italic\">Requires Sample\r\n                                                                selection</span>\r\n                                                        </div>\r\n                                                        <div class=\"checkbox\">\r\n                                                            <input type=\"checkbox\" id=\"resultsReportSummary\"\r\n                                                                formControlName=\"results_report_summary\">\r\n                                                            <label for=\"resultsReportSummary\">Results Report Summary</label><br><span\r\n                                                                class=\"text-italic\">Requires\r\n                                                                Sample and Target selection</span>\r\n                                                        </div>\r\n                                                        <div class=\"checkbox\">\r\n                                                            <input type=\"checkbox\" id=\"individualSampleReport\"\r\n                                                                formControlName=\"individual_sample_report\">\r\n                                                            <label for=\"individualSampleReport\">Individual Sample Report</label><br><span\r\n                                                                class=\"text-italic\">Requires\r\n                                                                Sample and Target selection</span>\r\n                                                        </div>\r\n                                                        <div class=\"checkbox\">\r\n                                                            <input type=\"checkbox\" id=\"qualityControlReport\"\r\n                                                                formControlName=\"quality_control_report\">\r\n                                                            <label for=\"qualityControlReport\">Quality Control Report</label><br><span\r\n                                                                class=\"text-italic\">Requires\r\n                                                                Sample selection</span>\r\n                                                        </div>\r\n                                                        <div class=\"checkbox\">\r\n                                                            <input type=\"checkbox\" id=\"controlResultsReport\"\r\n                                                                formControlName=\"controls_result_report\">\r\n                                                            <label for=\"controlResultsReport\">Controls Results Report</label><br><span\r\n                                                                class=\"text-italic\">Requires\r\n                                                                Sample and Target selection</span>\r\n                                                        </div> -->\r\n\r\n                                                <clr-checkbox formControlName=\"inhibition_report\"\r\n                                                    [clrDisabled]=\"reportsQuery.samples.length < 1\">\r\n                                                    Inhibition Report\r\n                                                </clr-checkbox><br><span class=\"text-italic\">Requires\r\n                                                    Sample selection</span>\r\n\r\n                                                <clr-checkbox formControlName=\"results_report_summary\"\r\n                                                    [clrDisabled]=\"reportsQuery.samples.length < 1 || reportsQuery.targets.length < 1\">\r\n                                                    Results Report Summary\r\n                                                </clr-checkbox><br><span class=\"text-italic\">Requires\r\n                                                    Sample and Target selection</span>\r\n\r\n                                                <div class=\"card\" *ngIf=\"reportSelectForm.value.results_report_summary\"\r\n                                                    formGroupName=\"results_report_summary_options\">\r\n                                                    <div class=\"card-block\">\r\n                                                        <div class=\"card-title\">\r\n                                                            <span class=\"text-smaller\">Results Report Summary Statistics\r\n                                                                Options</span>\r\n                                                        </div>\r\n                                                        <div class=\"card-text\">\r\n                                                            <clr-checkbox [clrInline]=\"true\"\r\n                                                                formControlName=\"sample_count\">\r\n                                                                Sample Count\r\n                                                            </clr-checkbox>\r\n                                                            <clr-checkbox [clrInline]=\"true\"\r\n                                                                formControlName=\"positive_count\">\r\n                                                                Positive Sample Count\r\n                                                            </clr-checkbox>\r\n                                                            <clr-checkbox [clrInline]=\"true\"\r\n                                                                formControlName=\"percent_positive\">\r\n                                                                Percent Positive\r\n                                                            </clr-checkbox>\r\n                                                            <clr-checkbox [clrInline]=\"true\"\r\n                                                                formControlName=\"max_concentration\">\r\n                                                                Max Concentration\r\n                                                            </clr-checkbox>\r\n                                                            <clr-checkbox [clrInline]=\"true\"\r\n                                                                formControlName=\"min_concentration\">\r\n                                                                Min Concentration\r\n                                                            </clr-checkbox>\r\n                                                            <clr-checkbox [clrInline]=\"true\"\r\n                                                                formControlName=\"median_concentration\">\r\n                                                                Median Concentration\r\n                                                            </clr-checkbox>\r\n                                                            <clr-checkbox [clrInline]=\"true\"\r\n                                                                formControlName=\"average_concentration\">\r\n                                                                Average Concentration\r\n                                                            </clr-checkbox>\r\n                                                            <clr-checkbox [clrInline]=\"true\"\r\n                                                                formControlName=\"min_concentration_positive\">\r\n                                                                Min concentration positive samples\r\n                                                            </clr-checkbox>\r\n                                                            <clr-checkbox [clrInline]=\"true\"\r\n                                                                formControlName=\"median_concentration_positive\">\r\n                                                                Median concentration positive samples\r\n                                                            </clr-checkbox>\r\n                                                            <clr-checkbox [clrInline]=\"true\"\r\n                                                                formControlName=\"average_concentration_positive\">\r\n                                                                Average concentration positive samples\r\n                                                            </clr-checkbox>\r\n                                                        </div>\r\n\r\n\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <clr-checkbox formControlName=\"individual_sample_report\"\r\n                                                    [clrDisabled]=\"reportsQuery.samples.length < 1 || reportsQuery.targets.length < 1\">\r\n                                                    Individual Sample Report\r\n                                                </clr-checkbox><br><span class=\"text-italic\">Requires\r\n                                                    Sample and Target selection</span>\r\n\r\n                                                <clr-checkbox formControlName=\"quality_control_report\"\r\n                                                    [clrDisabled]=\"reportsQuery.samples.length < 1\">\r\n                                                    Quality Control Report\r\n                                                </clr-checkbox><br><span class=\"text-italic\">Requires\r\n                                                    Sample selection</span>\r\n\r\n                                                <clr-checkbox formControlName=\"controls_result_report\"\r\n                                                    [clrDisabled]=\"reportsQuery.samples.length < 1 || reportsQuery.targets.length < 1\">\r\n                                                    Controls Results Report\r\n                                                </clr-checkbox><br><span class=\"text-italic\">Requires\r\n                                                    Sample and Target selection</span>\r\n\r\n\r\n                                            </div>\r\n\r\n                                            <button class=\"btn btn-primary\"\r\n                                                (click)=\"generateReports(reportSelectForm.value)\"\r\n                                                [clrLoading]=\"submitLoading\">Generate\r\n                                                Reports</button>\r\n                                        </section>\r\n                                    </form>\r\n\r\n                                    <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"inhibitionReportSuccessFlag\">\r\n                                        <div clr-alert-item class=\"alert-item\">\r\n                                            <span class=\"alert-text\">Request for Inhibition Report received.</span>\r\n                                        </div>\r\n                                    </clr-alert>\r\n\r\n                                    <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"resultsReportSummarySuccessFlag\">\r\n                                        <div clr-alert-item class=\"alert-item\">\r\n                                            <span class=\"alert-text\">Request for Results Summary Report received.</span>\r\n                                        </div>\r\n                                    </clr-alert>\r\n\r\n                                    <clr-alert [clrAlertType]=\"'alert-success'\"\r\n                                        *ngIf=\"individualSampleReportSuccessFlag\">\r\n                                        <div clr-alert-item class=\"alert-item\">\r\n                                            <span class=\"alert-text\">Request for Individual Sample Report\r\n                                                received.</span>\r\n                                        </div>\r\n                                    </clr-alert>\r\n\r\n                                    <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"qualityControlReportSuccessFlag\">\r\n                                        <div clr-alert-item class=\"alert-item\">\r\n                                            <span class=\"alert-text\">Request for Quality Control Report received.</span>\r\n                                        </div>\r\n                                    </clr-alert>\r\n\r\n                                    <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"controlsResultReportSuccessFlag\">\r\n                                        <div clr-alert-item class=\"alert-item\">\r\n                                            <span class=\"alert-text\">Request for Control Results Report received.</span>\r\n                                        </div>\r\n                                    </clr-alert>\r\n\r\n                                    <button class=\"btn btn-primary\" (click)=\"clearAlerts()\"\r\n                                        *ngIf=\"inhibitionReportSuccessFlag || resultsReportSummarySuccessFlag || individualSampleReportSuccessFlag || qualityControlReportSuccessFlag || controlsResultReportSuccessFlag\">Clear\r\n                                        All Alerts</button>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <!---------- Loading spinner---------->\r\n                        <span class=\"spinner spinner-lg\" *ngIf=\"reportsLoading\">\r\n                            Generating reports...\r\n                        </span>\r\n                        <!---------- End Loading spinner---------->\r\n                    </div>\r\n\r\n                </clr-tab-content>\r\n            </clr-tab>\r\n            <!--End Generate Reports tab -->\r\n\r\n            <!-- View Reports tab -->\r\n            <clr-tab>\r\n                <button clrTabLink>View Reports</button>\r\n                <clr-tab-content>\r\n\r\n                    <div class=\"row\">\r\n\r\n                        <!-- <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\" *ngIf=\"fsmcResultsLoaded\">\r\n                                    There are no results for your query.\r\n                                </div> -->\r\n\r\n                        <!-- <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\"\r\n                            *ngIf=\" inhibitionReportLoaded || controlsResultReportLoaded || individualSampleReportLoaded || qualityControlReportLoaded || resultsReportSummaryLoaded\"> -->\r\n\r\n                        <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n                            <clr-tabs>\r\n\r\n                                <!--Inhibition Reports tab -->\r\n                                <clr-tab>\r\n                                    <button clrTabLink>Inhibition\r\n                                        Reports</button>\r\n                                    <clr-tab-content>\r\n\r\n\r\n                                        <h3>Available Inhibition Reports <button class=\"btn btn-sm btn-secondary\"\r\n                                                (click)=\"retrieveAllReports()\">\r\n                                                <clr-icon shape=\"refresh\"></clr-icon> Refresh\r\n                                                List\r\n                                            </button></h3>\r\n\r\n                                        <clr-datagrid [clrDgLoading]=\"inhibitionReportFilesLoading\"\r\n                                            #inhibitionReportFilesDataGrid>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'created_date'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Date Created\r\n                                                </ng-container>\r\n                                                <clr-dg-filter [clrDgFilter]=\"dateAddedFilter\">\r\n                                                    <date-added-filter [dateField]=\"'created_date'\" #dateAddedFilter>\r\n                                                    </date-added-filter>\r\n                                                </clr-dg-filter>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'created_by'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Created by\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'status'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Status\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'name'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Report (click to retrieve)\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-row *clrDgItems=\"let item of inhibitionReportsList\"\r\n                                                [clrDgItem]=\"item\">\r\n                                                <clr-dg-cell>{{item.created_date | date:'shortDate'}}</clr-dg-cell>\r\n                                                <clr-dg-cell>{{item.created_by}}</clr-dg-cell>\r\n                                                <clr-dg-cell> <span class=\"label\"\r\n                                                        [ngClass]=\"{'label-danger' : item.status === 3, 'label-success':  item.status === 2, 'label-info' : item.status === 1}\">{{item.status | displayValue:'name':this.reportStatuses}}</span>\r\n                                                </clr-dg-cell>\r\n                                                <clr-dg-cell><a href=\"javascript:void(0);\"\r\n                                                        (click)=\"loadReport(item.file,item.name, 1)\">{{item.name}}</a>\r\n                                                </clr-dg-cell>\r\n                                            </clr-dg-row>\r\n\r\n                                            <clr-dg-footer>\r\n                                                {{inhibitionPagination.firstItem + 1}} -\r\n                                                {{inhibitionPagination.lastItem + 1}} of\r\n                                                {{inhibitionPagination.totalItems}}\r\n                                                results\r\n                                                <clr-dg-pagination #inhibitionPagination [clrDgPageSize]=\"10\">\r\n                                                </clr-dg-pagination>\r\n                                            </clr-dg-footer>\r\n                                        </clr-datagrid>\r\n\r\n                                        <div>\r\n                                            <h4>Inhibition Report</h4>\r\n\r\n                                            <clr-datagrid [clrDgLoading]=\"inhibitionReportLoading\"\r\n                                                #inhibitionReportDataGrid>\r\n\r\n                                                <clr-dg-action-bar>\r\n                                                    <div class=\"btn-group\">\r\n                                                        <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                                                            (click)=\"exportToCSV('inhibitionReport')\">\r\n                                                            <clr-icon shape=\"export\" size=\"16\"></clr-icon> Export to CSV\r\n                                                        </button>\r\n                                                    </div>\r\n                                                    <div class=\"form-group\">\r\n                                                        <form [formGroup]=\"reportSelectForm\">\r\n                                                            <label>Export File name (optional)</label>\r\n                                                            <input type=\"text\" class=\"filename-input\"\r\n                                                                formControlName=\"inhibition_report_filename\">\r\n                                                        </form>\r\n                                                    </div>\r\n                                                </clr-dg-action-bar>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'sample'\">\r\n                                                    Sample ID\r\n                                                    <clr-dg-filter [clrDgFilter]=\"rangeFilter\">\r\n                                                        <range-filter #rangeFilter></range-filter>\r\n                                                    </clr-dg-filter>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'collaborator_sample_id'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Collaborator Sample ID\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'study'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Study\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'analysis_batch'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Analysis Batch\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'extraction_number'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Extraction Number\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'inhibition_dna_cq_value'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        DNA Inhibtion Sample Cq\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'inhibition_dna_control_cq_value'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        DNA Inhibtion Control Cq\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'inhibition_dna_dilution_factor'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        DNA Inhibtion Dilution Factor\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'inhibition_rna_cq_value'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        RNA Inhibtion Sample Cq\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'inhibition_rna_control_cq_value'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        RNA Inhibtion Control Cq\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'inhibition_rna_dilution_factor'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        RNA Inhibtion Dilution Factor\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-row *clrDgItems=\"let item of inhibitionReportResults\"\r\n                                                    [clrDgItem]=\"item\">\r\n                                                    <clr-dg-cell>{{item.sample}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.collaborator_sample_id}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.study}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.analysis_batch}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.extraction_number}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.inhibition_dna_cq_value}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.inhibition_dna_control_cq_value}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.inhibition_dna_dilution_factor}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.inhibition_rna_cq_value}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.inhibition_rna_control_cq_value}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.inhibition_rna_dilution_factor}}</clr-dg-cell>\r\n                                                </clr-dg-row>\r\n\r\n                                                <clr-dg-footer>\r\n                                                    {{inhibitionReportListPagination.firstItem + 1}} -\r\n                                                    {{inhibitionReportListPagination.lastItem + 1}} of\r\n                                                    {{inhibitionReportListPagination.totalItems}}\r\n                                                    results\r\n                                                    <clr-dg-pagination #inhibitionReportListPagination\r\n                                                        [clrDgPageSize]=\"10\">\r\n                                                    </clr-dg-pagination>\r\n                                                </clr-dg-footer>\r\n                                            </clr-datagrid>\r\n                                        </div>\r\n\r\n                                    </clr-tab-content>\r\n                                </clr-tab>\r\n                                <!--End Inhibition Reports tab -->\r\n\r\n                                <!--Results Report Summary Reports tab -->\r\n                                <clr-tab>\r\n                                    <!-- <button clrTabLink (mouseout)=\"resizeTable('resultsReportSummary')\">Results Report\r\n                                        Summary Reports</button> -->\r\n                                    <button clrTabLink>Results Report\r\n                                        Summary Reports</button>\r\n                                    <clr-tab-content>\r\n\r\n                                        <h3>Available Results Report Summary Reports <button\r\n                                                class=\"btn btn-sm btn-secondary\" (click)=\"retrieveAllReports()\">\r\n                                                <clr-icon shape=\"refresh\"></clr-icon> Refresh\r\n                                                List\r\n                                            </button></h3>\r\n\r\n                                        <clr-datagrid [clrDgLoading]=\"resultsReportSummaryReportFilesLoading\"\r\n                                            #resultsSummaryReportFilesDataGrid\r\n                                            (mouseout)=\"resizeTable('resultsReportSummary')\">\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'created_date'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Date Created\r\n                                                </ng-container>\r\n                                                <clr-dg-filter [clrDgFilter]=\"dateAddedFilter\">\r\n                                                    <date-added-filter [dateField]=\"'created_date'\" #dateAddedFilter>\r\n                                                    </date-added-filter>\r\n                                                </clr-dg-filter>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'created_by'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Created by\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'status'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Status\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'name'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Report (click to retrieve)\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-row *clrDgItems=\"let item of resultsReportSummaryReportsList\"\r\n                                                [clrDgItem]=\"item\">\r\n                                                <clr-dg-cell>{{item.created_date | date:'shortDate'}}</clr-dg-cell>\r\n                                                <clr-dg-cell>{{item.created_by}}</clr-dg-cell>\r\n                                                <clr-dg-cell> <span class=\"label\"\r\n                                                        [ngClass]=\"{'label-danger' : item.status === 3, 'label-success':  item.status === 2, 'label-info' : item.status === 1}\">{{item.status | displayValue:'name':this.reportStatuses}}</span>\r\n                                                </clr-dg-cell>\r\n                                                <clr-dg-cell><a href=\"javascript:void(0);\"\r\n                                                        (click)=\"loadReport(item.file, item.name, 2)\">{{item.name}}</a>\r\n                                                </clr-dg-cell>\r\n                                            </clr-dg-row>\r\n\r\n                                            <clr-dg-footer>\r\n                                                {{resultsReportSummaryReportListPagination.firstItem + 1}} -\r\n                                                {{resultsReportSummaryReportListPagination.lastItem + 1}} of\r\n                                                {{resultsReportSummaryReportListPagination.totalItems}}\r\n                                                results\r\n                                                <clr-dg-pagination #resultsReportSummaryReportListPagination\r\n                                                    [clrDgPageSize]=\"10\">\r\n                                                </clr-dg-pagination>\r\n                                            </clr-dg-footer>\r\n                                        </clr-datagrid>\r\n\r\n                                        <div>\r\n                                            <h4>Results Report Summary Report</h4>\r\n\r\n                                            <!-- <clr-datagrid [clrDgLoading]=\"resultsReportSummaryLoading\"\r\n                                            #resultsReportSummaryDataGrid>\r\n\r\n                                            <clr-dg-action-bar>\r\n                                                <div class=\"btn-group\">\r\n                                                    <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                                                        (click)=\"exportToCSV('resultsReportSummary')\">\r\n                                                        <clr-icon shape=\"export\" size=\"16\"></clr-icon> Export to CSV\r\n                                                    </button>\r\n                                                </div>\r\n                                                <div class=\"form-group\">\r\n                                                    <form [formGroup]=\"reportSelectForm\">\r\n                                                        <label>Export File name (optional)</label>\r\n                                                        <input type=\"text\" class=\"filename-input\"\r\n                                                            formControlName=\"results_report_summary_filename\">\r\n                                                    </form>\r\n                                                </div>\r\n                                            </clr-dg-action-bar>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'target_name'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Target\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'sample_count'\"\r\n                                                *ngIf=\"reportSelectForm.get('results_report_summary_options').get('sample_count').value\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Sample Count\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'positive_count'\"\r\n                                                *ngIf=\"reportSelectForm.get('results_report_summary_options').get('positive_count').value\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Positive Count\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'percent_positive'\"\r\n                                                *ngIf=\"reportSelectForm.get('results_report_summary_options').get('percent_positive').value\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Percent Positive\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'max_concentration'\"\r\n                                                *ngIf=\"reportSelectForm.get('results_report_summary_options').get('max_concentration').value\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Max Concentration\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'min_concentration'\"\r\n                                                *ngIf=\"reportSelectForm.get('results_report_summary_options').get('min_concentration').value\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Min Concentration\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'median_concentration'\"\r\n                                                *ngIf=\"reportSelectForm.get('results_report_summary_options').get('median_concentration').value\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Median Concentration\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'average_concentration'\"\r\n                                                *ngIf=\"reportSelectForm.get('results_report_summary_options').get('average_concentration').value\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Average Concentration\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'min_concentration_positive'\"\r\n                                                *ngIf=\"reportSelectForm.get('results_report_summary_options').get('min_concentration_positive').value\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Minimum concentration of positive samples\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'median_concentration_positive'\"\r\n                                                *ngIf=\"reportSelectForm.get('results_report_summary_options').get('median_concentration_positive').value\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Median concentration of positive samples\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'average_concentration_positive'\"\r\n                                                *ngIf=\"reportSelectForm.get('results_report_summary_options').get('average_concentration_positive').value\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Average concentration of positive samples\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-row *clrDgItems=\"let item of resultsReportSummaryResults\"\r\n                                                [clrDgItem]=\"item\">\r\n                                                <clr-dg-cell>{{item.target_name}}</clr-dg-cell>\r\n                                                <clr-dg-cell\r\n                                                    *ngIf=\"reportSelectForm.get('results_report_summary_options').get('sample_count').value\">\r\n                                                    {{item.sample_count}}</clr-dg-cell>\r\n                                                <clr-dg-cell\r\n                                                    *ngIf=\"reportSelectForm.get('results_report_summary_options').get('positive_count').value\">\r\n                                                    {{item.positive_count}}</clr-dg-cell>\r\n                                                <clr-dg-cell\r\n                                                    *ngIf=\"reportSelectForm.get('results_report_summary_options').get('percent_positive').value\">\r\n                                                    {{item.percent_positive}}</clr-dg-cell>\r\n                                                <clr-dg-cell\r\n                                                    *ngIf=\"reportSelectForm.get('results_report_summary_options').get('max_concentration').value\">\r\n                                                    {{item.max_concentration}}</clr-dg-cell>\r\n                                                <clr-dg-cell\r\n                                                    *ngIf=\"reportSelectForm.get('results_report_summary_options').get('min_concentration').value\">\r\n                                                    {{item.min_concentration}}</clr-dg-cell>\r\n                                                <clr-dg-cell\r\n                                                    *ngIf=\"reportSelectForm.get('results_report_summary_options').get('median_concentration').value\">\r\n                                                    {{item.median_concentration}}</clr-dg-cell>\r\n                                                <clr-dg-cell\r\n                                                    *ngIf=\"reportSelectForm.get('results_report_summary_options').get('average_concentration').value\">\r\n                                                    {{item.average_concentration}}</clr-dg-cell>\r\n                                                <clr-dg-cell\r\n                                                    *ngIf=\"reportSelectForm.get('results_report_summary_options').get('min_concentration_positive').value\">\r\n                                                    {{item.min_concentration_positive}}</clr-dg-cell>\r\n                                                <clr-dg-cell\r\n                                                    *ngIf=\"reportSelectForm.get('results_report_summary_options').get('median_concentration_positive').value\">\r\n                                                    {{item.median_concentration_positive}}</clr-dg-cell>\r\n                                                <clr-dg-cell\r\n                                                    *ngIf=\"reportSelectForm.get('results_report_summary_options').get('average_concentration_positive').value\">\r\n                                                    {{item.average_concentration_positive}}</clr-dg-cell>\r\n                                            </clr-dg-row>\r\n\r\n                                            <clr-dg-footer>\r\n                                                {{resultsReportPagination.firstItem + 1}} -\r\n                                                {{resultsReportPagination.lastItem + 1}} of\r\n                                                {{resultsReportPagination.totalItems}}\r\n                                                results\r\n                                                <clr-dg-pagination #resultsReportPagination [clrDgPageSize]=\"10\">\r\n                                                </clr-dg-pagination>\r\n                                            </clr-dg-footer>\r\n                                        </clr-datagrid> -->\r\n\r\n                                            <clr-datagrid [clrDgLoading]=\"resultsReportSummaryLoading\"\r\n                                                #resultsReportSummaryDataGrid>\r\n\r\n                                                <clr-dg-action-bar>\r\n                                                    <div class=\"btn-group\">\r\n                                                        <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                                                            (click)=\"exportToCSV('resultsReportSummary')\">\r\n                                                            <clr-icon shape=\"export\" size=\"16\"></clr-icon> Export to CSV\r\n                                                        </button>\r\n                                                    </div>\r\n                                                    <div class=\"form-group\">\r\n                                                        <form [formGroup]=\"reportSelectForm\">\r\n                                                            <label>Export File name (optional)</label>\r\n                                                            <input type=\"text\" class=\"filename-input\"\r\n                                                                formControlName=\"results_report_summary_filename\">\r\n                                                        </form>\r\n                                                    </div>\r\n                                                </clr-dg-action-bar>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'target_name'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Target\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'sample_count'\"\r\n                                                    *ngIf=\"resultsReportSummary_columns.sample_count\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Sample Count\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'positive_count'\"\r\n                                                    *ngIf=\"resultsReportSummary_columns.positive_count\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Positive Count\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'percent_positive'\"\r\n                                                    *ngIf=\"resultsReportSummary_columns.percent_positive\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Percent Positive\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'max_concentration'\"\r\n                                                    *ngIf=\"resultsReportSummary_columns.max_concentration\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Max Concentration\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'min_concentration'\"\r\n                                                    *ngIf=\"resultsReportSummary_columns.min_concentration\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Min Concentration\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'median_concentration'\"\r\n                                                    *ngIf=\"resultsReportSummary_columns.median_concentration\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Median Concentration\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'average_concentration'\"\r\n                                                    *ngIf=\"resultsReportSummary_columns.average_concentration\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Average Concentration\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'min_concentration_positive'\"\r\n                                                    *ngIf=\"resultsReportSummary_columns.min_concentration_positive\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Minimum concentration of positive samples\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'median_concentration_positive'\"\r\n                                                    *ngIf=\"resultsReportSummary_columns.median_concentration_positive\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Median concentration of positive samples\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'average_concentration_positive'\"\r\n                                                    *ngIf=\"resultsReportSummary_columns.average_concentration_positive\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Average concentration of positive samples\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-row *clrDgItems=\"let item of resultsReportSummaryResults\"\r\n                                                    [clrDgItem]=\"item\">\r\n                                                    <clr-dg-cell>{{item.target_name}}</clr-dg-cell>\r\n                                                    <clr-dg-cell *ngIf=\"resultsReportSummary_columns.sample_count\">\r\n                                                        {{item.sample_count}}</clr-dg-cell>\r\n                                                    <clr-dg-cell *ngIf=\"resultsReportSummary_columns.positive_count\">\r\n                                                        {{item.positive_count}}</clr-dg-cell>\r\n                                                    <clr-dg-cell *ngIf=\"resultsReportSummary_columns.percent_positive\">\r\n                                                        {{item.percent_positive}}</clr-dg-cell>\r\n                                                    <clr-dg-cell *ngIf=\"resultsReportSummary_columns.max_concentration\">\r\n                                                        {{item.max_concentration}}</clr-dg-cell>\r\n                                                    <clr-dg-cell *ngIf=\"resultsReportSummary_columns.min_concentration\">\r\n                                                        {{item.min_concentration}}</clr-dg-cell>\r\n                                                    <clr-dg-cell\r\n                                                        *ngIf=\"resultsReportSummary_columns.median_concentration\">\r\n                                                        {{item.median_concentration}}</clr-dg-cell>\r\n                                                    <clr-dg-cell\r\n                                                        *ngIf=\"resultsReportSummary_columns.average_concentration\">\r\n                                                        {{item.average_concentration}}</clr-dg-cell>\r\n                                                    <clr-dg-cell\r\n                                                        *ngIf=\"resultsReportSummary_columns.min_concentration_positive\">\r\n                                                        {{item.min_concentration_positive}}</clr-dg-cell>\r\n                                                    <clr-dg-cell\r\n                                                        *ngIf=\"resultsReportSummary_columns.median_concentration_positive\">\r\n                                                        {{item.median_concentration_positive}}</clr-dg-cell>\r\n                                                    <clr-dg-cell\r\n                                                        *ngIf=\"resultsReportSummary_columns.average_concentration_positive\">\r\n                                                        {{item.average_concentration_positive}}</clr-dg-cell>\r\n                                                </clr-dg-row>\r\n\r\n                                                <clr-dg-footer>\r\n                                                    {{resultsReportPagination.firstItem + 1}} -\r\n                                                    {{resultsReportPagination.lastItem + 1}} of\r\n                                                    {{resultsReportPagination.totalItems}}\r\n                                                    results\r\n                                                    <clr-dg-pagination #resultsReportPagination [clrDgPageSize]=\"10\">\r\n                                                    </clr-dg-pagination>\r\n                                                </clr-dg-footer>\r\n                                            </clr-datagrid>\r\n                                        </div>\r\n\r\n                                    </clr-tab-content>\r\n                                </clr-tab>\r\n                                <!-- End Results Report Summary Reports tab -->\r\n\r\n                                <!-- Individual Sample Reports tab -->\r\n                                <clr-tab>\r\n                                    <button clrTabLink>Individual\r\n                                        Sample Reports</button>\r\n                                    <clr-tab-content class=\"sample-results-tab\">\r\n\r\n                                        <h3>Available Individual Sample Reports <button class=\"btn btn-sm btn-secondary\"\r\n                                                (click)=\"retrieveAllReports()\">\r\n                                                <clr-icon shape=\"refresh\"></clr-icon> Refresh\r\n                                                List\r\n                                            </button></h3>\r\n\r\n                                        <clr-datagrid [clrDgLoading]=\"individualSampleReportFilesLoading\"\r\n                                            #individualSampleReportFilesDataGrid>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'created_date'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Date Created\r\n                                                </ng-container>\r\n                                                <clr-dg-filter [clrDgFilter]=\"dateAddedFilter\">\r\n                                                    <date-added-filter [dateField]=\"'created_date'\" #dateAddedFilter>\r\n                                                    </date-added-filter>\r\n                                                </clr-dg-filter>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'created_by'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Created by\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'status'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Status\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'name'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Report (click to retrieve)\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-row *clrDgItems=\"let item of individualSampleReportsList\"\r\n                                                [clrDgItem]=\"item\">\r\n                                                <clr-dg-cell>{{item.created_date | date:'shortDate'}}</clr-dg-cell>\r\n                                                <clr-dg-cell>{{item.created_by}}</clr-dg-cell>\r\n                                                <clr-dg-cell> <span class=\"label\"\r\n                                                        [ngClass]=\"{'label-danger' : item.status === 3, 'label-success':  item.status === 2, 'label-info' : item.status === 1}\">{{item.status | displayValue:'name':this.reportStatuses}}</span>\r\n                                                </clr-dg-cell>\r\n                                                <clr-dg-cell><a href=\"javascript:void(0);\"\r\n                                                        (click)=\"loadReport(item.file, item.name, 3)\">{{item.name}}</a>\r\n                                                </clr-dg-cell>\r\n                                            </clr-dg-row>\r\n\r\n                                            <clr-dg-footer>\r\n                                                {{indiviualSampleReportListPagination.firstItem + 1}} -\r\n                                                {{indiviualSampleReportListPagination.lastItem + 1}} of\r\n                                                {{indiviualSampleReportListPagination.totalItems}}\r\n                                                results\r\n                                                <clr-dg-pagination #indiviualSampleReportListPagination\r\n                                                    [clrDgPageSize]=\"10\">\r\n                                                </clr-dg-pagination>\r\n                                            </clr-dg-footer>\r\n                                        </clr-datagrid>\r\n\r\n                                        <div>\r\n                                            <h4>Individual Sample Report</h4>\r\n\r\n                                            <clr-datagrid [clrDgLoading]=\"individualSampleReportLoading\"\r\n                                                #individualSampleReportDataGrid>\r\n\r\n                                                <clr-dg-action-bar>\r\n                                                    <div class=\"btn-group\">\r\n                                                        <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                                                            (click)=\"exportToCSV('individualSampleReport')\">\r\n                                                            <clr-icon shape=\"export\" size=\"16\"></clr-icon> Export to CSV\r\n                                                        </button>\r\n                                                    </div>\r\n                                                    <div class=\"form-group\">\r\n                                                        <form [formGroup]=\"reportSelectForm\">\r\n                                                            <label>Export File name (optional)</label>\r\n                                                            <input type=\"text\" class=\"filename-input\"\r\n                                                                formControlName=\"individual_sample_report_filename\">\r\n                                                        </form>\r\n                                                    </div>\r\n                                                </clr-dg-action-bar>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'id'\">\r\n                                                    Sample ID\r\n                                                    <clr-dg-filter [clrDgFilter]=\"rangeFilter\">\r\n                                                        <range-filter #rangeFilter></range-filter>\r\n                                                    </clr-dg-filter>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'target_string'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Target\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'result'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Result\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'final_sample_mean_concentration'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Sample Mean Concentration (Sci)\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-row *ngFor=\"let item of individualSampleReportResults\"\r\n                                                    [clrDgItem]=\"item\">\r\n                                                    <clr-dg-cell>{{item.sample}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.target_string}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.result}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.final_sample_mean_concentration_sci}}\r\n                                                    </clr-dg-cell>\r\n                                                </clr-dg-row>\r\n\r\n                                                <clr-dg-footer>\r\n                                                    {{individualSamplePagination.firstItem + 1}} -\r\n                                                    {{individualSamplePagination.lastItem + 1}}\r\n                                                    of\r\n                                                    {{individualSamplePagination.totalItems}}\r\n                                                    results\r\n                                                    <clr-dg-pagination #individualSamplePagination [clrDgPageSize]=\"10\">\r\n                                                    </clr-dg-pagination>\r\n                                                </clr-dg-footer>\r\n                                            </clr-datagrid>\r\n\r\n                                        </div>\r\n\r\n                                    </clr-tab-content>\r\n                                </clr-tab>\r\n                                <!-- End Individual Sample Reports tab -->\r\n\r\n                                <!--Quality Control Reports tab -->\r\n                                <clr-tab>\r\n                                    <button clrTabLink>Quality Control\r\n                                        Reports</button>\r\n                                    <clr-tab-content>\r\n\r\n                                        <h3>Available Quality Control Reports <button class=\"btn btn-sm btn-secondary\"\r\n                                                (click)=\"retrieveAllReports()\">\r\n                                                <clr-icon shape=\"refresh\"></clr-icon> Refresh\r\n                                                List\r\n                                            </button></h3>\r\n\r\n                                        <clr-datagrid [clrDgLoading]=\"qualityControlReportFilesLoading\"\r\n                                            #individualSampleReportFilesDataGrid>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'created_date'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Date Created\r\n                                                </ng-container>\r\n                                                <clr-dg-filter [clrDgFilter]=\"dateAddedFilter\">\r\n                                                    <date-added-filter [dateField]=\"'created_date'\" #dateAddedFilter>\r\n                                                    </date-added-filter>\r\n                                                </clr-dg-filter>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'created_by'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Created by\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'status'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Status\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'name'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Report (click to retrieve)\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-row *clrDgItems=\"let item of qualityControlReportsList\"\r\n                                                [clrDgItem]=\"item\">\r\n                                                <clr-dg-cell>{{item.created_date | date:'shortDate'}}</clr-dg-cell>\r\n                                                <clr-dg-cell>{{item.created_by}}</clr-dg-cell>\r\n                                                <clr-dg-cell> <span class=\"label\"\r\n                                                        [ngClass]=\"{'label-danger' : item.status === 3, 'label-success':  item.status === 2, 'label-info' : item.status === 1}\">{{item.status | displayValue:'name':this.reportStatuses}}</span>\r\n                                                </clr-dg-cell>\r\n                                                <clr-dg-cell><a href=\"javascript:void(0);\"\r\n                                                        (click)=\"loadReport(item.file, item.name, 4)\">{{item.name}}</a>\r\n                                                </clr-dg-cell>\r\n                                            </clr-dg-row>\r\n\r\n                                            <clr-dg-footer>\r\n                                                {{qcReportListPagination.firstItem + 1}} -\r\n                                                {{qcReportListPagination.lastItem + 1}} of\r\n                                                {{qcReportListPagination.totalItems}}\r\n                                                results\r\n                                                <clr-dg-pagination #qcReportListPagination [clrDgPageSize]=\"10\">\r\n                                                </clr-dg-pagination>\r\n                                            </clr-dg-footer>\r\n                                        </clr-datagrid>\r\n\r\n                                        <div>\r\n                                            <h4>Quality Control Report</h4>\r\n                                            <br>\r\n                                            <h4>Sample-level summary statistics</h4>\r\n                                            <clr-datagrid [clrDgLoading]=\"qualityControlReportLoading\"\r\n                                                #qualityControlReport_sampleQC_DataGrid>\r\n\r\n                                                <clr-dg-action-bar>\r\n                                                    <div class=\"btn-group\">\r\n                                                        <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                                                            (click)=\"exportToCSV('qualityControlReport_sampleQC')\">\r\n                                                            <clr-icon shape=\"export\" size=\"16\"></clr-icon> Export to CSV\r\n                                                        </button>\r\n                                                    </div>\r\n                                                    <div class=\"form-group\">\r\n                                                        <form [formGroup]=\"reportSelectForm\">\r\n                                                            <label>Export File name (optional)</label>\r\n                                                            <input type=\"text\" class=\"filename-input\"\r\n                                                                formControlName=\"quality_control_report_sampleQC_filename\">\r\n                                                        </form>\r\n                                                    </div>\r\n                                                </clr-dg-action-bar>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'metric'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Metric\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'value'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Value\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'count'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Count\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'min'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Min\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'max'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Max\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-row\r\n                                                    *ngFor=\"let item of qualityControlReportResults.sample_quality_control\"\r\n                                                    [clrDgItem]=\"item\">\r\n                                                    <clr-dg-cell>{{item.metric}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.value}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.count}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.min}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.max}}</clr-dg-cell>\r\n                                                </clr-dg-row>\r\n\r\n                                                <clr-dg-footer>\r\n                                                    {{qualityControlReport_sampleQCPagination.firstItem + 1}} -\r\n                                                    {{qualityControlReport_sampleQCPagination.lastItem + 1}} of\r\n                                                    {{qualityControlReport_sampleQCPagination.totalItems}}\r\n                                                    results\r\n                                                    <clr-dg-pagination #qualityControlReport_sampleQCPagination\r\n                                                        [clrDgPageSize]=\"10\">\r\n                                                    </clr-dg-pagination>\r\n                                                </clr-dg-footer>\r\n                                            </clr-datagrid>\r\n\r\n\r\n\r\n                                            <h4>Extraction-level raw values</h4>\r\n                                            <clr-datagrid [clrDgLoading]=\"qualityControlReportLoading\"\r\n                                                #qualityControlReport_EB_Raw_DataGrid>\r\n\r\n                                                <clr-dg-action-bar>\r\n                                                    <div class=\"btn-group\">\r\n                                                        <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                                                            (click)=\"exportToCSV('qualityControlReport_EB_Raw')\">\r\n                                                            <clr-icon shape=\"export\" size=\"16\"></clr-icon> Export to CSV\r\n                                                        </button>\r\n                                                    </div>\r\n                                                    <div class=\"form-group\">\r\n                                                        <form [formGroup]=\"reportSelectForm\">\r\n                                                            <label>Export File name (optional)</label>\r\n                                                            <input type=\"text\" class=\"filename-input\"\r\n                                                                formControlName=\"quality_control_report_EB_Raw_filename\">\r\n                                                        </form>\r\n                                                    </div>\r\n                                                </clr-dg-action-bar>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'analysis_batch'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Analysis Batch\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'extraction_number'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Extraction Number\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'extraction_volume'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Extraction Volume\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'elution_volume'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Elution Volume\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'rt_template_volume'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        RT Template Volume\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'rt_reaction_volume'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        RT Reaction Volume\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'qpcr_template_volume'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        qPCR Template Volume\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'qpcr_reaction_volume'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        qPCR Reaction Volume\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-row\r\n                                                    *ngFor=\"let item of qualityControlReportResults.extraction_raw_data\"\r\n                                                    [clrDgItem]=\"item\">\r\n                                                    <clr-dg-cell>{{item.analysis_batch}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.extraction_number}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.extraction_volume}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.elution_volume}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.rt_template_volume}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.rt_reaction_volume}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.qpcr_template_volume}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.qpcr_reaction_volume}}</clr-dg-cell>\r\n                                                </clr-dg-row>\r\n\r\n                                                <clr-dg-footer>\r\n                                                    {{qualityControlReport_EB_Raw_Pagination.firstItem + 1}} -\r\n                                                    {{qualityControlReport_EB_Raw_Pagination.lastItem + 1}} of\r\n                                                    {{qualityControlReport_EB_Raw_Pagination.totalItems}}\r\n                                                    results\r\n                                                    <clr-dg-pagination #qualityControlReport_EB_Raw_Pagination\r\n                                                        [clrDgPageSize]=\"10\">\r\n                                                    </clr-dg-pagination>\r\n                                                </clr-dg-footer>\r\n                                            </clr-datagrid>\r\n\r\n                                            <h4>Extraction-level summary statistics</h4>\r\n                                            <clr-datagrid [clrDgLoading]=\"qualityControlReportLoading\"\r\n                                                #qualityControlReport_EB_QC_DataGrid>\r\n\r\n                                                <clr-dg-action-bar>\r\n                                                    <div class=\"btn-group\">\r\n                                                        <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                                                            (click)=\"exportToCSV('qualityControlReport_EB_QC')\">\r\n                                                            <clr-icon shape=\"export\" size=\"16\"></clr-icon> Export to CSV\r\n                                                        </button>\r\n                                                    </div>\r\n                                                    <div class=\"form-group\">\r\n                                                        <form [formGroup]=\"reportSelectForm\">\r\n                                                            <label>Export File name (optional)</label>\r\n                                                            <input type=\"text\" class=\"filename-input\"\r\n                                                                formControlName=\"quality_control_report_EB_QC_filename\">\r\n                                                        </form>\r\n                                                    </div>\r\n                                                </clr-dg-action-bar>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'metric'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Metric\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'value'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Value\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'count'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Count\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-row\r\n                                                    *ngFor=\"let item of qualityControlReportResults.extraction_quality_control\"\r\n                                                    [clrDgItem]=\"item\">\r\n                                                    <clr-dg-cell>{{item.metric}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.value}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{item.count}}</clr-dg-cell>\r\n                                                </clr-dg-row>\r\n\r\n                                                <clr-dg-footer>\r\n                                                    {{qualityControlReport_EB_QC_Pagination.firstItem + 1}} -\r\n                                                    {{qualityControlReport_EB_QC_Pagination.lastItem + 1}} of\r\n                                                    {{qualityControlReport_EB_QC_Pagination.totalItems}}\r\n                                                    results\r\n                                                    <clr-dg-pagination #qualityControlReport_EB_QC_Pagination\r\n                                                        [clrDgPageSize]=\"10\">\r\n                                                    </clr-dg-pagination>\r\n                                                </clr-dg-footer>\r\n                                            </clr-datagrid>\r\n\r\n                                        </div>\r\n\r\n                                    </clr-tab-content>\r\n                                </clr-tab>\r\n                                <!-- End Quality Control Reports tab -->\r\n\r\n                                <!--Control Results Reports tab -->\r\n                                <clr-tab>\r\n                                    <button clrTabLink>Controls Results\r\n                                        Reports</button>\r\n                                    <clr-tab-content>\r\n\r\n                                        <h3>Available Controls Results Reports <button class=\"btn btn-sm btn-secondary\"\r\n                                                (click)=\"retrieveAllReports()\">\r\n                                                <clr-icon shape=\"refresh\"></clr-icon> Refresh\r\n                                                List\r\n                                            </button></h3>\r\n\r\n                                        <clr-datagrid [clrDgLoading]=\"controlsResultsReportFilesLoading\"\r\n                                            #individualSampleReportFilesDataGrid>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'created_date'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Date Created\r\n                                                </ng-container>\r\n                                                <clr-dg-filter [clrDgFilter]=\"dateAddedFilter\">\r\n                                                    <date-added-filter [dateField]=\"'created_date'\" #dateAddedFilter>\r\n                                                    </date-added-filter>\r\n                                                </clr-dg-filter>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'created_by'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Created by\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'status'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Status\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-column [clrDgField]=\"'name'\">\r\n                                                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                    Report (click to retrieve)\r\n                                                </ng-container>\r\n                                            </clr-dg-column>\r\n\r\n                                            <clr-dg-row *clrDgItems=\"let item of controlsResultReportsList\"\r\n                                                [clrDgItem]=\"item\">\r\n                                                <clr-dg-cell>{{item.created_date | date:'shortDate'}}</clr-dg-cell>\r\n                                                <clr-dg-cell>{{item.created_by}}</clr-dg-cell>\r\n                                                <clr-dg-cell> <span class=\"label\"\r\n                                                        [ngClass]=\"{'label-danger' : item.status === 3, 'label-success':  item.status === 2, 'label-info' : item.status === 1}\">{{item.status | displayValue:'name':this.reportStatuses}}</span>\r\n                                                </clr-dg-cell>\r\n                                                <clr-dg-cell><a href=\"javascript:void(0);\"\r\n                                                        (click)=\"loadReport(item.file, item.name, 5)\">{{item.name}}</a>\r\n                                                </clr-dg-cell>\r\n                                            </clr-dg-row>\r\n\r\n                                            <clr-dg-footer>\r\n                                                {{controlsResultsReportsListPagination.firstItem + 1}} -\r\n                                                {{controlsResultsReportsListPagination.lastItem + 1}} of\r\n                                                {{controlsResultsReportsListPagination.totalItems}}\r\n                                                results\r\n                                                <clr-dg-pagination #controlsResultsReportsListPagination\r\n                                                    [clrDgPageSize]=\"10\">\r\n                                                </clr-dg-pagination>\r\n                                            </clr-dg-footer>\r\n                                        </clr-datagrid>\r\n\r\n                                        <div>\r\n\r\n                                            <h4>Controls Result Report</h4>\r\n\r\n                                            <!--5 tables (DataGrids) -->\r\n                                            <h4>Extraction Negative</h4>\r\n\r\n                                            <clr-datagrid #controlsResultReport_extNeg_DataGrid\r\n                                                [clrDgLoading]=\"controlsResultReportLoading\">\r\n\r\n                                                <clr-dg-action-bar>\r\n                                                    <div class=\"btn-group\">\r\n                                                        <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                                                            (click)=\"exportToCSV('controlsResultReport_extNeg')\">\r\n                                                            <clr-icon shape=\"export\" size=\"16\"></clr-icon> Export to CSV\r\n                                                        </button>\r\n                                                    </div>\r\n                                                    <div class=\"form-group\">\r\n                                                        <form [formGroup]=\"reportSelectForm\">\r\n                                                            <label>Export File name (optional)</label>\r\n                                                            <input type=\"text\" class=\"filename-input\"\r\n                                                                formControlName=\"controls_result_report_extNeg_filename\">\r\n                                                        </form>\r\n                                                    </div>\r\n                                                </clr-dg-action-bar>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'analysis_batch'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Analysis Batch\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'extraction_number'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Extraction Number\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column\r\n                                                    *ngFor=\"let target of controlsResultReportResults.targets\"\r\n                                                    [clrDgField]=\"target\">\r\n                                                    {{target}}</clr-dg-column>\r\n\r\n                                                <clr-dg-row *ngFor=\"let control of controlsResultReportResults.ext_neg\"\r\n                                                    [clrDgItem]=\"control\">\r\n                                                    <clr-dg-cell>{{control.analysis_batch}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{control.extraction_number}}</clr-dg-cell>\r\n                                                    <clr-dg-cell class=\"dynamic-column\"\r\n                                                        *ngFor=\"let target of controlsResultReportResults.targets\">\r\n                                                        {{control[target]}}</clr-dg-cell>\r\n                                                </clr-dg-row>\r\n\r\n                                                <clr-dg-footer>\r\n                                                    {{controlsResultReport_extneg_Pagination.firstItem + 1}} -\r\n                                                    {{controlsResultReport_extneg_Pagination.lastItem + 1}} of\r\n                                                    {{controlsResultReport_extneg_Pagination.totalItems}}\r\n                                                    results\r\n                                                    <clr-dg-pagination #controlsResultReport_extneg_Pagination\r\n                                                        [clrDgPageSize]=\"10\">\r\n                                                    </clr-dg-pagination>\r\n                                                </clr-dg-footer>\r\n                                            </clr-datagrid>\r\n\r\n                                            <h4>Extraction Positive</h4>\r\n\r\n                                            <clr-datagrid #controlsResultReport_extPos_DataGrid\r\n                                                [clrDgLoading]=\"controlsResultReportLoading\">\r\n                                                <clr-dg-action-bar>\r\n                                                    <div class=\"btn-group\">\r\n                                                        <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                                                            (click)=\"exportToCSV('controlsResultReport_extPos')\">\r\n                                                            <clr-icon shape=\"export\" size=\"16\"></clr-icon> Export to CSV\r\n                                                        </button>\r\n                                                    </div>\r\n                                                    <div class=\"form-group\">\r\n                                                        <form [formGroup]=\"reportSelectForm\">\r\n                                                            <label>Export File name (optional)</label>\r\n                                                            <input type=\"text\" class=\"filename-input\"\r\n                                                                formControlName=\"controls_result_report_extPos_filename\">\r\n                                                        </form>\r\n                                                    </div>\r\n                                                </clr-dg-action-bar>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'analysis_batch'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Analysis Batch\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'extraction_number'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Extraction Number\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column\r\n                                                    *ngFor=\"let target of controlsResultReportResults.targets\"\r\n                                                    [clrDgField]=\"target\">\r\n                                                    {{target}}</clr-dg-column>\r\n\r\n                                                <clr-dg-row *ngFor=\"let control of controlsResultReportResults.ext_pos\"\r\n                                                    [clrDgItem]=\"control\">\r\n                                                    <clr-dg-cell>{{control.analysis_batch}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{control.extraction_number}}</clr-dg-cell>\r\n                                                    <clr-dg-cell class=\"dynamic-column\"\r\n                                                        *ngFor=\"let target of controlsResultReportResults.targets\">\r\n                                                        {{control[target]}}</clr-dg-cell>\r\n                                                </clr-dg-row>\r\n\r\n                                                <clr-dg-footer>\r\n                                                    {{controlsResultReport_extpos_Pagination.firstItem + 1}} -\r\n                                                    {{controlsResultReport_extpos_Pagination.lastItem + 1}} of\r\n                                                    {{controlsResultReport_extpos_Pagination.totalItems}}\r\n                                                    results\r\n                                                    <clr-dg-pagination #controlsResultReport_extpos_Pagination\r\n                                                        [clrDgPageSize]=\"10\">\r\n                                                    </clr-dg-pagination>\r\n                                                </clr-dg-footer>\r\n                                            </clr-datagrid>\r\n\r\n                                            <h4>PCR Negative</h4>\r\n\r\n                                            <clr-datagrid #controlsResultReport_pcrNeg_DataGrid\r\n                                                [clrDgLoading]=\"controlsResultReportLoading\">\r\n\r\n                                                <clr-dg-action-bar>\r\n                                                    <div class=\"btn-group\">\r\n                                                        <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                                                            (click)=\"exportToCSV('controlsResultReport_pcrNeg')\">\r\n                                                            <clr-icon shape=\"export\" size=\"16\"></clr-icon> Export to CSV\r\n                                                        </button>\r\n                                                    </div>\r\n                                                    <div class=\"form-group\">\r\n                                                        <form [formGroup]=\"reportSelectForm\">\r\n                                                            <label>Export File name (optional)</label>\r\n                                                            <input type=\"text\" class=\"filename-input\"\r\n                                                                formControlName=\"controls_result_report_pcrNeg_filename\">\r\n                                                        </form>\r\n                                                    </div>\r\n                                                </clr-dg-action-bar>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'analysis_batch'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Analysis Batch\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'extraction_number'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Extraction Number\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'pcrreplicate_batch'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        PCR Replicate Batch\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column\r\n                                                    *ngFor=\"let target of controlsResultReportResults.targets\"\r\n                                                    [clrDgField]=\"target\">\r\n                                                    {{target}}</clr-dg-column>\r\n\r\n                                                <clr-dg-row *ngFor=\"let control of controlsResultReportResults.pcr_neg\"\r\n                                                    [clrDgItem]=\"control\">\r\n                                                    <clr-dg-cell>{{control.analysis_batch}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{control.extraction_number}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{control.pcrreplicate_batch}}</clr-dg-cell>\r\n                                                    <clr-dg-cell class=\"dynamic-column\"\r\n                                                        *ngFor=\"let target of controlsResultReportResults.targets\">\r\n                                                        {{control[target]}}</clr-dg-cell>\r\n                                                </clr-dg-row>\r\n\r\n                                                <clr-dg-footer>\r\n                                                    {{controlsResultReport_pcrneg_Pagination.firstItem + 1}} -\r\n                                                    {{controlsResultReport_pcrneg_Pagination.lastItem + 1}} of\r\n                                                    {{controlsResultReport_pcrneg_Pagination.totalItems}}\r\n                                                    results\r\n                                                    <clr-dg-pagination #controlsResultReport_pcrneg_Pagination\r\n                                                        [clrDgPageSize]=\"10\">\r\n                                                    </clr-dg-pagination>\r\n                                                </clr-dg-footer>\r\n                                            </clr-datagrid>\r\n\r\n                                            <h4>PCR Positive</h4>\r\n\r\n                                            <clr-datagrid #controlsResultReport_pcrPos_DataGrid\r\n                                                [clrDgLoading]=\"controlsResultReportLoading\">\r\n\r\n                                                <clr-dg-action-bar>\r\n                                                    <div class=\"btn-group\">\r\n                                                        <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                                                            (click)=\"exportToCSV('controlsResultReport_pcrPos')\">\r\n                                                            <clr-icon shape=\"export\" size=\"16\"></clr-icon> Export to CSV\r\n                                                        </button>\r\n                                                    </div>\r\n                                                    <div class=\"form-group\">\r\n                                                        <form [formGroup]=\"reportSelectForm\">\r\n                                                            <label>Export File name (optional)</label>\r\n                                                            <input type=\"text\" class=\"filename-input\"\r\n                                                                formControlName=\"controls_result_report_pcrPos_filename\">\r\n                                                        </form>\r\n                                                    </div>\r\n                                                </clr-dg-action-bar>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'analysis_batch'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Analysis Batch\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'extraction_number'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        Extraction Number\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'pcrreplicate_batch'\">\r\n                                                    <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                                        PCR Replicate Batch\r\n                                                    </ng-container>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column\r\n                                                    *ngFor=\"let target of controlsResultReportResults.targets\"\r\n                                                    [clrDgField]=\"target\">\r\n                                                    {{target}}</clr-dg-column>\r\n\r\n                                                <clr-dg-row *ngFor=\"let control of controlsResultReportResults.pcr_pos\"\r\n                                                    [clrDgItem]=\"control\">\r\n                                                    <clr-dg-cell>{{control.analysis_batch}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{control.extraction_number}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{control.pcrreplicate_batch}}</clr-dg-cell>\r\n                                                    <clr-dg-cell class=\"dynamic-column\"\r\n                                                        *ngFor=\"let target of controlsResultReportResults.targets\">\r\n                                                        {{control[target]}}</clr-dg-cell>\r\n                                                </clr-dg-row>\r\n\r\n                                                <clr-dg-footer>\r\n                                                    {{controlsResultReport_pcrpos_Pagination.firstItem + 1}} -\r\n                                                    {{controlsResultReport_pcrpos_Pagination.lastItem + 1}} of\r\n                                                    {{controlsResultReport_pcrpos_Pagination.totalItems}}\r\n                                                    results\r\n                                                    <clr-dg-pagination #controlsResultReport_pcrpos_Pagination\r\n                                                        [clrDgPageSize]=\"10\">\r\n                                                    </clr-dg-pagination>\r\n                                                </clr-dg-footer>\r\n                                            </clr-datagrid>\r\n\r\n                                            <h4>Pegnegs</h4>\r\n\r\n                                            <clr-datagrid #controlsResultReport_pegneg_DataGrid\r\n                                                [clrDgLoading]=\"controlsResultReportLoading\">\r\n\r\n                                                <clr-dg-action-bar>\r\n                                                    <div class=\"btn-group\">\r\n                                                        <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                                                            (click)=\"exportToCSV('controlsResultReport_pegneg')\">\r\n                                                            <clr-icon shape=\"export\" size=\"16\"></clr-icon> Export to CSV\r\n                                                        </button>\r\n                                                    </div>\r\n                                                    <div class=\"form-group\">\r\n                                                        <form [formGroup]=\"reportSelectForm\">\r\n                                                            <label>Export File name (optional)</label>\r\n                                                            <input type=\"text\" class=\"filename-input\"\r\n                                                                formControlName=\"controls_result_report_pegneg_filename\">\r\n                                                        </form>\r\n                                                    </div>\r\n                                                </clr-dg-action-bar>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'id'\">\r\n                                                    Sample/PegNeg ID\r\n                                                    <clr-dg-filter [clrDgFilter]=\"rangeFilter\">\r\n                                                        <range-filter #rangeFilter></range-filter>\r\n                                                    </clr-dg-filter>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column [clrDgField]=\"'collection_start_date'\">\r\n                                                    Collect Start Date\r\n                                                    <clr-dg-filter [clrDgFilter]=\"CollectionStartDateFilter\">\r\n                                                        <collection-start-date-filter\r\n                                                            [dateField]=\"'collection_start_date'\"\r\n                                                            #CollectionStartDateFilter>\r\n                                                        </collection-start-date-filter>\r\n                                                    </clr-dg-filter>\r\n                                                </clr-dg-column>\r\n\r\n                                                <clr-dg-column\r\n                                                    *ngFor=\"let target of controlsResultReportResults.targets\"\r\n                                                    [clrDgField]=\"target\">\r\n                                                    {{target}}</clr-dg-column>\r\n\r\n                                                <clr-dg-row *ngFor=\"let control of controlsResultReportResults.peg_neg\"\r\n                                                    [clrDgItem]=\"control\">\r\n                                                    <clr-dg-cell>{{control.id}}</clr-dg-cell>\r\n                                                    <clr-dg-cell>{{control.collection_start_date | date:'shortDate'}}\r\n                                                    </clr-dg-cell>\r\n                                                    <clr-dg-cell class=\"dynamic-column\"\r\n                                                        *ngFor=\"let target of controlsResultReportResults.targets\">\r\n                                                        {{control[target]}}</clr-dg-cell>\r\n                                                </clr-dg-row>\r\n\r\n                                                <clr-dg-footer>\r\n                                                    {{controlsResultReport_pegneg_Pagination.firstItem + 1}} -\r\n                                                    {{controlsResultReport_pegneg_Pagination.lastItem + 1}} of\r\n                                                    {{controlsResultReport_pegneg_Pagination.totalItems}}\r\n                                                    results\r\n                                                    <clr-dg-pagination #controlsResultReport_pegneg_Pagination\r\n                                                        [clrDgPageSize]=\"10\">\r\n                                                    </clr-dg-pagination>\r\n                                                </clr-dg-footer>\r\n                                            </clr-datagrid>\r\n\r\n                                        </div>\r\n\r\n                                    </clr-tab-content>\r\n                                </clr-tab>\r\n                                <!--End Control Results Reports tab -->\r\n\r\n                            </clr-tabs>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </clr-tab-content>\r\n            </clr-tab>\r\n            <!-- End View Reports tab -->\r\n        </clr-tabs>\r\n    </div>\r\n</div>"

/***/ }),

/***/ "./src/app/reports/reports.component.scss":
/***/ (function(module, exports) {

module.exports = ".text-larger {\n  font-size: larger; }\n\n.text-purple {\n  color: purple; }\n\n.text-italic {\n  font-style: italic; }\n\n.text-smaller {\n  font-size: smaller; }\n\n.list {\n  width: 95%;\n  display: -webkit-flex;\n  /* Safari */\n  -webkit-flex-wrap: wrap;\n  /* Safari 6.1+ */\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n      flex-wrap: wrap;\n  margin: 2px; }\n\n.list-item {\n  margin: 0.25em; }\n\n.list-section {\n  margin-bottom: 1em; }\n\n.filename-input {\n  width: 35em; }\n"

/***/ }),

/***/ "./src/app/reports/reports.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var _1 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var sample_service_1 = __webpack_require__("./src/app/samples/sample.service.ts");
var target_service_1 = __webpack_require__("./src/app/targets/target.service.ts");
var clarity_angular_1 = __webpack_require__("./node_modules/clarity-angular/clarity-angular.es5.js");
var matrix_service_1 = __webpack_require__("./src/app/SHARED/matrix.service.ts");
var study_service_1 = __webpack_require__("./src/app/studies/study.service.ts");
var sample_type_service_1 = __webpack_require__("./src/app/SHARED/sample-type.service.ts");
var pcr_replicate_service_1 = __webpack_require__("./src/app/pcr-replicates/pcr-replicate.service.ts");
var final_sample_mean_concentration_service_1 = __webpack_require__("./src/app/results/final-sample-mean-concentration.service.ts");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var app_utilities_1 = __webpack_require__("./src/app/app.utilities.ts");
var inhibition_service_1 = __webpack_require__("./src/app/inhibitions/inhibition.service.ts");
var quality_control_report_service_1 = __webpack_require__("./src/app/reports/quality-control-report.service.ts");
var control_results_report_service_1 = __webpack_require__("./src/app/reports/control-results-report.service.ts");
var report_file_service_1 = __webpack_require__("./src/app/reports/report-file.service.ts");
var report_types_service_1 = __webpack_require__("./src/app/reports/report-types.service.ts");
var report_status_service_1 = __webpack_require__("./src/app/reports/report-status.service.ts");
// import { FinalSampleMeanConcentrationService } from '../final-sample-mean-concentration.service';
var ReportsComponent = (function () {
    function ReportsComponent(_sampleService, _targetService, _finalSampleMeanConcentrationService, _qualityControlReportService, _controlResultsReportService, _reportFileService, _reportTypesService, _reportStatusService, _studyService, _sampleTypeService, _matrixService, _pcrReplicateService, _inhibitionService, formBuilder) {
        this._sampleService = _sampleService;
        this._targetService = _targetService;
        this._finalSampleMeanConcentrationService = _finalSampleMeanConcentrationService;
        this._qualityControlReportService = _qualityControlReportService;
        this._controlResultsReportService = _controlResultsReportService;
        this._reportFileService = _reportFileService;
        this._reportTypesService = _reportTypesService;
        this._reportStatusService = _reportStatusService;
        this._studyService = _studyService;
        this._sampleTypeService = _sampleTypeService;
        this._matrixService = _matrixService;
        this._pcrReplicateService = _pcrReplicateService;
        this._inhibitionService = _inhibitionService;
        this.formBuilder = formBuilder;
        this.allSamples = [];
        this.allTargets = [];
        this.samplesLoading = false;
        this.sampleQueryComplete = false;
        this.selected = [];
        this.reportsQueryWizardActive = false;
        this.reportsQuery = {
            samples: [],
            targets: [],
            summary_stats: []
        };
        this.reportTypes = [];
        this.reportStatuses = [];
        this.submitLoading = false;
        this.sampleSelectErrorFlag = false;
        this.targetSelectErrorFlag = false;
        this.nucleicAcidTypes = [];
        this.sampleQuerySizeErrorFlag = false;
        this.reportsLoading = false;
        // request success flag each report type
        this.inhibitionReportSuccessFlag = false;
        this.resultsReportSummarySuccessFlag = false;
        this.individualSampleReportSuccessFlag = false;
        this.qualityControlReportSuccessFlag = false;
        this.controlsResultReportSuccessFlag = false;
        // loading variables for each report list
        this.inhibitionReportFilesLoading = false;
        this.resultsReportSummaryReportFilesLoading = false;
        this.individualSampleReportFilesLoading = false;
        this.qualityControlReportFilesLoading = false;
        this.controlsResultsReportFilesLoading = false;
        // loading variables for each report type
        this.inhibitionReportLoading = false;
        this.controlsResultReportLoading = false;
        this.individualSampleReportLoading = false;
        this.qualityControlReportLoading = false;
        this.resultsReportSummaryLoading = false;
        this.inhibitionReportLoaded = false;
        this.controlsResultReportLoaded = false;
        this.individualSampleReportLoaded = false;
        this.qualityControlReportLoaded = false;
        this.resultsReportSummaryLoaded = false;
        // arrays to contain each report list
        this.inhibitionReportsList = [];
        this.resultsReportSummaryReportsList = [];
        this.individualSampleReportsList = [];
        this.qualityControlReportsList = [];
        this.controlsResultReportsList = [];
        // columns list for report lists
        this.reportListColumns = [
            { fieldName: 'created_date', colName: "Created Date" },
            { fieldName: 'created_by', colName: "Created By" },
            { fieldName: 'status', colName: "Status" },
            { fieldName: 'name', colName: "Name" },
            { fieldName: 'link', colName: "Link" },
        ];
        // arrays to contain each report's results
        this.inhibitionReportResults = [];
        this.resultsReportSummaryResults = [];
        this.individualSampleReportResults = [];
        this.qualityControlReportResults = { "sample_quality_control": [], "extraction_raw_data": [], "extraction_quality_control": [] };
        this.controlsResultReportResults = { "ext_neg": [], "ext_pos": [], "pcr_neg": [], "pcr_pos": [], "peg_neg": [], "targets": [] };
        this.inhibitionColumns = [
            { fieldName: 'sample', colName: "Sample" },
            { fieldName: 'collaborator_sample_id', colName: "Collaborator Sample ID" },
            { fieldName: 'study', colName: "Study" },
            { fieldName: 'analysis_batch', colName: "Analysis Batch" },
            { fieldName: 'extraction_number', colName: "Extraction Number" },
            { fieldName: 'inhibition_dna_cq_value', colName: "DNA Inhibtion Sample Cq" },
            { fieldName: 'inhibition_dna_control_cq_value', colName: "DNA Inhibtion Control Cq" },
            { fieldName: 'inhibition_dna_dilution_factor', colName: "DNA Inhibtion Dilution Factor" },
            { fieldName: 'inhibition_rna_cq_value', colName: "RNA Inhibtion Sample Cq" },
            { fieldName: 'inhibition_rna_control_cq_value', colName: "RNA Inhibtion Control Cq" },
            { fieldName: 'inhibition_rna_dilution_factor', colName: "RNA Inhibtion Dilution Factor" },
        ];
        this.resultsReportSummaryColumns = [
            { fieldName: 'target_name', colName: "Target" },
            { fieldName: 'sample_count', colName: "Sample Count" },
            { fieldName: 'positive_count', colName: "Positive Sample Count" },
            { fieldName: 'percent_positive', colName: "Percent Positive" },
            { fieldName: 'max_concentration', colName: "Maximum Concentration" },
            { fieldName: 'min_concentration', colName: "Minimum Concentration" },
            { fieldName: 'median_concentration', colName: "Median Concentration" },
            { fieldName: 'average_concentration', colName: "Average Concentration" },
            { fieldName: 'min_concentration_positive', colName: "Minimum concentration of positive samples" },
            { fieldName: 'median_concentration_positive', colName: "Median concentration of positive samples" },
            { fieldName: 'average_concentration_positive', colName: "Average concentration of positive samples" },
        ];
        this.individualSampleReportColumns = [
            { fieldName: 'sample', colName: "Sample" },
            { fieldName: 'target_string', colName: "Target" },
            { fieldName: 'result', colName: "Result" },
            { fieldName: 'final_sample_mean_concentration_sci', colName: "Sample Mean Concentration (Sci)" },
        ];
        this.qualityControlReport_sampleQC_Columns = [
            { fieldName: 'metric', colName: "Metric" },
            { fieldName: 'value', colName: "Value" },
            { fieldName: 'count', colName: "Count" },
            { fieldName: 'min', colName: "Min" },
            { fieldName: 'max', colName: "Max" },
        ];
        this.qualityControlReport_EB_Raw_Columns = [
            { fieldName: 'analysis_batch', colName: "Analysis Batch" },
            { fieldName: 'extraction_number', colName: "Extraction Number" },
            { fieldName: 'extraction_volume', colName: "Extraction Volume" },
            { fieldName: 'elution_volume', colName: "Elution Volume" },
            { fieldName: 'rt_template_volume', colName: "RT Template Volume" },
            { fieldName: 'rt_reaction_volume', colName: "RT Reaction Volume" },
            { fieldName: 'qpcr_template_volume', colName: "qPCR Template Volume" },
            { fieldName: 'qpcr_reaction_volume', colName: "qPCR Reaction Volume" },
        ];
        this.qualityControlReport_EB_QC_Columns = [
            { fieldName: 'metric', colName: "Metric" },
            { fieldName: 'value', colName: "Value" },
            { fieldName: 'count', colName: "Count" }
        ];
        this.controlsResultReport_extNeg_Columns = [
            { fieldName: 'analysis_batch', colName: "Analysis Batch" },
            { fieldName: 'extraction_number', colName: "Extraction Number" }
            // array.push the target columns to this array
        ];
        this.controlsResultReport_extPos_Columns = [
            { fieldName: 'analysis_batch', colName: "Analysis Batch" },
            { fieldName: 'extraction_number', colName: "Extraction Number" }
            // array.push the target columns to this array
        ];
        this.controlsResultReport_pcrNeg_Columns = [
            { fieldName: 'analysis_batch', colName: "Analysis Batch" },
            { fieldName: 'extraction_number', colName: "Extraction Number" },
            { fieldName: 'pcrreplicate_batch', colName: "PCR Replicate Batch" }
            // array.push the target columns to this array
        ];
        this.controlsResultReport_pcrPos_Columns = [
            { fieldName: 'analysis_batch', colName: "Analysis Batch" },
            { fieldName: 'extraction_number', colName: "Extraction Number" },
            { fieldName: 'pcrreplicate_batch', colName: "PCR Replicate Batch" }
            // array.push the target columns to this array
        ];
        this.controlsResultReport_pegNeg_Columns = [
            { fieldName: 'id', colName: "Sample (PegNeg) ID" },
            { fieldName: 'collection_start_date', colName: "Collection Start Date" }
            // array.push the target columns to this array
        ];
        this.resultsReportSummary_options = [
            'sample_count',
            'positive_count',
            'percent_positive',
            'max_concentration',
            'min_concentration',
            'median_concentration',
            'average_concentration',
            'min_concentration_positive',
            'median_concentration_positive',
            'average_concentration_positive'
        ];
        this.resultsReportSummary_columns = {
            sample_count: false,
            positive_count: false,
            percent_positive: false,
            max_concentration: false,
            min_concentration: false,
            median_concentration: false,
            average_concentration: false,
            min_concentration_positive: false,
            median_concentration_positive: false,
            average_concentration_positive: false
        };
        this.buildSampleQueryForm();
        this.buildReportSelectForm();
    }
    ReportsComponent.prototype.buildSampleQueryForm = function () {
        this.sampleQueryForm = this.formBuilder.group({
            study: null,
            from_id: null,
            to_id: null,
            from_collection_start_date: null,
            to_collection_start_date: null,
            collaborator_sample_id: null,
            sample_type: null,
            matrix: null,
            record_type: null,
            peg_neg: null
        });
    };
    ReportsComponent.prototype.buildReportSelectForm = function () {
        this.reportSelectForm = this.formBuilder.group({
            inhibition_report: false,
            inhibition_report_filename: 'LIDE_InhibitionReport' + app_utilities_1.APP_UTILITIES.TODAY + '.csv',
            results_report_summary: false,
            results_report_summary_filename: 'LIDE_ResultsReportSummary' + app_utilities_1.APP_UTILITIES.TODAY + '.csv',
            results_report_summary_options: this.formBuilder.group({
                sample_count: false,
                positive_count: false,
                percent_positive: false,
                max_concentration: false,
                min_concentration: false,
                median_concentration: false,
                average_concentration: false,
                min_concentration_positive: false,
                median_concentration_positive: false,
                average_concentration_positive: false
            }),
            individual_sample_report: false,
            individual_sample_report_filename: 'LIDE_IndividualSampleReport' + app_utilities_1.APP_UTILITIES.TODAY + '.csv',
            quality_control_report: false,
            quality_control_report_sampleQC_filename: 'LIDE_SampleQCReport' + app_utilities_1.APP_UTILITIES.TODAY + '.csv',
            quality_control_report_EB_Raw_filename: 'LIDE_RawExtractionBatchQCReport' + app_utilities_1.APP_UTILITIES.TODAY + '.csv',
            quality_control_report_EB_QC_filename: 'LIDE_ExtractionBatchQCReport' + app_utilities_1.APP_UTILITIES.TODAY + '.csv',
            controls_result_report: false,
            controls_result_report_extNeg_filename: 'LIDE_ControlsReport_ExtNeg' + app_utilities_1.APP_UTILITIES.TODAY + '.csv',
            controls_result_report_extPos_filename: 'LIDE_ControlsReport_ExtPos' + app_utilities_1.APP_UTILITIES.TODAY + '.csv',
            controls_result_report_pcrNeg_filename: 'LIDE_ControlsReport_PCRNeg' + app_utilities_1.APP_UTILITIES.TODAY + '.csv',
            controls_result_report_pcrPos_filename: 'LIDE_ControlsReport_PCRPos' + app_utilities_1.APP_UTILITIES.TODAY + '.csv',
            controls_result_report_pegneg_filename: 'LIDE_ControlsReport_PegNeg' + app_utilities_1.APP_UTILITIES.TODAY + '.csv'
        });
    };
    ReportsComponent.prototype.openReportsQueryWizard = function () {
        this.reportsQuery.samples = [];
        this.reportsQuery.targets = [];
        this.reportsQueryWizardActive = !this.reportsQueryWizardActive;
    };
    ReportsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.nucleicAcidTypes = app_settings_1.APP_SETTINGS.NUCLEIC_ACID_TYPES;
        // on init, call getTargets function of the TargetService, set results to allTargets var
        this._targetService.getTargets()
            .subscribe(function (targets) {
            _this.allTargets = targets;
            _this.allTargets.sort(function (a, b) {
                if (a.name < b.name) {
                    return -1;
                }
                if (a.name > b.name) {
                    return 1;
                }
                return 0;
            });
        }, function (error) { return _this.errorMessage = error; });
        // on init, call getSampleTypes function of the SampleTypeService, set results to the sampleTypes var
        this._sampleTypeService.getSampleTypes()
            .subscribe(function (sampleTypes) { return _this.sampleTypes = sampleTypes; }, function (error) { return _this.errorMessage = error; });
        // on init, call getMatrices function of the MatrixService, set results to the matrices var
        this._matrixService.getMatrices()
            .subscribe(function (matrices) { return _this.matrices = matrices; }, function (error) { return _this.errorMessage = error; });
        // on init, call getReportTypes function of the ReportTypesService, set results to the reportTypes var
        this._reportTypesService.getReportTypes()
            .subscribe(function (reportTypes) { return _this.reportTypes = reportTypes; }, function (error) { return _this.errorMessage = error; });
        // on init, call getReportStatuses function of the ReportStatusService, set results to the reportStatuses var
        this._reportStatusService.getReportStatuses()
            .subscribe(function (reportStatuses) { return _this.reportStatuses = reportStatuses; }, function (error) { return _this.errorMessage = error; });
        // on init, call getStudies function of the StudyService, set results to the studies var
        this._studyService.getStudies()
            .subscribe(function (studies) {
            _this.studies = studies;
            _this.studies.sort(function (a, b) {
                if (a.name < b.name) {
                    return -1;
                }
                if (a.name > b.name) {
                    return 1;
                }
                return 0;
            });
        }, function (error) { return _this.errorMessage = error; });
        this.retrieveAllReports();
        // auto-retrieve report lists every 60 seconds
        // setInterval(() => {
        //   this.retrieveAllReports();
        // }, 60000);
    };
    ReportsComponent.prototype.retrieveAllReports = function () {
        var _this = this;
        // set loadig variables to true
        this.inhibitionReportFilesLoading = true;
        this.resultsReportSummaryReportFilesLoading = true;
        this.individualSampleReportFilesLoading = true;
        this.qualityControlReportFilesLoading = true;
        this.controlsResultsReportFilesLoading = true;
        //clear out the lists
        this.inhibitionReportsList = [];
        this.resultsReportSummaryReportsList = [];
        this.individualSampleReportsList = [];
        this.qualityControlReportsList = [];
        this.controlsResultReportsList = [];
        // retrieve all the currently available reports from the report files endpoint
        this._reportFileService.getReportFiles()
            .subscribe(function (reportfiles) {
            // split the reponse into the respective report lists
            for (var _i = 0, reportfiles_1 = reportfiles; _i < reportfiles_1.length; _i++) {
                var reportfile = reportfiles_1[_i];
                switch (reportfile.report_type) {
                    case 1:
                        _this.inhibitionReportsList.push(reportfile);
                        break;
                    case 2:
                        _this.resultsReportSummaryReportsList.push(reportfile);
                        break;
                    case 3:
                        _this.individualSampleReportsList.push(reportfile);
                        break;
                    case 4:
                        _this.qualityControlReportsList.push(reportfile);
                        break;
                    case 5:
                        _this.controlsResultReportsList.push(reportfile);
                        break;
                    default:
                }
            }
            _this.inhibitionReportFilesLoading = false;
            _this.resultsReportSummaryReportFilesLoading = false;
            _this.individualSampleReportFilesLoading = false;
            _this.qualityControlReportFilesLoading = false;
            _this.controlsResultsReportFilesLoading = false;
            console.log("Reports Retrieved");
        }, function (error) { return _this.errorMessage = error; });
    };
    ReportsComponent.prototype.resetFlags = function () {
        this.sampleQuerySizeErrorFlag = false;
        this.sampleQueryComplete = false;
        this.errorMessage = '';
    };
    ReportsComponent.prototype.deselectAll = function () {
        this.selected = [];
    };
    ReportsComponent.prototype.selectAll = function () {
        this.selected = this.allSamples;
    };
    ReportsComponent.prototype.resizeTable = function (tab) {
        switch (tab) {
            case 'inhibitionReport':
                this.inhibitionReportDataGrid.resize();
                break;
            case 'resultsReportSummary':
                this.resultsReportSummaryDataGrid.resize();
                break;
            case 'individualSampleReport':
                this.individualSampleReportDataGrid.resize();
                break;
            case 'qualityControlReport':
                this.qualityControlReport_sampleQC_DataGrid.resize();
                this.qualityControlReport_EB_Raw_DataGrid.resize();
                this.qualityControlReport_EB_QC_DataGrid.resize();
                break;
            case 'controlsResultReport':
                this.controlsResultReport_extNeg_DataGrid.resize();
                this.controlsResultReport_extPos_DataGrid.resize();
                this.controlsResultReport_pcrNeg_DataGrid.resize();
                this.controlsResultReport_pcrPos_DataGrid.resize();
                this.controlsResultReport_pegneg_DataGrid.resize();
                break;
            default:
        }
    };
    ReportsComponent.prototype.resizeTableByID = function (tab) {
        switch (tab) {
            case 1:
                this.inhibitionReportDataGrid.resize();
                break;
            case 2:
                this.resultsReportSummaryDataGrid.resize();
                break;
            case 3:
                this.individualSampleReportDataGrid.resize();
                break;
            case 4:
                this.qualityControlReport_sampleQC_DataGrid.resize();
                this.qualityControlReport_EB_Raw_DataGrid.resize();
                this.qualityControlReport_EB_QC_DataGrid.resize();
                break;
            case 5:
                this.controlsResultReport_extNeg_DataGrid.resize();
                this.controlsResultReport_extPos_DataGrid.resize();
                this.controlsResultReport_pcrNeg_DataGrid.resize();
                this.controlsResultReport_pcrPos_DataGrid.resize();
                this.controlsResultReport_pegneg_DataGrid.resize();
                break;
            default:
        }
    };
    ReportsComponent.prototype.doCustomClick = function (buttonType) {
        this.sampleSelectErrorFlag = false;
        this.targetSelectErrorFlag = false;
        if ("custom-next-sampleSelect" === buttonType) {
            if (this.selected.length < 1) {
                this.sampleSelectErrorFlag = true;
            }
            else {
                this.sampleSelectErrorFlag = false;
                for (var _i = 0, _a = this.selected; _i < _a.length; _i++) {
                    var sample = _a[_i];
                    this.reportsQuery.samples.push(sample.id);
                }
                this.selected = [];
                this.reportsQueryWizard.next();
            }
        }
        if ("custom-next-targetSelect" === buttonType) {
            // if (this.selected.length < 1) {
            //   this.targetSelectErrorFlag = true;
            // } else {
            //   this.targetSelectErrorFlag = false;
            //   for (let target of this.selected) {
            //     this.reportsQuery.targets.push(target.id);
            //   }
            //   this.reportsQueryWizard.next();
            // }
            for (var _b = 0, _c = this.selected; _b < _c.length; _b++) {
                var target = _c[_b];
                this.reportsQuery.targets.push(target.id);
            }
            this.reportsQueryWizard.next();
        }
        if ("custom-previous" === buttonType) {
            this.selected = [];
            this.reportsQueryWizard.previous();
        }
        if ("custom-cancel" === buttonType) {
            this.reportsQueryWizard.cancel();
            this.selected = [];
            this.reportsQuery.samples = [];
            this.reportsQuery.targets = [];
            this.reportsQueryWizard.reset();
        }
        if ("custom-finish" === buttonType) {
            this.reportsQueryWizard.cancel();
            this.selected = [];
            this.reportsQueryWizard.reset();
        }
    };
    ReportsComponent.prototype.exportToCSV = function (tableType) {
        switch (tableType) {
            case 'inhibitionReport':
                app_utilities_1.APP_UTILITIES.generateCSV({
                    filename: this.reportSelectForm.get('inhibition_report_filename').value,
                    data: this.inhibitionReportResults,
                    headers: this.inhibitionColumns
                });
                break;
            case 'resultsReportSummary':
                app_utilities_1.APP_UTILITIES.generateCSV({
                    filename: this.reportSelectForm.get('results_report_summary_filename').value,
                    data: this.resultsReportSummaryResults,
                    headers: this.resultsReportSummaryColumns
                });
                break;
            case 'individualSampleReport':
                app_utilities_1.APP_UTILITIES.generateCSV({
                    filename: this.reportSelectForm.get('individual_sample_report_filename').value,
                    data: this.individualSampleReportResults,
                    headers: this.individualSampleReportColumns
                });
                break;
            case 'qualityControlReport_sampleQC':
                app_utilities_1.APP_UTILITIES.generateCSV({
                    filename: this.reportSelectForm.get('quality_control_report_sampleQC_filename').value,
                    data: this.qualityControlReportResults.sample_quality_control,
                    headers: this.qualityControlReport_sampleQC_Columns
                });
                break;
            case 'qualityControlReport_EB_Raw':
                app_utilities_1.APP_UTILITIES.generateCSV({
                    filename: this.reportSelectForm.get('quality_control_report_EB_Raw_filename').value,
                    data: this.qualityControlReportResults.extraction_raw_data,
                    headers: this.qualityControlReport_EB_Raw_Columns
                });
                break;
            case 'qualityControlReport_EB_QC':
                app_utilities_1.APP_UTILITIES.generateCSV({
                    filename: this.reportSelectForm.get('quality_control_report_EB_QC_filename').value,
                    data: this.qualityControlReportResults.extraction_quality_control,
                    headers: this.qualityControlReport_EB_QC_Columns
                });
                break;
            case 'controlsResultReport_extNeg':
                // add the target name rows to the controlsResultReport_extNeg_Columns array using the target array
                for (var _i = 0, _a = this.controlsResultReportResults.targets; _i < _a.length; _i++) {
                    var target = _a[_i];
                    this.controlsResultReport_extNeg_Columns.push({ fieldName: target, colName: target });
                }
                app_utilities_1.APP_UTILITIES.generateCSV({
                    filename: this.reportSelectForm.get('controls_result_report_extNeg_filename').value,
                    data: this.controlsResultReportResults.ext_neg,
                    headers: this.controlsResultReport_extNeg_Columns
                });
                break;
            case 'controlsResultReport_extPos':
                // add the target name rows to the controlsResultReport_extPos_Columns array using the target array
                for (var _b = 0, _c = this.controlsResultReportResults.targets; _b < _c.length; _b++) {
                    var target = _c[_b];
                    this.controlsResultReport_extPos_Columns.push({ fieldName: target, colName: target });
                }
                app_utilities_1.APP_UTILITIES.generateCSV({
                    filename: this.reportSelectForm.get('controls_result_report_extPos_filename').value,
                    data: this.controlsResultReportResults.ext_pos,
                    headers: this.controlsResultReport_extPos_Columns
                });
                break;
            case 'controlsResultReport_pcrNeg':
                // add the target name rows to the controlsResultReport_pcrNeg_Columns array using the target array
                for (var _d = 0, _e = this.controlsResultReportResults.targets; _d < _e.length; _d++) {
                    var target = _e[_d];
                    this.controlsResultReport_pcrNeg_Columns.push({ fieldName: target, colName: target });
                }
                app_utilities_1.APP_UTILITIES.generateCSV({
                    filename: this.reportSelectForm.get('controls_result_report_pcrNeg_filename').value,
                    data: this.controlsResultReportResults.pcr_neg,
                    headers: this.controlsResultReport_pcrNeg_Columns
                });
                break;
            case 'controlsResultReport_pcrPos':
                // add the target name rows to the controlsResultReport_pcrPos_Columns array using the target array
                for (var _f = 0, _g = this.controlsResultReportResults.targets; _f < _g.length; _f++) {
                    var target = _g[_f];
                    this.controlsResultReport_pcrPos_Columns.push({ fieldName: target, colName: target });
                }
                app_utilities_1.APP_UTILITIES.generateCSV({
                    filename: this.reportSelectForm.get('controls_result_report_pcrPos_filename').value,
                    data: this.controlsResultReportResults.pcr_pos,
                    headers: this.controlsResultReport_pcrPos_Columns
                });
                break;
            case 'controlsResultReport_pegneg':
                // add the target name rows to the controlsResultReport_pegNeg_Columns array using the target array
                for (var _h = 0, _j = this.controlsResultReportResults.targets; _h < _j.length; _h++) {
                    var target = _j[_h];
                    this.controlsResultReport_pegNeg_Columns.push({ fieldName: target, colName: target });
                }
                app_utilities_1.APP_UTILITIES.generateCSV({
                    filename: this.reportSelectForm.get('controls_result_report_pegneg_filename').value,
                    data: this.controlsResultReportResults.peg_neg,
                    headers: this.controlsResultReport_pegNeg_Columns
                });
                break;
            default:
        }
    };
    ReportsComponent.prototype.loadReport = function (fileURL, fileName, report_type) {
        var _this = this;
        var trimmedFileName = fileName.replace(".json", "");
        switch (report_type) {
            case 1:
                this.inhibitionReportLoading = true;
                this.reportSelectForm.get('inhibition_report_filename').setValue(trimmedFileName);
                break;
            case 2:
                this.resultsReportSummaryLoading = true;
                this.reportSelectForm.get('results_report_summary_filename').setValue(trimmedFileName);
                break;
            case 3:
                this.individualSampleReportLoading = true;
                this.reportSelectForm.get('individual_sample_report_filename').setValue(trimmedFileName);
                break;
            case 4:
                this.qualityControlReportLoading = true;
                this.reportSelectForm.get('quality_control_report_sampleQC_filename').setValue(trimmedFileName + '(Sample)');
                this.reportSelectForm.get('quality_control_report_EB_Raw_filename').setValue(trimmedFileName + '(RawExtractionBatch)');
                this.reportSelectForm.get('quality_control_report_EB_QC_filename').setValue(trimmedFileName + '(ExtractionBatch)');
                break;
            case 5:
                this.controlsResultReportLoading = true;
                this.reportSelectForm.get('controls_result_report_extNeg_filename').setValue(trimmedFileName + '(ExtNeg)');
                this.reportSelectForm.get('controls_result_report_extPos_filename').setValue(trimmedFileName + '(ExtPos)');
                this.reportSelectForm.get('controls_result_report_pcrNeg_filename').setValue(trimmedFileName + '(PCRNeg)');
                this.reportSelectForm.get('controls_result_report_pcrPos_filename').setValue(trimmedFileName + '(PCRPos)');
                this.reportSelectForm.get('controls_result_report_pegneg_filename').setValue(trimmedFileName + '(PegNeg)');
                break;
            default:
        }
        this._reportFileService.retrieveReport(fileURL)
            .subscribe(function (reportResults) {
            switch (report_type) {
                case 1:
                    _this.inhibitionReportResults = reportResults;
                    _this.inhibitionReportLoading = false;
                    _this.inhibitionReportLoaded = true;
                    break;
                case 2:
                    for (var _i = 0, _a = _this.resultsReportSummary_options; _i < _a.length; _i++) {
                        var option = _a[_i];
                        _this.resultsReportSummary_columns[option] = false;
                    }
                    // special treatment for the resultsReportSummary: determine which columns to show on table
                    // based on the structure of the first item in the response array
                    for (var _b = 0, _c = _this.resultsReportSummary_options; _b < _c.length; _b++) {
                        var option = _c[_b];
                        if (reportResults[0].hasOwnProperty(option)) {
                            _this.resultsReportSummary_columns[option] = true;
                        }
                    }
                    // alternative method for detecting presence/non-presence of the field (less safe)
                    // for (let option of this.resultsReportSummary_options) {
                    //   if (reportResults[0][option] !== undefined) {
                    //     this.resultsReportSummary_columns[option] = true;
                    //   }
                    // }
                    _this.resultsReportSummaryResults = reportResults;
                    _this.resultsReportSummaryLoading = false;
                    _this.resultsReportSummaryLoaded = true;
                    break;
                case 3:
                    _this.individualSampleReportResults = reportResults;
                    _this.individualSampleReportLoading = false;
                    _this.individualSampleReportLoaded = true;
                    break;
                case 4:
                    _this.qualityControlReportResults = reportResults;
                    _this.qualityControlReportLoading = false;
                    _this.qualityControlReportLoaded = true;
                    break;
                case 5:
                    _this.controlsResultReportResults = reportResults;
                    _this.controlsResultReportLoading = false;
                    _this.controlsResultReportLoaded = true;
                    break;
                default:
            }
            _this.submitLoading = false;
            _this.resizeTableByID(report_type);
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
        });
    };
    ReportsComponent.prototype.onSubmitSampleQuery = function (formValue) {
        var _this = this;
        this.resetFlags();
        this.submitLoading = true;
        // set functional limit for amount of samples to display in the table at once
        var countLimit = 2000;
        this._sampleService.querySamplesCount(formValue)
            .subscribe(function (count) {
            // if count exceeds limit, show error message
            if (count.count >= countLimit) {
                _this.sampleQuerySizeErrorFlag = true;
            }
            else if (count.count < countLimit) {
                _this.samplesLoading = true;
                formValue.slim = null;
                // if sample query count does not exceed functional limit, query for actual results, and set results to the allSamples var
                _this._sampleService.querySamples(formValue)
                    .subscribe(function (samples) {
                    _this.samplesCount = count.count;
                    _this.sampleQueryComplete = true;
                    _this.allSamples = samples;
                    _this.samplesLoading = false;
                    _this.submitLoading = false;
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.samplesLoading = false;
                });
            }
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
        });
    };
    ReportsComponent.prototype.clearAlerts = function () {
        this.inhibitionReportSuccessFlag = false;
        this.resultsReportSummarySuccessFlag = false;
        this.individualSampleReportSuccessFlag = false;
        this.qualityControlReportSuccessFlag = false;
        this.controlsResultReportSuccessFlag = false;
    };
    ReportsComponent.prototype.generateReports = function (reportSelectFormValue) {
        var _this = this;
        if (reportSelectFormValue.inhibition_report) {
            this.submitLoading = true;
            // begin call for inhibition report
            this._inhibitionService.getInhibitionReport(this.reportsQuery)
                .subscribe(function (success) {
                _this.submitLoading = false;
                _this.inhibitionReportSuccessFlag = true;
            }, function (error) {
                _this.errorMessage = error;
                _this.inhibitionReportLoading = false;
                _this.inhibitionReportLoaded = false;
                _this.submitLoading = false;
            });
        }
        if (reportSelectFormValue.controls_result_report) {
            this.submitLoading = true;
            this._controlResultsReportService.getControlResultsReport(this.reportsQuery)
                .subscribe(function (success) {
                _this.controlsResultReportSuccessFlag = true;
                _this.submitLoading = false;
            }, function (error) {
                _this.errorMessage = error;
                _this.controlsResultReportLoading = false;
                _this.controlsResultReportLoaded = false;
                _this.submitLoading = false;
            });
        }
        if (reportSelectFormValue.individual_sample_report) {
            this.submitLoading = true;
            this._finalSampleMeanConcentrationService.queryFinalSampleMeanConcentrationsResults(this.reportsQuery)
                .subscribe(function (success) {
                _this.individualSampleReportSuccessFlag = true;
                _this.submitLoading = false;
            }, function (error) {
                _this.errorMessage = error;
                _this.individualSampleReportLoading = false;
                _this.submitLoading = false;
            });
        }
        if (reportSelectFormValue.quality_control_report) {
            this.submitLoading = true;
            var sampleArray = {
                "samples": this.reportsQuery.samples
            };
            this._qualityControlReportService.getQualityControlReport(sampleArray)
                .subscribe(function (success) {
                _this.qualityControlReportSuccessFlag = true;
                _this.submitLoading = false;
            }, function (error) {
                _this.errorMessage = error;
                _this.qualityControlReportLoading = false;
                _this.submitLoading = false;
            });
        }
        if (reportSelectFormValue.results_report_summary) {
            this.submitLoading = true;
            this.reportsQuery.summary_stats = [];
            var options_1 = this.reportSelectForm.get('results_report_summary_options').value;
            Object.keys(options_1).forEach(function (item) {
                console.log(item);
                if (options_1[item]) {
                    _this.reportsQuery.summary_stats.push(item);
                }
            });
            // just updated 6/11/19 - not yet available on backend
            this._finalSampleMeanConcentrationService.getSummaryStatistics(this.reportsQuery)
                .subscribe(function (success) {
                _this.resultsReportSummarySuccessFlag = true;
                _this.submitLoading = false;
            }, function (error) {
                _this.errorMessage = error;
                _this.resultsReportSummaryLoading = false;
                _this.resultsReportSummaryLoaded = false;
                _this.submitLoading = false;
            });
        }
        // disappear all the success flags and alerts after 30 seconds
        setTimeout(function () {
            _this.inhibitionReportSuccessFlag = false;
            _this.resultsReportSummarySuccessFlag = false;
            _this.individualSampleReportSuccessFlag = false;
            _this.qualityControlReportSuccessFlag = false;
            _this.controlsResultReportSuccessFlag = false;
        }, 30000);
    };
    return ReportsComponent;
}());
__decorate([
    core_1.ViewChild("reportsQueryWizard"),
    __metadata("design:type", typeof (_a = typeof clarity_angular_1.Wizard !== "undefined" && clarity_angular_1.Wizard) === "function" && _a || Object)
], ReportsComponent.prototype, "reportsQueryWizard", void 0);
__decorate([
    core_1.ViewChild("inhibitionReportDataGrid"),
    __metadata("design:type", typeof (_b = typeof clarity_angular_1.Datagrid !== "undefined" && clarity_angular_1.Datagrid) === "function" && _b || Object)
], ReportsComponent.prototype, "inhibitionReportDataGrid", void 0);
__decorate([
    core_1.ViewChild("resultsReportSummaryDataGrid"),
    __metadata("design:type", typeof (_c = typeof clarity_angular_1.Datagrid !== "undefined" && clarity_angular_1.Datagrid) === "function" && _c || Object)
], ReportsComponent.prototype, "resultsReportSummaryDataGrid", void 0);
__decorate([
    core_1.ViewChild("individualSampleReportDataGrid"),
    __metadata("design:type", typeof (_d = typeof clarity_angular_1.Datagrid !== "undefined" && clarity_angular_1.Datagrid) === "function" && _d || Object)
], ReportsComponent.prototype, "individualSampleReportDataGrid", void 0);
__decorate([
    core_1.ViewChild("qualityControlReport_sampleQC_DataGrid"),
    __metadata("design:type", typeof (_e = typeof clarity_angular_1.Datagrid !== "undefined" && clarity_angular_1.Datagrid) === "function" && _e || Object)
], ReportsComponent.prototype, "qualityControlReport_sampleQC_DataGrid", void 0);
__decorate([
    core_1.ViewChild("qualityControlReport_EB_Raw_DataGrid"),
    __metadata("design:type", typeof (_f = typeof clarity_angular_1.Datagrid !== "undefined" && clarity_angular_1.Datagrid) === "function" && _f || Object)
], ReportsComponent.prototype, "qualityControlReport_EB_Raw_DataGrid", void 0);
__decorate([
    core_1.ViewChild("qualityControlReport_EB_QC_DataGrid"),
    __metadata("design:type", typeof (_g = typeof clarity_angular_1.Datagrid !== "undefined" && clarity_angular_1.Datagrid) === "function" && _g || Object)
], ReportsComponent.prototype, "qualityControlReport_EB_QC_DataGrid", void 0);
__decorate([
    core_1.ViewChild("controlsResultReport_extNeg_DataGrid"),
    __metadata("design:type", typeof (_h = typeof clarity_angular_1.Datagrid !== "undefined" && clarity_angular_1.Datagrid) === "function" && _h || Object)
], ReportsComponent.prototype, "controlsResultReport_extNeg_DataGrid", void 0);
__decorate([
    core_1.ViewChild("controlsResultReport_extPos_DataGrid"),
    __metadata("design:type", typeof (_j = typeof clarity_angular_1.Datagrid !== "undefined" && clarity_angular_1.Datagrid) === "function" && _j || Object)
], ReportsComponent.prototype, "controlsResultReport_extPos_DataGrid", void 0);
__decorate([
    core_1.ViewChild("controlsResultReport_pcrNeg_DataGrid"),
    __metadata("design:type", typeof (_k = typeof clarity_angular_1.Datagrid !== "undefined" && clarity_angular_1.Datagrid) === "function" && _k || Object)
], ReportsComponent.prototype, "controlsResultReport_pcrNeg_DataGrid", void 0);
__decorate([
    core_1.ViewChild("controlsResultReport_pcrPos_DataGrid"),
    __metadata("design:type", typeof (_l = typeof clarity_angular_1.Datagrid !== "undefined" && clarity_angular_1.Datagrid) === "function" && _l || Object)
], ReportsComponent.prototype, "controlsResultReport_pcrPos_DataGrid", void 0);
__decorate([
    core_1.ViewChild("controlsResultReport_pegneg_DataGrid"),
    __metadata("design:type", typeof (_m = typeof clarity_angular_1.Datagrid !== "undefined" && clarity_angular_1.Datagrid) === "function" && _m || Object)
], ReportsComponent.prototype, "controlsResultReport_pegneg_DataGrid", void 0);
ReportsComponent = __decorate([
    core_1.Component({
        selector: 'app-reports',
        template: __webpack_require__("./src/app/reports/reports.component.html"),
        styles: [__webpack_require__("./src/app/reports/reports.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_o = typeof sample_service_1.SampleService !== "undefined" && sample_service_1.SampleService) === "function" && _o || Object, typeof (_p = typeof target_service_1.TargetService !== "undefined" && target_service_1.TargetService) === "function" && _p || Object, typeof (_q = typeof final_sample_mean_concentration_service_1.FinalSampleMeanConcentrationService !== "undefined" && final_sample_mean_concentration_service_1.FinalSampleMeanConcentrationService) === "function" && _q || Object, typeof (_r = typeof quality_control_report_service_1.QualityControlReportService !== "undefined" && quality_control_report_service_1.QualityControlReportService) === "function" && _r || Object, typeof (_s = typeof control_results_report_service_1.ControlResultsReportService !== "undefined" && control_results_report_service_1.ControlResultsReportService) === "function" && _s || Object, typeof (_t = typeof report_file_service_1.ReportFileService !== "undefined" && report_file_service_1.ReportFileService) === "function" && _t || Object, typeof (_u = typeof report_types_service_1.ReportTypesService !== "undefined" && report_types_service_1.ReportTypesService) === "function" && _u || Object, typeof (_v = typeof report_status_service_1.ReportStatusService !== "undefined" && report_status_service_1.ReportStatusService) === "function" && _v || Object, typeof (_w = typeof study_service_1.StudyService !== "undefined" && study_service_1.StudyService) === "function" && _w || Object, typeof (_x = typeof sample_type_service_1.SampleTypeService !== "undefined" && sample_type_service_1.SampleTypeService) === "function" && _x || Object, typeof (_y = typeof matrix_service_1.MatrixService !== "undefined" && matrix_service_1.MatrixService) === "function" && _y || Object, typeof (_z = typeof pcr_replicate_service_1.PcrReplicateService !== "undefined" && pcr_replicate_service_1.PcrReplicateService) === "function" && _z || Object, typeof (_0 = typeof inhibition_service_1.InhibitionService !== "undefined" && inhibition_service_1.InhibitionService) === "function" && _0 || Object, typeof (_2 = typeof _1.FormBuilder !== "undefined" && _1.FormBuilder) === "function" && _2 || Object])
], ReportsComponent);
exports.ReportsComponent = ReportsComponent;
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _2;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/reports/reports.component.js.map

/***/ }),

/***/ "./src/app/results/final-sample-mean-concentration.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var FinalSampleMeanConcentrationService = (function () {
    function FinalSampleMeanConcentrationService(_http) {
        this._http = _http;
    }
    FinalSampleMeanConcentrationService.prototype.queryFinalSampleMeanConcentrations = function (queryObject) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        var queryString = '';
        queryString += '?sample=';
        for (var _i = 0, _a = queryObject.samples; _i < _a.length; _i++) {
            var sample = _a[_i];
            queryString += ((sample.toString()) + ',');
        }
        queryString = queryString.slice(0, -1);
        queryString += '&target=';
        for (var _b = 0, _c = queryObject.targets; _b < _c.length; _b++) {
            var target = _c[_b];
            queryString += ((target.toString()) + ',');
        }
        queryString = queryString.slice(0, -1);
        return this._http.get(app_settings_1.APP_SETTINGS.FINALSAMPLEMEANCONCENTRATIONS_URL + queryString, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    FinalSampleMeanConcentrationService.prototype.queryFinalSampleMeanConcentrationsResults = function (queryObject) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        var queryString = '';
        queryString += '?sample=';
        for (var _i = 0, _a = queryObject.samples; _i < _a.length; _i++) {
            var sample = _a[_i];
            queryString += ((sample.toString()) + ',');
        }
        queryString = queryString.slice(0, -1);
        queryString += '&target=';
        for (var _b = 0, _c = queryObject.targets; _b < _c.length; _b++) {
            var target = _c[_b];
            queryString += ((target.toString()) + ',');
        }
        queryString = queryString.slice(0, -1);
        return this._http.get(app_settings_1.APP_SETTINGS.FINALSAMPLEMEANCONCENTRATIONS_URL + 'results/' + queryString, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    FinalSampleMeanConcentrationService.prototype.getSummaryStatistics = function (queryObject) {
        var queryString = '';
        queryString += '?sample=';
        for (var _i = 0, _a = queryObject.samples; _i < _a.length; _i++) {
            var sample = _a[_i];
            queryString += ((sample.toString()) + ',');
        }
        queryString = queryString.slice(0, -1);
        queryString += '&target=';
        for (var _b = 0, _c = queryObject.targets; _b < _c.length; _b++) {
            var target = _c[_b];
            queryString += ((target.toString()) + ',');
        }
        queryString = queryString.slice(0, -1);
        if (queryObject.summary_stats.length > 0) {
            queryString += '&statistic=';
            for (var _d = 0, _e = queryObject.summary_stats; _d < _e.length; _d++) {
                var stat = _e[_d];
                queryString += ((stat.toString()) + ',');
            }
            queryString = queryString.slice(0, -1);
        }
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.FINALSAMPLEMEANCONCENTRATIONS_URL + 'summary_statistics/' + queryString, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    FinalSampleMeanConcentrationService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return FinalSampleMeanConcentrationService;
}());
FinalSampleMeanConcentrationService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], FinalSampleMeanConcentrationService);
exports.FinalSampleMeanConcentrationService = FinalSampleMeanConcentrationService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/results/final-sample-mean-concentration.service.js.map

/***/ }),

/***/ "./src/app/results/results.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\r\n    <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n        <h3>Results</h3>\r\n    </div>\r\n</div>\r\n<div class=\"row\">\r\n    <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n        <p>\r\n            <button class=\"btn btn-outline\" (click)=\"openResultsQueryWizard()\">\r\n                <clr-icon shape=\"search\"></clr-icon> Open Results Query Builder\r\n            </button>\r\n\r\n    </div>\r\n</div>\r\n\r\n<div class=\"row\">\r\n    <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n\r\n        <clr-wizard #resultsQueryWizard [(clrWizardOpen)]=\"resultsQueryWizardActive\">\r\n            <clr-wizard-title>Results Query Builder</clr-wizard-title>\r\n\r\n            <clr-wizard-button [type]=\"'cancel'\">Cancel</clr-wizard-button>\r\n            <clr-wizard-button [type]=\"'previous'\">Back</clr-wizard-button>\r\n            <clr-wizard-button [type]=\"'next'\">Next</clr-wizard-button>\r\n            <clr-wizard-button [type]=\"'finish'\">Finish</clr-wizard-button>\r\n\r\n            <clr-wizard-page (clrWizardPageCustomButton)=\"doCustomClick($event)\">\r\n                <ng-template clrPageTitle>Select Samples</ng-template>\r\n\r\n                <!-- Begin sample query form -->\r\n                <div class=\"card-text\">\r\n                    <form class=\"form compact\" [formGroup]=\"sampleQueryForm\"\r\n                        (ngSubmit)=\"onSubmitSampleQuery(sampleQueryForm.value)\">\r\n                        <section class=\"form-block\">\r\n\r\n                            <div class=\"form-group\">\r\n                                <label [ngClass]=\"{'required': sampleQueryForm.get('study').enabled}\">Study</label>\r\n                                <label for=\"studySelect\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                    class=\"tooltip tooltip-validation tooltip-sm\"\r\n                                    [class.invalid]=\"sampleQueryForm.get('study').invalid && (sampleQueryForm.get('study').dirty || sampleQueryForm.get('study').touched)\">\r\n                                    <div class=\"select\">\r\n                                        <select id=\"studySelect\" name=\"study\" formControlName=\"study\">\r\n                                            <option value=\"\">\r\n                                                <span class=\"all\">ALL STUDIES</span>\r\n                                            </option>\r\n                                            <option *ngFor=\"let study of studies\" [value]=\"study.id\">{{study.name}}\r\n                                            </option>\r\n                                        </select>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label>Sample ID Range</label>\r\n                                <span>From</span>\r\n                                <input type=\"number\" formControlName=\"from_id\">\r\n                                <span>To</span>\r\n                                <input type=\"number\" formControlName=\"to_id\">\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label>Collection Start Date Range</label>\r\n                                <span>From</span>\r\n                                <input type=\"date\" formControlName=\"from_collection_start_date\">\r\n                                <span>To</span>\r\n                                <input type=\"date\" formControlName=\"to_collection_start_date\">\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label>Collaborator Sample ID</label>\r\n                                <input id=\"collabSampleIdInput\" type=\"text\" formControlName=\"collaborator_sample_id\">\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label>Peg Neg (returns associated samples)</label>\r\n                                <input type=\"number\" formControlName=\"peg_neg\">\r\n                            </div>\r\n                            <!-- <div class=\"form-group\">\r\n                                <label>Matrix</label>\r\n                                <div class=\"select\">\r\n                                    <select id=\"matrixSelect\" name=\"matrix\" formControlName=\"matrix\">\r\n                                        <option value=\"\">\r\n                                            <span class=\"all\">ALL MATRICES</span>\r\n                                        </option>\r\n                                        <option *ngFor=\"let matrix of matrices\" [value]=\"matrix.id\">{{matrix.name}}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label>Sample type</label>\r\n                                <div class=\"select\">\r\n                                    <select id=\"sampleTypeSelect\" name=\"sample_type\" formControlName=\"sample_type\">\r\n                                        <option value=\"\">\r\n                                            <span class=\"all\">ALL SAMPLE TYPES</span>\r\n                                        </option>\r\n                                        <option *ngFor=\"let sampleType of sampleTypes\" [value]=\"sampleType.id\">{{sampleType.name}}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div> -->\r\n\r\n                        </section>\r\n\r\n                        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"sampleQuerySizeErrorFlag\">\r\n                            <div class=\"alert-item\">\r\n                                <span class=\"alert-text\">Your query results are too large (greater than\r\n                                    {{queryCountLimit}}). Please narrow your search.</span>\r\n                            </div>\r\n                        </clr-alert>\r\n\r\n                        <button class=\"btn btn-primary\" type=\"submit\" [clrLoading]=\"submitLoading\">\r\n                            <clr-icon shape=\"filter\"></clr-icon> Filter Samples\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n\r\n                <div *ngIf=\"sampleQueryComplete\">\r\n                    <h4>Query returned {{samplesCount}} sample records</h4>\r\n                </div>\r\n                <!-- End sample query form -->\r\n\r\n\r\n                <div class=\"in-wizard-datagrid\">\r\n                    <clr-datagrid [(clrDgSelected)]=\"selected\" [clrDgLoading]=\"samplesLoading\" [clDgRowSelection]=\"true\"\r\n                        class=\"datagrid-compact\">\r\n\r\n                        <clr-dg-action-bar>\r\n                            <div class=\"btn-group\">\r\n                                <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"selectAll()\">\r\n                                    <clr-icon shape=\"check\" size=\"16\"></clr-icon> Select All\r\n                                </button>\r\n                            </div>\r\n                            <div class=\"btn-group\">\r\n                                <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"deselectAll()\">\r\n                                    <clr-icon shape=\"window-close\" size=\"16\"></clr-icon> Deselect All\r\n                                </button>\r\n                            </div>\r\n                        </clr-dg-action-bar>\r\n\r\n                        <clr-dg-column [clrDgField]=\"'id'\">\r\n                            Sample ID\r\n                            <clr-dg-filter [clrDgFilter]=\"rangeFilter\">\r\n                                <range-filter #rangeFilter></range-filter>\r\n                            </clr-dg-filter>\r\n                        </clr-dg-column>\r\n\r\n                        <clr-dg-column [clrDgField]=\"'collaborator_sample_id'\">\r\n                            <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                Collaborator Sample ID\r\n                            </ng-container>\r\n                        </clr-dg-column>\r\n\r\n                        <clr-dg-column [clrDgField]=\"'study_string'\">\r\n                            Study\r\n                            <clr-dg-filter [clrDgFilter]=\"studyFilter\">\r\n                                <study-filter #studyFilter></study-filter>\r\n                            </clr-dg-filter>\r\n                        </clr-dg-column>\r\n\r\n\r\n                        <clr-dg-column [clrDgField]=\"'collection_start_date'\">\r\n                            Collect Start Date\r\n                            <clr-dg-filter [clrDgFilter]=\"CollectionStartDateFilter\">\r\n                                <collection-start-date-filter [dateField]=\"'collection_start_date'\"\r\n                                    #CollectionStartDateFilter></collection-start-date-filter>\r\n                            </clr-dg-filter>\r\n                        </clr-dg-column>\r\n\r\n                        <clr-dg-row *clrDgItems=\"let sample of allSamples\" [clrDgItem]=\"sample\">\r\n                            <clr-dg-cell>{{sample.id}}</clr-dg-cell>\r\n                            <clr-dg-cell>{{sample.collaborator_sample_id}}</clr-dg-cell>\r\n                            <clr-dg-cell>{{sample.study_string}}</clr-dg-cell>\r\n                            <clr-dg-cell>{{sample.collection_start_date | date:'shortDate'}}</clr-dg-cell>\r\n                        </clr-dg-row>\r\n\r\n                        <clr-dg-footer>\r\n                            {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{pagination.totalItems}}\r\n                            samples\r\n                            <clr-dg-pagination #pagination [clrDgPageSize]=\"10\"></clr-dg-pagination>\r\n                        </clr-dg-footer>\r\n                    </clr-datagrid>\r\n\r\n                </div>\r\n                <p>\r\n                    <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"sampleSelectErrorFlag\">\r\n                        <div clr-alert-item class=\"alert-item\">\r\n                            <span class=\"alert-text\">Please select at least one sample to continue.</span>\r\n                        </div>\r\n                    </clr-alert>\r\n\r\n                    <ng-template clrPageButtons>\r\n                        <clr-wizard-button [type]=\"'custom-cancel'\">Cancel</clr-wizard-button>\r\n                        <clr-wizard-button [type]=\"'custom-previous'\">Back</clr-wizard-button>\r\n                        <clr-wizard-button [type]=\"'custom-next-sampleSelect'\">Next</clr-wizard-button>\r\n                    </ng-template>\r\n            </clr-wizard-page>\r\n\r\n            <clr-wizard-page (clrWizardPageCustomButton)=\"doCustomClick($event)\">\r\n                <ng-template clrPageTitle>Select Targets</ng-template>\r\n                <div class=\"in-wizard-datagrid\">\r\n                    <clr-datagrid [(clrDgSelected)]=\"selected\" [clDgRowSelection]=\"true\" class=\"datagrid-compact\">\r\n\r\n                        <clr-dg-column [clrDgField]=\"'name'\">Name</clr-dg-column>\r\n                        <clr-dg-column [clrDgField]=\"'code'\">Code</clr-dg-column>\r\n                        <clr-dg-column [clrDgField]=\"'type'\">Type</clr-dg-column>\r\n\r\n                        <clr-dg-row *clrDgItems=\"let target of allTargets\" [clrDgItem]=\"target\">\r\n                            <clr-dg-cell>{{target.name}}</clr-dg-cell>\r\n                            <clr-dg-cell>{{target.code}}</clr-dg-cell>\r\n                            <clr-dg-cell>{{target.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes }}\r\n                            </clr-dg-cell>\r\n                        </clr-dg-row>\r\n\r\n                        <clr-dg-footer>{{allTargets.length}} targets</clr-dg-footer>\r\n                    </clr-datagrid>\r\n                </div>\r\n                <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"targetSelectErrorFlag\">\r\n                    <div clr-alert-item class=\"alert-item\">\r\n                        <span class=\"alert-text\">Please select at least one target to continue.</span>\r\n                    </div>\r\n                </clr-alert>\r\n                <ng-template clrPageButtons>\r\n                    <clr-wizard-button [type]=\"'custom-cancel'\">Cancel</clr-wizard-button>\r\n                    <clr-wizard-button [type]=\"'custom-previous'\">Back</clr-wizard-button>\r\n                    <clr-wizard-button [type]=\"'custom-next-targetSelect'\">Next</clr-wizard-button>\r\n                </ng-template>\r\n            </clr-wizard-page>\r\n\r\n            <clr-wizard-page (clrWizardPageCustomButton)=\"doCustomClick($event)\">\r\n                <ng-template clrPageTitle>Query Summary</ng-template>\r\n                <label>Samples:</label>\r\n                <ul class=\"list\">\r\n                    <li *ngFor=\"let sample of resultsQuery.samples\">{{sample}}</li>\r\n                </ul>\r\n                <p>\r\n                    <label>Targets:</label>\r\n                    <ul class=\"list\">\r\n                        <li *ngFor=\"let target of resultsQuery.targets\">{{target | displayValue:'name': allTargets}}\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <ng-template clrPageButtons>\r\n                        <clr-wizard-button [type]=\"'cancel'\">Cancel</clr-wizard-button>\r\n                        <clr-wizard-button [type]=\"'custom-previous'\">Back</clr-wizard-button>\r\n                        <clr-wizard-button [type]=\"'custom-finish'\">Finish</clr-wizard-button>\r\n                    </ng-template>\r\n\r\n            </clr-wizard-page>\r\n        </clr-wizard>\r\n\r\n    </div>\r\n</div>\r\n\r\n<div class=\"row\">\r\n    <div class=\"col-lg-8 col-sm-12\">\r\n\r\n        <span><label>Note: Sample Mean Concentration may not not yet be calculated if sample/target combination is\r\n                missing\r\n                valid controls or all replicates. Click 'Details' to view full business rules and replicate details\r\n                explanations.</label>\r\n            <button class=\"btn btn-outline btn-sm\" (click)=\"showBusinessRulesModal = true\">Details</button></span>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"row\">\r\n    <!---------- Loading spinner---------->\r\n    <span class=\"spinner spinner-lg\" *ngIf=\"sampleResultsLoading\">\r\n        Loading...\r\n    </span>\r\n    <br>\r\n    <span *ngIf=\"sampleResultsLoading\">Calculating and loading of results may take a while. </span>\r\n    <!---------- End Loading spinner---------->\r\n</div>\r\n\r\n<div class=\"row\">\r\n\r\n    <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\" *ngIf=\"fsmcResultsLoaded && fsmcResults.length === 0\">\r\n        There are no results for your query.\r\n    </div>\r\n\r\n    <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\"\r\n        *ngIf=\"fsmcResultsLoaded && sampleResultsLoaded && fsmcResults.length > 0 && sampleResults.length >0\">\r\n\r\n        <clr-tabs>\r\n\r\n            <!--Full results tab -->\r\n            <clr-tab>\r\n                <button clrTabLink>Full Results</button>\r\n                <clr-tab-content active>\r\n\r\n                    <clr-datagrid [clrDgLoading]=\"fsmcResultsLoading\">\r\n\r\n                        <clr-dg-action-bar>\r\n                            <div class=\"btn-group\">\r\n                                <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"exportToCSV('fsmc')\">\r\n                                    <clr-icon shape=\"export\" size=\"16\"></clr-icon> Export to CSV\r\n                                </button>\r\n                            </div>\r\n                        </clr-dg-action-bar>\r\n\r\n                        <clr-dg-column [clrDgField]=\"'sample'\">\r\n                            Sample ID\r\n                            <clr-dg-filter [clrDgFilter]=\"rangeFilter\">\r\n                                <range-filter #rangeFilter></range-filter>\r\n                            </clr-dg-filter>\r\n                        </clr-dg-column>\r\n\r\n                        <clr-dg-column [clrDgField]=\"'collaborator_sample_id'\">\r\n                            <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                Collaborator Sample ID\r\n                            </ng-container>\r\n                        </clr-dg-column>\r\n\r\n                        <clr-dg-column [clrDgField]=\"'collection_start_date'\">\r\n                            Collect Start Date\r\n                            <clr-dg-filter [clrDgFilter]=\"CollectionStartDateFilter\">\r\n                                <collection-start-date-filter [dateField]=\"'collection_start_date'\"\r\n                                    #CollectionStartDateFilter>\r\n                                </collection-start-date-filter>\r\n                            </clr-dg-filter>\r\n                        </clr-dg-column>\r\n\r\n                        <clr-dg-column [clrDgField]=\"'target'\">\r\n                            Target\r\n                            <clr-dg-filter [clrDgFilter]=\"targetFilter\">\r\n                                <target-filter #targetFilter></target-filter>\r\n                            </clr-dg-filter>\r\n                        </clr-dg-column>\r\n\r\n                        <clr-dg-column [clrDgField]=\"'sample_mean_concentration'\">\r\n                            <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                Sample Mean Concentration\r\n                            </ng-container>\r\n                        </clr-dg-column>\r\n\r\n                        <clr-dg-column>\r\n                            <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                Valid Replicates\r\n                            </ng-container>\r\n                        </clr-dg-column>\r\n\r\n                        <clr-dg-column>\r\n                            <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                Invalid by reason\r\n                            </ng-container>\r\n                        </clr-dg-column>\r\n\r\n                        <clr-dg-row *clrDgItems=\"let fsmc of fsmcResults\" [clrDgItem]=\"fsmc\">\r\n                            <clr-dg-cell>{{fsmc.sample}}</clr-dg-cell>\r\n                            <clr-dg-cell>{{fsmc.collaborator_sample_id}}</clr-dg-cell>\r\n                            <clr-dg-cell>{{fsmc.collection_start_date | date:'shortDate'}}</clr-dg-cell>\r\n                            <clr-dg-cell>{{fsmc.target | displayValue:'name': allTargets }}</clr-dg-cell>\r\n                            <!-- <clr-dg-cell>{{fsmc.final_sample_mean_concentration_sci}}</clr-dg-cell> -->\r\n                            <clr-dg-cell>\r\n                                {{fsmc.final_sample_mean_concentration_sci === \"\" ? \"No Result\" : fsmc.final_sample_mean_concentration_sci}}\r\n                            </clr-dg-cell>\r\n                            <clr-dg-cell>\r\n                                <a class=\"label label-blue clickable\"\r\n                                    *ngIf=\"fsmc.sample_target_replicates.positive_concentration_count > 0\"\r\n                                    (click)=\"openReplicateDetails('positive_concentrations', fsmc)\">Positive\r\n                                    Concentrations&nbsp;<span\r\n                                        class=\"badge\">{{fsmc.sample_target_replicates.positive_concentration_count}}</span></a>\r\n                                <br>\r\n                                <a class=\"label label-blue clickable\"\r\n                                    *ngIf=\"fsmc.sample_target_replicates.negative_concentration_count > 0\"\r\n                                    (click)=\"openReplicateDetails('negative_concentrations', fsmc)\">Negative\r\n                                    Concentrations&nbsp;<span\r\n                                        class=\"badge\">{{fsmc.sample_target_replicates.negative_concentration_count}}</span></a>\r\n                            </clr-dg-cell>\r\n                            <clr-dg-cell>\r\n                                <a class=\"label label-blue clickable\"\r\n                                    *ngIf=\"fsmc.sample_target_replicates.qpcr_results_missing_count > 0\"\r\n                                    (click)=\"openReplicateDetails('qpcr_results_missing', fsmc)\">Missing qPCR\r\n                                    Values&nbsp;<span\r\n                                        class=\"badge\">{{fsmc.sample_target_replicates.qpcr_results_missing_count}}</span></a>\r\n                                <br>\r\n                                <a class=\"label label-blue clickable\"\r\n                                    *ngIf=\"fsmc.sample_target_replicates.concentration_calc_values_missing_count > 0\"\r\n                                    (click)=\"openReplicateDetails('concentration_calc_values_missing', fsmc)\">Calculation\r\n                                    Values\r\n                                    Missing&nbsp;<span\r\n                                        class=\"badge\">{{fsmc.sample_target_replicates.concentration_calc_values_missing_count}}</span></a>\r\n                                <br>\r\n                                <a class=\"label label-blue clickable\"\r\n                                    *ngIf=\"fsmc.sample_target_replicates.controls_invalid_count > 0\"\r\n                                    (click)=\"openReplicateDetails('controls_invalids', fsmc)\">Invalid per\r\n                                    controls&nbsp;<span\r\n                                        class=\"badge\">{{fsmc.sample_target_replicates.controls_invalid_count}}</span></a>\r\n                                <br>\r\n                                <a class=\"label label-blue clickable\"\r\n                                    *ngIf=\"fsmc.sample_target_replicates.invalid_override_invalid_count > 0\"\r\n                                    (click)=\"openReplicateDetails('invalid_override_invalids', fsmc)\">Invalid due to manual\r\n                                    override&nbsp;<span\r\n                                        class=\"badge\">{{fsmc.sample_target_replicates.invalid_override_invalid_count}}</span></a>\r\n                            </clr-dg-cell>\r\n                        </clr-dg-row>\r\n\r\n                        <clr-dg-footer>\r\n                            {{fsmcPagination.firstItem + 1}} - {{fsmcPagination.lastItem + 1}} of\r\n                            {{fsmcPagination.totalItems}}\r\n                            results\r\n                            <clr-dg-pagination #fsmcPagination [clrDgPageSize]=\"10\"></clr-dg-pagination>\r\n                        </clr-dg-footer>\r\n                    </clr-datagrid>\r\n\r\n\r\n\r\n                </clr-tab-content>\r\n            </clr-tab>\r\n            <!-- End Full results tab -->\r\n\r\n            <!--View 2 results tab -->\r\n            <clr-tab>\r\n                <button clrTabLink (mouseout)=\"resizeTable()\">Sample Rows FSMC</button>\r\n                <clr-tab-content class=\"sample-results-tab\" (mouseover)=\"resizeTable()\">\r\n\r\n                    <clr-datagrid #sampleRowDataGrid [clrDgLoading]=\"sampleResultsLoading\">\r\n\r\n                        <clr-dg-action-bar>\r\n                            <div class=\"btn-group\">\r\n                                <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                                    (click)=\"exportToCSV('sampleRows')\">\r\n                                    <clr-icon shape=\"export\" size=\"16\"></clr-icon> Export to CSV\r\n                                </button>\r\n                                <!-- <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"resizeTable()\">\r\n                                    <clr-icon shape=\"export\" size=\"16\"></clr-icon> Resize\r\n                                </button> -->\r\n                            </div>\r\n                        </clr-dg-action-bar>\r\n\r\n                        <clr-dg-column [clrDgField]=\"'id'\">\r\n                            Sample ID\r\n                            <clr-dg-filter [clrDgFilter]=\"rangeFilter\">\r\n                                <range-filter #rangeFilter></range-filter>\r\n                            </clr-dg-filter>\r\n                        </clr-dg-column>\r\n\r\n                        <clr-dg-column [clrDgField]=\"'collaborator_sample_id'\">\r\n                            <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                                Collaborator Sample ID\r\n                            </ng-container>\r\n                        </clr-dg-column>\r\n\r\n                        <clr-dg-column [clrDgField]=\"'collection_start_date'\">\r\n                            Collect Start Date\r\n                            <clr-dg-filter [clrDgFilter]=\"CollectionStartDateFilter\">\r\n                                <collection-start-date-filter [dateField]=\"'collection_start_date'\"\r\n                                    #CollectionStartDateFilter>\r\n                                </collection-start-date-filter>\r\n                            </clr-dg-filter>\r\n                        </clr-dg-column>\r\n\r\n                        <clr-dg-column *ngFor=\"let fsmc of sampleResults[0].final_sample_mean_concentrations\"\r\n                            [clrDgField]=\"fsmc.target_string\">{{fsmc.target_string}}</clr-dg-column>\r\n\r\n                        <clr-dg-row *ngFor=\"let sample of sampleResults\" [clrDgItem]=\"sample\">\r\n                            <clr-dg-cell>{{sample.id}}</clr-dg-cell>\r\n                            <clr-dg-cell>{{sample.collaborator_sample_id}}</clr-dg-cell>\r\n                            <clr-dg-cell>{{sample.collection_start_date | date:'shortDate'}}</clr-dg-cell>\r\n                            <clr-dg-cell class=\"dynamic-column\"\r\n                                *ngFor=\"let fsmc of sample.final_sample_mean_concentrations\">\r\n                                {{fsmc.final_sample_mean_concentration}}</clr-dg-cell>\r\n                        </clr-dg-row>\r\n\r\n                        <clr-dg-footer>\r\n                            {{sampleRowPagination.firstItem + 1}} - {{sampleRowPagination.lastItem + 1}} of\r\n                            {{sampleRowPagination.totalItems}}\r\n                            results\r\n                            <clr-dg-pagination #sampleRowPagination [clrDgPageSize]=\"10\"></clr-dg-pagination>\r\n                        </clr-dg-footer>\r\n                    </clr-datagrid>\r\n\r\n                </clr-tab-content>\r\n            </clr-tab>\r\n            <!-- End View 2 results tab -->\r\n\r\n            <!--View 3 results tab -->\r\n            <clr-tab>\r\n                <button clrTabLink (mouseout)=\"resizeTable()\">Target Rows FSMC</button>\r\n                <clr-tab-content (mouseover)=\"resizeTable()\">\r\n                    <clr-datagrid #targetRowDataGrid [clrDgLoading]=\"sampleResultsLoading\">\r\n\r\n                        <clr-dg-action-bar>\r\n                            <div class=\"btn-group\">\r\n                                <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                                    (click)=\"exportToCSV('targetRows')\">\r\n                                    <clr-icon shape=\"export\" size=\"16\"></clr-icon> Export to CSV\r\n                                </button>\r\n                            </div>\r\n                        </clr-dg-action-bar>\r\n\r\n                        <!-- Columns -->\r\n                        <clr-dg-column [clrDgField]=\"'titles'\"></clr-dg-column>\r\n                        <clr-dg-column *ngFor=\"let sample of sampleResults\" [clrDgField]=\"sample.id\">{{sample.id}}\r\n                        </clr-dg-column>\r\n                        <!-- End Columns -->\r\n\r\n                        <!-- Rows -->\r\n                        <clr-dg-row>\r\n                            <clr-dg-cell><strong>Collaborator Sample ID</strong></clr-dg-cell>\r\n                            <clr-dg-cell *ngFor=\"let sample of sampleResults\">{{sample.collaborator_sample_id}}\r\n                            </clr-dg-cell>\r\n                        </clr-dg-row>\r\n\r\n                        <clr-dg-row>\r\n                            <clr-dg-cell><strong>Collection Start Date</strong></clr-dg-cell>\r\n                            <clr-dg-cell *ngFor=\"let sample of sampleResults\">\r\n                                {{sample.collection_start_date | date:'shortDate'}}</clr-dg-cell>\r\n                        </clr-dg-row>\r\n\r\n                        <clr-dg-row\r\n                            *ngFor=\"let fsmc of sampleResults[0].final_sample_mean_concentrations, let i = index\">\r\n                            <clr-dg-cell>{{fsmc.target_string}}</clr-dg-cell>\r\n                            <clr-dg-cell *ngFor=\"let sample of sampleResults\">\r\n                                {{sample.final_sample_mean_concentrations[i].final_sample_mean_concentration}}\r\n                            </clr-dg-cell>\r\n                        </clr-dg-row>\r\n                        <!-- End Rows -->\r\n\r\n                        <clr-dg-footer>\r\n                            {{targetRowPagination.firstItem + 1}} - {{targetRowPagination.lastItem + 1}} of\r\n                            {{targetRowPagination.totalItems}}\r\n                            results\r\n                            <clr-dg-pagination #targetRowPagination [clrDgPageSize]=\" 10\">\r\n                            </clr-dg-pagination>\r\n                        </clr-dg-footer>\r\n                    </clr-datagrid>\r\n                </clr-tab-content>\r\n            </clr-tab>\r\n            <!-- End View 3 results tab -->\r\n\r\n        </clr-tabs>\r\n\r\n    </div>\r\n</div>\r\n\r\n<!-- business rules Modal -->\r\n<clr-modal [(clrModalOpen)]=\"showBusinessRulesModal\" [clrModalSize]=\"'xl'\">\r\n    <h3 class=\"modal-title\">\r\n        <span>Business Rules & Replicate Details Explanation</span>\r\n    </h3>\r\n    <div class=\"modal-body\">\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n                <div>\r\n                    <h4>Business Rules</h4>\r\n                    All replicate records are considered invalid by default. They are only made valid if all\r\n                    of the\r\n                    following checks pass:\r\n                    <p>1.All the parent controls (Peg Neg, Ext Neg, RT Neg, PCR Neg) for this replicate have\r\n                        been\r\n                        entered\r\n                        into the database\r\n                        <p>2. The replicate’s related Peg Neg’s replicates with same target as this data\r\n                            replicate are\r\n                            all\r\n                            valid (if no related Peg Neg, this check does not apply), if even a single one\r\n                            of the Peg\r\n                            Neg\r\n                            replicates is invalid then the data replicate is set to invalid.\r\n                            <p>3. The replicate's parent replicate batch negative controls (Ext Neg, RT Neg,\r\n                                PCR Neg)\r\n                                are all\r\n                                valid, if even a single one of the controls is invalid then the data\r\n                                replicate is set to\r\n                                invalid.\r\n                                <p>4. The replicate’s CQ value and GC/reaction are greater than or equal to\r\n                                    zero.\r\n                                    <p>Alternately, the user has the option to manually override the\r\n                                        system-determined\r\n                                        validity.\r\n                                        <hr>\r\n                                        <h4>Replicate details explanation</h4>\r\n                                        <h5>Complete Replicates</h5>\r\n                                        <span class=\"label label-blue\">Positive concentrations</span> replicates\r\n                                        that are fully complete with all\r\n                                        necessary values - concentration has been calculated and is a\r\n                                        positive number indicating presence of target.<br>\r\n                                        <span class=\"label label-blue\">Negative concentrations</span> replicates\r\n                                        that are fully complete with all\r\n                                        necessary values - concentration has been calculated and is 0,\r\n                                        indicating absence of target.\r\n\r\n                                        <h5>Incomplete Replicates</h5>\r\n                                        <span class=\"label label-blue\">Missing qPCR Values</span> replicates\r\n                                        with Cq value and/or GC/Reaction\r\n                                        missing, which most likely means the qPCR results text file\r\n                                        containing that replicate was not uploaded.<br>\r\n                                        <span class=\"label label-blue\">Calculation Values\r\n                                            Missing</span>replicates where concentration is not\r\n                                        calculated because of one of the critical concentration calculation\r\n                                        values are missing.<br>\r\n                                        <span class=\"label label-blue\">Invalid per controls</span> replicates\r\n                                        that are invalid because associated\r\n                                        controls are invalid/noncompliant.<br>\r\n\r\n                                        <button class=\"btn btn-info\"\r\n                                            (click)=\"showBusinessRulesModal = !showBusinessRulesModal\">Close</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</clr-modal>\r\n\r\n<!-- replicate details Modal -->\r\n<clr-modal [(clrModalOpen)]=\"showReplicateDetailsModal\">\r\n    <h3 class=\"modal-title\">\r\n        <span>{{replicateCategoryString}}</span>\r\n    </h3>\r\n    <div class=\"modal-body\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12\">\r\n                <div>\r\n                    <clr-tree-node *ngFor=\"let replicate of replicateDetailArray\">\r\n                        <span>AB {{replicate.analysis_batch}}, Extraction {{replicate.extraction_number}}, Replicate\r\n                            {{replicate.replicate_number}}\r\n                        </span>\r\n\r\n                        <ng-template [clrIfExpanded]=\"false\">\r\n                            <clr-tree-node>\r\n                                <div class=\"extraction-row\">\r\n\r\n                                    <div>\r\n                                        <table class=\"table table-vertical table-compact \">\r\n                                            <tbody>\r\n                                                <tr>\r\n                                                    <th><span class=\"text-bold\">Replicate Concentration</span></th>\r\n                                                    <td>{{replicate.replicate_concentration}}</td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <th>GC/Reaction</th>\r\n                                                    <td>{{replicate.gc_reaction}}</td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <th>Cq value</th>\r\n                                                    <td>{{replicate.cq_value}}</td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <th>Volume Extracted</th>\r\n                                                    <td>{{replicate.calculation_values.extraction_volume}} µL</td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <th>Volume Eluted</th>\r\n                                                    <td>{{replicate.calculation_values.elution_volume}} µL</td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <th>Final Concentrated Sample Volume</th>\r\n                                                    <td>{{replicate.calculation_values.final_concentrated_sample_volume}}\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <th>Inhibition Dilution Factor</th>\r\n                                                    <td>{{replicate.calculation_values.inhibition_dilution_factor}}</td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <th>qPCR Reaction Volume</th>\r\n                                                    <td>{{replicate.calculation_values.qpcr_reaction_volume}} µL</td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <th>qPCR Template Volume</th>\r\n                                                    <td>{{replicate.calculation_values.qpcr_template_volume}} µL</td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <th>Sample Dilution Factor</th>\r\n                                                    <td>{{replicate.calculation_values.sample_dilution_factor}}</td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <th>Dissolution Volume</th>\r\n                                                    <td>{{replicate.calculation_values.dissolution_volume}}</td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <th>Post Dilution Volume</th>\r\n                                                    <td>{{replicate.calculation_values.post_dilution_volume}}</td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <th>Total Volume or Mass Sampled</th>\r\n                                                    <td>{{replicate.calculation_values.total_volume_or_mass_sampled}}\r\n                                                    </td>\r\n                                                </tr>\r\n                                                <tr>\r\n                                                    <th>Matrix Code</th>\r\n                                                    <td>{{replicate.calculation_values.matrix_code}}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            </tbody>\r\n                                        </table>\r\n                                        <ul>\r\n                                            <li *ngIf=\"replicate.missing_calculation_values.inhibition_dilution_factor\">\r\n                                                Missing Inhibition Dilution Factor <span>(Inhibition\r\n                                                    {{replicate.inhibition.id}}, AB\r\n                                                    {{replicate.inhibition.analysis_batch}}, Extraction\r\n                                                    {{replicate.inhibition.extraction_number}}, Sample\r\n                                                    {{replicate.inhibition.sample}}\r\n                                                    ({{replicate.inhibition.nucleic_acid_type}})</span></li>\r\n                                            <li\r\n                                                *ngIf=\"replicate.missing_calculation_values.final_concentrated_sample_volume\">\r\n                                                Missing Final Concentrated Sample Volume</li>\r\n                                            <li *ngIf=\"replicate.missing_calculation_values.sample_dissolution_volume\">\r\n                                                Missing Dissolution Volume</li>\r\n                                            <li *ngIf=\"replicate.missing_calculation_values.sample_post_dilution_value\">\r\n                                                Missing Post-dilution volume\r\n                                            </li>\r\n                                        </ul>\r\n                                        <hr>\r\n                                        <ul>\r\n                                            <li *ngIf=\"replicate.invalid_reasons.cq_value_missing\">Cq value is missing\r\n                                            </li>\r\n                                            <li *ngIf=\"replicate.invalid_reasons.gc_reaction_missing\">GC/reaction value\r\n                                                is missing\r\n                                            </li>\r\n                                            <li *ngIf=\"replicate.invalid_reasons.peg_neg_invalid\">PEG NEG is invalid\r\n                                            </li>\r\n                                            <li *ngIf=\"replicate.invalid_reasons.peg_neg_not_extracted\">PEG NEG not\r\n                                                extracted\r\n                                            </li>\r\n\r\n                                            <li *ngIf=\"replicate.invalid_reasons.peg_neg_reps_invalid\">PEG NEG\r\n                                                Replicates\r\n                                                Invalid\r\n                                                <clr-tree-node><span>Invalid PEG NEG Replicates</span>\r\n                                                    <ng-template [clrIfExpanded]=\"false\">\r\n                                                        <clr-tree-node>\r\n                                                            <ul>\r\n                                                                <li\r\n                                                                    *ngFor=\"let item of replicate.invalid_reasons.peg_neg_reps_invalid_list\">\r\n                                                                    AB {{item.analysis_batch}}, Extraction\r\n                                                                    {{item.extraction_number}}, Replicate\r\n                                                                    {{item.replicate_number}}, Sample {{item.sample}},\r\n                                                                    {{item.target | displayValue:'name': allTargets}}\r\n                                                                </li>\r\n                                                            </ul>\r\n                                                        </clr-tree-node>\r\n                                                    </ng-template>\r\n                                                </clr-tree-node>\r\n                                            </li>\r\n\r\n                                            <li *ngIf=\"replicate.invalid_reasons.peg_neg_reps_missing\">PEG NEG\r\n                                                Replicates\r\n                                                Missing\r\n                                                <clr-tree-node><span>Missing PEG NEG Replicates</span>\r\n                                                    <ng-template [clrIfExpanded]=\"false\">\r\n                                                        <clr-tree-node>\r\n                                                            <ul>\r\n                                                                <li\r\n                                                                    *ngFor=\"let item of replicate.invalid_reasons.peg_neg_reps_missing_list\">\r\n                                                                    AB {{item.analysis_batch}}, Extraction\r\n                                                                    {{item.extraction_number}}, Replicate\r\n                                                                    {{item.replicate_number}}, Sample {{item.sample}},\r\n                                                                    {{item.target | displayValue:'name': allTargets}}\r\n                                                                </li>\r\n                                                            </ul>\r\n                                                        </clr-tree-node>\r\n                                                    </ng-template>\r\n                                                </clr-tree-node>\r\n                                            </li>\r\n\r\n                                            <li *ngIf=\"replicate.invalid_reasons.peg_neg_replicates_missing\">PEG NEG is\r\n                                                missing\r\n                                                <clr-tree-node><span>Missing PEG NEGs</span>\r\n                                                    <ng-template [clrIfExpanded]=\"false\">\r\n                                                        <clr-tree-node>\r\n                                                            <ul>\r\n                                                                <li\r\n                                                                    *ngFor=\"let item of replicate.invalid_reasons.peg_neg_replicates_missing_list\">\r\n                                                                    AB {{item.analysis_batch}}, Extraction\r\n                                                                    {{item.extraction_number}}, Replicate\r\n                                                                    {{item.replicate_number}}, Sample {{item.sample}},\r\n                                                                    {{item.target | displayValue:'name': allTargets}}\r\n                                                                </li>\r\n                                                            </ul>\r\n                                                        </clr-tree-node>\r\n                                                    </ng-template>\r\n                                                </clr-tree-node>\r\n                                            </li>\r\n                                            <li *ngIf=\"replicate.invalid_reasons.ext_neg_missing\">Ext Negative is\r\n                                                missing</li>\r\n                                            <li *ngIf=\"replicate.invalid_reasons.ext_neg_invalid\">Ext Negative\r\n                                                is invalid</li>\r\n                                            <li *ngIf=\"replicate.invalid_reasons.rt_neg_missing\">RT Negative is missing\r\n                                            </li>\r\n                                            <li *ngIf=\"replicate.invalid_reasons.rt_neg_invalid\">RT Negative is invalid\r\n                                            </li>\r\n                                            <li *ngIf=\"replicate.invalid_reasons.pcr_neg_missing\">PCR Negative is\r\n                                                missing</li>\r\n                                            <li *ngIf=\"replicate.invalid_reasons.pcr_neg_invalid\">PCR Negative is\r\n                                                invalid</li>\r\n                                            <li *ngIf=\"replicate.invalid_reasons.ext_rt_pos_rna_invalid\">Ext/RT Pos RNA\r\n                                                is\r\n                                                invalid</li>\r\n                                            <li *ngIf=\"replicate.invalid_reasons.ext_rt_pos_rna_missing\">Ext\r\n                                                Pos RNA/RT is missing</li>\r\n                                            <li *ngIf=\"replicate.invalid_reasons.ext_pos_dna_missing\">Ext\r\n                                                Pos DNA is missing</li>\r\n                                            <li *ngIf=\"replicate.invalid_reasons.ext_pos_dna_invalid\">Ext\r\n                                                Pos DNA is invalid</li>\r\n\r\n                                            <li *ngIf=\"replicate.invalid_reasons.sibling_pcr_rep_controls_missing\">\r\n                                                Controls\r\n                                                for sibling PCR\r\n                                                Replicates in Extraction are missing\r\n                                                <clr-tree-node><span>Missing Replicates</span>\r\n                                                    <ng-template [clrIfExpanded]=\"false\">\r\n                                                        <clr-tree-node>\r\n                                                            <ul>\r\n                                                                <li\r\n                                                                    *ngFor=\"let item of replicate.invalid_reasons.sibling_pcr_rep_controls_missing_list\">\r\n                                                                    AB {{item.analysis_batch}}, Extraction\r\n                                                                    {{item.extraction_number}}, Replicate\r\n                                                                    {{item.replicate_number}},\r\n                                                                    {{item.target | displayValue:'name': allTargets}}\r\n                                                                </li>\r\n                                                            </ul>\r\n                                                        </clr-tree-node>\r\n                                                    </ng-template>\r\n                                                </clr-tree-node>\r\n                                            </li>\r\n\r\n                                            <li *ngIf=\"replicate.invalid_reasons.sibling_pcr_rep_controls_invalid\">\r\n                                                Controls\r\n                                                for sibling PCR\r\n                                                Replicates in Extraction are invalid\r\n                                                <clr-tree-node><span>Invalid Replicates</span>\r\n                                                    <ng-template [clrIfExpanded]=\"false\">\r\n                                                        <clr-tree-node>\r\n                                                            <ul>\r\n                                                                <li\r\n                                                                    *ngFor=\"let item of replicate.invalid_reasons.sibling_pcr_rep_controls_invalid_list\">\r\n                                                                    AB {{item.analysis_batch}}, Extraction\r\n                                                                    {{item.extraction_number}}, Replicate\r\n                                                                    {{item.replicate_number}},\r\n                                                                    {{item.target | displayValue:'name': allTargets}}\r\n                                                                </li>\r\n                                                            </ul>\r\n                                                        </clr-tree-node>\r\n                                                    </ng-template>\r\n                                                </clr-tree-node>\r\n                                            </li>\r\n\r\n                                        </ul>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </clr-tree-node>\r\n                        </ng-template>\r\n                    </clr-tree-node>\r\n\r\n                    <button class=\"btn btn-info\"\r\n                        (click)=\"showReplicateDetailsModal = !showReplicateDetailsModal\">Close</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</clr-modal>"

/***/ }),

/***/ "./src/app/results/results.component.scss":
/***/ (function(module, exports) {

module.exports = ".dilution-factor-input {\n  width: 5em; }\n\n.in-wizard-datagrid {\n  max-width: 650px; }\n\n.text-bold {\n  font-weight: bold; }\n\n.dynamic-column {\n  width: 10em; }\n\n.sample-results-tab {\n  width: 100%; }\n\na {\n  cursor: pointer; }\n"

/***/ }),

/***/ "./src/app/results/results.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var _1 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var sample_service_1 = __webpack_require__("./src/app/samples/sample.service.ts");
var target_service_1 = __webpack_require__("./src/app/targets/target.service.ts");
var clarity_angular_1 = __webpack_require__("./node_modules/clarity-angular/clarity-angular.es5.js");
var matrix_service_1 = __webpack_require__("./src/app/SHARED/matrix.service.ts");
var study_service_1 = __webpack_require__("./src/app/studies/study.service.ts");
var sample_type_service_1 = __webpack_require__("./src/app/SHARED/sample-type.service.ts");
var pcr_replicate_service_1 = __webpack_require__("./src/app/pcr-replicates/pcr-replicate.service.ts");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var app_utilities_1 = __webpack_require__("./src/app/app.utilities.ts");
var final_sample_mean_concentration_service_1 = __webpack_require__("./src/app/results/final-sample-mean-concentration.service.ts");
// import { sample } from 'rxjs/operators';
// import { sampleTime } from 'rxjs/operator/sampleTime';
var ResultsComponent = (function () {
    function ResultsComponent(_sampleService, _targetService, _finalSampleMeanConcentrationService, _studyService, _sampleTypeService, _matrixService, _pcrReplicateService, formBuilder) {
        this._sampleService = _sampleService;
        this._targetService = _targetService;
        this._finalSampleMeanConcentrationService = _finalSampleMeanConcentrationService;
        this._studyService = _studyService;
        this._sampleTypeService = _sampleTypeService;
        this._matrixService = _matrixService;
        this._pcrReplicateService = _pcrReplicateService;
        this.formBuilder = formBuilder;
        this.allSamples = [];
        this.allTargets = [];
        this.samplesLoading = false;
        this.sampleQueryComplete = false;
        this.fsmcResultsLoading = false;
        this.fsmcResultsLoaded = false;
        this.sampleResultsLoading = false;
        this.sampleResultsLoaded = false;
        this.resultsQueryWizardActive = false;
        this.submitLoading = false;
        this.sampleSelectErrorFlag = false;
        this.targetSelectErrorFlag = false;
        this.selected = [];
        this.fsmcResults = [];
        //sampleResults:ISample[] = [];
        this.sampleResults = [];
        this.nucleicAcidTypes = [];
        this.sampleQuerySizeErrorFlag = false;
        this.showReplicateDetailsModal = false;
        this.showBusinessRulesModal = false;
        this.replicateDetailArray = [];
        this.missingInhibitions = [];
        this.resultsQuery = {
            samples: [],
            targets: []
        };
        this.fsmcColumns = [
            { fieldName: 'sample', colName: "Sample" },
            { fieldName: 'collaborator_sample_id', colName: "Collaborator Sample ID" },
            { fieldName: 'collection_start_date', colName: "Collection Start Date" },
            { fieldName: 'target_string', colName: "Target" },
            { fieldName: 'final_sample_mean_concentration', colName: "Sample Mean Concentration" },
            { fieldName: 'final_sample_mean_concentration_sci', colName: "Sample Mean Concentration (Sci)" }
        ];
        this.sampleRowColumns = [
            { fieldName: 'id', colName: "Sample" },
            { fieldName: 'collaborator_sample_id', colName: "Collaborator Sample ID" },
            { fieldName: 'collection_start_date', colName: "Collection Start Date" }
            // array.push the target columns to this array
        ];
        this.targetRowColumns = [
            { fieldName: 'target_string', colName: "Target" },
        ];
        this.buildSampleQueryForm();
    }
    ResultsComponent.prototype.buildSampleQueryForm = function () {
        this.sampleQueryForm = this.formBuilder.group({
            study: null,
            from_id: null,
            to_id: null,
            from_collection_start_date: null,
            to_collection_start_date: null,
            collaborator_sample_id: null,
            sample_type: null,
            matrix: null,
            record_type: null,
            peg_neg: null
        });
    };
    ResultsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.nucleicAcidTypes = app_settings_1.APP_SETTINGS.NUCLEIC_ACID_TYPES;
        // on init, call getTargets function of the TargetService, set results to allTargets var
        this._targetService.getTargets()
            .subscribe(function (targets) {
            _this.allTargets = targets;
            _this.allTargets.sort(function (a, b) {
                if (a.name < b.name) {
                    return -1;
                }
                ;
                if (a.name > b.name) {
                    return 1;
                }
                ;
                return 0;
            });
        }, function (error) { _this.errorMessage = error; });
        // on init, call getSampleTypes function of the SampleTypeService, set results to the sampleTypes var
        this._sampleTypeService.getSampleTypes()
            .subscribe(function (sampleTypes) { return _this.sampleTypes = sampleTypes; }, function (error) { return _this.errorMessage = error; });
        // on init, call getMatrices function of the MatrixService, set results to the matrices var
        this._matrixService.getMatrices()
            .subscribe(function (matrices) { return _this.matrices = matrices; }, function (error) { return _this.errorMessage = error; });
        // on init, call getStudies function of the StudyService, set results to the studies var
        this._studyService.getStudies()
            .subscribe(function (studies) {
            _this.studies = studies;
            _this.studies.sort(function (a, b) {
                if (a.name < b.name) {
                    return -1;
                }
                if (a.name > b.name) {
                    return 1;
                }
                return 0;
            });
        }, function (error) { return _this.errorMessage = error; });
    };
    ResultsComponent.prototype.ngAfterViewInit = function () {
    };
    ResultsComponent.prototype.deselectAll = function () {
        this.selected = [];
    };
    ResultsComponent.prototype.selectAll = function () {
        this.selected = this.allSamples;
    };
    ResultsComponent.prototype.openResultsQueryWizard = function () {
        this.resultsQuery.samples = [];
        this.resultsQuery.targets = [];
        this.resultsQueryWizardActive = !this.resultsQueryWizardActive;
    };
    ResultsComponent.prototype.exportToCSV = function (tableType) {
        var filename = 'LIDE_Results_Report' + app_utilities_1.APP_UTILITIES.TODAY + '.csv';
        switch (tableType) {
            case 'fsmc':
                app_utilities_1.APP_UTILITIES.generateCSV({ filename: filename, data: this.fsmcResults, headers: this.fsmcColumns });
                break;
            case 'sampleRows':
                // add the target name rows to the sampleRowColumns array using one of the FSMC arrays
                for (var _i = 0, _a = this.sampleResults[0].final_sample_mean_concentrations; _i < _a.length; _i++) {
                    var fsmc = _a[_i];
                    this.sampleRowColumns.push({ fieldName: fsmc.target_string, colName: fsmc.target_string });
                }
                // flatten fsmc values into the sample record for export purposes
                for (var _b = 0, _c = this.sampleResults; _b < _c.length; _b++) {
                    var sample = _c[_b];
                    for (var _d = 0, _e = sample.final_sample_mean_concentrations; _d < _e.length; _d++) {
                        var fsmc = _e[_d];
                        sample[fsmc.target_string] = fsmc.final_sample_mean_concentration;
                    }
                }
                app_utilities_1.APP_UTILITIES.generateCSV({ filename: filename, data: this.sampleResults, headers: this.sampleRowColumns });
                break;
            case 'targetRows':
                this.targetRowColumns = [
                    { fieldName: 'target_string', colName: "" }
                ];
                for (var _f = 0, _g = this.sampleResults; _f < _g.length; _f++) {
                    var sample = _g[_f];
                    this.targetRowColumns.push({ fieldName: sample.id.toString(), colName: sample.id.toString() });
                }
                // tslint:disable-next-line:max-line-length
                var targetRowArray = [{ 'target': 'collaborator_sample_id', 'target_string': 'Collaborator Sample ID' }, { 'target': 'collection_start_date', 'target_string': 'Collection Start Date' }];
                for (var _h = 0, _j = this.sampleResults[0].final_sample_mean_concentrations; _h < _j.length; _h++) {
                    var fsmc = _j[_h];
                    // initiate the targetRowArray
                    targetRowArray.push({ 'target': fsmc.target, 'target_string': fsmc.target_string });
                }
                for (var _k = 0, targetRowArray_1 = targetRowArray; _k < targetRowArray_1.length; _k++) {
                    var target = targetRowArray_1[_k];
                    for (var _l = 0, _m = this.sampleResults; _l < _m.length; _l++) {
                        var sample = _m[_l];
                        var sampleID = sample.id.toString();
                        if (target.target === 'collaborator_sample_id') {
                            target[sampleID] = sample.collaborator_sample_id;
                        }
                        if (target.target === 'collection_start_date') {
                            target[sampleID] = sample.collection_start_date;
                        }
                        for (var _o = 0, _p = sample.final_sample_mean_concentrations; _o < _p.length; _o++) {
                            var fsmc = _p[_o];
                            if (fsmc.target === target.target) {
                                target[sampleID] = fsmc.final_sample_mean_concentration;
                            }
                        }
                    }
                    delete target.target;
                }
                console.log(targetRowArray);
                app_utilities_1.APP_UTILITIES.generateCSV({ filename: filename, data: targetRowArray, headers: this.targetRowColumns });
                break;
            default:
                this.replicateCategoryString = 'Replicates';
        }
    };
    ResultsComponent.prototype.resetFlags = function () {
        this.sampleQuerySizeErrorFlag = false;
        this.sampleQueryComplete = false;
        this.errorMessage = '';
    };
    ResultsComponent.prototype.resizeTable = function () {
        this.sampleRowDataGrid.resize();
        this.targetRowDataGrid.resize();
    };
    ResultsComponent.prototype.openReplicateDetails = function (category, fsmc) {
        var _this = this;
        switch (category) {
            case 'positive_concentrations':
                this.replicateCategoryString = 'Replicates with Positive Concentrations';
                break;
            case 'negative_concentrations':
                this.replicateCategoryString = 'Replicates with Negative Concentrations';
                break;
            case 'qpcr_results_missing':
                this.replicateCategoryString = 'Missing qPCR Values';
                break;
            case 'concentration_calc_values_missing':
                this.replicateCategoryString = 'Concentration Calculation Values Missing';
                break;
            case 'controls_invalids':
                this.replicateCategoryString = 'Made invalid by non-compliant controls';
                break;
            case 'invalid_override_invalids':
                this.replicateCategoryString = 'Made invalid by manual override';
                break;
            default:
                this.replicateCategoryString = 'Replicates';
        }
        this.replicateDetailArray = [];
        var replicateIDArray = [];
        for (var _i = 0, _a = fsmc.sample_target_replicates[category]; _i < _a.length; _i++) {
            var rep = _a[_i];
            replicateIDArray.push(rep.id);
        }
        this._pcrReplicateService.getPCRReplicates(replicateIDArray)
            .subscribe(function (replicates) {
            _this.replicateDetailArray = replicates;
            // attach the AB and Extraction info to the complete PCR replicate record for display purposes
            for (var _i = 0, _a = _this.replicateDetailArray; _i < _a.length; _i++) {
                var replicate = _a[_i];
                for (var _b = 0, _c = fsmc.sample_target_replicates[category]; _b < _c.length; _b++) {
                    var rep = _c[_b];
                    if (rep.id === replicate.id) {
                        replicate.analysis_batch = rep.analysis_batch;
                        replicate.extraction_number = rep.extraction_number;
                        replicate.replicate_number = rep.replicate_number;
                    }
                }
            }
            _this.showReplicateDetailsModal = true;
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
        });
    };
    ResultsComponent.prototype.doCustomClick = function (buttonType) {
        var _this = this;
        this.sampleSelectErrorFlag = false;
        this.targetSelectErrorFlag = false;
        if ("custom-next-sampleSelect" === buttonType) {
            if (this.selected.length < 1) {
                this.sampleSelectErrorFlag = true;
            }
            else {
                this.sampleSelectErrorFlag = false;
                for (var _i = 0, _a = this.selected; _i < _a.length; _i++) {
                    var sample = _a[_i];
                    this.resultsQuery.samples.push(sample.id);
                }
                this.selected = [];
                this.resultsQueryWizard.next();
            }
        }
        if ("custom-next-targetSelect" === buttonType) {
            if (this.selected.length < 1) {
                this.targetSelectErrorFlag = true;
            }
            else {
                this.targetSelectErrorFlag = false;
                for (var _b = 0, _c = this.selected; _b < _c.length; _b++) {
                    var target = _c[_b];
                    this.resultsQuery.targets.push(target.id);
                }
                this.resultsQueryWizard.next();
            }
        }
        if ("custom-previous" === buttonType) {
            this.selected = [];
            this.resultsQueryWizard.previous();
        }
        if ("custom-cancel" === buttonType) {
            this.resultsQueryWizard.cancel();
            this.selected = [];
            this.resultsQuery.samples = [];
            this.resultsQuery.targets = [];
            this.resultsQueryWizard.reset();
        }
        if ("custom-finish" === buttonType) {
            this.fsmcResultsLoaded = false;
            this.fsmcResultsLoading = true;
            this.sampleResultsLoaded = false;
            this.sampleResultsLoading = true;
            this.resultsQueryWizard.cancel();
            this._finalSampleMeanConcentrationService.queryFinalSampleMeanConcentrations(this.resultsQuery)
                .subscribe(function (fsmcResults) {
                _this.fsmcResults = fsmcResults;
                _this.fsmcResultsLoaded = true;
                _this.fsmcResultsLoading = false;
                // sample-based FSMC query
                _this._sampleService.queryFinalSampleMeanConcentrations(_this.resultsQuery)
                    .subscribe(function (sampleResults) {
                    _this.sampleResults = sampleResults;
                    for (var _i = 0, _a = _this.sampleResults; _i < _a.length; _i++) {
                        var samp = _a[_i];
                        samp.final_sample_mean_concentrations.sort(function (a, b) {
                            if (a.target_string < b.target_string) {
                                return -1;
                            }
                            if (a.target_string > b.target_string) {
                                return 1;
                            }
                            return 0;
                        });
                    }
                    _this.sampleResultsLoaded = true;
                    _this.sampleResultsLoading = false;
                }, function (error) {
                    _this.errorMessage = error;
                    _this.sampleResultsLoading = false;
                });
                _this.selected = [];
                _this.resultsQuery.samples = [];
                _this.resultsQuery.targets = [];
                _this.resultsQueryWizard.reset();
            }, function (error) {
                _this.errorMessage = error;
                _this.fsmcResultsLoading = false;
            });
        }
    };
    ResultsComponent.prototype.onSubmitSampleQuery = function (formValue) {
        var _this = this;
        this.resetFlags();
        this.submitLoading = true;
        // set functional limit for amount of samples to display in the table at once
        var countLimit = 2000;
        this._sampleService.querySamplesCount(formValue)
            .subscribe(function (count) {
            // if count exceeds limit, show error message
            if (count.count >= countLimit) {
                _this.sampleQuerySizeErrorFlag = true;
            }
            else if (count.count < countLimit) {
                _this.samplesLoading = true;
                formValue.slim = null;
                // if sample query count does not exceed functional limit, query for actual results, and set results to the allSamples var
                _this._sampleService.querySamples(formValue)
                    .subscribe(function (samples) {
                    _this.samplesCount = count.count;
                    _this.sampleQueryComplete = true;
                    _this.allSamples = samples;
                    _this.samplesLoading = false;
                    _this.submitLoading = false;
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.samplesLoading = false;
                });
            }
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
        });
    };
    return ResultsComponent;
}());
__decorate([
    core_1.ViewChild("resultsQueryWizard"),
    __metadata("design:type", typeof (_a = typeof clarity_angular_1.Wizard !== "undefined" && clarity_angular_1.Wizard) === "function" && _a || Object)
], ResultsComponent.prototype, "resultsQueryWizard", void 0);
__decorate([
    core_1.ViewChild("sampleRowDataGrid"),
    __metadata("design:type", typeof (_b = typeof clarity_angular_1.Datagrid !== "undefined" && clarity_angular_1.Datagrid) === "function" && _b || Object)
], ResultsComponent.prototype, "sampleRowDataGrid", void 0);
__decorate([
    core_1.ViewChild("targetRowDataGrid"),
    __metadata("design:type", typeof (_c = typeof clarity_angular_1.Datagrid !== "undefined" && clarity_angular_1.Datagrid) === "function" && _c || Object)
], ResultsComponent.prototype, "targetRowDataGrid", void 0);
ResultsComponent = __decorate([
    core_1.Component({
        selector: 'app-results',
        template: __webpack_require__("./src/app/results/results.component.html"),
        styles: [__webpack_require__("./src/app/results/results.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_d = typeof sample_service_1.SampleService !== "undefined" && sample_service_1.SampleService) === "function" && _d || Object, typeof (_e = typeof target_service_1.TargetService !== "undefined" && target_service_1.TargetService) === "function" && _e || Object, typeof (_f = typeof final_sample_mean_concentration_service_1.FinalSampleMeanConcentrationService !== "undefined" && final_sample_mean_concentration_service_1.FinalSampleMeanConcentrationService) === "function" && _f || Object, typeof (_g = typeof study_service_1.StudyService !== "undefined" && study_service_1.StudyService) === "function" && _g || Object, typeof (_h = typeof sample_type_service_1.SampleTypeService !== "undefined" && sample_type_service_1.SampleTypeService) === "function" && _h || Object, typeof (_j = typeof matrix_service_1.MatrixService !== "undefined" && matrix_service_1.MatrixService) === "function" && _j || Object, typeof (_k = typeof pcr_replicate_service_1.PcrReplicateService !== "undefined" && pcr_replicate_service_1.PcrReplicateService) === "function" && _k || Object, typeof (_l = typeof _1.FormBuilder !== "undefined" && _1.FormBuilder) === "function" && _l || Object])
], ResultsComponent);
exports.ResultsComponent = ResultsComponent;
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/results/results.component.js.map

/***/ }),

/***/ "./src/app/samples/sample-label/sample-label.component.html":
/***/ (function(module, exports) {

module.exports = "<button class=\"btn btn-primary\" (click)=\"printLabelPDF()\"><clr-icon shape=\"printer\"></clr-icon> Download Labels PDF</button>\r\n<div #sampleLabel id=\"sampleLabel\">\r\n\r\n  <div>\r\n    <table #labelTable1 class=\"table\" *ngIf=\"labelAliquots.length > 0\">      \r\n      <!-- R 1.1  -->  <!-- 1   18  35  52  69 -->\r\n      <tr> \r\n        <td>{{labelAliquots[0]?.aliquot_string || \" \"}}<br/>{{labelAliquots[0]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[17]?.aliquot_string || \" \"}}<br/>{{labelAliquots[17]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[34]?.aliquot_string || \" \"}}<br/>{{labelAliquots[34]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[51]?.aliquot_string || \" \"}}<br/>{{labelAliquots[51]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[68]?.aliquot_string|| \"\"}}<br/>{{labelAliquots[68]?.collaborator_sample_id || \" \"}}</td>\r\n      </tr>\r\n      <!-- R 2.1  -->  <!-- 2   19  36  53  70 -->\r\n      <tr> \r\n        <td>{{labelAliquots[1]?.aliquot_string || \" \"}}<br/>{{labelAliquots[1]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[18]?.aliquot_string || \" \"}}<br/>{{labelAliquots[18]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[35]?.aliquot_string || \" \"}}<br/>{{labelAliquots[35]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[52]?.aliquot_string || \" \"}}<br/>{{labelAliquots[52]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[69]?.aliquot_string || \" \"}}<br/>{{labelAliquots[69]?.collaborator_sample_id || \" \"}}</td>\r\n      </tr>\r\n      <!-- R 3.1  -->  <!-- 3   20  37  54  71 -->\r\n      <tr> \r\n        <td>{{labelAliquots[2]?.aliquot_string || \" \"}}<br/>{{labelAliquots[2]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[19]?.aliquot_string || \" \"}}<br/>{{labelAliquots[19]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[36]?.aliquot_string || \" \"}}<br/>{{labelAliquots[36]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[53]?.aliquot_string || \" \"}}<br/>{{labelAliquots[53]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[70]?.aliquot_string || \" \"}}<br/>{{labelAliquots[70]?.collaborator_sample_id || \" \"}}</td>\r\n      </tr>\r\n      <!-- R 4.1  -->  <!-- 4   21  38  55  72 -->\r\n      <tr> \r\n        <td>{{labelAliquots[3]?.aliquot_string || \" \"}}<br/>{{labelAliquots[3]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[20]?.aliquot_string || \" \"}}<br/>{{labelAliquots[20]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[37]?.aliquot_string || \" \"}}<br/>{{labelAliquots[37]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[54]?.aliquot_string || \" \"}}<br/>{{labelAliquots[54]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[71]?.aliquot_string || \" \"}}<br/>{{labelAliquots[71]?.collaborator_sample_id || \" \"}}</td>\r\n      </tr>\r\n      <!-- R 5.1  -->  <!-- 5   22  39  56  73 -->\r\n      <tr> \r\n        <td>{{labelAliquots[4]?.aliquot_string || \" \"}}<br/>{{labelAliquots[4]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[21]?.aliquot_string || \" \"}}<br/>{{labelAliquots[21]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[38]?.aliquot_string || \" \"}}<br/>{{labelAliquots[38]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[55]?.aliquot_string || \" \"}}<br/>{{labelAliquots[55]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[72]?.aliquot_string || \" \"}}<br/>{{labelAliquots[72]?.collaborator_sample_id || \" \"}}</td>\r\n      </tr>\r\n      <!-- R 6.1  -->  <!-- 6   23  40  57  74 -->\r\n      <tr> \r\n        <td>{{labelAliquots[5]?.aliquot_string || \" \"}}<br/>{{labelAliquots[5]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[22]?.aliquot_string || \" \"}}<br/>{{labelAliquots[22]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[39]?.aliquot_string || \" \"}}<br/>{{labelAliquots[39]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[56]?.aliquot_string || \" \"}}<br/>{{labelAliquots[56]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[73]?.aliquot_string || \" \"}}<br/>{{labelAliquots[73]?.collaborator_sample_id || \" \"}}</td>\r\n      </tr>\r\n      <!-- R 7.1  -->  <!-- 7   24  41  58  75 -->\r\n      <tr> \r\n        <td>{{labelAliquots[6]?.aliquot_string || \" \"}}<br/>{{labelAliquots[6]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[23]?.aliquot_string || \" \"}}<br/>{{labelAliquots[23]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[40]?.aliquot_string || \" \"}}<br/>{{labelAliquots[40]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[57]?.aliquot_string || \" \"}}<br/>{{labelAliquots[57]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[74]?.aliquot_string || \" \"}}<br/>{{labelAliquots[74]?.collaborator_sample_id || \" \"}}</td>\r\n      </tr>\r\n      <!-- R 8.1  -->  <!-- 8   25  42  59  76 -->\r\n      <tr> \r\n        <td>{{labelAliquots[7]?.aliquot_string || \" \"}}<br/>{{labelAliquots[7]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[24]?.aliquot_string || \" \"}}<br/>{{labelAliquots[24]?.collaborator_sample_id|| \"\"}}</td>\r\n        <td>{{labelAliquots[41]?.aliquot_string || \" \"}}<br/>{{labelAliquots[41]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[58]?.aliquot_string || \" \"}}<br/>{{labelAliquots[58]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[75]?.aliquot_string || \" \"}}<br/>{{labelAliquots[75]?.collaborator_sample_id || \" \"}}</td>\r\n      </tr>\r\n      <!-- R 9.1  -->  <!-- 9   26  43  60  77 -->\r\n      <tr> \r\n        <td>{{labelAliquots[8]?.aliquot_string || \" \"}}<br/>{{labelAliquots[8]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[25]?.aliquot_string || \" \"}}<br/>{{labelAliquots[25]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[42]?.aliquot_string || \" \"}}<br/>{{labelAliquots[42]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[59]?.aliquot_string || \" \"}}<br/>{{labelAliquots[59]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[76]?.aliquot_string || \" \"}}<br/>{{labelAliquots[76]?.collaborator_sample_id || \" \"}}</td>\r\n      </tr>\r\n      <!-- R 10.1 -->  <!-- 10  27  44  61  78 -->\r\n      <tr> \r\n        <td>{{labelAliquots[9]?.aliquot_string || \" \"}}<br/>{{labelAliquots[9]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[26]?.aliquot_string || \" \"}}<br/>{{labelAliquots[26]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[43]?.aliquot_string || \" \"}}<br/>{{labelAliquots[43]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[60]?.aliquot_string || \" \"}}<br/>{{labelAliquots[60]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[77]?.aliquot_string || \" \"}}<br/>{{labelAliquots[77]?.collaborator_sample_id || \" \"}}</td>\r\n      </tr>\r\n      <!-- R 11.1 -->  <!-- 11  28  45  62  79 -->\r\n      <tr> \r\n        <td>{{labelAliquots[10]?.aliquot_string || \" \"}}<br/>{{labelAliquots[10]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[27]?.aliquot_string || \" \"}}<br/>{{labelAliquots[27]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[44]?.aliquot_string || \" \"}}<br/>{{labelAliquots[44]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[61]?.aliquot_string || \" \"}}<br/>{{labelAliquots[61]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[78]?.aliquot_string || \" \"}}<br/>{{labelAliquots[78]?.collaborator_sample_id || \" \"}}</td>\r\n      </tr>\r\n      <!-- R 12.1 -->  <!-- 12  29  46  63  80 -->\r\n      <tr> \r\n        <td>{{labelAliquots[11]?.aliquot_string || \" \"}}<br/>{{labelAliquots[11]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[28]?.aliquot_string || \" \"}}<br/>{{labelAliquots[28]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[45]?.aliquot_string || \" \"}}<br/>{{labelAliquots[45]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[62]?.aliquot_string || \" \"}}<br/>{{labelAliquots[62]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[79]?.aliquot_string || \" \"}}<br/>{{labelAliquots[79]?.collaborator_sample_id || \" \"}}</td>\r\n      </tr>\r\n      <!-- R 13.1 -->  <!-- 13  30  47  64  81 -->\r\n      <tr> \r\n        <td>{{labelAliquots[12]?.aliquot_string || \" \"}}<br/>{{labelAliquots[12]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[29]?.aliquot_string || \" \"}}<br/>{{labelAliquots[29]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[46]?.aliquot_string || \" \"}}<br/>{{labelAliquots[46]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[63]?.aliquot_string || \" \"}}<br/>{{labelAliquots[63]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[80]?.aliquot_string || \" \"}}<br/>{{labelAliquots[80]?.collaborator_sample_id || \" \"}}</td>\r\n      </tr>\r\n      <!-- R 14.1 -->  <!-- 14  31  48  65  82 -->\r\n      <tr> \r\n        <td>{{labelAliquots[13]?.aliquot_string || \" \"}}<br/>{{labelAliquots[13]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[30]?.aliquot_string || \" \"}}<br/>{{labelAliquots[30]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[47]?.aliquot_string || \" \"}}<br/>{{labelAliquots[47]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[64]?.aliquot_string || \" \"}}<br/>{{labelAliquots[64]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[81]?.aliquot_string || \" \"}}<br/>{{labelAliquots[81]?.collaborator_sample_id || \" \"}}</td>\r\n      </tr>\r\n      <!-- R 15.1 -->  <!-- 15  32  49  66  83 -->\r\n      <tr> \r\n        <td>{{labelAliquots[14]?.aliquot_string || \" \"}}<br/>{{labelAliquots[14]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[31]?.aliquot_string || \" \"}}<br/>{{labelAliquots[31]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[48]?.aliquot_string || \" \"}}<br/>{{labelAliquots[48]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[65]?.aliquot_string || \" \"}}<br/>{{labelAliquots[65]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[82]?.aliquot_string || \" \"}}<br/>{{labelAliquots[82]?.collaborator_sample_id || \" \"}}</td>\r\n      </tr>\r\n      <!-- R 16.1 -->  <!-- 16  33  50  67  84 -->\r\n      <tr> \r\n        <td>{{labelAliquots[15]?.aliquot_string || \" \"}}<br/>{{labelAliquots[15]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[32]?.aliquot_string || \" \"}}<br/>{{labelAliquots[32]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[49]?.aliquot_string || \" \"}}<br/>{{labelAliquots[49]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[66]?.aliquot_string || \" \"}}<br/>{{labelAliquots[66]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[83]?.aliquot_string || \" \"}}<br/>{{labelAliquots[83]?.collaborator_sample_id || \" \"}}</td>\r\n      </tr>\r\n      <!-- R 17.1 -->  <!-- 17  34  51  68  85 -->\r\n      <tr> \r\n        <td>{{labelAliquots[16]?.aliquot_string || \" \"}}<br/>{{labelAliquots[16]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[33]?.aliquot_string || \" \"}}<br/>{{labelAliquots[33]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[50]?.aliquot_string || \" \"}}<br/>{{labelAliquots[50]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[67]?.aliquot_string || \" \"}}<br/>{{labelAliquots[67]?.collaborator_sample_id || \" \"}}</td>\r\n        <td>{{labelAliquots[84]?.aliquot_string || \" \"}}<br/>{{labelAliquots[84]?.collaborator_sample_id || \" \"}}</td>\r\n      </tr>\r\n    </table>\r\n    <!-- end first page -->\r\n    <!-- start if second page -->\r\n    <div *ngIf=\"labelAliquots.length > 85\">\r\n      <br/>\r\n      <div style=\"text-align:center;\"> ------------------ Next Page ------------------ </div>\r\n      <table #labelTable2 class=\"table\">\r\n        <!-- would stop here , unless they are skipping. then length would be more than 85. -->\r\n        <!-- R 1.2 -->  <!-- 86\t103\t120\t137\t154 -->\r\n        <tr> \r\n          <td>{{labelAliquots[85]?.aliquot_string || \" \"}}<br/>{{labelAliquots[85]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[102]?.aliquot_string || \" \"}}<br/>{{labelAliquots[102]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[119]?.aliquot_string || \" \"}}<br/>{{labelAliquots[119]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[136]?.aliquot_string || \" \"}}<br/>{{labelAliquots[136]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[153]?.aliquot_string || \" \"}}<br/>{{labelAliquots[153]?.collaborator_sample_id || \" \"}}</td>\r\n        </tr>\r\n        <!-- R 2.2 --> <!-- 87\t104\t121\t138\t155 -->\r\n        <tr> \r\n          <td>{{labelAliquots[86]?.aliquot_string || \" \"}}<br/>{{labelAliquots[86]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[103]?.aliquot_string || \" \"}}<br/>{{labelAliquots[103]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[120]?.aliquot_string || \" \"}}<br/>{{labelAliquots[120]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[137]?.aliquot_string || \" \"}}<br/>{{labelAliquots[137]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[154]?.aliquot_string || \" \"}}<br/>{{labelAliquots[154]?.collaborator_sample_id || \" \"}}</td>\r\n        </tr>\r\n        <!-- R 3.2 -->  <!-- 88\t105\t122\t139\t156 -->\r\n        <tr> \r\n          <td>{{labelAliquots[87]?.aliquot_string || \" \"}}<br/>{{labelAliquots[87]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[104]?.aliquot_string || \" \"}}<br/>{{labelAliquots[104]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[121]?.aliquot_string || \" \"}}<br/>{{labelAliquots[121]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[138]?.aliquot_string || \" \"}}<br/>{{labelAliquots[138]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[155]?.aliquot_string || \" \"}}<br/>{{labelAliquots[155]?.collaborator_sample_id || \" \"}}</td>\r\n        </tr>\r\n        <!-- R 4.2 -->  <!-- 89\t106\t123\t140\t157 -->\r\n        <tr> \r\n          <td>{{labelAliquots[88]?.aliquot_string || \" \"}}<br/>{{labelAliquots[88]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[105]?.aliquot_string || \" \"}}<br/>{{labelAliquots[105]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[122]?.aliquot_string || \" \"}}<br/>{{labelAliquots[122]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[139]?.aliquot_string || \" \"}}<br/>{{labelAliquots[139]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[156]?.aliquot_string || \" \"}}<br/>{{labelAliquots[156]?.collaborator_sample_id || \" \"}}</td>\r\n        </tr>\r\n        <!-- R 5.2 -->  <!-- 90\t107\t124\t141\t158 -->\r\n        <tr> \r\n          <td>{{labelAliquots[89]?.aliquot_string || \" \"}}<br/>{{labelAliquots[89]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[106]?.aliquot_string || \" \"}}<br/>{{labelAliquots[106]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[123]?.aliquot_string || \" \"}}<br/>{{labelAliquots[123]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[140]?.aliquot_string || \" \"}}<br/>{{labelAliquots[140]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[157]?.aliquot_string || \" \"}}<br/>{{labelAliquots[157]?.collaborator_sample_id || \" \"}}</td>\r\n        </tr>\r\n        <!-- R 6.2 -->  <!-- 91\t108\t125\t142\t159 -->\r\n        <tr> \r\n          <td>{{labelAliquots[90]?.aliquot_string || \" \"}}<br/>{{labelAliquots[90]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[107]?.aliquot_string || \" \"}}<br/>{{labelAliquots[107]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[124]?.aliquot_string || \" \"}}<br/>{{labelAliquots[124]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[141]?.aliquot_string || \" \"}}<br/>{{labelAliquots[141]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[158]?.aliquot_string || \" \"}}<br/>{{labelAliquots[158]?.collaborator_sample_id || \" \"}}</td>\r\n        </tr>\r\n        <!-- R 7.2 -->  <!-- 92\t109\t126\t143\t160 -->\r\n        <tr> \r\n          <td>{{labelAliquots[91]?.aliquot_string || \" \"}}<br/>{{labelAliquots[91]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[108]?.aliquot_string || \" \"}}<br/>{{labelAliquots[108]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[125]?.aliquot_string || \" \"}}<br/>{{labelAliquots[125]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[142]?.aliquot_string || \" \"}}<br/>{{labelAliquots[142]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[159]?.aliquot_string || \" \"}}<br/>{{labelAliquots[159]?.collaborator_sample_id || \" \"}}</td>\r\n        </tr>\r\n        <!-- R 8.2 -->  <!-- 93\t110\t127\t144\t161 -->\r\n        <tr> \r\n          <td>{{labelAliquots[92]?.aliquot_string || \" \"}}<br/>{{labelAliquots[92]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[109]?.aliquot_string || \" \"}}<br/>{{labelAliquots[109]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[126]?.aliquot_string || \" \"}}<br/>{{labelAliquots[126]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[143]?.aliquot_string || \" \"}}<br/>{{labelAliquots[143]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[160]?.aliquot_string || \" \"}}<br/>{{labelAliquots[160]?.collaborator_sample_id || \" \"}}</td>\r\n        </tr>\r\n        <!-- R 9.2 -->  <!-- 94\t111\t128\t145\t162 -->\r\n        <tr> \r\n          <td>{{labelAliquots[93]?.aliquot_string || \" \"}}<br/>{{labelAliquots[93]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[110]?.aliquot_string || \" \"}}<br/>{{labelAliquots[110]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[127]?.aliquot_string || \" \"}}<br/>{{labelAliquots[127]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[144]?.aliquot_string || \" \"}}<br/>{{labelAliquots[144]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[161]?.aliquot_string || \" \"}}<br/>{{labelAliquots[161]?.collaborator_sample_id || \" \"}}</td>\r\n        </tr>\r\n        <!-- R 10.2 -->  <!-- 95\t112\t129\t146\t163 -->\r\n        <tr> \r\n          <td>{{labelAliquots[94]?.aliquot_string || \" \"}}<br/>{{labelAliquots[94]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[111]?.aliquot_string || \" \"}}<br/>{{labelAliquots[111]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[128]?.aliquot_string || \" \"}}<br/>{{labelAliquots[128]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[145]?.aliquot_string || \" \"}}<br/>{{labelAliquots[145]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[162]?.aliquot_string || \" \"}}<br/>{{labelAliquots[162]?.collaborator_sample_id || \" \"}}</td>\r\n        </tr>\r\n        <!-- R 11.2 -->  <!-- 96\t113\t130\t147\t164 -->\r\n        <tr> \r\n          <td>{{labelAliquots[95]?.aliquot_string || \" \"}}<br/>{{labelAliquots[95]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[112]?.aliquot_string || \" \"}}<br/>{{labelAliquots[112]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[129]?.aliquot_string || \" \"}}<br/>{{labelAliquots[129]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[146]?.aliquot_string || \" \"}}<br/>{{labelAliquots[146]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[163]?.aliquot_string || \" \"}}<br/>{{labelAliquots[163]?.collaborator_sample_id || \" \"}}</td>\r\n        </tr>\r\n        <!-- R 12.2 -->  <!-- 97\t114\t131\t148\t165 -->\r\n        <tr> \r\n          <td>{{labelAliquots[96]?.aliquot_string || \" \"}}<br/>{{labelAliquots[96]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[113]?.aliquot_string || \" \"}}<br/>{{labelAliquots[113]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[130]?.aliquot_string || \" \"}}<br/>{{labelAliquots[130]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[147]?.aliquot_string || \" \"}}<br/>{{labelAliquots[147]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[164]?.aliquot_string || \" \"}}<br/>{{labelAliquots[164]?.collaborator_sample_id || \" \"}}</td>\r\n        </tr>\r\n        <!-- R 13.2 -->  <!-- 98\t115\t132\t149\t166 -->\r\n        <tr> \r\n          <td>{{labelAliquots[97]?.aliquot_string || \" \"}}<br/>{{labelAliquots[97]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[114]?.aliquot_string || \" \"}}<br/>{{labelAliquots[114]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[131]?.aliquot_string || \" \"}}<br/>{{labelAliquots[131]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[148]?.aliquot_string || \" \"}}<br/>{{labelAliquots[148]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[165]?.aliquot_string || \" \"}}<br/>{{labelAliquots[165]?.collaborator_sample_id || \" \"}}</td>\r\n        </tr>\r\n        <!-- R 14.2 -->  <!-- 99\t116\t133\t150\t167 -->\r\n        <tr> \r\n          <td>{{labelAliquots[98]?.aliquot_string || \" \"}}<br/>{{labelAliquots[98]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[115]?.aliquot_string || \" \"}}<br/>{{labelAliquots[115]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[132]?.aliquot_string || \" \"}}<br/>{{labelAliquots[132]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[149]?.aliquot_string || \" \"}}<br/>{{labelAliquots[149]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[166]?.aliquot_string || \" \"}}<br/>{{labelAliquots[166]?.collaborator_sample_id || \" \"}}</td>\r\n        </tr>\r\n        <!-- R 15.2 -->  <!-- 100\t117\t134\t151\t168 -->\r\n        <tr> \r\n          <td>{{labelAliquots[99]?.aliquot_string || \" \"}}<br/>{{labelAliquots[99]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[116]?.aliquot_string || \" \"}}<br/>{{labelAliquots[116]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[133]?.aliquot_string || \" \"}}<br/>{{labelAliquots[133]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[150]?.aliquot_string || \" \"}}<br/>{{labelAliquots[150]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[167]?.aliquot_string || \" \"}}<br/>{{labelAliquots[167]?.collaborator_sample_id || \" \"}}</td>\r\n        </tr>\r\n        <!-- R 16.2 -->  <!-- 101\t118\t135\t152\t169 -->\r\n        <tr> \r\n          <td>{{labelAliquots[100]?.aliquot_string || \" \"}}<br/>{{labelAliquots[100]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[117]?.aliquot_string || \" \"}}<br/>{{labelAliquots[117]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[134]?.aliquot_string || \" \"}}<br/>{{labelAliquots[134]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[151]?.aliquot_string || \" \"}}<br/>{{labelAliquots[151]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[168]?.aliquot_string || \" \"}}<br/>{{labelAliquots[168]?.collaborator_sample_id || \" \"}}</td>\r\n        </tr>\r\n        <!-- R 17.2 -->  <!-- 102\t119\t136\t153\t170 -->\r\n        <tr> \r\n          <td>{{labelAliquots[101]?.aliquot_string || \" \"}}<br/>{{labelAliquots[101]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[118]?.aliquot_string || \" \"}}<br/>{{labelAliquots[118]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[135]?.aliquot_string || \" \"}}<br/>{{labelAliquots[135]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[152]?.aliquot_string || \" \"}}<br/>{{labelAliquots[152]?.collaborator_sample_id || \" \"}}</td>\r\n          <td>{{labelAliquots[169]?.aliquot_string || \" \"}}<br/>{{labelAliquots[169]?.collaborator_sample_id || \" \"}}</td>\r\n        </tr>          \r\n      </table>\r\n    </div> \r\n    <!-- end if second page -->\r\n    <!-- start if third page -->\r\n    <div *ngIf=\"labelAliquots.length > 170\">\r\n        <br/>\r\n        <div style=\"text-align:center;\"> ------------------ Next Page ------------------ </div>\r\n        <table #labelTable3 class=\"table\">          \r\n          <!-- R 1.3 -->  <!-- 171\t188\t205\t222\t239 -->\r\n          <tr> \r\n            <td>{{labelAliquots[170]?.aliquot_string || \" \"}}<br/>{{labelAliquots[170]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[187]?.aliquot_string || \" \"}}<br/>{{labelAliquots[187]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[204]?.aliquot_string || \" \"}}<br/>{{labelAliquots[204]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[221]?.aliquot_string || \" \"}}<br/>{{labelAliquots[221]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[238]?.aliquot_string || \" \"}}<br/>{{labelAliquots[238]?.collaborator_sample_id || \" \"}}</td>\r\n          </tr>\r\n          <!-- R 2.3 --> <!-- 172\t189\t206\t223\t240 -->\r\n          <tr> \r\n            <td>{{labelAliquots[171]?.aliquot_string || \" \"}}<br/>{{labelAliquots[171]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[188]?.aliquot_string || \" \"}}<br/>{{labelAliquots[188]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[205]?.aliquot_string || \" \"}}<br/>{{labelAliquots[205]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[222]?.aliquot_string || \" \"}}<br/>{{labelAliquots[222]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[239]?.aliquot_string || \" \"}}<br/>{{labelAliquots[239]?.collaborator_sample_id || \" \"}}</td>\r\n          </tr>\r\n          <!-- R 3.3 -->  <!-- 173\t190\t207\t224\t241 -->\r\n          <tr> \r\n            <td>{{labelAliquots[172]?.aliquot_string || \" \"}}<br/>{{labelAliquots[172]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[189]?.aliquot_string || \" \"}}<br/>{{labelAliquots[189]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[206]?.aliquot_string || \" \"}}<br/>{{labelAliquots[206]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[223]?.aliquot_string || \" \"}}<br/>{{labelAliquots[223]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[240]?.aliquot_string || \" \"}}<br/>{{labelAliquots[240]?.collaborator_sample_id || \" \"}}</td>\r\n          </tr> \r\n          <!-- R 4.3 -->  <!-- 174\t191\t208\t225\t242 -->\r\n          <tr> \r\n            <td>{{labelAliquots[173]?.aliquot_string || \" \"}}<br/>{{labelAliquots[173]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[190]?.aliquot_string || \" \"}}<br/>{{labelAliquots[190]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[207]?.aliquot_string || \" \"}}<br/>{{labelAliquots[207]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[224]?.aliquot_string || \" \"}}<br/>{{labelAliquots[224]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[241]?.aliquot_string || \" \"}}<br/>{{labelAliquots[241]?.collaborator_sample_id || \" \"}}</td>\r\n          </tr>\r\n          <!-- R 5.3 -->  <!-- 175\t192\t209\t226\t243 -->\r\n          <tr> \r\n            <td>{{labelAliquots[174]?.aliquot_string || \" \"}}<br/>{{labelAliquots[174]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[191]?.aliquot_string || \" \"}}<br/>{{labelAliquots[191]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[208]?.aliquot_string || \" \"}}<br/>{{labelAliquots[208]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[225]?.aliquot_string || \" \"}}<br/>{{labelAliquots[225]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[242]?.aliquot_string || \" \"}}<br/>{{labelAliquots[242]?.collaborator_sample_id || \" \"}}</td>\r\n          </tr>\r\n          <!-- R 6.3 -->  <!-- 176\t193\t210\t227\t244 -->\r\n          <tr> \r\n            <td>{{labelAliquots[175]?.aliquot_string || \" \"}}<br/>{{labelAliquots[175]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[192]?.aliquot_string || \" \"}}<br/>{{labelAliquots[192]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[209]?.aliquot_string || \" \"}}<br/>{{labelAliquots[209]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[226]?.aliquot_string || \" \"}}<br/>{{labelAliquots[226]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[243]?.aliquot_string || \" \"}}<br/>{{labelAliquots[243]?.collaborator_sample_id || \" \"}}</td>\r\n          </tr>\r\n          <!-- R 7.3 -->  <!-- 177\t194\t211\t228\t245 -->\r\n          <tr> \r\n            <td>{{labelAliquots[176]?.aliquot_string || \" \"}}<br/>{{labelAliquots[176]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[193]?.aliquot_string || \" \"}}<br/>{{labelAliquots[193]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[210]?.aliquot_string || \" \"}}<br/>{{labelAliquots[210]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[227]?.aliquot_string || \" \"}}<br/>{{labelAliquots[227]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[244]?.aliquot_string || \" \"}}<br/>{{labelAliquots[244]?.collaborator_sample_id || \" \"}}</td>\r\n          </tr>   \r\n          <!-- R 8.3 -->  <!-- 178\t195\t212\t229\t246 -->\r\n          <tr> \r\n            <td>{{labelAliquots[177]?.aliquot_string || \" \"}}<br/>{{labelAliquots[177]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[194]?.aliquot_string || \" \"}}<br/>{{labelAliquots[194]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[211]?.aliquot_string || \" \"}}<br/>{{labelAliquots[211]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[228]?.aliquot_string || \" \"}}<br/>{{labelAliquots[228]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[245]?.aliquot_string || \" \"}}<br/>{{labelAliquots[245]?.collaborator_sample_id || \" \"}}</td>\r\n          </tr>\r\n          <!-- R 9.3 -->  <!-- 179\t196\t213\t230\t247 -->\r\n          <tr> \r\n            <td>{{labelAliquots[178]?.aliquot_string || \" \"}}<br/>{{labelAliquots[178]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[195]?.aliquot_string || \" \"}}<br/>{{labelAliquots[195]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[212]?.aliquot_string || \" \"}}<br/>{{labelAliquots[212]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[229]?.aliquot_string || \" \"}}<br/>{{labelAliquots[229]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[246]?.aliquot_string || \" \"}}<br/>{{labelAliquots[246]?.collaborator_sample_id || \" \"}}</td>\r\n          </tr>\r\n          <!-- R 10.3 -->  <!-- 180\t197\t214\t231\t248 -->\r\n          <tr> \r\n            <td>{{labelAliquots[179]?.aliquot_string || \" \"}}<br/>{{labelAliquots[179]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[196]?.aliquot_string || \" \"}}<br/>{{labelAliquots[196]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[213]?.aliquot_string || \" \"}}<br/>{{labelAliquots[213]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[230]?.aliquot_string || \" \"}}<br/>{{labelAliquots[230]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[247]?.aliquot_string || \" \"}}<br/>{{labelAliquots[247]?.collaborator_sample_id || \" \"}}</td>\r\n          </tr>\r\n          <!-- R 11.3 -->  <!-- 181\t198\t215\t232\t249 -->\r\n          <tr> \r\n            <td>{{labelAliquots[180]?.aliquot_string || \" \"}}<br/>{{labelAliquots[180]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[197]?.aliquot_string || \" \"}}<br/>{{labelAliquots[197]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[214]?.aliquot_string || \" \"}}<br/>{{labelAliquots[214]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[231]?.aliquot_string || \" \"}}<br/>{{labelAliquots[231]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[248]?.aliquot_string || \" \"}}<br/>{{labelAliquots[248]?.collaborator_sample_id || \" \"}}</td>\r\n          </tr> \r\n          <!-- R 12.3 -->  <!-- 182\t199\t216\t233\t250 -->\r\n          <tr> \r\n            <td>{{labelAliquots[181]?.aliquot_string || \" \"}}<br/>{{labelAliquots[181]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[198]?.aliquot_string || \" \"}}<br/>{{labelAliquots[198]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[215]?.aliquot_string || \" \"}}<br/>{{labelAliquots[215]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[232]?.aliquot_string || \" \"}}<br/>{{labelAliquots[232]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[249]?.aliquot_string || \" \"}}<br/>{{labelAliquots[249]?.collaborator_sample_id || \" \"}}</td>\r\n          </tr>\r\n          <!-- R 13.3 -->  <!-- 183\t200\t217\t234\t251 -->\r\n          <tr> \r\n            <td>{{labelAliquots[182]?.aliquot_string || \" \"}}<br/>{{labelAliquots[182]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[199]?.aliquot_string || \" \"}}<br/>{{labelAliquots[199]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[216]?.aliquot_string || \" \"}}<br/>{{labelAliquots[216]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[233]?.aliquot_string || \" \"}}<br/>{{labelAliquots[233]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[250]?.aliquot_string || \" \"}}<br/>{{labelAliquots[250]?.collaborator_sample_id || \" \"}}</td>\r\n          </tr>\r\n          <!-- R 14.3 -->  <!-- 184\t201\t218\t235\t252 -->\r\n          <tr> \r\n            <td>{{labelAliquots[183]?.aliquot_string || \" \"}}<br/>{{labelAliquots[183]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[200]?.aliquot_string || \" \"}}<br/>{{labelAliquots[200]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[217]?.aliquot_string || \" \"}}<br/>{{labelAliquots[217]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[234]?.aliquot_string || \" \"}}<br/>{{labelAliquots[234]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[251]?.aliquot_string || \" \"}}<br/>{{labelAliquots[251]?.collaborator_sample_id || \" \"}}</td>\r\n          </tr>\r\n          <!-- R 15.3 -->  <!-- 185\t202\t219\t236\t253 -->\r\n          <tr> \r\n            <td>{{labelAliquots[184]?.aliquot_string || \" \"}}<br/>{{labelAliquots[184]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[201]?.aliquot_string || \" \"}}<br/>{{labelAliquots[201]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[218]?.aliquot_string || \" \"}}<br/>{{labelAliquots[218]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[235]?.aliquot_string || \" \"}}<br/>{{labelAliquots[235]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[252]?.aliquot_string || \" \"}}<br/>{{labelAliquots[252]?.collaborator_sample_id || \" \"}}</td>\r\n          </tr>\r\n          <!-- R 16.3 -->  <!-- 186\t203\t220\t237\t254 -->\r\n          <tr> \r\n            <td>{{labelAliquots[185]?.aliquot_string || \" \"}}<br/>{{labelAliquots[185]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[202]?.aliquot_string || \" \"}}<br/>{{labelAliquots[202]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[219]?.aliquot_string || \" \"}}<br/>{{labelAliquots[219]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[236]?.aliquot_string || \" \"}}<br/>{{labelAliquots[236]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[253]?.aliquot_string || \" \"}}<br/>{{labelAliquots[253]?.collaborator_sample_id || \" \"}}</td>\r\n          </tr>\r\n          <!-- R 17.3 -->  <!-- 187\t204\t221\t238\t255 -->\r\n          <tr> \r\n            <td>{{labelAliquots[186]?.aliquot_string || \" \"}}<br/>{{labelAliquots[186]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[203]?.aliquot_string || \" \"}}<br/>{{labelAliquots[203]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[220]?.aliquot_string || \" \"}}<br/>{{labelAliquots[220]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[237]?.aliquot_string || \" \"}}<br/>{{labelAliquots[237]?.collaborator_sample_id || \" \"}}</td>\r\n            <td>{{labelAliquots[254]?.aliquot_string || \" \"}}<br/>{{labelAliquots[254]?.collaborator_sample_id || \" \"}}</td>\r\n          </tr>          \r\n        </table>\r\n      </div> <!-- end if second page -->\r\n  </div>\r\n</div>"

/***/ }),

/***/ "./src/app/samples/sample-label/sample-label.component.scss":
/***/ (function(module, exports) {

module.exports = "table tr td {\n  border: 1px solid #ccc;\n  border-spacing: 0;\n  height: 48.6458px;\n  width: 20%; }\n"

/***/ }),

/***/ "./src/app/samples/sample-label/sample-label.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var sample_service_1 = __webpack_require__("./src/app/samples/sample.service.ts");
// function for aligning the text in each pdf.textEx( add text with placement settings )
var splitRegex = /\r\n|\r|\n/g;
jsPDF.API.textEx = function (text, x, y, hAlign, vAlign) {
    var fontSize = this.internal.getFontSize()
        / this.internal.scaleFactor;
    // As defined in jsPDF source code
    var lineHeightProportion = 1.15;
    var splittedText;
    var lineCount = 1;
    if (vAlign === 'middle' || vAlign === 'bottom'
        || hAlign === 'center' || hAlign === 'right') {
        splittedText = typeof text === 'string'
            ? text.split(splitRegex)
            : text;
        lineCount = splittedText.length || 1;
    }
    // Align the top
    y += fontSize * (2 - lineHeightProportion);
    if (vAlign === 'middle')
        y -= (lineCount / 2) * fontSize;
    else if (vAlign === 'bottom')
        y -= lineCount * fontSize;
    if (hAlign === 'center'
        || hAlign === 'right') {
        var alignSize = fontSize;
        if (hAlign === 'center')
            alignSize *= 0.5;
        if (lineCount > 1) {
            for (var iLine = 0; iLine < splittedText.length; iLine++) {
                this.text(splittedText[iLine], x - this.getStringUnitWidth(splittedText[iLine]) * alignSize, y);
                y += fontSize;
            }
            return this;
        }
        x -= this.getStringUnitWidth(text) * alignSize;
    }
    this.text(text, x, y);
    return this;
};
var SampleLabelComponent = (function () {
    function SampleLabelComponent(_sampleServices) {
        this._sampleServices = _sampleServices;
    }
    SampleLabelComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.labelAliquots = [];
        this.labelSkips = 0;
        this.xyArray_inches = this.loadArray();
        // when they click 'createLabelPDF' from Samples, the label parts ([0] is spacesToSkip, [1] is this.aliquotLabelTextArray)
        // are stored in the sample.service.ts and subscribed to from here 
        this._sampleServices.LabelParts.subscribe(function (lp) {
            _this.labelAliquots = [];
            _this.labelSkips = lp[0];
            // account for any skipped cells (push in empty objects into labelAliquots)
            var x = 0;
            while (x < _this.labelSkips) {
                _this.labelAliquots.push({ "aliquot_string": "", "collaborator_sample_id": "" });
                x++;
            }
            // if include is true, add it to the array for this preview table of labels
            lp[1].forEach(function (label) {
                if (label.include)
                    _this.labelAliquots.push(label);
            });
            // for testing purposes only
            //this.labelAliquots = this.fakeLabelArray();
        });
    }; // end ngOnInit()
    // print the labels
    SampleLabelComponent.prototype.printLabelPDF = function () {
        var _this = this;
        var pdf = new jsPDF('p', 'in', 'letter');
        pdf.setFontSize(8);
        pdf.setFontType("normal");
        //if there are more than 85, need to break it up into 2 pages. if more than 170, need 3 pages
        var page1 = [];
        var page2 = [];
        var page3 = [];
        //let clonedAliquots = this.labelAliquots.map(x => Object.assign({}, x));
        if (this.labelAliquots.length > 170) {
            // need to break this up into 85 each (3 separate arrays to build 3 separate pages)
            page1 = this.labelAliquots.slice(0, 85);
            page2 = this.labelAliquots.slice(85, 170);
            page3 = this.labelAliquots.slice(170);
        }
        else if (this.labelAliquots.length > 85) {
            // need to break this up into 85 each (2 separate arrays to build 2 separate pages)
            page1 = this.labelAliquots.slice(0, 85);
            page2 = this.labelAliquots.slice(85);
        }
        else {
            // only 1 page
            page1 = this.labelAliquots;
        }
        ;
        page1.forEach(function (aliquot, index) {
            var labelString = aliquot.aliquot_string + "\n" + aliquot.collaborator_sample_id;
            pdf.textEx(labelString, _this.xyArray_inches[index]["x"], _this.xyArray_inches[index]["y"], 'center', 'middle');
        });
        if (page2.length > 0) {
            pdf.addPage();
            page2.forEach(function (aliquot, index) {
                var labelString = aliquot.aliquot_string + "\n" + aliquot.collaborator_sample_id;
                pdf.textEx(labelString, _this.xyArray_inches[index]["x"], _this.xyArray_inches[index]["y"], 'center', 'middle');
            });
        }
        ;
        if (page3.length > 0) {
            pdf.addPage();
            page3.forEach(function (aliquot, index) {
                var labelString = aliquot.aliquot_string + "\n" + aliquot.collaborator_sample_id;
                pdf.textEx(labelString, _this.xyArray_inches[index]["x"], _this.xyArray_inches[index]["y"], 'center', 'middle');
            });
        }
        ;
        pdf.save("aliquot_labels.pdf");
    };
    // array containing the x,y locations of every label from 1 to 85 going down each column and then starting from top of next
    SampleLabelComponent.prototype.loadArray = function () {
        return [
            { x: 1.49, y: 0.50 },
            { x: 1.49, y: 1.125 },
            { x: 1.49, y: 1.75 },
            { x: 1.49, y: 2.375 },
            { x: 1.49, y: 3 },
            { x: 1.49, y: 3.625 },
            { x: 1.49, y: 4.25 },
            { x: 1.49, y: 4.875 },
            { x: 1.49, y: 5.5 },
            { x: 1.49, y: 6.125 },
            { x: 1.49, y: 6.75 },
            { x: 1.49, y: 7.375 },
            { x: 1.49, y: 8 },
            { x: 1.49, y: 8.625 },
            { x: 1.49, y: 9.25 },
            { x: 1.49, y: 9.875 },
            { x: 1.49, y: 10.5 },
            { x: 2.86, y: 0.5 },
            { x: 2.86, y: 1.125 },
            { x: 2.86, y: 1.75 },
            { x: 2.86, y: 2.375 },
            { x: 2.86, y: 3 },
            { x: 2.86, y: 3.625 },
            { x: 2.86, y: 4.25 },
            { x: 2.86, y: 4.875 },
            { x: 2.86, y: 5.5 },
            { x: 2.86, y: 6.125 },
            { x: 2.86, y: 6.75 },
            { x: 2.86, y: 7.375 },
            { x: 2.86, y: 8 },
            { x: 2.86, y: 8.625 },
            { x: 2.86, y: 9.25 },
            { x: 2.86, y: 9.875 },
            { x: 2.86, y: 10.5 },
            { x: 4.30, y: 0.5 },
            { x: 4.30, y: 1.125 },
            { x: 4.30, y: 1.75 },
            { x: 4.30, y: 2.375 },
            { x: 4.30, y: 3 },
            { x: 4.30, y: 3.625 },
            { x: 4.30, y: 4.25 },
            { x: 4.30, y: 4.875 },
            { x: 4.30, y: 5.5 },
            { x: 4.30, y: 6.18 },
            { x: 4.30, y: 6.75 },
            { x: 4.30, y: 7.375 },
            { x: 4.30, y: 8 },
            { x: 4.30, y: 8.625 },
            { x: 4.30, y: 9.25 },
            { x: 4.30, y: 9.875 },
            { x: 4.30, y: 10.5 },
            { x: 5.73, y: 0.5 },
            { x: 5.73, y: 1.125 },
            { x: 5.73, y: 1.75 },
            { x: 5.73, y: 2.375 },
            { x: 5.73, y: 3 },
            { x: 5.73, y: 3.625 },
            { x: 5.73, y: 4.25 },
            { x: 5.73, y: 4.875 },
            { x: 5.73, y: 5.5 },
            { x: 5.73, y: 6.18 },
            { x: 5.73, y: 6.75 },
            { x: 5.73, y: 7.375 },
            { x: 5.73, y: 8 },
            { x: 5.73, y: 8.625 },
            { x: 5.73, y: 9.25 },
            { x: 5.73, y: 9.875 },
            { x: 5.73, y: 10.5 },
            { x: 7.10, y: 0.5 },
            { x: 7.10, y: 1.125 },
            { x: 7.10, y: 1.75 },
            { x: 7.10, y: 2.375 },
            { x: 7.10, y: 3 },
            { x: 7.10, y: 3.625 },
            { x: 7.10, y: 4.25 },
            { x: 7.10, y: 4.875 },
            { x: 7.10, y: 5.5 },
            { x: 7.10, y: 6.18 },
            { x: 7.10, y: 6.75 },
            { x: 7.10, y: 7.375 },
            { x: 7.10, y: 8 },
            { x: 7.10, y: 8.625 },
            { x: 7.10, y: 9.25 },
            { x: 7.10, y: 9.875 },
            { x: 7.10, y: 10.5 }
        ];
    };
    // for testing only
    SampleLabelComponent.prototype.fakeLabelArray = function () {
        var fakeLabelArr = [];
        var x = 0;
        while (x < this.labelSkips) {
            fakeLabelArr.push({ "aliquot_string": "", "collaborator_sample_id": "" });
            x++;
        }
        var i = 0;
        while (i < 174) {
            fakeLabelArr.push({ "aliquot_string": "test " + (i + 1), "collaborator_sample_id": i + 1 });
            i++;
        }
        return fakeLabelArr;
    };
    return SampleLabelComponent;
}());
SampleLabelComponent = __decorate([
    core_1.Component({
        selector: 'sample-label',
        template: __webpack_require__("./src/app/samples/sample-label/sample-label.component.html"),
        styles: [__webpack_require__("./src/app/samples/sample-label/sample-label.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof sample_service_1.SampleService !== "undefined" && sample_service_1.SampleService) === "function" && _a || Object])
], SampleLabelComponent);
exports.SampleLabelComponent = SampleLabelComponent;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/samples/sample-label/sample-label.component.js.map

/***/ }),

/***/ "./src/app/samples/sample.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var Subject_1 = __webpack_require__("./node_modules/rxjs/_esm5/Subject.js");
var SampleService = (function () {
    function SampleService(_http) {
        this._http = _http;
        // subject for label parts needed by modal
        this._LabelParts = new Subject_1.Subject();
    }
    SampleService.prototype.extractData = function (res) {
        var body = res.json();
        return body.data || {};
    };
    SampleService.prototype.getSamples = function () {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.SAMPLES_URL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    SampleService.prototype.getSamplerNames = function () {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.SAMPLES_URL + 'get_sampler_names/', options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    // get sample-inhibition objects, i.e. inhibitions per sample
    SampleService.prototype.getSampleInhibitions = function (sampleList) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.SAMPLE_INHIBITIONS_URL + '?id=' + sampleList, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    SampleService.prototype.getRecentPegnegs = function () {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.SAMPLES_URL + 'get_recent_pegnegs/', options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    SampleService.prototype.querySamplesCount = function (queryFormValue) {
        var queryString = '?';
        if (queryFormValue.id !== null && queryFormValue.id !== '' && queryFormValue.id !== undefined) {
            queryString = queryString + '&id=' + queryFormValue.id.toString();
        }
        if (queryFormValue.from_id !== null && queryFormValue.from_id !== '' && queryFormValue.from_id !== undefined) {
            queryString = queryString + '&from_id=' + queryFormValue.from_id.toString();
        }
        if (queryFormValue.to_id !== null && queryFormValue.to_id !== '' && queryFormValue.to_id !== undefined) {
            queryString = queryString + '&to_id=' + queryFormValue.to_id.toString();
        }
        if (queryFormValue.study !== null && queryFormValue.study !== '' && queryFormValue.study !== undefined) {
            queryString = queryString + '&study=' + queryFormValue.study.toString();
        }
        if (queryFormValue.matrix !== null && queryFormValue.matrix !== '' && queryFormValue.matrix !== undefined) {
            queryString = queryString + '&matrix=' + queryFormValue.matrix.toString();
        }
        if (queryFormValue.sample_type !== null && queryFormValue.sample_type !== '' && queryFormValue.sanple_type !== undefined) {
            queryString = queryString + '&sample_type=' + queryFormValue.sample_type.toString();
        }
        // tslint:disable-next-line:max-line-length
        if (queryFormValue.collaborator_sample_id !== null && queryFormValue.collaborator_sample_id !== '' && queryFormValue.collaborator_sample_id !== undefined) {
            queryString = queryString + '&collaborator_sample_id=' + queryFormValue.collaborator_sample_id.toString();
        }
        // tslint:disable-next-line:max-line-length
        if (queryFormValue.from_collection_start_date !== null && queryFormValue.from_collection_start_date !== "" && queryFormValue.from_collection_start_date !== undefined) {
            queryString = queryString + '&from_collection_start_date=' + queryFormValue.from_collection_start_date.toString();
        }
        // tslint:disable-next-line:max-line-length
        if (queryFormValue.to_collection_start_date !== null && queryFormValue.to_collection_start_date !== "" && queryFormValue.to_collection_start_date !== undefined) {
            queryString = queryString + '&to_collection_start_date=' + queryFormValue.to_collection_start_date.toString();
        }
        if (queryFormValue.record_type !== null && queryFormValue.record_type !== '' && queryFormValue.record_type !== undefined) {
            queryString = queryString + '&record_type=' + queryFormValue.record_type.toString();
        }
        if (queryFormValue.peg_neg !== null && queryFormValue.peg_neg !== '' && queryFormValue.peg_neg !== undefined) {
            queryString = queryString + '&peg_neg=' + queryFormValue.peg_neg.toString();
        }
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.SAMPLES_URL + 'get_count/' + queryString, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    SampleService.prototype.querySamples = function (queryFormValue) {
        var queryString = '?';
        if (queryFormValue.hasOwnProperty('slim')) {
            queryString = queryString + '&slim';
        }
        if (queryFormValue.id !== null && queryFormValue.id !== '' && queryFormValue.id !== undefined) {
            queryString = queryString + '&id=' + queryFormValue.id.toString();
        }
        if (queryFormValue.from_id !== null && queryFormValue.from_id !== '' && queryFormValue.from_id !== undefined) {
            queryString = queryString + '&from_id=' + queryFormValue.from_id.toString();
        }
        if (queryFormValue.to_id !== null && queryFormValue.to_id !== '' && queryFormValue.to_id !== undefined) {
            queryString = queryString + '&to_id=' + queryFormValue.to_id.toString();
        }
        if (queryFormValue.study !== null && queryFormValue.study !== '' && queryFormValue.study !== undefined) {
            queryString = queryString + '&study=' + queryFormValue.study.toString();
        }
        if (queryFormValue.matrix !== null && queryFormValue.matrix !== '' && queryFormValue.matrix !== undefined) {
            queryString = queryString + '&matrix=' + queryFormValue.matrix.toString();
        }
        if (queryFormValue.sample_type !== null && queryFormValue.sample_type !== '' && queryFormValue.sanple_type !== undefined) {
            queryString = queryString + '&sample_type=' + queryFormValue.sample_type.toString();
        }
        // tslint:disable-next-line:max-line-length
        if (queryFormValue.collaborator_sample_id !== null && queryFormValue.collaborator_sample_id !== '' && queryFormValue.collaborator_sample_id !== undefined) {
            queryString = queryString + '&collaborator_sample_id=' + queryFormValue.collaborator_sample_id.toString();
        }
        // tslint:disable-next-line:max-line-length
        if (queryFormValue.from_collection_start_date !== null && queryFormValue.from_collection_start_date !== "" && queryFormValue.from_collection_start_date !== undefined) {
            queryString = queryString + '&from_collection_start_date=' + queryFormValue.from_collection_start_date.toString();
        }
        // tslint:disable-next-line:max-line-length
        if (queryFormValue.to_collection_start_date !== null && queryFormValue.to_collection_start_date !== "" && queryFormValue.to_collection_start_date !== undefined) {
            queryString = queryString + '&to_collection_start_date=' + queryFormValue.to_collection_start_date.toString();
        }
        if (queryFormValue.record_type !== null && queryFormValue.record_type !== '' && queryFormValue.record_type !== undefined) {
            queryString = queryString + '&record_type=' + queryFormValue.record_type.toString();
        }
        if (queryFormValue.peg_neg !== null && queryFormValue.peg_neg !== '' && queryFormValue.peg_neg !== undefined) {
            queryString = queryString + '&peg_neg=' + queryFormValue.peg_neg.toString();
        }
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.SAMPLES_URL + queryString, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    SampleService.prototype.getSampleSelection = function (sampleList) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.SAMPLES_URL + '?id=' + sampleList, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    SampleService.prototype.queryFinalSampleMeanConcentrations = function (queryObject) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        var queryString = '';
        queryString += '?sample=';
        for (var _i = 0, _a = queryObject.samples; _i < _a.length; _i++) {
            var sample = _a[_i];
            queryString += ((sample.toString()) + ',');
        }
        queryString = queryString.slice(0, -1);
        queryString += '&target=';
        for (var _b = 0, _c = queryObject.targets; _b < _c.length; _b++) {
            var target = _c[_b];
            queryString += ((target.toString()) + ',');
        }
        queryString = queryString.slice(0, -1);
        return this._http.get(app_settings_1.APP_SETTINGS.SAMPLES_URL + 'finalsamplemeanconcentrations/' + queryString, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    SampleService.prototype.create = function (formValue) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.post(app_settings_1.APP_SETTINGS.SAMPLES_URL, formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    SampleService.prototype.delete = function (id) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.delete(app_settings_1.APP_SETTINGS.SAMPLES_URL + id, options)
            .catch(this.handleError);
    };
    SampleService.prototype.update = function (formValue) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS
        });
        return this._http.put(app_settings_1.APP_SETTINGS.SAMPLES_URL + formValue.id + '/', formValue, options)
            .map(this.extractData)
            .catch(this.handleError);
    };
    SampleService.prototype.read = function (sampleID) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.SAMPLES_URL + sampleID + '/?format=json', options)
            .map(this.extractData)
            .catch(this.handleError);
    };
    Object.defineProperty(SampleService.prototype, "LabelParts", {
        // getter,setter for label parts needed by modal
        get: function () { return this._LabelParts.asObservable(); },
        enumerable: true,
        configurable: true
    });
    SampleService.prototype.setLabelParts = function (labelArr) {
        this._LabelParts.next(labelArr);
    };
    SampleService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return SampleService;
}());
SampleService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], SampleService);
exports.SampleService = SampleService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/samples/sample.service.js.map

/***/ }),

/***/ "./src/app/samples/samples.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\r\n    <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n        <h3>Samples</h3>\r\n    </div>\r\n</div>\r\n\r\n<!--Add sample card -->\r\n<div class=\"row\">\r\n    <div class=\"col-lg-8 col-md-12 col-sm-12 col-xs-12\" *ngIf=\"showHideAdd\">\r\n        <!-- begin card-->\r\n        <div class=\"card\">\r\n            <div class=\"card-block\">\r\n                <div class=\"card-title\">Add Sample\r\n                    <clr-signpost>\r\n                        <clr-icon shape=\"info-standard\" clrSignpostTrigger></clr-icon>\r\n                        <clr-signpost-content *clrIfOpen>\r\n                            <p>Select a matrix to activate inputs and begin. Invalid inputs for the selected matrix will\r\n                                remain disabled.\r\n                            </p>\r\n                        </clr-signpost-content>\r\n                    </clr-signpost>\r\n                </div>\r\n\r\n                <div class=\"card-text\">\r\n                    <!-- begin form -->\r\n                    <form class=\"form compact\" [formGroup]=\"addSampleForm\"\r\n                        (ngSubmit)=\"onSubmitSample('add', addSampleForm.value)\">\r\n                        <section class=\"form-block\">\r\n\r\n                            <div class=\"form-group\">\r\n                                <label class=\"required\">Matrix</label>\r\n                                <label for=\"matrixSelect\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                    class=\"tooltip tooltip-validation tooltip-sm\"\r\n                                    [class.invalid]=\"addSampleForm.get('matrix').invalid && (addSampleForm.get('matrix').dirty || addSampleForm.get('matrix').touched)\">\r\n                                    <div class=\"select\">\r\n                                        <select id=\"matrixSelect\" name=\"matrix\" formControlName=\"matrix\"\r\n                                            (change)=\"onMatrixSelect($event.target.value)\">\r\n                                            <option *ngFor=\"let matrix of matrices\" [value]=\"matrix.id\">{{matrix.name}}\r\n                                            </option>\r\n                                        </select>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label [ngClass]=\"{'required': addSampleForm.get('study').enabled}\">Study</label>\r\n                                <label for=\"studySelect\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                    class=\"tooltip tooltip-validation tooltip-sm\"\r\n                                    [class.invalid]=\"addSampleForm.get('study').invalid && (addSampleForm.get('study').dirty || addSampleForm.get('study').touched)\">\r\n                                    <div class=\"select\">\r\n                                        <select id=\"studySelect\" name=\"study\" formControlName=\"study\">\r\n                                            <option *ngFor=\"let study of studies\" [value]=\"study.id\">{{study.name}}\r\n                                            </option>\r\n                                        </select>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label [ngClass]=\"{'required': addSampleForm.get('sample_type').enabled}\">Sample\r\n                                    type</label>\r\n                                <label for=\"sampleTypeSelect\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                    class=\"tooltip tooltip-validation tooltip-sm\"\r\n                                    [class.invalid]=\"addSampleForm.get('sample_type').invalid && (addSampleForm.get('sample_type').dirty || addSampleForm.get('sample_type').touched)\">\r\n                                    <div class=\"select\">\r\n                                        <select id=\"sampleTypeSelect\" name=\"sample_type\" formControlName=\"sample_type\">\r\n                                            <option *ngFor=\"let sampleType of sampleTypes\" [value]=\"sampleType.id\">\r\n                                                {{sampleType.name}}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label\r\n                                    [ngClass]=\"{'required': addSampleForm.get('collaborator_sample_id').enabled}\">Collaborator\r\n                                    Sample ID</label>\r\n                                <label for=\"collabSampleIdInput\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                    class=\"tooltip tooltip-validation tooltip-sm\"\r\n                                    [class.invalid]=\"addSampleForm.get('collaborator_sample_id').invalid && (addSampleForm.get('collaborator_sample_id').dirty || addSampleForm.get('collaborator_sample_id').touched)\">\r\n                                    <input id=\"collabSampleIdInput\" type=\"text\"\r\n                                        formControlName=\"collaborator_sample_id\">\r\n                                    <span class=\"tooltip-content\">Collaborator ID is required.</span>\r\n                                </label>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label>Filtered</label>\r\n                                <div class=\"toggle-switch\">\r\n                                    <input type=\"checkbox\" id=\"filteredToggle\" formControlName=\"filter_flag\">\r\n                                    <label for=\"filteredToggle\">{{this.addSampleForm.controls.filter_flag.value ? \"Yes\" :\r\n                                        \"No\"}}\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label>Secondary Concentration</label>\r\n                                <div class=\"toggle-switch\">\r\n                                    <input type=\"checkbox\" id=\"secondaryConcToggle\"\r\n                                        formControlName=\"secondary_concentration_flag\">\r\n                                    <label for=\"secondaryConcToggle\">{{this.addSampleForm.controls.secondary_concentration_flag.value\r\n                                        ? \"Yes\" : \"No\"}}</label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"studySiteNameInput\">Study Site Name</label>\r\n                                <input id=\"studySiteNameInput\" type=\"text\" formControlName=\"study_site_name\">\r\n                            </div>\r\n\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"sampleDescInput\">Sample Description</label>\r\n                                <textarea id=\"sampleDescInput\" rows=\"2\" formControlName=\"sample_description\"\r\n                                    style=\"max-width:25em\"></textarea>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"sampleNotesInput\">Sample Notes</label>\r\n                                <textarea id=\"sampleNotesInput\" rows=\"2\" formControlName=\"sample_notes\"\r\n                                    style=\"max-width:25em\"></textarea>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"arrivalDateInput\">Arrival Date</label>\r\n                                <input type=\"date\" id=\"arrivalStartDateInput\" formControlName=\"arrival_date\">\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"arrivalNotesInput\">Arrival Notes</label>\r\n                                <textarea id=\"arrivalNotesInput\" rows=\"2\" formControlName=\"arrival_notes\"\r\n                                    style=\"max-width:25em\"></textarea>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"samplerNameInput\"\r\n                                    [ngClass]=\"{'required': addSampleForm.get('sampler_name').enabled}\">Sampler\r\n                                    Name\r\n                                </label>\r\n                                <input id=\"samplerNameInput\" list=\"samplerNames\" name=\"samplerName\" type=\"text\"\r\n                                    formControlName=\"sampler_name\">\r\n                                <datalist id=\"samplerNames\">\r\n                                    <option *ngFor=\"let item of samplerNames\" (click)=\"selectName(item)\"\r\n                                        value=\"{{item}}\">\r\n                                </datalist>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"collectStartDateInput\"\r\n                                    [ngClass]=\"{'required': addSampleForm.get('collection_start_date').enabled}\">Collection\r\n                                    Start Date</label>\r\n                                <input type=\"date\" id=\"collectStartDateInput\" formControlName=\"collection_start_date\">\r\n                            </div>\r\n\r\n                            <!--begin variable display section-->\r\n                            <div class=\"form-group\">\r\n                                <label for=\"collectStartTime\">Collection Start Time (HH:MM)</label>\r\n                                <label for=\"collectStartTime\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                    class=\"tooltip tooltip-validation tooltip-sm\"\r\n                                    [class.invalid]=\"addSampleForm.get('collection_start_time').invalid && (addSampleForm.get('collection_start_time').dirty || addSampleForm.get('collection_start_time').touched)\">\r\n                                    <input id=\"collectStartTime\" type=\"text\" formControlName=\"collection_start_time\">\r\n                                    <span class=\"tooltip-content\">Must follow format HH:MM</span>\r\n                                </label>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"collectEndDateInput\">Collection End Date</label>\r\n                                <input type=\"date\" id=\"collectEndDateInput\" formControlName=\"collection_end_date\">\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label>Collection End Time (HH:MM)</label>\r\n                                <label for=\"collectEndTime\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                    class=\"tooltip tooltip-validation tooltip-sm\"\r\n                                    [class.invalid]=\"addSampleForm.get('collection_end_time').invalid && (addSampleForm.get('collection_end_time').dirty || addSampleForm.get('collection_end_time').touched)\">\r\n                                    <input id=\"collectEndTime\" type=\"text\" formControlName=\"collection_end_time\">\r\n                                    <span class=\"tooltip-content\">Must follow format HH:MM</span>\r\n                                </label>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"imrInput\">Initial Meter Reading</label>\r\n                                <label for=\"imrInput\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                    class=\"tooltip tooltip-validation tooltip-sm\"\r\n                                    [class.invalid]=\"addSampleForm.get('meter_reading_initial').invalid && (addSampleForm.get('meter_reading_initial').dirty || addSampleForm.get('meter_reading_initial').touched)\">\r\n                                    <input type=\"number\" id=\"imrInput\" formControlName=\"meter_reading_initial\">\r\n                                    <span class=\"tooltip-content\">Must be greater than 0 and less than Final Meter\r\n                                        Reading</span>\r\n                                </label>\r\n                                <div class=\"select\">\r\n                                    <select id=\"meter_reading_initialUnitSelect\" formControlName=\"meter_reading_unit\">\r\n                                        <option *ngFor=\"let unit of units\" [value]=\"unit.id\">{{unit.symbol}}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label>Final Meter Reading</label>\r\n                                <label for=\"fmrInput\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                    class=\"tooltip tooltip-validation tooltip-sm\"\r\n                                    [class.invalid]=\"addSampleForm.get('meter_reading_final').invalid && (addSampleForm.get('meter_reading_final').dirty || addSampleForm.get('meter_reading_final').touched)\">\r\n                                    <input id=\"fmrInput\" type=\"number\" formControlName=\"meter_reading_final\">\r\n                                    <span class=\"tooltip-content\">Must be greater than 0 and greater than Initial Meter\r\n                                        Reading</span>\r\n                                </label>\r\n                                <label\r\n                                    *ngIf=\"this.units\">{{addSampleForm.get('meter_reading_unit').value | displayValue:'symbol':this.units}}</label>\r\n\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"tvsInput\">Total Volume (or mass) Sampled</label>\r\n                                <input type=\"text\" id=\"tvsInput\" formControlName=\"total_volume_sampled_initial\"\r\n                                    (ngModelChange)=\"addLeadingZero($event, addSampleForm.get('total_volume_sampled_initial'))\">\r\n                                <div class=\"select\">\r\n                                    <select id=\"tvsUnitSelect\" formControlName=\"total_volume_sampled_unit_initial\">\r\n                                        <option *ngFor=\"let unit of units\" [value]=\"unit.id\">{{unit.symbol}}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"volPostDiluteInput\">Volume After Dilution </label>\r\n                                <input id=\"volPostDiluteInput\" type=\"text\" formControlName=\"post_dilution_volume\">\r\n                                <span>µL</span>\r\n                                <span>(req. for Solid Manure and Forage, Sediment, Soil)</span>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label [ngClass]=\"{'required': addSampleForm.get('filter_type').enabled}\">Filter\r\n                                    Type</label>\r\n                                <label for=\"filterSelect\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                    class=\"tooltip tooltip-validation tooltip-sm\"\r\n                                    [class.invalid]=\"addSampleForm.get('filter_type').invalid && (addSampleForm.get('filter_type').dirty || addSampleForm.get('filter_type').touched)\">\r\n                                    <div class=\"select\">\r\n                                        <select id=\"filterSelect\" name=\"filterType\" formControlName=\"filter_type\">\r\n                                            <option *ngFor=\"let filterType of filterTypes\" [value]=\"filterType.id\">\r\n                                                {{filterType.name}}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"filterBornOnDateInput\">Filter Born-on Date</label>\r\n                                <input type=\"date\" id=\"filterBornOnDateInput\" formControlName=\"filter_born_on_date\">\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"dissVolInput\">Dissolution Volume</label>\r\n                                <input id=\"dissVolInput\" type=\"text\" formControlName=\"dissolution_volume\">\r\n                                <span>mL</span>\r\n                                <span>(req. for air)</span>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"eluteNotesInput\">Elution Notes</label>\r\n                                <textarea id=\"eluteNotesInput\" rows=\"2\" formControlName=\"elution_notes\"\r\n                                    style=\"max-width:25em\"></textarea>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"techInitInput\">Tech Intials</label>\r\n                                <input id=\"techInitInput\" type=\"text\" formControlName=\"technician_initials\">\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"eluteVolInput\">Eluent/Backflush Volume Used</label>\r\n                                <input id=\"eluteVolInput\" type=\"text\" formControlName=\"sample_volume_initial\">\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label>Peg Neg</label>\r\n                                <label for=\"pegNegSelect\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                    class=\"tooltip tooltip-validation tooltip-sm\">\r\n                                    <div class=\"select\">\r\n                                        <select id=\"pegNegSelect\" name=\"peg_neg\" formControlName=\"peg_neg\">\r\n                                            <option value=\"\">NO PEGNEG ASSOCIATION</option>\r\n                                            <option *ngFor=\"let pegneg of pegnegs\" [value]=\"pegneg.id\">ID:{{pegneg.id}} Date:{{pegneg.collection_start_date\r\n                                                | date:'shortDate'}}</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    20 most recent pegnegs shown by default.\r\n                                </label>\r\n                            </div>\r\n\r\n                            <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"sampleVolumeErrorFlag\"\r\n                                (clrAlertClosedChange)=\"onClosesampleVolumeError()\">\r\n                                <div class=\"alert-item\">\r\n                                    <span class=\"alert-text\">Please provide a sample volume using meter readings and\r\n                                        units\r\n                                        or total volume sampled and units.</span>\r\n                                </div>\r\n                            </clr-alert>\r\n\r\n                            <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showSampleCreateError\">\r\n                                <div clr-alert-item class=\"alert-item\">\r\n                                    <span class=\"alert-text\">Submission error. Sample not submitted.</span>\r\n                                    <span>{{errorMessage}}</span>\r\n                                    <div class=\"alert-actions\">\r\n                                        <a class=\"alert-action\" (click)=\"onSubmitSample('add', addSampleForm.value)\">Try\r\n                                            again\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </clr-alert>\r\n\r\n                            <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showSampleCreateSuccess\"\r\n                                [clrAlertClosable]=\"false\">\r\n                                <div clr-alert-item class=\"alert-item\">\r\n                                    <span class=\"alert-text\">Sample successfully submitted. ID: {{createdSampleID}}\r\n                                    </span>\r\n                                    <div class=\"alert-actions\">\r\n                                        <a class=\"alert-action\"\r\n                                            (click)=\"showHideAdd = false; showSampleCreateSuccess = false; resetFlags()\">Close</a>\r\n                                    </div>\r\n                                </div>\r\n                            </clr-alert>\r\n\r\n                            <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"addSampleForm.invalid\"\r\n                                [clrLoading]=\"submitLoading\">Submit</button>\r\n                            <button class=\"btn btn-info\"\r\n                                (click)=\"showHideAdd = !showHideAdd; resetFlags()\">Close</button>\r\n                        </section>\r\n                        <!--<p>Form value: {{ addSampleForm.value | json }}</p>\r\n                        <p>Form status: {{ addSampleForm.status | json }}</p> -->\r\n                    </form>\r\n                    <!-- end form -->\r\n\r\n                    <div class=\"form-group\" class=\"pegneg-list-update\">\r\n                        <label class=\"text-bold\"><b><i>Update Pegneg selection list</i></b></label>\r\n                        <label>\r\n                            <label>&nbsp;&nbsp;From:</label><input type=\"date\"\r\n                                [formControl]=\"pegnegFromDate\"><label>To:</label><input type=\"date\"\r\n                                [formControl]=\"pegnegToDate\"><button class=\"btn btn-link\"\r\n                                [clrLoading]=\"pegnegListLoading\" (click)=\"updatePegnegList()\">Update</button>\r\n                        </label>\r\n\r\n                    </div>\r\n\r\n                    <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"pegnegQuerySizeErrorFlag\">\r\n                        <div class=\"alert-item\">\r\n                            <span class=\"alert-text\">Pegneg results too large. Please narrow your date range.</span>\r\n                        </div>\r\n                    </clr-alert>\r\n\r\n                    <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"pegnegQueryBlankFlag\">\r\n                        <div class=\"alert-item\">\r\n                            <span class=\"alert-text\">No pegneg results. Please expand your date range.</span>\r\n                        </div>\r\n                    </clr-alert>\r\n\r\n                </div>\r\n            </div>\r\n            <!-- end card -->\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!--Add peg neg card -->\r\n<div class=\"row\">\r\n    <div class=\"col-lg-8 col-md-12 col-sm-12 col-xs-12\" *ngIf=\"showHideAddPegNeg\">\r\n        <!-- begin card-->\r\n        <div class=\"card\">\r\n            <div class=\"card-block\">\r\n                <div class=\"card-title\">Add Peg Neg\r\n                    <clr-signpost>\r\n                        <clr-icon shape=\"info-standard\" clrSignpostTrigger></clr-icon>\r\n                        <clr-signpost-content *clrIfOpen>\r\n                            <p>Create a peg neg control record. Associate with a sample in the Add Sample form.\r\n                            </p>\r\n                        </clr-signpost-content>\r\n                    </clr-signpost>\r\n                </div>\r\n\r\n                <div class=\"card-text\">\r\n                    <!-- begin form -->\r\n                    <form class=\"form compact\" [formGroup]=\"addPegNegForm\"\r\n                        (ngSubmit)=\"onSubmitSample('addPegNeg', addPegNegForm.value)\">\r\n                        <section class=\"form-block\">\r\n\r\n\r\n                            <div class=\"form-group\">\r\n                                <label>Filtered</label>\r\n                                <div class=\"toggle-switch\">\r\n                                    <input type=\"checkbox\" id=\"filteredToggle\" formControlName=\"filter_flag\">\r\n                                    <label for=\"filteredToggle\">{{this.addPegNegForm.controls.filter_flag.value ? \"Yes\" :\r\n                                        \"No\"}}\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label>Secondary Concentration</label>\r\n                                <div class=\"toggle-switch\">\r\n                                    <input type=\"checkbox\" id=\"secondaryConcToggle\"\r\n                                        formControlName=\"secondary_concentration_flag\">\r\n                                    <label for=\"secondaryConcToggle\">{{this.addPegNegForm.controls.secondary_concentration_flag.value\r\n                                        ? \"Yes\" : \"No\"}}</label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"pegnegDescInput\">Description</label>\r\n                                <textarea id=\"pegnegDescInput\" rows=\"2\" formControlName=\"sample_description\"\r\n                                    style=\"max-width:25em\"></textarea>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"pegnegNotesInput\">Notes</label>\r\n                                <textarea id=\"pegnegNotesInput\" rows=\"2\" formControlName=\"sample_notes\"\r\n                                    style=\"max-width:25em\"></textarea>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"samplerNameInput\"\r\n                                    [ngClass]=\"{'required': addPegNegForm.get('sampler_name').enabled}\">Sampler\r\n                                    Name\r\n                                </label>\r\n                                <input id=\"samplerNameInput\" list=\"samplerNames\" name=\"samplerName\" type=\"text\"\r\n                                    formControlName=\"sampler_name\">\r\n                                <datalist id=\"samplerNames\">\r\n                                    <option *ngFor=\"let item of samplerNames\" (click)=\"selectName(item)\"\r\n                                        value=\"{{item}}\">\r\n                                </datalist>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"collectStartDateInput\"\r\n                                    [ngClass]=\"{'required': addPegNegForm.get('collection_start_date').enabled}\">Collection\r\n                                    Start Date</label>\r\n                                <input type=\"date\" id=\"collectStartDateInput\" formControlName=\"collection_start_date\">\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"imrInput\">Initial Meter Reading</label>\r\n                                <input type=\"text\" id=\"imrInput\" formControlName=\"meter_reading_initial\">\r\n                                <div class=\"select\">\r\n                                    <select id=\"meter_reading_initialUnitSelect\" formControlName=\"meter_reading_unit\">\r\n                                        <option *ngFor=\"let unit of units\" [value]=\"unit.id\">{{unit.symbol}}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"fmrInput\">Final Meter Reading</label>\r\n                                <input type=\"text\" id=\"fmrInput\" formControlName=\"meter_reading_final\">\r\n                                <label\r\n                                    *ngIf=\"this.units\">{{addPegNegForm.get('meter_reading_unit').value | displayValue:'symbol':this.units}}</label>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"tvsInput\">Total Volume/Mass Sampled</label>\r\n                                <input type=\"text\" id=\"tvsInput\" formControlName=\"total_volume_sampled_initial\">\r\n                                <div class=\"select\">\r\n                                    <select id=\"tvsUnitSelect\" formControlName=\"total_volume_sampled_unit_initial\">\r\n                                        <option *ngFor=\"let unit of units\" [value]=\"unit.id\">{{unit.symbol}}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"filterBornOnDateInput\">Filter Born-on Date</label>\r\n                                <input type=\"date\" id=\"filterBornOnDateInput\" formControlName=\"filter_born_on_date\">\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"dissVolInput\">Dissolution Volume</label>\r\n                                <input id=\"dissVolInput\" type=\"text\" formControlName=\"dissolution_volume\">\r\n                                <span>mL</span>\r\n                                <span>(req. for air)</span>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"eluteNotesInput\">Elution Notes</label>\r\n                                <textarea id=\"eluteNotesInput\" rows=\"2\" formControlName=\"elution_notes\"\r\n                                    style=\"max-width:25em\"></textarea>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"techInitInput\">Tech Intials</label>\r\n                                <input id=\"techInitInput\" type=\"text\" formControlName=\"technician_initials\">\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"eluteVolInput\">Eluent/Backflush Volume Used</label>\r\n                                <input id=\"eluteVolInput\" type=\"text\" formControlName=\"sample_volume_initial\">\r\n                            </div>\r\n\r\n                            <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"sampleVolumeErrorFlag\"\r\n                                (clrAlertClosedChange)=\"onClosesampleVolumeError()\">\r\n                                <div class=\"alert-item\">\r\n                                    <span class=\"alert-text\">Please provide a sample volume using meter readings and\r\n                                        units\r\n                                        or total volume sampled and units.</span>\r\n                                </div>\r\n                            </clr-alert>\r\n\r\n                            <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showSampleCreateError\">\r\n                                <div clr-alert-item class=\"alert-item\">\r\n                                    <span class=\"alert-text\">Submission error. Pegneg (sample record) not\r\n                                        submitted.</span>\r\n                                    <span>{{errorMessage}}</span>\r\n                                    <div class=\"alert-actions\">\r\n                                        <a class=\"alert-action\"\r\n                                            (click)=\"onSubmitSample('addPegNeg', addPegNegForm.value)\">Try\r\n                                            again\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </clr-alert>\r\n\r\n                            <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showSampleCreateSuccess\"\r\n                                [clrAlertClosable]=\"false\">\r\n                                <div clr-alert-item class=\"alert-item\">\r\n                                    <span class=\"alert-text\">Pegneg (sample record) successfully submitted. ID:\r\n                                        {{createdSampleID}}</span>\r\n                                    <div class=\"alert-actions\">\r\n                                        <a class=\"alert-action\"\r\n                                            (click)=\"showHideAddPegNeg = false; showSampleCreateSuccess = false; resetFlags();\">Close</a>\r\n                                    </div>\r\n                                </div>\r\n                            </clr-alert>\r\n\r\n                            <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"addPegNegForm.invalid\"\r\n                                [clrLoading]=\"submitLoading\">Submit</button>\r\n                            <button class=\"btn btn-info\"\r\n                                (click)=\"showHideAddPegNeg = !showHideAddPegNeg; resetFlags();\">Close</button>\r\n                        </section>\r\n                    </form>\r\n                    <!-- end form -->\r\n\r\n                </div>\r\n            </div>\r\n            <!-- end card -->\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- edit sample modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideEdit\" [clrModalSize]=\"'lg'\">\r\n    <h3 class=\"modal-title\">Edit Sample</h3>\r\n    <div class=\"modal-body\">\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12\">\r\n                <form id=\"editSampleForm\" class=\"compact\" [formGroup]=\"editSampleForm\"\r\n                    (ngSubmit)=\"onSubmitSample('edit', editSampleForm.value)\">\r\n                    <section class=\"form-block\">\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"sampleId\">Sample ID</label>\r\n                            <input type=\"text\" id=\"sampleId\" size=\"35\" formControlName=\"id\" readonly>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label class=\"required\">Matrix</label>\r\n                            <label for=\"matrixSelect\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                class=\"tooltip tooltip-validation tooltip-sm\"\r\n                                [class.invalid]=\"editSampleForm.get('matrix').invalid && (editSampleForm.get('matrix').dirty || editSampleForm.get('matrix').touched)\">\r\n                                <div class=\"select\">\r\n                                    <select id=\"matrixSelect\" name=\"matrix\" formControlName=\"matrix\"\r\n                                        (change)=\"onMatrixSelect($event.target.value)\">\r\n                                        <option *ngFor=\"let matrix of matrices\" [value]=\"matrix.id\">{{matrix.name}}\r\n                                        </option>\r\n                                    </select>\r\n                                </div>\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label class=\"required\">Study</label>\r\n                            <label for=\"studySelect\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                class=\"tooltip tooltip-validation tooltip-sm\"\r\n                                [class.invalid]=\"editSampleForm.get('study').invalid && (editSampleForm.get('study').dirty || editSampleForm.get('study').touched)\">\r\n                                <div class=\"select\">\r\n                                    <select id=\"studySelect\" name=\"study\" formControlName=\"study\">\r\n                                        <option value=\"\">\r\n                                            <span class=\"all\">NO STUDY ASSOCIATION</span>\r\n                                        </option>\r\n                                        <option *ngFor=\"let study of studies\" [value]=\"study.id\">{{study.name}}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label class=\"required\">Sample type</label>\r\n                            <label for=\"sampleTypeSelect\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                class=\"tooltip tooltip-validation tooltip-sm\"\r\n                                [class.invalid]=\"editSampleForm.get('sample_type').invalid && (editSampleForm.get('sample_type').dirty || editSampleForm.get('sample_type').touched)\">\r\n                                <div class=\"select\">\r\n                                    <select id=\"sampleTypeSelect\" name=\"sample_type\" formControlName=\"sample_type\">\r\n                                        <option *ngFor=\"let sampleType of sampleTypes\" [value]=\"sampleType.id\">\r\n                                            {{sampleType.name}}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label class=\"required\">Collaborator Sample ID</label>\r\n                            <label for=\"collabSampleIdInput\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                class=\"tooltip tooltip-validation tooltip-sm\"\r\n                                [class.invalid]=\"editSampleForm.get('collaborator_sample_id').invalid && (editSampleForm.get('collaborator_sample_id').dirty || editSampleForm.get('collaborator_sample_id').touched)\">\r\n                                <input id=\"collabSampleIdInput\" type=\"text\" formControlName=\"collaborator_sample_id\">\r\n                                <span class=\"tooltip-content\">Collaborator ID is required.</span>\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label class=\"required\">Filtered</label>\r\n                            <div class=\"toggle-switch\">\r\n                                <input type=\"checkbox\" id=\"filteredToggle\" formControlName=\"filter_flag\">\r\n                                <label\r\n                                    for=\"filteredToggle\">{{this.editSampleForm.controls.filter_flag.value ? \"Yes\" : \"No\"}}</label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label class=\"required\">Secondary Concentration</label>\r\n                            <div class=\"toggle-switch\">\r\n                                <input type=\"checkbox\" id=\"secondaryConcToggle\"\r\n                                    formControlName=\"secondary_concentration_flag\">\r\n                                <label for=\"secondaryConcToggle\">{{this.editSampleForm.controls.secondary_concentration_flag.value\r\n                                    ? \"Yes\" : \"No\"}}</label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"studySiteNameInput\">Study Site Name</label>\r\n                            <input id=\"studySiteNameInput\" type=\"text\" formControlName=\"study_site_name\">\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"sampleDescInput\">Sample Description</label>\r\n                            <textarea id=\"sampleDescInput\" rows=\"2\" formControlName=\"sample_description\"\r\n                                style=\"max-width:25em\"></textarea>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"sampleDescInput\">Sample Notes</label>\r\n                            <textarea id=\"sampleDescInput\" rows=\"2\" formControlName=\"sample_notes\"\r\n                                style=\"max-width:25em\"></textarea>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"collectStartDateInput\" class=\"required\">Arrival Date</label>\r\n                            <input type=\"date\" id=\"collectStartDateInput\" formControlName=\"arrival_date\">\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"sampleDescInput\">Arrival Notes</label>\r\n                            <textarea id=\"sampleDescInput\" rows=\"2\" formControlName=\"arrival_notes\"\r\n                                style=\"max-width:25em\"></textarea>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"samplerNameInput\">Sampler Name</label>\r\n                            <input id=\"samplerNameInput\" list=\"samplerNames\" name=\"samplerName\" type=\"text\"\r\n                                formControlName=\"sampler_name\">\r\n                            <datalist id=\"samplerNames\">\r\n                                <option *ngFor=\"let item of samplerNames\" (click)=\"selectName(item)\" value=\"{{item}}\">\r\n                            </datalist>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"collectStartDateInput\" class=\"required\">Collection Start Date</label>\r\n                            <input type=\"date\" id=\"collectStartDateInput\" formControlName=\"collection_start_date\">\r\n                        </div>\r\n\r\n                        <!--begin variable display section-->\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"collectStartTime\">Collection Start Time (HH:MM)</label>\r\n                            <input id=\"collectStartTime\" type=\"text\" formControlName=\"collection_start_time\">\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"collectEndDateInput\">Collection End Date</label>\r\n                            <input type=\"date\" id=\"collectEndDateInput\" formControlName=\"collection_end_date\">\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"collectEndTime\">Collection End Time (HH:MM)</label>\r\n                            <input id=\"collectEndTime\" type=\"text\" formControlName=\"collection_end_time\">\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"imrInput\">Initial Meter Reading</label>\r\n                            <input type=\"text\" id=\"imrInput\" formControlName=\"meter_reading_initial\">\r\n                            <div class=\"select\">\r\n                                <select id=\"imrSelect\" formControlName=\"meter_reading_unit\">\r\n                                    <option *ngFor=\"let unit of units\" [value]=\"unit.id\">{{unit.symbol}}</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"fmrInput\">Final Meter Reading</label>\r\n                            <input type=\"text\" id=\"fmrInput\" formControlName=\"meter_reading_final\">\r\n                            <label *ngIf=\"sampleSelected\">\r\n                                <label\r\n                                    *ngIf=\"this.units\">{{editSampleForm.get('meter_reading_unit').value | displayValue:'symbol':this.units}}</label>\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"tvsInput\">Total Volume (or mass) Sampled</label>\r\n                            <input type=\"text\" id=\"tvsInput\" formControlName=\"total_volume_or_mass_sampled\">\r\n                            <!-- <span>L</span> -->\r\n                            <span\r\n                                *ngIf=\"selectedSample\">{{selectedSample.total_volume_sampled_unit_initial | displayValue:'symbol':this.units}}</span>\r\n                            <!-- <div class=\"select\">\r\n                                <select id=\"tvsUnitSelect\" formControlName=\"total_volume_sampled_unit_initial\" readonly>\r\n                                    <option *ngFor=\"let unit of units\" [value]=\"unit.id\">{{unit.symbol}}</option>\r\n                                </select>\r\n                            </div> -->\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"volPostDiluteInput\">Volume After Dilution </label>\r\n                            <input id=\"volPostDiluteInput\" type=\"text\" formControlName=\"post_dilution_volume\">\r\n                            <span>µL</span>\r\n                            <span>(req. for Solid Manure and Forage, Sediment, Soil)</span>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label>Filter Type</label>\r\n                            <label for=\"filterSelect\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                class=\"tooltip tooltip-validation tooltip-sm\"\r\n                                [class.invalid]=\"editSampleForm.get('filter_type').invalid && (editSampleForm.get('filter_type').dirty || editSampleForm.get('filter_type').touched)\">\r\n                                <div class=\"select\">\r\n                                    <select id=\"filterSelect\" name=\"filterType\" formControlName=\"filter_type\">\r\n                                        <option *ngFor=\"let filterType of filterTypes\" [value]=\"filterType.id\">\r\n                                            {{filterType.name}}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"filterBornOnDateInput\">Collection Start Date</label>\r\n                            <input type=\"date\" id=\"filterBornOnDateInput\" formControlName=\"filter_born_on_date\">\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"dissVolInput\">Dissolution Volume</label>\r\n                            <input id=\"dissVolInput\" type=\"text\" formControlName=\"dissolution_volume\">\r\n                            <span>mL</span>\r\n                            <span>(req. for air)</span>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"eluteNotesInput\">Elution Notes</label>\r\n                            <textarea id=\"eluteNotesInput\" rows=\"2\" formControlName=\"elution_notes\"\r\n                                style=\"max-width:25em\"></textarea>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"techInitInput\">Tech Intials</label>\r\n                            <input id=\"techInitInput\" type=\"text\" formControlName=\"technician_initials\">\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"eluteVolInput\">Eluent/Backflush Volume Used</label>\r\n                            <input id=\"eluteVolInput\" type=\"text\" formControlName=\"sample_volume_initial\">\r\n                        </div>\r\n\r\n\r\n                        <div>\r\n                            <label *ngIf=\"selectedSamplePegneg\">Current Associated Peg Neg:&nbsp;&nbsp;ID:{{selectedSamplePegneg.id}}&nbsp;Date:{{selectedSamplePegneg.collection_start_date\r\n                                | date:'shortDate'}}</label>\r\n                        </div>\r\n\r\n\r\n                        <div class=\"form-group\">\r\n                            <label>Update Peg Neg</label>\r\n                            <label for=\"pegNegSelect\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                                class=\"tooltip tooltip-validation tooltip-sm\">\r\n                                <div class=\"select\">\r\n                                    <select id=\"pegNegSelect\" name=\"peg_neg\" formControlName=\"peg_neg\">\r\n                                        <option value=\"\">NO PEGNEG ASSOCIATION</option>\r\n                                        <option *ngFor=\"let pegneg of pegnegs\" [value]=\"pegneg.id\">ID:{{pegneg.id}} Date:{{pegneg.collection_start_date\r\n                                            | date:'shortDate'}}</option>\r\n                                    </select>\r\n                                </div>\r\n                                20 most recent pegnegs shown by default.\r\n                            </label>\r\n                        </div>\r\n\r\n                        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showSampleEditError\">\r\n                            <div clr-alert-item class=\"alert-item\">\r\n                                <span class=\"alert-text\">Submission error. Sample not updated.</span>\r\n                                <span>{{errorMessage}}</span>\r\n                                <div class=\"alert-actions\">\r\n                                    <a class=\"alert-action\" (click)=\"onSubmitSample('add', editSampleForm.value)\">Try\r\n                                        again</a>\r\n                                </div>\r\n                            </div>\r\n                        </clr-alert>\r\n\r\n                        <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showSampleEditSuccess\">\r\n                            <div clr-alert-item class=\"alert-item\">\r\n                                <span class=\"alert-text\">Sample successfully updated</span>\r\n                                <div class=\"alert-actions\">\r\n                                    <a class=\"alert-action\"\r\n                                        (click)=\"showHideEdit = false; showSampleEditSuccess = false; resetFlags();\">Close</a>\r\n                                </div>\r\n                            </div>\r\n                        </clr-alert>\r\n\r\n                        <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"editSampleForm.invalid\">Save\r\n                            Edits</button>\r\n                        <button class=\"btn btn-info\"\r\n                            (click)=\"showHideEdit = !showHideEdit; resetFlags();\">Close</button>\r\n                    </section>\r\n                    <!--<p>Form value: {{ editSampleForm.value | json }}</p>\r\n                    <p>Form status: {{ editSampleForm.status | json }}</p> -->\r\n                </form>\r\n\r\n\r\n                <div class=\"form-group\" class=\"pegneg-list-update\">\r\n                    <label class=\"text-bold\"><b><i>Update Pegneg selection list</i></b></label>\r\n                    <label>\r\n                        <label>&nbsp;&nbsp;From:</label><input type=\"date\"\r\n                            [formControl]=\"pegnegFromDate\"><label>To:</label><input type=\"date\"\r\n                            [formControl]=\"pegnegToDate\"><button class=\"btn btn-link\" [clrLoading]=\"pegnegListLoading\"\r\n                            (click)=\"updatePegnegList()\">Update</button>\r\n                    </label>\r\n\r\n                </div>\r\n\r\n                <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"pegnegQuerySizeErrorFlag\">\r\n                    <div class=\"alert-item\">\r\n                        <span class=\"alert-text\">Pegneg results too large. Please narrow your date range.</span>\r\n                    </div>\r\n                </clr-alert>\r\n\r\n                <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"pegnegQueryBlankFlag\">\r\n                    <div class=\"alert-item\">\r\n                        <span class=\"alert-text\">No pegneg results. Please expand your date range.</span>\r\n                    </div>\r\n                </clr-alert>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n</clr-modal>\r\n<!-- end edit sample modal -->\r\n\r\n<!-- delete Sample Modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideDelete\">\r\n    <h3 class=\"modal-title\"><clr-icon shape=\"trash\" size=\"16\"></clr-icon> Delete Sample</h3>\r\n    <div class=\"modal-body\">\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-12\">\r\n          <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showSampleDeleteError\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Submission error. Sample not deleted.</span>\r\n              <div class=\"alert-actions\">\r\n                <a class=\"alert-action\" (click)=\"submitDelete()\">Try again</a>\r\n              </div>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showSampleDeleteSuccess\">\r\n            <div clr-alert-item class=\"alert-item\">\r\n              <span class=\"alert-text\">Sample successfully deleted.</span>\r\n            </div>\r\n          </clr-alert>\r\n\r\n          <div *ngIf=\"!showSampleDeleteSuccess\">\r\n            <p>Are you sure you want to delete the sample <b>{{selectedSampleId}}</b> ?</p>\r\n\r\n            <button class=\"btn btn-primary\" type=\"button\" (click)=\"submitDelete()\" [clrLoading]=\"submitLoading\">Delete</button>\r\n            <button class=\"btn btn-info\" (click)=\"showHideDelete = !showHideDelete\">Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </clr-modal>\r\n<!-- end delete sample modal -->\r\n\r\n<!-- begin analysis batch modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideABModal\">\r\n    <h3 class=\"modal-title\">Create Analysis Batch</h3>\r\n    <div class=\"modal-body\">\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12\">\r\n\r\n                <form id=\"createABForm\" class=\"compact\" [formGroup]=\"createABForm\"\r\n                    (ngSubmit)=\"onSubmitAB(createABForm.value)\">\r\n                    <section class=\"form-block\">\r\n\r\n                        <clr-stack-label>You have selected the following samples for inclusion in a new Analysis Batch:\r\n                        </clr-stack-label>\r\n\r\n                        <ul class=\"list compact\">\r\n                            <li *ngFor=\"let sample of selected\">Sample {{sample.id}} ({{sample.study_string}})</li>\r\n                        </ul>\r\n                        <p>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"abNameInput\">Name</label>\r\n                                <input id=\"abNameInput\" type=\"text\" formControlName=\"name\">\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"abDescInput\">Analysis Batch Description</label>\r\n                                <textarea id=\"abDescInput\" rows=\"2\" formControlName=\"analysis_batch_description\"\r\n                                    style=\"max-width:25em\"></textarea>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"abNotesInput\">Analysis Batch Notes</label>\r\n                                <textarea id=\"abNotesInput\" rows=\"2\" formControlName=\"analysis_batch_notes\"\r\n                                    style=\"max-width:25em\"></textarea>\r\n                            </div>\r\n\r\n                            <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showABCreateError\">\r\n                                <div clr-alert-item class=\"alert-item\">\r\n                                    <span class=\"alert-text\">Submission error. Analysis Batch not created.</span>\r\n                                    <span>{{errorMessage}}</span>\r\n                                    <div class=\"alert-actions\">\r\n                                        <a class=\"alert-action\" (click)=\"onSubmitAB(createABForm.value)\">Try again</a>\r\n                                    </div>\r\n                                </div>\r\n                            </clr-alert>\r\n\r\n                            <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showABCreateSuccess\">\r\n                                <div clr-alert-item class=\"alert-item\">\r\n                                    <span class=\"alert-text\">Analysis Batch successfully created. ID:\r\n                                        {{createdABID}}</span>\r\n                                    <div class=\"alert-actions\">\r\n                                        <a class=\"alert-action\"\r\n                                            (click)=\"showHideABModal = false; showABCreateSuccess = false; resetFlags();\">Close</a>\r\n                                    </div>\r\n                                </div>\r\n                            </clr-alert>\r\n\r\n                            <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"createABForm.invalid\"\r\n                                [clrLoading]=\"submitLoading\">Submit</button>\r\n                            <button class=\"btn btn-info\"\r\n                                (click)=\"showHideABModal= !showHideABModal; resetFlags();\">Close</button>\r\n\r\n                    </section>\r\n                </form>\r\n\r\n            </div>\r\n            <!--<div class=\"col-lg-6\">\r\n            </div>-->\r\n        </div>\r\n    </div>\r\n    <!--<div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-outline\" (click)=\"showHideEdit = !showHideEdit\">Close</button>\r\n        <button type=\"submit\" class=\"btn btn-primary\"  [disabled]=\"editSampleForm.invalid\">Save Edits</button>\r\n    </div>-->\r\n</clr-modal>\r\n<!-- end analysis batch modal -->\r\n\r\n<!-- begin Add FCSV modal -->\r\n<clr-modal [(clrModalOpen)]=\"addFCSVModalActive\" [clrModalSize]=\"'xl'\">\r\n    <h3 class=\"modal-title\">\r\n        <clr-icon shape=\"plus\" size=\"26\"></clr-icon>&nbsp;Add Final Concentrated Sample Volume (FCSV)\r\n    </h3>\r\n    <div class=\"modal-body\">\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12\">\r\n                <form class=\"compact\" [formGroup]=\"createFCSVForm\"\r\n                    (ngSubmit)=\"onSubmitFCSV('add', createFCSVForm.value)\">\r\n                    <section class=\"form-block\">\r\n\r\n                        <div formArrayName=\"fcsv_array\">\r\n                            <div class=\"row\">\r\n                                <div class=\"col-lg-2 col-md-2 col-sm-12 col-xs-12\">\r\n                                </div>\r\n                                <div class=\"col-lg-2 col-md-2 col-sm-12 col-xs-12\">\r\n                                    <label class=\"text-bold required\">FCSV*</label>\r\n                                </div>\r\n                                <div class=\"col-lg-2 col-md-2 col-sm-12 col-xs-12\">\r\n                                    <label class=\"text-bold required\">Concentration Type*</label>\r\n                                </div>\r\n                                <div class=\"col-lg-4 col-md-4 col-sm-12 col-xs-12\">\r\n                                    <label class=\"text-bold\">Notes</label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row\" *ngFor=\"let fcsv of fcsvArray.controls, let i = index\"\r\n                                [formGroupName]=\"i\">\r\n                                <div class=\"col-lg-2 col-md-2 col-sm-12 col-xs-12\">\r\n                                    <label>Sample {{fcsv.controls.sample.value}}</label>\r\n                                </div>\r\n                                <div class=\"col-lg-2 col-md-2 col-sm-12 col-xs-12\">\r\n                                    <input class=\"form-control\" type=\"text\" placeholder=\"FCSV\" size=\"10\"\r\n                                        class=\"fcsv-input\" formControlName=\"final_concentrated_sample_volume\">\r\n                                    <div class=\"select\">\r\n                                        <select id=\"fcsvUnitSelect\" formControlName=\"fcsv_units\">\r\n                                            <option *ngFor=\"let unit of units\" [value]=\"unit.id\">{{unit.symbol}}\r\n                                            </option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-lg-2 col-md-2 col-sm-12 col-xs-12 select\">\r\n                                    <select formControlName=\"concentration_type\">\r\n                                        <option *ngFor=\"let type of concentrationTypes\" [value]=\"type.id\">{{type.name}}\r\n                                        </option>\r\n                                    </select>\r\n                                </div>\r\n                                <div class=\"col-lg-4 col-md-4 col-sm-12 col-xs-12\">\r\n                                    <input class=\"form-control\" type=\"text\" placeholder=\"FCSV Notes\" size=\"35\"\r\n                                        formControlName=\"notes\">\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group row\">\r\n                                <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                                    <label>Update units for all samples</label>\r\n                                    <div class=\"select\">\r\n                                        <select id=\"fcsvUnitSelectBulk\"\r\n                                            (change)=\"onFCSVUnitSelectBulk($event.target.value)\">\r\n                                            <option [value]=\"null\"></option>\r\n                                            <option *ngFor=\"let unit of units\" [value]=\"unit.id\">{{unit.symbol}}\r\n                                            </option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <br>\r\n                            <label>Note: FCSV is converted to milliliters (mL) for storage and results calculation.\r\n                            </label>\r\n\r\n                        </div>\r\n\r\n                        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"fcsvValuesMissingFlag\">\r\n                            <div clr-alert-item class=\"alert-item\">\r\n                                <span class=\"alert-text\">Values missing. Each sample selected must have a final\r\n                                    concentrated\r\n                                    sample volume value, input units, and a concentration type selected.</span>\r\n                            </div>\r\n                        </clr-alert>\r\n\r\n                        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showFCSVCreateError\">\r\n                            <div clr-alert-item class=\"alert-item\">\r\n                                <span class=\"alert-text\">Submission error. FCSV records not submitted.</span>\r\n                                <span>{{errorMessage}}</span>\r\n                                <div class=\"alert-actions\">\r\n                                    <a class=\"alert-action\" (click)=\"onSubmitFCSV(editFCSVForm.value)\">Try again</a>\r\n                                </div>\r\n                            </div>\r\n                        </clr-alert>\r\n\r\n                        <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showFCSVCreateSuccess\">\r\n                            <div clr-alert-item class=\"alert-item\">\r\n                                <span class=\"alert-text\">FCSV records successfully submitted.</span>\r\n                                <div class=\"alert-actions\">\r\n                                    <a class=\"alert-action\"\r\n                                        (click)=\"editFCSVModalActive = false; showFCSVCreateSuccess = false; resetFlags();\">Close</a>\r\n                                </div>\r\n                            </div>\r\n                        </clr-alert>\r\n\r\n                        <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"createFCSVForm.invalid\"\r\n                            [clrLoading]=\"submitLoading\">Submit</button>\r\n                        <button class=\"btn btn-info\"\r\n                            (click)=\"addFCSVModalActive = !addFCSVModalActive; resetFlags();\">Close</button>\r\n\r\n                    </section>\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</clr-modal>\r\n<!-- end Add FCSV modal -->\r\n\r\n\r\n<!-- begin Edit FCSV modal -->\r\n<clr-modal [(clrModalOpen)]=\"editFCSVModalActive\">\r\n    <h3 class=\"modal-title\">\r\n        <clr-icon shape=\"note\" size=\"26\"></clr-icon>&nbsp;Edit Final Concentrated Sample Volume\r\n    </h3>\r\n    <div class=\"modal-body\">\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12\">\r\n\r\n                <form id=\"editFCSVForm\" class=\"compact\" [formGroup]=\"editFCSVForm\"\r\n                    (ngSubmit)=\"onSubmitFCSV('edit',editFCSVForm.value)\">\r\n                    <section class=\"form-block\">\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"fcsv\">FCSV</label>\r\n                            <input id=\"fcsv\" type=\"text\" formControlName=\"final_concentrated_sample_volume\" size=\"5\">\r\n                            <span>mL</span>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label>Concentration Type</label>\r\n                            <label for=\"concentrationTypeSelect\">\r\n                                <div class=\"select\">\r\n                                    <select id=\"concentrationTypeSelect\" formControlName=\"concentration_type\">\r\n                                        <option *ngFor=\"let type of concentrationTypes\" [value]=\"type.id\">{{type.name}}\r\n                                        </option>\r\n                                    </select>\r\n                                </div>\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"fcsvNotesInput\">Notes</label>\r\n                            <textarea id=\"fcsvNotesInput\" rows=\"2\" formControlName=\"notes\" style=\"max-width:25em\"\r\n                                formControlName=\"notes\"></textarea>\r\n                        </div>\r\n\r\n                        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showFCSVEditError\">\r\n                            <div clr-alert-item class=\"alert-item\">\r\n                                <span class=\"alert-text\">Submission error. FCSV not edited.</span>\r\n                                <span>{{errorMessage}}</span>\r\n                                <div class=\"alert-actions\">\r\n                                    <a class=\"alert-action\" (click)=\"onSubmitFCSV(editFCSVForm.value)\">Try again</a>\r\n                                </div>\r\n                            </div>\r\n                        </clr-alert>\r\n\r\n                        <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showFCSVEditSuccess\">\r\n                            <div clr-alert-item class=\"alert-item\">\r\n                                <span class=\"alert-text\">FCSV successfully updated.</span>\r\n                                <div class=\"alert-actions\">\r\n                                    <a class=\"alert-action\"\r\n                                        (click)=\"editFCSVModalActive = false; showFCSVEditSuccess = false; resetFlags();\">Close</a>\r\n                                </div>\r\n                            </div>\r\n                        </clr-alert>\r\n\r\n                        <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"editFCSVForm.invalid\"\r\n                            [clrLoading]=\"submitLoading\">Submit</button>\r\n                        <button class=\"btn btn-info\"\r\n                            (click)=\"editFCSVModalActive = !editFCSVModalActive; resetFlags();\">Close</button>\r\n                    </section>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</clr-modal>\r\n<!-- end Edit FCSV modal -->\r\n\r\n<!-- begin freezer location assignment modal -->\r\n<clr-modal [(clrModalOpen)]=\"freezerLocationAssignModalActive\" [clrModalSize]=\"'lg'\">\r\n    <h3 class=\"modal-title\">\r\n        <clr-icon shape=\"thermometer\"></clr-icon> Freezer Location Assignment\r\n    </h3>\r\n    <div class=\"modal-body\">\r\n        <!-- <div class=\"row\"> -->\r\n        <!-- <div class=\"col-lg-12 \"> -->\r\n        <div *ngIf=\"this.selectedStudy\">\r\n            <h4>\r\n                <span>\r\n                    <span>Assigning freezer locations for {{selected.length}} sample\r\n                        <span *ngIf=\"selected.length > 1\">s</span>\r\n                    </span> from the study\r\n                    <span style=\"font-weight:bold;\">{{selectedStudy | displayValue:'name':this.studies}}</span>\r\n                </span>\r\n            </h4>\r\n        </div>\r\n        <!-- <div *ngIf=\"showLastOccupiedSpot\" class=\"last-spot-border\">\r\n                    <label for=\"lastOccupiedSpot\" style=\"font-weight:bold;\">Last occupied freezer location</label>\r\n                    <div id=\"lastOccupiedSpot\">\r\n                        <span class=\"spinner spinner-inline\" *ngIf=\"lastOccupiedSpotLoading\">Loading...</span>\r\n                        <span *ngIf=\"showLastOccupiedSpot\">\r\n                            <span>\r\n                                Rack\r\n                                <b>{{lastOccupiedSpot.rack}}</b> | Box\r\n                                <b>{{lastOccupiedSpot.box}}</b> | Row\r\n                                <b>{{lastOccupiedSpot.row}}</b> | Spot\r\n                                <b>{{lastOccupiedSpot.spot}}</b>\r\n                            </span>\r\n                        </span>\r\n                        <span *ngIf=\"showLastOccupiedSpotError\">\r\n                            <clr-icon shape=\"error-standard\"></clr-icon> Not Available</span>\r\n                    </div>\r\n                </div> -->\r\n        <form id=\"freezeForm\" [formGroup]=\"freezeForm\" (ngSubmit)=\"onSubmitFreezerLocation(freezeForm.value)\">\r\n            <section class=\"form-block\">\r\n\r\n                <div class=\"form-group\">\r\n                    <label for=\"freezer\" class=\"required\">Select Freezer</label>\r\n                    <select id=\"freezerSelect\" name=\"freezer\" formControlName=\"freezer\">\r\n                        <option *ngFor=\"let freezer of freezers\" [value]=\"freezer.id\">{{freezer.id}}</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label for=\"aliquotCount\" class=\"required\">Aliquots per Sample</label>\r\n                    <input id=\"aliquotCount\" type=\"number\" min=\"1\" formControlName=\"aliquots_per_sample\"\r\n                        class=\"input-small-number\">\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label>Frozen</label>\r\n                    <div class=\"toggle-switch\">\r\n                        <input type=\"checkbox\" id=\"frozenToggle\" formControlName=\"frozen\">\r\n                        <label for=\"frozenToggle\">{{this.freezeForm.controls.frozen.value ? \"Yes\" : \"No\"}}</label>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label for=\"totalAliquots\">Total Number Aliquots\r\n                        <clr-tooltip>\r\n                            <clr-icon clrTooltipTrigger shape=\"info-circle\" size=\"24\"></clr-icon>\r\n                            <clr-tooltip-content clrPosition=\"top-right\" clrSize=\"md\" *clrIfOpen>\r\n                                <span>Sample count multiplied by Aliquots per sample</span>\r\n                            </clr-tooltip-content>\r\n                        </clr-tooltip>\r\n                    </label>\r\n                    <label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\"\r\n                        [class.invalid]=\"this.freezeForm.get('total_aliquots').value > maxAliquots\">\r\n                        <input id=\"name\" type=\"number\" class=\"form-control\" formControlName=\"total_aliquots\" readonly\r\n                            min=\"0\" max=\"{{maxAliquots}}\">\r\n                        <span class=\"tooltip-content\">Must be less than max aliquots. Adjust aliquots per sample or\r\n                            number of samples. </span>\r\n                    </label>\r\n                </div>\r\n\r\n                <div class=\"form-group\">\r\n                    <label for=\"totalAliquots\">Max Aliquots for this action\r\n                        <clr-tooltip>\r\n                            <clr-icon clrTooltipTrigger shape=\"info-circle\" size=\"24\"></clr-icon>\r\n                            <clr-tooltip-content clrPosition=\"top-right\" clrSize=\"md\" *clrIfOpen>\r\n                                <span>The maximum number of aliquots you can assign in this single action</span>\r\n                            </clr-tooltip-content>\r\n                        </clr-tooltip>\r\n                    </label>\r\n                    <span>{{maxAliquots}}</span>\r\n                    <!-- <input id=\"totalAliquots\" type=\"number\" formControlName=\"total_aliquots\" readonly> -->\r\n                </div>\r\n\r\n            </section>\r\n            <hr>\r\n\r\n            <section>\r\n                <clr-tree-node>\r\n                    <clr-icon shape=\"info-standard\" class=\"is-solid\"></clr-icon>\r\n                    Instructions\r\n                    <ng-template clrIfExpanded>\r\n                        <ng-container>\r\n                            <clr-tree-node>\r\n                                <!-- <label>Choose starting location for aliquots. Maximum value is displayed to the right of\r\n                                    each input. Next available box is always shown. If the study of the current sample\r\n                                    selection\r\n                                    has any aliquots already stored, current box for the study is shown. Select share of\r\n                                    total aliquots for each box. Suggested starting locations (based on current freezer\r\n                                    status)\r\n                                    are provided but can be changed. Note that sample-aliquot sets are not split across\r\n                                    boxes.\r\n                                    In order to enforce this, the maximum share of total for the box may be less\r\n                                    than spots available in that box.\r\n                                </label> -->\r\n                                <label>If the study of the current sample\r\n                                    selection\r\n                                    has any aliquots already stored, current box for the study is shown first and the\r\n                                    next aliquots for that study will be placed in the next available space. Share of\r\n                                    total aliquots for each box is automated. Sample-aliquot sets are prevented from\r\n                                    being split across boxes. In order to enforce this, the maximum share of total for\r\n                                    the box may be less\r\n                                    than spots available in that box. For Next Available Box, suggested starting\r\n                                    locations (based on current freezer\r\n                                    status) for rack and box are provided but can be changed.\r\n                                </label>\r\n                            </clr-tree-node>\r\n                        </ng-container>\r\n                    </ng-template>\r\n                </clr-tree-node>\r\n            </section>\r\n\r\n            <section *ngIf=\"noCurrentBoxFlag\">\r\n                <label>{{noCurrentBoxMessage}} </label>\r\n            </section>\r\n            <section class=\"form-block\" *ngIf=\"!noCurrentBoxFlag\">\r\n                <label>\r\n                    <span class=\"box-section-label\">Current Box&nbsp;</span>|\r\n                    <span>&nbsp;Available spots: {{this.freezeForm.get('available_spots_in_box').value}}</span>\r\n\r\n                </label>\r\n                <div class=\"form-group row\">\r\n                    <div class=\"col-lg-2 col-md-2 col-sm-12 col-xs-12\">\r\n                        <label class=\"required\">Share of Total</label>\r\n                    </div>\r\n                    <div class=\"col-lg-10 col-md-10 col-sm-12 col-xs-12\">\r\n                        <!-- <input type=\"number\" formControlName=\"aliquot_count_share\" class=\"input-small-number\" min=\"0\"\r\n                            max=\"{{this.freezeForm.get('available_spots_in_box').value}}\">\r\n                        <span class=\"max-size-indicator\">Max {{currentBoxShareMax}}</span> -->\r\n\r\n                        <label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                            class=\"tooltip tooltip-validation tooltip-sm\"\r\n                            [class.invalid]=\"freezeForm.get('aliquot_count_share').value > currentBoxShareMax \">\r\n                            <input id=\"name\" type=\"number\" class=\"form-control\" formControlName=\"aliquot_count_share\"\r\n                                min=\"0\" max=\"{{this.freezeForm.get('available_spots_in_box').value}}\" readonly>\r\n                            <span class=\"tooltip-content\">Must be less than max. </span>\r\n                        </label>\r\n                        <!-- <span class=\"max-size-indicator\">Max {{currentBoxShareMax}} ({{currentBoxSetMax}} sets of\r\n                            {{this.freezeForm.get('aliquots_per_sample').value}})</span> -->\r\n                        <!-- <span class=\"max-size-indicator\">({{currentBoxSetCount}} sets of\r\n                                {{this.freezeForm.get('aliquots_per_sample').value}})</span> -->\r\n                    </div>\r\n\r\n                </div>\r\n                <div class=\"form-group row\">\r\n                    <div class=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                        <label for=\"rack\" class=\"required\">Rack</label>\r\n                        <input id=\"rack\" type=\"number\" min=\"1\" max=\"{{currentFreezerDimensions.racks}}\"\r\n                            formControlName=\"rack\" readonly>\r\n                        <!-- <span class=\"max-size-indicator\">Max {{currentFreezerDimensions.racks}}</span> -->\r\n                    </div>\r\n                    <div class=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                        <label for=\"box\" class=\"required\">Box</label>\r\n                        <input id=\"box\" type=\"number\" min=\"1\" max=\"{{currentFreezerDimensions.boxes}}\"\r\n                            formControlName=\"box\" readonly>\r\n                        <!-- <span class=\"max-size-indicator\">Max {{currentFreezerDimensions.boxes}}</span> -->\r\n                    </div>\r\n                    <div class=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                        <label for=\"row\" class=\"required\">Row</label>\r\n                        <input id=\"row\" type=\"number\" min=\"1\" max=\"{{currentFreezerDimensions.rows}}\"\r\n                            formControlName=\"row\" readonly>\r\n                        <!-- <span class=\"max-size-indicator\">Max {{currentFreezerDimensions.rows}}</span> -->\r\n                    </div>\r\n                    <div class=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                        <label for=\"spot\" class=\"required\">Spot</label>\r\n                        <input id=\"spot\" type=\"number\" min=\"1\" max=\"{{currentFreezerDimensions.spots}}\"\r\n                            formControlName=\"spot\" readonly>\r\n                        <!-- <span class=\"max-size-indicator\">Max {{currentFreezerDimensions.spots}}</span> -->\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n            <section class=\"form-block\" formGroupName=\"next_empty_box\">\r\n                <label>\r\n                    <span class=\"box-section-label\">Next Available Box&nbsp;</span>|\r\n                    <span>&nbsp;Available spots:\r\n                        {{this.freezeForm.get('next_empty_box').get('available_spots_in_box').value}}\r\n                    </span>\r\n                </label>\r\n                <div class=\"form-group row\">\r\n                    <div class=\"col-lg-2 col-md-2 col-sm-12 col-xs-12\">\r\n                        <label class=\"required\">Share of Total</label>\r\n                    </div>\r\n                    <div class=\"col-lg-10 col-md-10 col-sm-12 col-xs-12\">\r\n                        <!-- <input type=\"number\" formControlName=\"aliquot_count_share\" class=\"input-small-number\">\r\n                        <span class=\"max-size-indicator\">Max {{nextBoxShareMax}}</span> -->\r\n\r\n                        <label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                            class=\"tooltip tooltip-validation tooltip-sm\"\r\n                            [class.invalid]=\"this.freezeForm.get('next_empty_box').get('aliquot_count_share').value > nextBoxShareMax\">\r\n                            <input id=\"name\" type=\"number\" class=\"form-control\" formControlName=\"aliquot_count_share\"\r\n                                min=\"0\" max=\"{{nextBoxShareMax}}\" readonly>\r\n                            <span class=\"tooltip-content\">Must be less than max. </span>\r\n                        </label>\r\n                        <!-- <span class=\"max-size-indicator\">Max {{nextBoxShareMax}} ({{nextBoxSetMax}} sets of\r\n                            {{this.freezeForm.get('aliquots_per_sample').value}})</span> -->\r\n                        <!-- <span class=\"max-size-indicator\">({{nextBoxSetMax}} sets of\r\n                            {{this.freezeForm.get('aliquots_per_sample').value}})</span> -->\r\n\r\n                    </div>\r\n\r\n                </div>\r\n                <div class=\"form-group row\">\r\n                    <div class=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                        <label for=\"rack\" class=\"required\">Rack</label>\r\n                        <input id=\"rack\" type=\"number\" min=\"1\" max=\"{{currentFreezerDimensions.racks}}\"\r\n                            formControlName=\"rack\">\r\n                        <span class=\"max-size-indicator\">Max {{currentFreezerDimensions.racks}}</span>\r\n                    </div>\r\n                    <div class=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                        <label for=\"box\" class=\"required\">Box</label>\r\n                        <input id=\"box\" type=\"number\" min=\"1\" max=\"{{currentFreezerDimensions.boxes}}\"\r\n                            formControlName=\"box\">\r\n                        <span class=\"max-size-indicator\">Max {{currentFreezerDimensions.boxes}}</span>\r\n                    </div>\r\n                    <div class=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                        <label for=\"row\" class=\"required\">Row</label>\r\n                        <input id=\"row\" type=\"number\" min=\"1\" max=\"{{currentFreezerDimensions.rows}}\"\r\n                            formControlName=\"row\" readonly>\r\n                        <!-- <span class=\"max-size-indicator\">Max {{currentFreezerDimensions.rows}}</span> -->\r\n                    </div>\r\n                    <div class=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                        <label for=\"spot\" class=\"required\">Spot</label>\r\n                        <input id=\"spot\" type=\"number\" min=\"1\" max=\"{{currentFreezerDimensions.spots}}\"\r\n                            formControlName=\"spot\" readonly>\r\n                        <!-- <span class=\"max-size-indicator\">Max {{currentFreezerDimensions.spots}}</span> -->\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            <section class=\"form-block\">\r\n\r\n                <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"freezeErrorFlag\">\r\n                    <div clr-alert-item class=\"alert-item\">\r\n                        <span class=\"alert-text\">Submission error. Aliquot records not recorded.</span>\r\n                        <span>{{errorMessage}}</span>\r\n                        <div class=\"alert-actions\">\r\n                            <a class=\"alert-action\" (click)=\"onSubmitFreezerLocation(freezeForm.value)\">Try again</a>\r\n                        </div>\r\n                    </div>\r\n                </clr-alert>\r\n\r\n                <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"aliquotCountErrorFlag\">\r\n                    <div clr-alert-item class=\"alert-item\">\r\n                        <span class=\"alert-text\">The aliquot share count exceeds total number of aliquots expected.\r\n                            Please\r\n                            adjust and submit again.</span>\r\n                        <!-- <div class=\"alert-actions\">\r\n                            <a class=\"alert-action\" (click)=\"onSubmitFreezerLocation(freezeForm.value)\">Try again</a>\r\n                        </div> -->\r\n                    </div>\r\n                </clr-alert>\r\n\r\n                <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"freezeSuccessFlag\">\r\n                    <div clr-alert-item class=\"alert-item\">\r\n                        <span class=\"alert-text\">Sample aliquot records and locations successfully submitted.</span>\r\n                        <div class=\"alert-actions\">\r\n                            <a class=\"alert-action\"\r\n                                (click)=\"freezerLocationAssignModalActive = false; freezeSuccessFlag = false; resetFlags();\">Close</a>\r\n                        </div>\r\n                    </div>\r\n                </clr-alert>\r\n                <button type=\"button\" class=\"btn btn-outline\"\r\n                    (click)=\"freezerLocationAssignModalActive = !freezerLocationAssignModalActive; resetFlags()\">Close</button>\r\n                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"freezeForm.invalid\"\r\n                    [clrLoading]=\"submitLoading\">Submit</button>\r\n\r\n            </section>\r\n        </form>\r\n        <!-- </div> -->\r\n        <!-- </div> -->\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n\r\n    </div>\r\n</clr-modal>\r\n<!-- end freezer location assignment modal-->\r\n\r\n<!-- begin freezer location lookup modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideFreezerLocationLookupModal\">\r\n    <h3 class=\"modal-title\">\r\n        <clr-icon shape=\"thermometer\"></clr-icon> Freezer Location Lookup\r\n    </h3>\r\n    <div class=\"modal-body\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12\" *ngIf=\"selected.length > 0\">\r\n                <div *ngFor=\"let sample of selected\">\r\n                    <h4 *ngIf=\"sample.aliquots.length === 0\">No aliquots recorded for Sample {{sample.id}}</h4>\r\n                    <table class=\"table table-compact\" style=\"width: 15em\" *ngIf=\"sample.aliquots.length > 0\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th class=\"left\">Aliquot</th>\r\n                                <th class=\"left\">Freezer</th>\r\n                                <th class=\"left\">Rack</th>\r\n                                <th class=\"left\">Box</th>\r\n                                <th class=\"left\">Row</th>\r\n                                <th class=\"left\">Spot</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr *ngFor=\"let aliquot of sample.aliquots\">\r\n                                <td class=\"left\">{{aliquot.aliquot_string}}</td>\r\n\r\n                                <td class=\"left\">\r\n                                    <span *ngIf=\"aliquot.freezer_location\">{{aliquot.freezer_location.freezer}}</span>\r\n                                </td>\r\n                                <td class=\"left\">\r\n                                    <span *ngIf=\"aliquot.freezer_location\">{{aliquot.freezer_location.rack}}</span>\r\n                                </td>\r\n                                <td class=\"left\">\r\n                                    <span *ngIf=\"aliquot.freezer_location\">{{aliquot.freezer_location.box}}</span>\r\n                                </td>\r\n                                <td class=\"left\">\r\n                                    <span *ngIf=\"aliquot.freezer_location\">{{aliquot.freezer_location.row}}</span>\r\n                                </td>\r\n                                <td class=\"left\">\r\n                                    <span *ngIf=\"aliquot.freezer_location\">{{aliquot.freezer_location.spot}}</span>\r\n                                </td>\r\n\r\n                            </tr>\r\n                        </tbody>\r\n\r\n                        <!-- <tbody>\r\n                            <tr *ngFor=\"let aliquot of sample.aliquots\">\r\n                                <td class=\"left\">{{aliquot.aliquot_string}}</td>\r\n\r\n                                <td class=\"left\">\r\n                                    <span\r\n                                        *ngIf=\"sample.aliquots[0]\">{{sample.aliquots[0].freezer_location.freezer}}</span>\r\n                                </td>\r\n                                <td class=\"left\">\r\n                                    <span *ngIf=\"sample.aliquots[0]\">{{sample.aliquots[0].freezer_location.rack}}</span>\r\n                                </td>\r\n                                <td class=\"left\">\r\n                                    <span *ngIf=\"sample.aliquots[0]\">{{sample.aliquots[0].freezer_location.box}}</span>\r\n                                </td>\r\n                                <td class=\"left\">\r\n                                    <span *ngIf=\"sample.aliquots[0]\">{{sample.aliquots[0].freezer_location.row}}</span>\r\n                                </td>\r\n                                <td class=\"left\">\r\n                                    <span *ngIf=\"sample.aliquots[0]\">{{sample.aliquots[0].freezer_location.spot}}</span>\r\n                                </td>\r\n\r\n                            </tr>\r\n                        </tbody> -->\r\n                    </table>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-footer\"></div>\r\n</clr-modal>\r\n<!-- end freezer location lookup modal-->\r\n\r\n<!-- begin inhibition lookup modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideInhibitionModal\">\r\n    <h3 class=\"modal-title\">\r\n        <clr-icon shape=\"view-list\"></clr-icon> View Sample Inhibitions: Sample {{selectedSampleId}}\r\n    </h3>\r\n    <div class=\"modal-body\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12\">\r\n\r\n                <div *ngIf=\"selectedSampleInhibitionArray.length === 0\">\r\n                    <h4>There are no inhibitions associated with this sample.</h4>\r\n                </div>\r\n\r\n                <div *ngIf=\"selectedSampleInhibitionArray.length > 0\">\r\n                    <div *ngFor=\"let inhibition of selectedSampleInhibitionArray; let i = index\">\r\n                        <label for=\"inhibitionTable\">Inhibition {{i+1}}</label>\r\n                        <table class=\"table table-vertical table-compact\" id=\"inhibitionTable\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Inhibition Date</th>\r\n                                    <td>{{inhibition.inhibition_date | date:'shortDate' }}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th>Dilution Factor</th>\r\n                                    <td>{{inhibition.dilution_factor == null ? \"Not Calculated\": inhibition.dilution_factor}}\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th>Inhibition Type</th>\r\n                                    <td>{{inhibition.nucleic_acid_type | displayValue:'name':this.nucleicAcidTypes}}\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <p>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-footer\"></div>\r\n</clr-modal>\r\n<!-- end inhibition location lookup modal-->\r\n\r\n<!-- begin freezer choice modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideFreezerChoiceModal\">\r\n    <h3 class=\"modal-title\">\r\n        <clr-icon shape=\"thermometer\"></clr-icon> Freezer\r\n    </h3>\r\n    <div class=\"modal-body\">\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12\">\r\n                <div>\r\n                    <h4>Sample Aliquot Freezer Location</h4>\r\n                </div>\r\n                <br>\r\n                <div>\r\n                    <button class=\"btn btn-primary\" (click)=\"assignFreezerLocation(selected)\">\r\n                        <clr-icon shape=\"plus\"></clr-icon> Create\r\n                    </button>\r\n                    <button class=\"btn btn-primary\" (click)=\"lookupFreezerLocation()\">\r\n                        <clr-icon shape=\"search\"></clr-icon> Lookup\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-footer\"></div>\r\n</clr-modal>\r\n<!-- end freezer location assignment modal-->\r\n\r\n<!-- begin freeze warning modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideFreezeWarningModal\">\r\n    <h3 class=\"modal-title\">\r\n        <clr-icon shape=\"warning-standard\" class=\"is-error\" size=\"36\"></clr-icon> Multiple Studies Error\r\n    </h3>\r\n    <div class=\"modal-body\">\r\n        <p>The selected set of samples is associated with more than one study. Please adjust selection.</p>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-outline\" (click)=\"showHideFreezeWarningModal = false\">Return</button>\r\n    </div>\r\n</clr-modal>\r\n<!-- end freeze warning modal -->\r\n\r\n<!-- begin FCSV exists warning modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideFCSVExistsErrorModal\">\r\n    <h3 class=\"modal-title\">\r\n        <clr-icon shape=\"warning-standard\" class=\"is-error\" size=\"36\"></clr-icon> Existing FCSV Error\r\n    </h3>\r\n    <div class=\"modal-body\">\r\n        <p>One or more samples in your selection already has a final concentrated sample volume recorded. Please adjust\r\n            selection.</p>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-outline\" (click)=\"showHideFCSVExistsErrorModal = false\">Return</button>\r\n    </div>\r\n</clr-modal>\r\n<!-- end FCSV exists warning modal -->\r\n\r\n<!-- begin print modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHidePrintModal\" [clrModalSize]=\"'xl'\">\r\n    <h3 class=\"modal-title\">Print Aliquot Labels</h3>\r\n    <div class=\"modal-body\">\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-lg-12\">\r\n\r\n                <form [formGroup]=\"skipLabelForm\">\r\n                    <section>\r\n                        <div>\r\n                            <label>Number of labels to skip:</label>\r\n                            <input type=\"number\" formControlName=\"count\" min=\"1\" class=\"input-small-number\">\r\n                        </div>\r\n\r\n                    </section>\r\n                </form>\r\n                <form>\r\n                    <section class=\"form-block\">\r\n                        <label>Select aliquots to print for each selected sample.</label>\r\n                        <div class=\"form-group\" *ngFor=\"let sample of selected\">\r\n                            <label for=\"\">Sample {{sample.id}}</label>\r\n\r\n                            <div *ngIf=\"sample.aliquots.length === 0\">\r\n                                <clr-icon shape=\"times-circle\"></clr-icon> No aliquots recorded for this sample\r\n                            </div>\r\n\r\n                            <div *ngIf=\"sample.aliquots.length > 0\">\r\n\r\n                                <div class=\"checkbox-inline\" *ngFor=\"let aliquot of sample.aliquots\">\r\n                                    <input type=\"checkbox\" checked [attr.id]=\"'aliquot' + aliquot.aliquot_string\"\r\n                                        [value]=\"aliquot.aliquot_string\" (change)=\"includeExcludeLabel($event.target)\">\r\n                                    <label\r\n                                        [attr.for]=\"'aliquot' + aliquot.aliquot_string\">{{aliquot.aliquot_string}}</label>\r\n                                    <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n                            <!-- <select name=\"aliquot_select\" (change)=\"onAliquotSelect(sample.id, $event.target.value)\">\r\n                                        <option [value]=\"\">Select</option>\r\n                                        <option *ngFor=\"let aliquot of sample.aliquots\" [value]=\"aliquot.id\">{{aliquot.aliquot_string}}</option>\r\n                                    </select> -->\r\n                        </div>\r\n\r\n                    </section>\r\n                </form>\r\n\r\n            </div>\r\n            <!--<div class=\"col-lg-6\">\r\n            </div>-->\r\n        </div>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-outline\"\r\n            (click)=\"showHidePrintModal = !showHidePrintModal; resetFlags();\">Close</button>\r\n        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"createLabelPDF()\">\r\n            <clr-icon shape=\"list\"></clr-icon> Preview & Print Labels\r\n        </button>\r\n    </div>\r\n</clr-modal>\r\n<!-- end print modal -->\r\n\r\n<!-- begin Missing FCSV Error Modal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideMissingFCSVErrorModal\">\r\n    <h3 class=\"modal-title\">\r\n        <clr-icon shape=\"warning-standard\" class=\"is-error\" size=\"36\"></clr-icon> Missing FCSV Error\r\n    </h3>\r\n    <div class=\"modal-body\">\r\n        <p>One or more samples in your selection lacks a value for final concentrated sample volume where one is\r\n            required.\r\n            FCSV is a prerequisite to creation and storage of aliquots for samples with the matrix water, wastewater, or\r\n            forage/sediment/soil. Please add an FCSV for samples of those matrices in your selection and try again. </p>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-outline\" (click)=\"showHideMissingFCSVErrorModal = false\">Return</button>\r\n    </div>\r\n</clr-modal>\r\n<!-- end  Missing FCSV Error Modal-->\r\n\r\n<!-- begin Multiple SamplesErrorModal -->\r\n<clr-modal [(clrModalOpen)]=\"showHideMultipleSamplesErrorModal\">\r\n    <h3 class=\"modal-title\">\r\n        <clr-icon shape=\"warning-standard\" class=\"is-error\" size=\"36\"></clr-icon> Multiple Samples Error\r\n    </h3>\r\n    <div class=\"modal-body\">\r\n        <p>You many only freeze one sample at a time. Please reduce your selection to one sample and try again. </p>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-outline\"\r\n            (click)=\"showHideMultipleSamplesErrorModal = false\">Return</button>\r\n    </div>\r\n</clr-modal>\r\n<!-- end freeze warning modal -->\r\n\r\n<!-- begin SampleLabelModal -->\r\n<clr-modal [(clrModalOpen)]=\"showLabelModal\" [clrModalSize]=\"'xl'\">\r\n    <h3 class=\"modal-title\">Sample Label Preview</h3>\r\n    <div class=\"modal-body\">\r\n        <sample-label #sampleLabel></sample-label>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-outline\"\r\n            (click)=\"showLabelModal = !showLabelModal; resetFlags()\">Close</button>\r\n    </div>\r\n</clr-modal>\r\n<!-- end SampleLabelModal -->\r\n\r\n<!-- Begin Sample query form -->\r\n<div class=\"card-text\">\r\n    <form class=\"form compact\" [formGroup]=\"sampleQueryForm\" (ngSubmit)=\"onSubmitSampleQuery(sampleQueryForm.value)\">\r\n        <section class=\"form-block\">\r\n\r\n            <div class=\"form-group\">\r\n                <label [ngClass]=\"{'required': addSampleForm.get('study').enabled}\">Study</label>\r\n                <label for=\"studySelect\" aria-haspopup=\"true\" role=\"tooltip\"\r\n                    class=\"tooltip tooltip-validation tooltip-sm\"\r\n                    [class.invalid]=\"addSampleForm.get('study').invalid && (addSampleForm.get('study').dirty || addSampleForm.get('study').touched)\">\r\n                    <div class=\"select\">\r\n                        <select id=\"studySelect\" name=\"study\" formControlName=\"study\">\r\n                            <option value=\"\">\r\n                                <span class=\"all\">ALL STUDIES</span>\r\n                            </option>\r\n                            <option *ngFor=\"let study of studies\" [value]=\"study.id\">{{study.name}}</option>\r\n                        </select>\r\n                    </div>\r\n                </label>\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n                <label>Sample ID Range</label>\r\n                <span>From</span>\r\n                <input type=\"number\" formControlName=\"from_id\">\r\n                <span>To</span>\r\n                <input type=\"number\" formControlName=\"to_id\">\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n                <label>Collection Start Date Range</label>\r\n                <span>From</span>\r\n                <input type=\"date\" formControlName=\"from_collection_start_date\">\r\n                <span>To</span>\r\n                <input type=\"date\" formControlName=\"to_collection_start_date\">\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n                <label>Collaborator Sample ID</label>\r\n                <input id=\"collabSampleIdInput\" type=\"text\" formControlName=\"collaborator_sample_id\">\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n                <label>Matrix</label>\r\n                <div class=\"select\">\r\n                    <select id=\"matrixSelect\" name=\"matrix\" formControlName=\"matrix\">\r\n                        <option value=\"\">\r\n                            <span class=\"all\">ALL MATRICES</span>\r\n                        </option>\r\n                        <option *ngFor=\"let matrix of matrices\" [value]=\"matrix.id\">{{matrix.name}}</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n                <label>Sample type</label>\r\n                <div class=\"select\">\r\n                    <select id=\"sampleTypeSelect\" name=\"sample_type\" formControlName=\"sample_type\">\r\n                        <option value=\"\">\r\n                            <span class=\"all\">ALL SAMPLE TYPES</span>\r\n                        </option>\r\n                        <option *ngFor=\"let sampleType of sampleTypes\" [value]=\"sampleType.id\">{{sampleType.name}}\r\n                        </option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n                <label>Peg Neg (returns associated samples)</label>\r\n                <input type=\"number\" formControlName=\"peg_neg\">\r\n            </div>\r\n\r\n        </section>\r\n\r\n        <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"sampleQuerySizeErrorFlag\">\r\n            <div class=\"alert-item\">\r\n                <span class=\"alert-text\">Your query results are too large (greater than {{queryCountLimit}}). Please\r\n                    narrow\r\n                    your search.</span>\r\n            </div>\r\n        </clr-alert>\r\n\r\n        <button class=\"btn btn-primary\" type=\"submit\" [clrLoading]=\"submitLoading\">Filter Samples</button>\r\n    </form>\r\n</div>\r\n<!-- End Sample query form -->\r\n\r\n<div *ngIf=\"sampleQueryComplete\">\r\n    <h4>Query returned {{samplesCount}} sample records</h4>\r\n</div>\r\n\r\n\r\n\r\n<!-- begin samples table -->\r\n<div class=\"row\">\r\n    <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n\r\n        <clr-datagrid [(clrDgSelected)]=\"selected\" [clrDgLoading]=\"samplesLoading\" [clDgRowSelection]=\"true\">\r\n\r\n            <clr-dg-action-bar>\r\n                <div class=\"btn-group\">\r\n                    <button class=\"btn btn-sm btn-secondary\" (click)=\"addSample()\">\r\n                        <clr-icon shape=\"plus\"></clr-icon> Add Sample\r\n                    </button>\r\n                    <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                        [disabled]=\"selected.length == 0 || selected.length > 1\" (click)=\"editSample(selected[0])\">\r\n                        <clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit Sample\r\n                    </button>\r\n                    <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                        [disabled]=\"selected.length == 0 || selected.length > 1\" (click)=\"deleteSample(selected[0])\">\r\n                        <clr-icon shape=\"trash\" size=\"16\"></clr-icon> Delete Sample\r\n                    </button>\r\n                    <button class=\"btn btn-sm btn-secondary\" (click)=\"showHideAddPegNeg = !showHideAddPegNeg\">\r\n                        <clr-icon shape=\"plus\"></clr-icon> Add Peg Neg\r\n                    </button>\r\n                    <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"selected.length < 1\"\r\n                        (click)=\"createAB(selected)\">\r\n                        <clr-icon shape=\"plus\"></clr-icon> Create Analysis Batch\r\n                    </button>\r\n                    <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"selected.length < 1\"\r\n                        (click)=\"createFCSV(selected)\">\r\n                        <clr-icon shape=\"plus\"></clr-icon> Add FCSV\r\n                    </button>\r\n                    <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                        [disabled]=\"selected.length == 0 || selected.length > 1\" (click)=\"editFCSV(selected)\">\r\n                        <clr-icon shape=\"note-edit\"></clr-icon> Edit FCSV\r\n                    </button>\r\n                    <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"selected.length < 1\"\r\n                        (click)=\"openFreezerChoice()\">\r\n                        <clr-icon shape=\"thermometer\"></clr-icon> Freezer\r\n                    </button>\r\n                    <button type=\"button\" class=\"btn btn-sm btn-secondary\"\r\n                        [disabled]=\"selected.length == 0 || selected.length > 1\" (click)=\"openInhibitionModal(selected)\"\r\n                        [clrLoading]=\"sampleInhibitionsLoadingFlag\">\r\n                        <clr-icon shape=\"view-list\"></clr-icon> View Inhibitions\r\n                    </button>\r\n                    <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"selected.length < 1\"\r\n                        (click)=\"openPrintLabelModal(selected)\">\r\n                        <clr-icon shape=\"printer\"></clr-icon> Print Labels\r\n                    </button>\r\n                    <!-- <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"selected.length == 0 || selected.length > 1\">\r\n                        <clr-icon shape=\"trash\"></clr-icon> Delete Sample</button> -->\r\n                    <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"deselectAll()\">\r\n                        <clr-icon shape=\"window-close\" size=\"16\"></clr-icon> Deselect All\r\n                    </button>\r\n                    <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"exportToCSV()\">\r\n                        <clr-icon shape=\"export\" size=\"16\"></clr-icon> Export to CSV\r\n                    </button>\r\n\r\n\r\n                </div>\r\n            </clr-dg-action-bar>\r\n\r\n            <clr-dg-column [clrDgField]=\"'id'\">\r\n                Sample ID\r\n                <clr-dg-filter [clrDgFilter]=\"rangeFilter\">\r\n                    <range-filter #rangeFilter></range-filter>\r\n                </clr-dg-filter>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'analysisbatches'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Analysis Batches\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'collaborator_sample_id'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Collaborator Sample ID\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'study_string'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Study\r\n                </ng-container>\r\n                <clr-dg-filter [clrDgFilter]=\"studyFilter\">\r\n                    <study-filter #studyFilter></study-filter>\r\n                </clr-dg-filter>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'sample_type_string'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Sample Type\r\n                </ng-container>\r\n                <clr-dg-filter [clrDgFilter]=\"sampleTypeFilter\">\r\n                    <sample-type-filter #sampleTypeFilter></sample-type-filter>\r\n                </clr-dg-filter>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'record_type_string'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Record Type\r\n                </ng-container>\r\n                <clr-dg-filter [clrDgFilter]=\"recordTypeFilter\">\r\n                    <record-type-filter #recordTypeFilter></record-type-filter>\r\n                </clr-dg-filter>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column style=\"width:20em\" [clrDgField]=\"'sample_description'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Sample Description\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'matrix_string'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Matrix\r\n                </ng-container>\r\n                <clr-dg-filter [clrDgFilter]=\"matrixTypeFilter\">\r\n                    <matrix-type-filter #matrixTypeFilter></matrix-type-filter>\r\n                </clr-dg-filter>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'filter_flag'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Filtered\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'secondary_concentration_flag'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    2° Conc\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'fcsv'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    FCSV (mL)\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'fcsv_concentration_type_string'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    FCSV Type\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'fcsv_notes'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    FCSV Notes\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'total_volume_or_mass_sampled'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Total Volume Sampled (L)\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'meter_reading_initial'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    IMR\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'meter_reading_final'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    FMR\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'dissolution_volume'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Dissolution Volume (mL)\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'post_dilution_volume'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Volume After Dilution (uL)\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'filter_type_string'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Filter Type\r\n                </ng-container>\r\n                <clr-dg-filter [clrDgFilter]=\"filterTypeFilter\">\r\n                    <filter-type-filter #filterTypeFilter></filter-type-filter>\r\n                </clr-dg-filter>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'filter_born_on_date'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Filter Born On Date\r\n                </ng-container>\r\n                <clr-dg-filter [clrDgFilter]=\"filterBornOnDateFilter\">\r\n                    <filter-born-on-date-filter [dateField]=\"'filter_born_on_date'\" #filterBornOnDateFilter>\r\n                    </filter-born-on-date-filter>\r\n                </clr-dg-filter>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'collection_start_date'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Collect Start Date\r\n                </ng-container>\r\n                <clr-dg-filter [clrDgFilter]=\"CollectionStartDateFilter\">\r\n                    <collection-start-date-filter [dateField]=\"'collection_start_date'\" #CollectionStartDateFilter>\r\n                    </collection-start-date-filter>\r\n                </clr-dg-filter>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'collection_end_date'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Collect End Date\r\n                </ng-container>\r\n                <clr-dg-filter [clrDgFilter]=\"collectionEndDateFilter\">\r\n                    <collection-end-date-filter [dateField]=\"'collection_end_date'\" #collectionEndDateFilter>\r\n                    </collection-end-date-filter>\r\n                </clr-dg-filter>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'study_site_name'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Study Site Name\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'sampler_name'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Sampler Name\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column style=\"width:20em\" [clrDgField]=\"'sample_notes'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Sample Notes\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'created_by'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: true}\">\r\n                    Added by\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'created_date'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Date Added\r\n                </ng-container>\r\n                <clr-dg-filter [clrDgFilter]=\"dateAddedFilter\">\r\n                    <date-added-filter [dateField]=\"'created_date'\" #dateAddedFilter></date-added-filter>\r\n                </clr-dg-filter>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'modified_by'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: true}\">\r\n                    Updated by\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'modified_date'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Date Updated\r\n                </ng-container>\r\n                <clr-dg-filter [clrDgFilter]=\"dateUpdatedFilter\">\r\n                    <date-updated-filter [dateField]=\"'modified_date'\" #dateUpdatedFilter></date-updated-filter>\r\n                </clr-dg-filter>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-placeholder>No samples</clr-dg-placeholder>\r\n\r\n            <clr-dg-row *clrDgItems=\"let sample of allSamples\" [clrDgItem]=\"sample\">\r\n                <clr-dg-cell>{{sample.id}}</clr-dg-cell>\r\n                <clr-dg-cell>\r\n                    <span *ngFor=\"let ab of sample.analysisbatches\">&#8226;&nbsp;{{ab}}\r\n                        <br>\r\n                    </span>\r\n                </clr-dg-cell>\r\n                <clr-dg-cell>{{sample.collaborator_sample_id}}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.study_string}}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.sample_type_string}}</clr-dg-cell>\r\n                <!-- <clr-dg-cell>{{sample.record_type | displayValue:'name':this.recordTypes}}</clr-dg-cell> -->\r\n                <clr-dg-cell>{{sample.record_type_string}}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.sample_description}}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.matrix_string}}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.filter_flag? \"Yes\" : \"No\"}}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.secondary_concentration_flag ? \"Yes\" : \"No\"}}</clr-dg-cell>\r\n                <clr-dg-cell>\r\n                    <span\r\n                        *ngIf=\"sample.finalconcentratedsamplevolume\">{{sample.finalconcentratedsamplevolume.final_concentrated_sample_volume | number : '1.2-6' }}</span>\r\n                </clr-dg-cell>\r\n                <clr-dg-cell>\r\n                    <span\r\n                        *ngIf=\"sample.finalconcentratedsamplevolume\">{{sample.finalconcentratedsamplevolume.concentration_type_string}}</span>\r\n                </clr-dg-cell>\r\n                <clr-dg-cell>\r\n                    <span\r\n                        *ngIf=\"sample.finalconcentratedsamplevolume\">{{sample.finalconcentratedsamplevolume.notes}}</span>\r\n                </clr-dg-cell>\r\n                <clr-dg-cell>{{sample.total_volume_or_mass_sampled | number : '1.2-6' }}</clr-dg-cell>\r\n                <clr-dg-cell *ngIf=\"this.units\">{{sample.meter_reading_initial | number : '1.2-6' }} {{sample.meter_reading_unit\r\n                    | displayValue:'symbol':this.units}}</clr-dg-cell>\r\n                <clr-dg-cell *ngIf=\"this.units\">{{sample.meter_reading_final | number : '1.2-6' }} {{sample.meter_reading_unit\r\n                    | displayValue:'symbol':this.units}}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.dissolution_volume | number : '1.2-6' }}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.post_dilution_volume | number : '1.2-6' }}</clr-dg-cell>\r\n                <clr-dg-cell *ngIf=\"this.filterTypes\">{{sample.filter_type_string}}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.filter_born_on_date | date:'shortDate'}}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.collection_start_date | date:'shortDate'}}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.collection_end_date | date:'shortDate'}}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.study_site_name}}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.sampler_name}}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.sample_notes}}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.created_by}}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.created_date | date:'shortDate'}}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.modified_by }}</clr-dg-cell>\r\n                <clr-dg-cell>{{sample.modified_date | date:'shortDate'}}</clr-dg-cell>\r\n            </clr-dg-row>\r\n\r\n            <clr-dg-footer>\r\n                {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{pagination.totalItems}} samples\r\n                <clr-dg-pagination #pagination [clrDgPageSize]=\"20\"></clr-dg-pagination>\r\n            </clr-dg-footer>\r\n        </clr-datagrid>\r\n    </div>\r\n</div>\r\n<!-- end samples table -->"

/***/ }),

/***/ "./src/app/samples/samples.component.scss":
/***/ (function(module, exports) {

module.exports = ".datagrid .datagrid-column, .datagrid .datagrid-cell .no-padding {\n  padding: 0px; }\n\n.ten {\n  min-width: 4em; }\n\n.input-small-number {\n  width: 5em; }\n\n.last-spot-border {\n  border-style: solid;\n  padding: 5px;\n  border-radius: 5px; }\n\n.fcsv-input {\n  width: 5em; }\n\n.text-bold {\n  font-style: bold !important; }\n\n.suggestions {\n  position: relative;\n  background-color: #f1f1f1;\n  min-width: 160px;\n  -webkit-box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\n          box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\n  z-index: 1; }\n\n.suggestions a {\n  color: black;\n  padding: 12px 16px;\n  text-decoration: none;\n  display: block; }\n\n.box-section-label {\n  font-style: bold !important;\n  font-size: larger; }\n\n.max-size-indicator {\n  font-style: italic !important; }\n\n.suggestions a:hover {\n  background-color: #ddd; }\n"

/***/ }),

/***/ "./src/app/samples/samples.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var sample_service_1 = __webpack_require__("./src/app/samples/sample.service.ts");
var freezer_service_1 = __webpack_require__("./src/app/aliquots/freezer.service.ts");
var freezer_locations_service_1 = __webpack_require__("./src/app/aliquots/freezer-locations.service.ts");
var aliquot_service_1 = __webpack_require__("./src/app/aliquots/aliquot.service.ts");
var final_concentrated_sample_volume_service_1 = __webpack_require__("./src/app/fcsv/final-concentrated-sample-volume.service.ts");
var sample_type_service_1 = __webpack_require__("./src/app/SHARED/sample-type.service.ts");
var filter_type_service_1 = __webpack_require__("./src/app/SHARED/filter-type.service.ts");
var concentration_types_service_1 = __webpack_require__("./src/app/concentration-types/concentration-types.service.ts");
var matrix_service_1 = __webpack_require__("./src/app/SHARED/matrix.service.ts");
var study_service_1 = __webpack_require__("./src/app/studies/study.service.ts");
var unit_service_1 = __webpack_require__("./src/app/units/unit.service.ts");
var user_service_1 = __webpack_require__("./src/app/SHARED/user.service.ts");
var analysis_batch_service_1 = __webpack_require__("./src/app/analysis-batches/analysis-batch.service.ts");
var clarity_angular_1 = __webpack_require__("./node_modules/clarity-angular/clarity-angular.es5.js");
var app_utilities_1 = __webpack_require__("./src/app/app.utilities.ts");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var SamplesComponent = (function () {
    function SamplesComponent(_sampleService, _finalConcentratedSampleVolumeService, _studyService, _sampleTypeService, _freezerService, _freezerLocationsService, _aliquotService, _filterTypeService, _concentrationTypeService, _matrixService, _unitService, _userService, _analysisBatchService, formBuilder) {
        var _this = this;
        this._sampleService = _sampleService;
        this._finalConcentratedSampleVolumeService = _finalConcentratedSampleVolumeService;
        this._studyService = _studyService;
        this._sampleTypeService = _sampleTypeService;
        this._freezerService = _freezerService;
        this._freezerLocationsService = _freezerLocationsService;
        this._aliquotService = _aliquotService;
        this._filterTypeService = _filterTypeService;
        this._concentrationTypeService = _concentrationTypeService;
        this._matrixService = _matrixService;
        this._unitService = _unitService;
        this._userService = _userService;
        this._analysisBatchService = _analysisBatchService;
        this.formBuilder = formBuilder;
        this.pegnegs = [];
        this.showHideAdd = false;
        this.showHideAddPegNeg = false;
        this.showHideEdit = false;
        this.showHideABModal = false;
        this.addFCSVModalActive = false;
        this.editFCSVModalActive = false;
        this.freezerLocationAssignModalActive = false;
        this.showHidePrintModal = false;
        this.showHideFreezeWarningModal = false;
        this.showHideFreezerChoiceModal = false;
        this.showHideFreezerLocationLookupModal = false;
        this.showHideMultipleSamplesErrorModal = false;
        this.showHideInhibitionModal = false;
        this.showLabelModal = false;
        this.sampleSelected = false;
        this.displayConfig = {};
        this.sampleQueryComplete = false;
        this.samplesLoading = false;
        this.submitLoading = false;
        this.selected = [];
        this.submitted = false;
        this.showSampleCreateError = false;
        this.showSampleCreateSuccess = false;
        this.showSampleEditError = false;
        this.showSampleEditSuccess = false;
        this.showABCreateError = false;
        this.showABCreateSuccess = false;
        this.showFCSVCreateError = false;
        this.showFCSVCreateSuccess = false;
        this.showFCSVEditError = false;
        this.showFCSVEditSuccess = false;
        this.freezeErrorFlag = false;
        this.freezeSuccessFlag = false;
        this.sampleVolumeErrorFlag = false;
        this.showHideFCSVExistsErrorModal = false;
        this.selectedSampleInhibitionArray = [];
        this.fcsvValuesMissingFlag = false;
        this.sampleInhibitionsLoadingFlag = false;
        this.showLastOccupiedSpotError = false;
        this.noCurrentBoxFlag = false;
        this.noCurrentBoxMessage = '';
        this.aliquotCountErrorFlag = false;
        this.initialMeterReading = 2;
        this.currentFreezerDimensions = {
            "racks": null,
            "boxes": null,
            "rows": null,
            "spots": null,
        };
        this.samplerNames = [];
        this.showHideMissingFCSVErrorModal = false;
        // aliquotLabelTextArray = [{"aliquot_string": "", "collaborator_sample_id": ""}]
        this.aliquotLabelTextArray = [];
        this.sampleQuerySizeErrorFlag = false;
        this.pegnegQuerySizeErrorFlag = false;
        this.pegnegQueryBlankFlag = false;
        this.pegnegListLoading = false;
        this.nucleicAcidTypes = [];
        this.exportColumns = [
            { fieldName: 'id', colName: "Sample ID" },
            { fieldName: 'analysisbatches', colName: "Analysis Batches" },
            { fieldName: 'collaborator_sample_id', colName: "Collaborator Sample ID" },
            { fieldName: 'study_string', colName: "Study" },
            { fieldName: 'sample_type_string', colName: "Sample Type" },
            { fieldName: 'record_type_string', colName: "Record Type" },
            { fieldName: 'sample_description', colName: "Sample Description" },
            { fieldName: 'matrix_string', colName: "Matrix" },
            { fieldName: 'filter_flag', colName: "Filtered" },
            { fieldName: 'secondary_concentration_flag', colName: "Secondary Concentration" },
            { fieldName: 'fcsv', colName: "FCSV (mL)" },
            { fieldName: 'fcsv_concentration_type_string', colName: "FCSV Type" },
            { fieldName: 'fcsv_notes', colName: "FCSV Notes" },
            { fieldName: 'total_volume_or_mass_sampled', colName: "Total Volume Sampled (L)" },
            { fieldName: 'meter_reading_initial', colName: "IMR" },
            { fieldName: 'meter_reading_final', colName: "FMR" },
            { fieldName: 'dissolution_volume', colName: "Dissolution Volume (mL)" },
            { fieldName: 'post_dilution_volume', colName: "Volume After Dilution (uL)" },
            { fieldName: 'filter_type_string', colName: "Filter Type" },
            { fieldName: 'filter_born_on_date', colName: "Filter Born On Date" },
            { fieldName: 'collection_start_date', colName: "Collect Start Date" },
            { fieldName: 'collection_end_date', colName: "Collect End Date" },
            { fieldName: 'study_site_name', colName: "Study Site Name" },
            { fieldName: 'sampler_name', colName: "Sampler Name" },
            { fieldName: 'sample_notes', colName: "Sample Notes" },
            { fieldName: 'created_by', colName: "Added by" },
            { fieldName: 'created_date', colName: "Date Added" },
            { fieldName: 'modified_by ', colName: "Updated by" },
            { fieldName: 'modified_date', colName: "Date Updated" }
        ];
        // edit sample form
        this.editSampleForm = new forms_1.FormGroup({
            // the following controls apply to every sample record, regardless of matrix selected
            id: new forms_1.FormControl(null),
            sample_type: new forms_1.FormControl(null, forms_1.Validators.required),
            matrix: new forms_1.FormControl({ value: null, disabled: false }, forms_1.Validators.required),
            filter_type: new forms_1.FormControl(null),
            study: new forms_1.FormControl(null, forms_1.Validators.required),
            study_site_name: new forms_1.FormControl(''),
            collaborator_sample_id: new forms_1.FormControl('', forms_1.Validators.required),
            sampler_name: new forms_1.FormControl(''),
            sample_notes: new forms_1.FormControl(''),
            sample_description: new forms_1.FormControl(''),
            arrival_date: new forms_1.FormControl(''),
            arrival_notes: new forms_1.FormControl(''),
            collection_start_date: new forms_1.FormControl(null, forms_1.Validators.required),
            // the following controls have variable display needs based on the matrix selected
            collection_start_time: new forms_1.FormControl(null),
            collection_end_date: new forms_1.FormControl(null),
            collection_end_time: new forms_1.FormControl(null),
            meter_reading_initial: new forms_1.FormControl(null),
            meter_reading_final: new forms_1.FormControl(null),
            meter_reading_unit: new forms_1.FormControl(null),
            total_volume_sampled_initial: new forms_1.FormControl(null),
            total_volume_sampled_unit_initial: new forms_1.FormControl(null),
            total_volume_or_mass_sampled: new forms_1.FormControl(null),
            sample_volume_initial: new forms_1.FormControl(null),
            filter_born_on_date: new forms_1.FormControl(null),
            filter_flag: new forms_1.FormControl(false),
            secondary_concentration_flag: new forms_1.FormControl(false),
            elution_notes: new forms_1.FormControl(''),
            technician_initials: new forms_1.FormControl(''),
            dissolution_volume: new forms_1.FormControl(null),
            post_dilution_volume: new forms_1.FormControl(null),
            peg_neg: new forms_1.FormControl(null)
        });
        this.addPegNegForm = new forms_1.FormGroup({
            // the following controls apply to every sample record, regardless of matrix selected
            sample_type: new forms_1.FormControl(null),
            matrix: new forms_1.FormControl(null),
            filter_type: new forms_1.FormControl(null),
            study: new forms_1.FormControl(null),
            study_site_name: new forms_1.FormControl(''),
            collaborator_sample_id: new forms_1.FormControl(''),
            sampler_name: new forms_1.FormControl(''),
            sample_notes: new forms_1.FormControl(''),
            sample_description: new forms_1.FormControl(''),
            arrival_date: new forms_1.FormControl(null),
            arrival_notes: new forms_1.FormControl(''),
            collection_start_date: new forms_1.FormControl(null, forms_1.Validators.required),
            meter_reading_initial: new forms_1.FormControl(null),
            meter_reading_final: new forms_1.FormControl(null),
            meter_reading_unit: new forms_1.FormControl(null),
            total_volume_sampled_initial: new forms_1.FormControl(null),
            total_volume_sampled_unit_initial: new forms_1.FormControl(null),
            total_volume_or_mass_sampled: new forms_1.FormControl(null),
            sample_volume_initial: new forms_1.FormControl(null),
            filter_born_on_date: new forms_1.FormControl(null),
            filter_flag: new forms_1.FormControl(false),
            secondary_concentration_flag: new forms_1.FormControl(false),
            elution_notes: new forms_1.FormControl(''),
            technician_initials: new forms_1.FormControl(''),
            dissolution_volume: new forms_1.FormControl(null),
            record_type: new forms_1.FormControl(2)
        });
        this.skipLabelForm = new forms_1.FormGroup({
            count: new forms_1.FormControl("0")
        });
        this.createABForm = new forms_1.FormGroup({
            new_samples: new forms_1.FormControl([]),
            name: new forms_1.FormControl(''),
            analysis_batch_description: new forms_1.FormControl(''),
            analysis_batch_notes: new forms_1.FormControl('')
        });
        this.editFCSVForm = new forms_1.FormGroup({
            id: new forms_1.FormControl(null),
            sample: new forms_1.FormControl(null),
            concentration_type: new forms_1.FormControl(null),
            final_concentrated_sample_volume: new forms_1.FormControl(null),
            notes: new forms_1.FormControl('')
        });
        this.validateFinalMeterReading = function (control) {
            var value = control.value;
            if (_this.addSampleForm.get('meter_reading_initial').value === null) {
                return null;
            }
            ;
            if (value <= _this.addSampleForm.get('meter_reading_initial').value) {
                return {
                    value: {
                        value: value
                    }
                };
            }
            return null;
        };
        this.validateInitialMeterReading = function (control) {
            var value = control.value;
            if (_this.addSampleForm.get('meter_reading_final').value === null) {
                return null;
            }
            ;
            if (value >= _this.addSampleForm.get('meter_reading_final').value) {
                return {
                    value: {
                        value: value
                    }
                };
            }
            return null;
        };
        this.buildSampleQueryForm();
        this.buildAddSampleForm();
        this.buildCreateFCSVForm();
        this.buildFreezeForm();
        this.pegnegFromDate = new forms_1.FormControl();
        this.pegnegToDate = new forms_1.FormControl();
    }
    SamplesComponent.prototype.buildFreezeForm = function () {
        this.freezeForm = this.formBuilder.group({
            freezer: [1, forms_1.Validators.required],
            frozen: [true, forms_1.Validators.required],
            aliquots_per_sample: 3,
            total_aliquots: null,
            available_spots_in_box: null,
            aliquot_count_share: [{ value: 0 }, [forms_1.Validators.required, forms_1.Validators.min(0), forms_1.Validators.max(this.currentBoxShareMax)]],
            rack: [{ value: null }, [forms_1.Validators.required, forms_1.Validators.min(1)]],
            box: [{ value: null }, [forms_1.Validators.required, forms_1.Validators.min(1)]],
            row: [{ value: null }, [forms_1.Validators.required, forms_1.Validators.min(1)]],
            spot: [{ value: null }, [forms_1.Validators.required, forms_1.Validators.min(1)]],
            next_empty_box: this.formBuilder.group({
                aliquot_count_share: [{ value: 0 }, [forms_1.Validators.min(0), forms_1.Validators.max(this.nextBoxShareMax)]],
                available_spots_in_box: null,
                rack: [{ value: null }, [forms_1.Validators.required, forms_1.Validators.min(1)]],
                box: [{ value: null }, [forms_1.Validators.required, forms_1.Validators.min(1)]],
                row: [{ value: null }, [forms_1.Validators.required, forms_1.Validators.min(1)]],
                spot: [{ value: null }, [forms_1.Validators.required, forms_1.Validators.min(1)]],
            })
        });
    };
    ;
    SamplesComponent.prototype.buildAddSampleForm = function () {
        this.addSampleForm = this.formBuilder.group({
            // the following controls apply to every sample record, regardless of matrix selected
            matrix: [{ value: null, disabled: false }, forms_1.Validators.required],
            sample_type: [{ value: null, disabled: true }, forms_1.Validators.required],
            filter_type: [{ value: null, disabled: true }, forms_1.Validators.required],
            study: [{ value: null, disabled: true }, forms_1.Validators.required],
            study_site_name: [{ value: '', disabled: true }],
            collaborator_sample_id: [{ value: null, disabled: true }, forms_1.Validators.required],
            sampler_name: [{ value: '', disabled: true }],
            sample_notes: [{ value: '', disabled: true }],
            sample_description: [{ value: '', disabled: true }],
            arrival_date: [{ value: null, disabled: true }],
            arrival_notes: [{ value: '', disabled: true }],
            collection_start_date: [{ value: null, disabled: true }, forms_1.Validators.required],
            // the following controls have variable display needs based on the matrix selected
            collection_start_time: [{ value: null, disabled: false }, forms_1.Validators.pattern('\\d\\d:\\d\\d')],
            collection_end_date: [{ value: null, disabled: true }],
            collection_end_time: [{ value: null, disabled: true }, forms_1.Validators.pattern('\\d\\d:\\d\\d')],
            meter_reading_initial: [{ value: null, disabled: true }, [forms_1.Validators.min(0), this.validateInitialMeterReading.bind(this)]],
            meter_reading_final: [{ value: null, disabled: true }, [forms_1.Validators.min(0), this.validateFinalMeterReading.bind(this)]],
            meter_reading_unit: [{ value: null, disabled: true }],
            // total_volume_sampled_initial is the intital volume entered, before conversion based on unit selection
            total_volume_sampled_initial: [{ value: null, disabled: true }],
            total_volume_sampled_unit_initial: [{ value: null, disabled: true }],
            sample_volume_initial: [{ value: null, disabled: true }],
            filter_born_on_date: [{ value: null, disabled: true }],
            filter_flag: [{ value: false, disabled: true }],
            secondary_concentration_flag: [{ value: false, disabled: true }],
            technician_initials: [{ value: '', disabled: true }],
            elution_notes: [{ value: '', disabled: true }],
            dissolution_volume: [{ value: null, disabled: true }],
            post_dilution_volume: [{ value: null, disabled: true }],
            peg_neg: null
        });
    };
    SamplesComponent.prototype.buildCreateFCSVForm = function () {
        this.createFCSVForm = this.formBuilder.group({
            fcsv_array: this.formBuilder.array([
                this.formBuilder.group({
                    sample: null,
                    concentration_type: [null, forms_1.Validators.required],
                    final_concentrated_sample_volume: [null, forms_1.Validators.required],
                    fcsv_units: [5, forms_1.Validators.required],
                    notes: ''
                })
            ])
        });
        this.fcsvArray = this.createFCSVForm.get('fcsv_array');
    };
    SamplesComponent.prototype.buildSampleQueryForm = function () {
        this.sampleQueryForm = this.formBuilder.group({
            study: null,
            from_id: null,
            to_id: null,
            from_collection_start_date: null,
            to_collection_start_date: null,
            collaborator_sample_id: null,
            sample_type: null,
            matrix: null,
            record_type: null,
            peg_neg: null
        });
    };
    SamplesComponent.prototype.getTime = function (date) {
        return date != null ? date.getTime() : 0;
    };
    SamplesComponent.prototype.isInArray = function (value, array) {
        return array.indexOf(value) > -1;
    };
    SamplesComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.showHideDelete = false;
        this.queryCountLimit = app_settings_1.APP_SETTINGS.QUERY_COUNT_LIMIT;
        this.nucleicAcidTypes = app_settings_1.APP_SETTINGS.NUCLEIC_ACID_TYPES;
        //this.samplesLoading = true;
        // on init, get sample form config object from App Utilities and set to local displayConfig var
        this.displayConfig = app_utilities_1.APP_UTILITIES.SAMPLE_FORM_CONFIG;
        // on init, get sample record types object from App Settings and set to local recordTypes var
        this.recordTypes = app_settings_1.APP_SETTINGS.SAMPLE_RECORD_TYPES;
        // on init call call populatePegnegList();
        this.populatePegnegList();
        // on init call getSamplerNames of the SampleService, set results to the samplerNames var
        this._sampleService.getSamplerNames()
            .subscribe(function (samplerNamesResponse) {
            _this.samplerNames = samplerNamesResponse.sampler_names;
        }, function (error) {
            _this.errorMessage = error;
        });
        // on init, call getFreezers function of the FreezerService, set results to the freezers var
        this._freezerService.getFreezers()
            .subscribe(function (freezers) {
            _this.freezers = freezers;
        }, function (error) {
            _this.errorMessage = error;
        });
        // on init, call getSampleTypes function of the SampleTypeService, set results to the sampleTypes var
        this._sampleTypeService.getSampleTypes()
            .subscribe(function (sampleTypes) { return _this.sampleTypes = sampleTypes; }, function (error) { return _this.errorMessage = error; });
        // on init, call getFilterTypes function of the SampleTypeService, set results to the sampleTypes var
        this._filterTypeService.getFilterTypes()
            .subscribe(function (filterTypes) { return _this.filterTypes = filterTypes; }, function (error) { return _this.errorMessage = error; });
        // on init, call getConcentrationTypes function of the ConcentrationTypeService, set results to the sampleTypes var
        this._concentrationTypeService.getConcentrationTypes()
            .subscribe(function (concentrationTypes) { return _this.concentrationTypes = concentrationTypes; }, function (error) { return _this.errorMessage = error; });
        // on init, call getMatrices function of the MatrixService, set results to the matrices var
        this._matrixService.getMatrices()
            .subscribe(function (matrices) { return _this.matrices = matrices; }, function (error) { return _this.errorMessage = error; });
        // on init, call getStudies function of the StudyService, set results to the studies var
        this._studyService.getStudies()
            .subscribe(function (studies) {
            _this.studies = studies;
            _this.studies.sort(function (a, b) {
                if (a.name < b.name) {
                    return -1;
                }
                if (a.name > b.name) {
                    return 1;
                }
                return 0;
            });
        }, function (error) { return _this.errorMessage = error; });
        // on init, call getUnits function of the UnitService, set results to the units var
        this._unitService.getUnits()
            .subscribe(function (units) { return _this.units = units; }, function (error) { return _this.errorMessage = error; });
        // on init, call getUsers function of the UserService, set results to the units var
        this._userService.getUsers()
            .subscribe(function (users) { return _this.users = users; }, function (error) { return _this.errorMessage = error; });
        this.freezeForm.get('freezer').valueChanges.subscribe(function (val) {
            // set the maxes for freezer location inputs
            for (var _i = 0, _a = _this.freezers; _i < _a.length; _i++) {
                var freezer = _a[_i];
                if (freezer.id === Number(val)) {
                    _this.currentFreezerDimensions = {
                        "racks": freezer.racks,
                        "boxes": freezer.boxes,
                        "rows": freezer.rows,
                        "spots": freezer.spots
                    };
                }
            }
        });
        this.freezeForm.get('aliquots_per_sample').valueChanges.subscribe(function (val) {
            var sampleCount = _this.selected.length;
            var totalAliquots = sampleCount * val;
            _this.freezeForm.get('total_aliquots').setValue(totalAliquots);
            // get aliquots per sample and available spots in box; calculate and update currentBoxShareMax
            var aliquotsPerSample = _this.freezeForm.get('aliquots_per_sample').value;
            var availableSpotsInCurrentBox = _this.freezeForm.get('available_spots_in_box').value;
            _this.currentBoxSetMax = (Math.trunc(availableSpotsInCurrentBox / aliquotsPerSample));
            _this.currentBoxShareMax = (Math.trunc(availableSpotsInCurrentBox / aliquotsPerSample)) * aliquotsPerSample;
            _this.currentBoxSetCount = (Math.trunc(totalAliquots / aliquotsPerSample));
            var availableSpotsInNextBox = _this.freezeForm.get('next_empty_box').get('available_spots_in_box').value;
            _this.nextBoxSetMax = (Math.trunc(availableSpotsInNextBox / aliquotsPerSample));
            _this.nextBoxShareMax = _this.nextBoxSetMax * aliquotsPerSample;
            _this.maxAliquots = _this.currentBoxShareMax + _this.nextBoxShareMax;
            // tslint:disable-next-line:max-line-length
            _this.freezeForm.get('aliquot_count_share').setValidators([forms_1.Validators.required, forms_1.Validators.min(0), forms_1.Validators.max(_this.currentBoxShareMax)]);
            // tslint:disable-next-line:max-line-length
            _this.freezeForm.get('next_empty_box').get('aliquot_count_share').setValidators([forms_1.Validators.min(0), forms_1.Validators.max(_this.nextBoxShareMax)]);
            _this.freezeForm.get('total_aliquots').setValidators([forms_1.Validators.min(0), forms_1.Validators.max(_this.maxAliquots)]);
            _this.freezeForm.get('aliquot_count_share').setValue(Math.min(_this.currentBoxShareMax, totalAliquots));
            _this.freezeForm.get('next_empty_box').get('aliquot_count_share').setValue(Math.max(0, (totalAliquots - _this.currentBoxShareMax)));
        });
    };
    SamplesComponent.prototype.populatePegnegList = function () {
        var _this = this;
        this._sampleService.getRecentPegnegs()
            .subscribe(function (pegnegs) {
            _this.pegnegs = pegnegs;
            _this.pegnegs.sort(function (a, b) {
                var c = new Date(a.collection_start_date);
                var d = new Date(b.collection_start_date);
                return (d.getTime()) - (c.getTime());
            });
        }, function (error) {
            _this.errorMessage = error;
        });
    };
    // onUnitChange(unitValue) {
    //   // sets the var unitValue used for meter reading unit display
    //   this.unitValue = parseInt(unitValue, 10);
    // }
    SamplesComponent.prototype.deselectAll = function () {
        this.selected = [];
    };
    SamplesComponent.prototype.exportToCSV = function () {
        var hiddenColumns = this.gethiddenColumns();
        var slaveArray = [];
        var exportData = slaveArray.concat(this.allSamples);
        // new attempt
        for (var _i = 0, exportData_1 = exportData; _i < exportData_1.length; _i++) {
            var item = exportData_1[_i];
            for (var _a = 0, hiddenColumns_1 = hiddenColumns; _a < hiddenColumns_1.length; _a++) {
                var column = hiddenColumns_1[_a];
                delete item[column.field];
            }
        }
        // for (let i = 0; i < exportData.length; i++) {
        //   for (let column of hiddenColumns) {
        //     delete exportData[i][column.field]
        //   }
        // }
        // loop through the exportData array
        // for (let i = 0; i < exportData.length; i++) {
        //   /// on each item, loop through the hiddenColumns array
        //   for (let column of hiddenColumns) {
        //     // if the property name of the exportData item matches the hiddenColumn field name, remove it
        //     let propertyName = Object.getOwnPropertyNames(exportData[i])[i];
        //     if (propertyName === column.field) {
        //       delete exportData[i][propertyName];
        //     }
        //   }
        // }
        var filename = 'LIDE_Sample_Data_Report_' + app_utilities_1.APP_UTILITIES.TODAY + '.csv';
        app_utilities_1.APP_UTILITIES.generateCSV({ filename: filename, data: exportData, headers: this.exportColumns });
    };
    SamplesComponent.prototype.gethiddenColumns = function () {
        return this.columns.filter(function (column) { return column.hidden; });
    };
    SamplesComponent.prototype.updatePegnegList = function () {
        var _this = this;
        this.pegnegs = [];
        var countLimit = 40;
        var pegnegQuery = {
            study: null,
            from_id: null,
            to_id: null,
            collaborator_sample_id: null,
            sample_type: null,
            matrix: null,
            from_collection_start_date: this.pegnegFromDate.value,
            to_collection_start_date: this.pegnegToDate.value,
            record_type: 2
        };
        this._sampleService.querySamplesCount(pegnegQuery)
            .subscribe(function (count) {
            _this.pegnegListLoading = true;
            // if count exceeds limit, show error message
            if (count.count >= countLimit) {
                _this.pegnegQuerySizeErrorFlag = true;
                _this.samplesLoading = false;
            }
            else if (count.count < countLimit) {
                // if sample query count does not exceed functional limit, query for actual results, and set results to the allSamples var
                _this._sampleService.querySamples(pegnegQuery)
                    .subscribe(function (samples) {
                    _this.sampleQueryComplete = true;
                    _this.pegnegs = samples;
                    _this.pegnegListLoading = false;
                    // sort pegnegs by date order
                    _this.pegnegs.sort(function (a, b) {
                        var c = new Date(a.collection_start_date);
                        var d = new Date(b.collection_start_date);
                        return (d.getTime()) - (c.getTime());
                    });
                    if (_this.pegnegs.length === 0) {
                        _this.pegnegQueryBlankFlag = true;
                    }
                }, function (error) {
                    _this.errorMessage = error;
                    _this.pegnegListLoading = false;
                });
            }
        }, function (error) {
            _this.errorMessage = error;
            _this.pegnegListLoading = false;
        });
    };
    // callback for the create analysis batch button
    SamplesComponent.prototype.createAB = function (selectedSampleArray) {
        // grab just IDs of the selected samples
        var sampleIDs = [];
        for (var _i = 0, selectedSampleArray_1 = selectedSampleArray; _i < selectedSampleArray_1.length; _i++) {
            var sample = selectedSampleArray_1[_i];
            sampleIDs.push(sample.id);
        }
        this.createABForm.setValue({
            new_samples: sampleIDs,
            name: '',
            analysis_batch_description: '',
            analysis_batch_notes: ''
        });
        // show the AB modal if not showing already
        if (this.showHideABModal === false) {
            this.showHideABModal = true;
        }
    };
    SamplesComponent.prototype.onFCSVUnitSelectBulk = function (unitID) {
        for (var _i = 0, _a = this.fcsvArray.controls; _i < _a.length; _i++) {
            var control = _a[_i];
            control.get('fcsv_units').setValue(unitID);
        }
    };
    SamplesComponent.prototype.createFCSV = function (selectedSamples) {
        // reset the fcsvArray controls to a blank array so it doesnt get populated twice
        this.fcsvArray.controls = [];
        // check if any of the samples selected already have FCSV
        for (var _i = 0, selectedSamples_1 = selectedSamples; _i < selectedSamples_1.length; _i++) {
            var sample = selectedSamples_1[_i];
            if (sample.finalconcentratedsamplevolume != null) {
                this.showHideFCSVExistsErrorModal = true;
                return;
            }
        }
        for (var _a = 0, selectedSamples_2 = selectedSamples; _a < selectedSamples_2.length; _a++) {
            var sample = selectedSamples_2[_a];
            var formGroup = this.formBuilder.group({
                sample: sample.id,
                concentration_type: null,
                final_concentrated_sample_volume: null,
                fcsv_units: 5,
                notes: ''
            });
            this.fcsvArray.push(formGroup);
        }
        // show the add FCSV modal modal if not showing already
        if (this.addFCSVModalActive === false) {
            this.addFCSVModalActive = true;
        }
    };
    SamplesComponent.prototype.editFCSV = function (selection) {
        var selectedSample = selection[0];
        this.editFCSVForm.setValue({
            id: null,
            sample: selectedSample.id,
            concentration_type: selectedSample.finalconcentratedsamplevolume.concentration_type,
            final_concentrated_sample_volume: selectedSample.finalconcentratedsamplevolume.final_concentrated_sample_volume,
            notes: selectedSample.finalconcentratedsamplevolume.notes
        });
        // show the edit FCSV modal modal if not showing already
        if (this.editFCSVModalActive === false) {
            this.editFCSVModalActive = true;
        }
    };
    SamplesComponent.prototype.openFreezerChoice = function () {
        this.showHideFreezerChoiceModal = true;
    };
    SamplesComponent.prototype.lookupFreezerLocation = function () {
        this.showHideFreezerChoiceModal = false;
        this.showHideFreezerLocationLookupModal = true;
    };
    SamplesComponent.prototype.lookupMatrixTypeID = function (code) {
        for (var _i = 0, _a = this.matrices; _i < _a.length; _i++) {
            var matrix = _a[_i];
            if (code === matrix.code) {
                return matrix.id;
            }
        }
    };
    // lookupFreezerDimensions(freezerID, dimension) {
    //   for (let freezer of this.freezers) {
    //     if (freezer.id === freezerID) {
    //       return freezer[dimension];
    //     }
    //   }
    // }
    SamplesComponent.prototype.includeExcludeLabel = function (event) {
        if (event.checked === false) {
            for (var _i = 0, _a = this.aliquotLabelTextArray; _i < _a.length; _i++) {
                var aliquot = _a[_i];
                if (event.value === aliquot.aliquot_string) {
                    aliquot.include = false;
                }
            }
        }
        else if (event.checked === true) {
            for (var _b = 0, _c = this.aliquotLabelTextArray; _b < _c.length; _b++) {
                var aliquot = _c[_b];
                if (event.value === aliquot.aliquot_string) {
                    aliquot.include = true;
                }
            }
        }
    };
    SamplesComponent.prototype.createLabelPDF = function () {
        var spacesToSkip = Number(this.skipLabelForm.value.count);
        var labelParts = [];
        labelParts.push(spacesToSkip);
        labelParts.push(this.aliquotLabelTextArray);
        // first skip down number of spaces from spacesToSkip variable, then loop through this.aliquotLabelTextArray and if include === true,
        // place the aliquot_string value centered on one line, and the collaborator_sample_id below it on the next line. Important to check for include === true. 
        this._sampleService.setLabelParts(labelParts);
        this.showLabelModal = true;
    };
    SamplesComponent.prototype.openPrintLabelModal = function (selectedSampleArray) {
        this.aliquotLabelTextArray = [];
        for (var _i = 0, selectedSampleArray_2 = selectedSampleArray; _i < selectedSampleArray_2.length; _i++) {
            var sample = selectedSampleArray_2[_i];
            for (var _a = 0, _b = sample.aliquots; _a < _b.length; _a++) {
                var aliquot = _b[_a];
                this.aliquotLabelTextArray.push({
                    "include": true,
                    "aliquot_string": aliquot.aliquot_string,
                    "collaborator_sample_id": sample.collaborator_sample_id
                });
            }
        }
        // show the print modal if not showing already
        if (this.showHidePrintModal === false) {
            this.showHidePrintModal = true;
        }
    };
    SamplesComponent.prototype.openInhibitionModal = function (selected) {
        var _this = this;
        this.sampleInhibitionsLoadingFlag = true;
        var selectedSampleID = selected[0].id;
        this.selectedSampleId = selectedSampleID;
        this._sampleService.getSampleInhibitions(selectedSampleID)
            .subscribe(function (sampleInhibitions) {
            _this.selectedSampleInhibitionArray = sampleInhibitions[0].inhibitions;
            _this.showHideInhibitionModal = true;
            _this.sampleInhibitionsLoadingFlag = false;
        }, function (error) {
            _this.errorMessage = error;
            _this.sampleInhibitionsLoadingFlag = false;
        });
        // show the print modal if not showing already
        if (this.showHideInhibitionModal === false) {
            this.showHideInhibitionModal = true;
        }
    };
    SamplesComponent.prototype.addSample = function () {
        if (this.showHideAdd === false) {
            this.showHideAdd = true;
        }
    };
    // show delete Sample type modal
    SamplesComponent.prototype.deleteSample = function (selectedSample) {
        console.log(selectedSample);
        this.showSampleDeleteSuccess = false; //reset this
        this.showSampleDeleteError = false; //reset this too
        this.selectedSampleId = selectedSample.id;
        // show the delete Filter form if not showing already
        if (this.showHideDelete === false) {
            this.showHideDelete = true;
        }
    };
    SamplesComponent.prototype.submitDelete = function () {
        var _this = this;
        this._sampleService.delete(this.selectedSampleId)
            .subscribe(function () {
            _this.selectedSample = undefined;
            _this.submitLoading = false;
            _this.showSampleDeleteSuccess = true;
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
            _this.showSampleDeleteError = true;
        });
    };
    SamplesComponent.prototype.editSample = function (selectedSample) {
        var _this = this;
        this.selectedSamplePegneg = null;
        this.selectedSample = selectedSample;
        if (selectedSample.peg_neg) {
            this._sampleService.getSampleSelection(selectedSample.peg_neg)
                .subscribe(function (pegnegArray) {
                _this.selectedSamplePegneg = pegnegArray[0];
                _this.editSampleForm.setValue({
                    id: selectedSample.id,
                    matrix: selectedSample.matrix,
                    study: selectedSample.study,
                    sample_type: selectedSample.sample_type,
                    collaborator_sample_id: selectedSample.collaborator_sample_id,
                    filter_flag: selectedSample.filter_flag,
                    secondary_concentration_flag: selectedSample.secondary_concentration_flag,
                    study_site_name: selectedSample.study_site_name,
                    sample_description: selectedSample.sample_description,
                    sampler_name: selectedSample.sampler_name,
                    sample_notes: selectedSample.sample_notes,
                    arrival_date: selectedSample.arrival_date,
                    arrival_notes: selectedSample.arrival_notes,
                    collection_start_date: selectedSample.collection_start_date,
                    collection_start_time: selectedSample.collection_start_time,
                    collection_end_date: selectedSample.collection_end_date,
                    collection_end_time: selectedSample.collection_end_time,
                    meter_reading_initial: selectedSample.meter_reading_initial,
                    meter_reading_final: selectedSample.meter_reading_final,
                    meter_reading_unit: selectedSample.meter_reading_unit,
                    total_volume_sampled_initial: selectedSample.total_volume_sampled_initial,
                    total_volume_sampled_unit_initial: selectedSample.total_volume_sampled_unit_initial,
                    total_volume_or_mass_sampled: selectedSample.total_volume_or_mass_sampled,
                    post_dilution_volume: selectedSample.post_dilution_volume,
                    filter_type: selectedSample.filter_type,
                    filter_born_on_date: selectedSample.filter_born_on_date,
                    dissolution_volume: selectedSample.dissolution_volume,
                    elution_notes: selectedSample.elution_notes,
                    technician_initials: selectedSample.technician_initials,
                    sample_volume_initial: selectedSample.sample_volume_initial,
                    peg_neg: selectedSample.peg_neg
                });
                // show the edit sample modal if not showing already
                if (_this.showHideEdit === false) {
                    _this.showHideEdit = true;
                }
                _this.sampleSelected = true;
            }, function (error) {
                _this.errorMessage = error;
                alert("Error retrieving Peg Neg for selected sample. ");
            });
        }
        else {
            this.editSampleForm.setValue({
                id: selectedSample.id,
                matrix: selectedSample.matrix,
                study: selectedSample.study,
                sample_type: selectedSample.sample_type,
                collaborator_sample_id: selectedSample.collaborator_sample_id,
                filter_flag: selectedSample.filter_flag,
                secondary_concentration_flag: selectedSample.secondary_concentration_flag,
                study_site_name: selectedSample.study_site_name,
                sample_description: selectedSample.sample_description,
                sampler_name: selectedSample.sampler_name,
                sample_notes: selectedSample.sample_notes,
                arrival_date: selectedSample.arrival_date,
                arrival_notes: selectedSample.arrival_notes,
                collection_start_date: selectedSample.collection_start_date,
                collection_start_time: selectedSample.collection_start_time,
                collection_end_date: selectedSample.collection_end_date,
                collection_end_time: selectedSample.collection_end_time,
                meter_reading_initial: selectedSample.meter_reading_initial,
                meter_reading_final: selectedSample.meter_reading_final,
                meter_reading_unit: selectedSample.meter_reading_unit,
                total_volume_sampled_initial: selectedSample.total_volume_sampled_initial,
                total_volume_sampled_unit_initial: selectedSample.total_volume_sampled_unit_initial,
                total_volume_or_mass_sampled: selectedSample.total_volume_or_mass_sampled,
                post_dilution_volume: selectedSample.post_dilution_volume,
                filter_type: selectedSample.filter_type,
                filter_born_on_date: selectedSample.filter_born_on_date,
                dissolution_volume: selectedSample.dissolution_volume,
                elution_notes: selectedSample.elution_notes,
                technician_initials: selectedSample.technician_initials,
                sample_volume_initial: selectedSample.sample_volume_initial,
                peg_neg: selectedSample.peg_neg
            });
            // show the edit sample modal if not showing already
            if (this.showHideEdit === false) {
                this.showHideEdit = true;
            }
        }
    };
    SamplesComponent.prototype.onMatrixSelect = function (selectedMatrixString) {
        console.log("Matrix selected:" + selectedMatrixString);
        var selectedMatrix = Number(selectedMatrixString);
        // loop through displayConfig variables for the selected matrix, from the config JSON file (all boolean)
        for (var i in this.displayConfig[selectedMatrix]) {
            if (this.displayConfig[selectedMatrix].hasOwnProperty(i)) {
                switch (this.displayConfig[selectedMatrix][i]) {
                    case (true): {
                        // if disabled == true, disable corresponding control
                        this.addSampleForm.controls[i].disable();
                        this.addSampleForm.controls[i].reset();
                        break;
                    }
                    case (false): {
                        // if disabled == false, enable corresponding control
                        this.addSampleForm.controls[i].enable();
                        break;
                    }
                    default: {
                        // default to enabled
                        this.addSampleForm.controls[i].enable();
                        break;
                    }
                }
            }
        }
    };
    SamplesComponent.prototype.updateSamplesArray = function (newItem) {
        var updateItem = this.allSamples.find(this.findIndexToUpdate, newItem.id);
        var index = this.allSamples.indexOf(updateItem);
        this.allSamples[index] = newItem;
    };
    SamplesComponent.prototype.findIndexToUpdate = function (newItem) {
        return newItem.id === this;
    };
    // callback for the freeze samples button
    SamplesComponent.prototype.assignFreezerLocation = function (selectedSampleArray) {
        var _this = this;
        this.showHideFreezerChoiceModal = false;
        this.noCurrentBoxFlag = false;
        this.showHideMissingFCSVErrorModal = false;
        // this.lastOccupiedSpotLoading = true;
        // this.showLastOccupiedSpot = false;
        // this.showLastOccupiedSpotError = false;
        // if any sample in the selection lacks an FCSV value AND has a matrix that requires one, show error
        for (var _i = 0, selectedSampleArray_3 = selectedSampleArray; _i < selectedSampleArray_3.length; _i++) {
            var sample = selectedSampleArray_3[_i];
            if (sample.finalconcentratedsamplevolume === null &&
                (sample.matrix === (this.lookupMatrixTypeID("W"))
                    || sample.matrix === (this.lookupMatrixTypeID("WW"))
                    || sample.matrix === (this.lookupMatrixTypeID("F")))) {
                this.showHideMissingFCSVErrorModal = true;
                return;
            }
        }
        // set the maxes for freezer location inputs
        for (var _a = 0, _b = this.freezers; _a < _b.length; _a++) {
            var freezer = _b[_a];
            if (freezer.id === this.freezeForm.get('freezer').value) {
                this.currentFreezerDimensions = {
                    "racks": freezer.racks,
                    "boxes": freezer.boxes,
                    "rows": freezer.rows,
                    "spots": freezer.spots
                };
            }
        }
        // assign the onlyOneStudySelected var to the output of an Array.prototype.every() function
        // checks if all the values for study are the same in the selected samples array
        this.onlyOneStudySelected = selectedSampleArray.every(function (value, _, array) {
            return array[0].study === value.study;
        });
        // alert user they are attempting to select a set of studies for freezing that belong to more than one study
        // show freeze warning modal if multiple studies, else show the freeze modal
        if (this.onlyOneStudySelected === false) {
            this.showHideFreezeWarningModal = true;
        }
        else if (this.onlyOneStudySelected === true) {
            // lookup the suggested locations (next available)
            var studyID = selectedSampleArray[0].study;
            this._freezerLocationsService.getNextAvailable(studyID)
                .subscribe(function (nextAvailable) {
                //  this.lastOccupiedSpot = lastOccupiedSpot[0];
                // this.lastOccupiedSpotLoading = false;
                // this.showLastOccupiedSpot = true;
                // this.showLastOccupiedSpotError = false;
                // get the sample count
                var sampleCount = selectedSampleArray.length;
                // get aliquots per sample from freezeForm
                var aliquotsPerSample = _this.freezeForm.get('aliquots_per_sample').value;
                // calculate a totalAliquots number to patch into freezeForm control
                var totalAliquots = sampleCount * aliquotsPerSample;
                // if there is no current box for the study
                if (nextAvailable.not_found) {
                    // show no current box message
                    _this.noCurrentBoxMessage = nextAvailable.not_found;
                    _this.noCurrentBoxFlag = true;
                    _this.currentBoxShareMax = null;
                    _this.freezeForm.patchValue({
                        total_aliquots: totalAliquots,
                        available_spots_in_box: 0
                    });
                }
                // if there is a box with aliquots for the study ('box' field will exist in this case)
                if (nextAvailable.box) {
                    var availableSpotsInCurrentBox = nextAvailable.available_spots_in_box;
                    _this.currentBoxSetMax = (Math.trunc(availableSpotsInCurrentBox / aliquotsPerSample));
                    _this.currentBoxShareMax = (Math.trunc(availableSpotsInCurrentBox / aliquotsPerSample)) * aliquotsPerSample;
                    // show both current box loc and next loc box
                    _this.noCurrentBoxFlag = false;
                    _this.freezeForm.patchValue({
                        available_spots_in_box: nextAvailable.available_spots_in_box,
                        aliquot_count_share: _this.currentBoxShareMax,
                        rack: nextAvailable.rack,
                        box: nextAvailable.box,
                        row: nextAvailable.row,
                        spot: nextAvailable.spot
                    });
                    // this.currentBoxShareMax = (Math.trunc(nextAvailable.available_spots_in_box / aliquotsPerSample) * aliquotsPerSample);
                }
                // show the freeze modal if not showing already
                if (_this.freezerLocationAssignModalActive === false) {
                    _this.freezerLocationAssignModalActive = true;
                }
                ///////////////////////////
                _this.freezeForm.patchValue({
                    total_aliquots: totalAliquots,
                    // available_spots_in_box: nextAvailable.available_spots_in_box,
                    next_empty_box: {
                        aliquot_count_share: (Math.max(0, (totalAliquots - _this.currentBoxShareMax))),
                        available_spots_in_box: nextAvailable.next_empty_box.available_spots_in_box,
                        rack: nextAvailable.next_empty_box.rack,
                        box: nextAvailable.next_empty_box.box,
                        row: nextAvailable.next_empty_box.row,
                        spot: nextAvailable.next_empty_box.spot
                    }
                });
                // tslint:disable-next-line:max-line-length
                _this.freezeForm.get('aliquot_count_share').setValidators([forms_1.Validators.required, forms_1.Validators.min(0), forms_1.Validators.max(_this.currentBoxShareMax)]);
                // tslint:disable-next-line:max-line-length
                _this.freezeForm.get('next_empty_box').get('aliquot_count_share').setValidators([forms_1.Validators.min(0), forms_1.Validators.max(_this.nextBoxShareMax)]);
                var availableSpotsInNextBox = _this.freezeForm.get('next_empty_box').get('available_spots_in_box').value;
                _this.nextBoxSetMax = (Math.trunc(availableSpotsInNextBox / aliquotsPerSample));
                _this.nextBoxShareMax = _this.nextBoxSetMax * aliquotsPerSample;
                _this.maxAliquots = _this.currentBoxShareMax + _this.nextBoxShareMax;
                _this.freezeForm.get('total_aliquots').setValidators([forms_1.Validators.min(0), forms_1.Validators.max(_this.maxAliquots)]);
                _this.freezeForm.get('aliquot_count_share').setValue(Math.min(_this.currentBoxShareMax, totalAliquots));
                // tslint:disable-next-line:max-line-length
                _this.freezeForm.get('next_empty_box').get('aliquot_count_share').setValue(Math.max(0, (totalAliquots - _this.currentBoxShareMax)));
            }, function (error) {
                alert("There was an error retrieving the last occupied freezer spot.");
                // this.lastOccupiedSpotLoading = false;
                // this.showLastOccupiedSpot = false;
                // this.showLastOccupiedSpotError = true;
            });
        }
        this.selectedStudy = this.selected[0].study;
    };
    SamplesComponent.prototype.onSubmitFreezerLocation = function (formValue) {
        var _this = this;
        this.resetFlags();
        this.submitLoading = true;
        var submissionArray = [];
        var currentBoxSampleCount = 0;
        var nextBoxSampleCount = 0;
        this.aliquotCountErrorFlag = false;
        // check if aliquot share count exceeds the total number of aliquots expected
        if (formValue.aliquot_count_share) {
            if ((formValue.aliquot_count_share + formValue.next_empty_box.aliquot_count_share) > formValue.total_aliquots) {
                this.aliquotCountErrorFlag = true;
                this.submitLoading = false;
                return;
            }
        }
        else {
            if (formValue.next_empty_box.aliquot_count_share > formValue.total_aliquots) {
                this.aliquotCountErrorFlag = true;
                this.submitLoading = false;
                return;
            }
        }
        var sampleIDArray = [];
        for (var _i = 0, _a = this.selected; _i < _a.length; _i++) {
            var sample = _a[_i];
            sampleIDArray.push(sample.id);
        }
        // sort sampleID list numerically
        sampleIDArray.sort(function (a, b) { return a - b; });
        // if the aliquot_count_share is greater than 0, current box is being used
        if (formValue.aliquot_count_share > 0) {
            // calculate the amount of sample-aliquot sets that can go into the current box
            currentBoxSampleCount = (Math.trunc(formValue.available_spots_in_box / formValue.aliquots_per_sample));
            // split sampleIDArray: one array for current box, another array for next box
            // set currentBoxSampleIDArray to the first x of the wholeSampleIDArray, where x = currentBoxSampleCount, using array.slice
            var currentBoxSampleIDArray = sampleIDArray.slice(0, currentBoxSampleCount);
            // create object with sample array, aliquot per sample count, starting location; push to submission array
            var currentBoxObject = {
                samples: currentBoxSampleIDArray,
                aliquot_count: formValue.aliquots_per_sample,
                freezer: formValue.freezer,
                frozen: formValue.frozen,
                rack: formValue.rack,
                box: formValue.box,
                row: formValue.row,
                spot: formValue.spot
            };
            submissionArray.push(currentBoxObject);
        }
        if (formValue.next_empty_box.aliquot_count_share > 0) {
            // determine the length of the nextBoxSampleCount by subtracting currentBoxSampleCount from the  wholeSampleIDArray length.
            nextBoxSampleCount = sampleIDArray.length - currentBoxSampleCount;
            // set nextBoxSampleIDArray to the remaining IDs of the wholeSampleIDArray, using array.slice
            var nextBoxSampleIDArray = sampleIDArray.slice(nextBoxSampleCount * -1);
            // create object with sample array, aliquot per sample count, starting location; push to submission array
            var nextBoxObject = {
                samples: nextBoxSampleIDArray,
                aliquot_count: formValue.aliquots_per_sample,
                freezer: formValue.freezer,
                frozen: formValue.frozen,
                rack: formValue.next_empty_box.rack,
                box: formValue.next_empty_box.box,
                row: formValue.next_empty_box.row,
                spot: formValue.next_empty_box.spot
            };
            submissionArray.push(nextBoxObject);
        }
        this._aliquotService.create(submissionArray)
            .subscribe(function (results) {
            _this.submitLoading = false;
            _this.freezeSuccessFlag = true;
            _this.freezeErrorFlag = false;
            _this.reloadSamplesTable();
        }, function (error) {
            _this.submitLoading = false;
            _this.freezeSuccessFlag = false;
            _this.freezeErrorFlag = true;
            _this.errorMessage = error.toString();
        });
    };
    SamplesComponent.prototype.onSubmitFCSV = function (formID, formValue) {
        var _this = this;
        this.fcsvValuesMissingFlag = false;
        this.showFCSVCreateError = false;
        this.showFCSVEditError = false;
        this.showFCSVCreateSuccess = false;
        this.showFCSVEditSuccess = false;
        this.submitLoading = true;
        switch (formID) {
            case 'edit':
                // get the FCSV ID of the currently selected sample
                var fcsvID = this.selected[0].finalconcentratedsamplevolume.id;
                // update the FCSV
                this._finalConcentratedSampleVolumeService.update(fcsvID, formValue)
                    .subscribe(function (sample) {
                    _this.editFCSVForm.reset();
                    _this.submitLoading = false;
                    _this.showFCSVEditError = false;
                    _this.showFCSVEditSuccess = true;
                    _this.reloadSamplesTable();
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showFCSVEditSuccess = false;
                    _this.showFCSVEditError = true;
                });
                break;
            case 'add':
                // if any values are missing, prevent submission and show alert
                for (var _i = 0, _a = formValue.fcsv_array; _i < _a.length; _i++) {
                    var fcsv = _a[_i];
                    if (fcsv.final_concentrated_sample_volume == null || fcsv.concentration_type == null) {
                        this.fcsvValuesMissingFlag = true;
                        this.submitLoading = false;
                        return;
                    }
                }
                // if no missing values, proceed with conversion and submission
                if (this.fcsvValuesMissingFlag === false) {
                    // set new empty array for submitting fcsv values
                    var fcsvArraySubmission = [];
                    // loop through each fcsv, convert, and push into the submission array
                    for (var _b = 0, _c = formValue.fcsv_array; _b < _c.length; _b++) {
                        var fcsv = _c[_b];
                        fcsv.final_concentrated_sample_volume = Number(fcsv.final_concentrated_sample_volume);
                        fcsv.concentration_type = Number(fcsv.concentration_type);
                        fcsv.fcsv_units = Number(fcsv.fcsv_units);
                        fcsv.final_concentrated_sample_volume = (fcsv.final_concentrated_sample_volume /
                            this.getConversionFactorToMilliliters(fcsv.fcsv_units));
                        fcsvArraySubmission.push({
                            "sample": fcsv.sample,
                            "final_concentrated_sample_volume": fcsv.final_concentrated_sample_volume,
                            "concentration_type": fcsv.concentration_type,
                            "notes": fcsv.notes
                        });
                    }
                    this._finalConcentratedSampleVolumeService.create(fcsvArraySubmission)
                        .subscribe(function (results) {
                        _this.showFCSVCreateError = false;
                        _this.showFCSVCreateSuccess = true;
                        _this.submitLoading = false;
                        _this.reloadSamplesTable();
                    }, function (error) {
                        _this.showFCSVCreateError = true;
                        _this.showFCSVCreateSuccess = false;
                        _this.submitLoading = false;
                    });
                }
                break;
            default:
        }
    };
    SamplesComponent.prototype.onSubmitAB = function (formValue) {
        var _this = this;
        this.createdABID = null;
        this.showABCreateError = false;
        this.showABCreateSuccess = false;
        this.submitLoading = true;
        this._analysisBatchService.create(formValue)
            .subscribe(function (ab) {
            _this.submitLoading = false;
            _this.showABCreateSuccess = true;
            _this.createdABID = ab.id;
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
            _this.showABCreateError = true;
        });
    };
    SamplesComponent.prototype.getConversionFactorToLiters = function (unitID) {
        switch (unitID) {
            case 1:
                // if unit is gallons
                return 0.26417;
            case 2:
                // if unit is liters
                return 1;
            case 3:
                // if initial unit is grams
                return 1;
            case 4:
                // if  unit is microliters
                return 1000000;
            case 5:
                // if unit is milliliters
                return 1000;
                ;
        }
    };
    SamplesComponent.prototype.getConversionFactorToMilliliters = function (unitID) {
        switch (unitID) {
            case 1:
                // if unit is gallons
                return 0.00026417;
            case 2:
                // if unit is liters
                return 0.0010000;
            case 3:
                // if initial unit is grams
                return 1;
            case 4:
                // if  unit is microliters
                return 1000;
            case 5:
                // if unit is milliliters
                return 1;
                ;
        }
    };
    SamplesComponent.prototype.trimDecimalPlaces = function (number, places) {
        if (Number.isInteger(number)) {
            return number;
        }
        else {
            var numString = number.toString();
            var decimalPlaces = numString.split(".")[1].length;
            if (decimalPlaces > places) {
                var trimmedNumber = number.toFixed(places);
                return trimmedNumber;
            }
            else {
                return number;
            }
        }
    };
    SamplesComponent.prototype.onClosesampleVolumeError = function () {
        this.sampleVolumeErrorFlag = false;
    };
    SamplesComponent.prototype.resetFlags = function () {
        this.sampleVolumeErrorFlag = false;
        this.showSampleCreateError = false;
        this.showSampleCreateSuccess = false;
        this.showSampleEditError = false;
        this.showSampleEditSuccess = false;
        this.freezeErrorFlag = false;
        this.freezeSuccessFlag = false;
        this.showFCSVCreateSuccess = false;
        this.showFCSVCreateError = false;
        this.showFCSVEditSuccess = false;
        this.showFCSVEditError = false;
        this.showABCreateSuccess = false;
        this.showABCreateError = false;
        this.sampleQuerySizeErrorFlag = false;
        this.sampleQueryComplete = false;
        this.sampleInhibitionsLoadingFlag = false;
        this.errorMessage = '';
    };
    SamplesComponent.prototype.reloadSamplesTable = function () {
        var _this = this;
        this.allSamples = [];
        // set sample loading to true to put spinner over table while it updates.
        this.samplesLoading = true;
        this.submitLoading = true;
        // set functional limit for amount of samples to display in the table at once
        var countLimit = 2000;
        this._sampleService.querySamplesCount(this.sampleQueryForm.value)
            .subscribe(function (count) {
            _this.submitLoading = false;
            // if count exceeds limit, show error message
            if (count.count >= countLimit) {
                _this.sampleQuerySizeErrorFlag = true;
                _this.samplesLoading = false;
            }
            else if (count.count < countLimit) {
                _this.samplesLoading = true;
                // if sample query count does not exceed functional limit, query for actual results, and set results to the allSamples var
                _this._sampleService.querySamples(_this.sampleQueryForm.value)
                    .subscribe(function (samples) {
                    _this.samplesCount = count.count;
                    _this.sampleQueryComplete = true;
                    _this.allSamples = samples;
                    for (var _i = 0, _a = _this.allSamples; _i < _a.length; _i++) {
                        var sample = _a[_i];
                        if (sample.finalconcentratedsamplevolume) {
                            sample.fcsv = sample.finalconcentratedsamplevolume.final_concentrated_sample_volume;
                            sample.fcsv_concentration_type_string = sample.finalconcentratedsamplevolume.concentration_type_string;
                            sample.fcsv_notes = sample.finalconcentratedsamplevolume.notes;
                        }
                    }
                    _this.samplesLoading = false;
                    // for (let sample of samples) {
                    //   if (sample.record_type === 2) {
                    //     this.pegnegs.push(sample);
                    //   }
                    // }
                    // // sort pegnegs by date order
                    // this.pegnegs.sort(function (a, b) {
                    //   const c: Date = new Date(a.collection_start_date);
                    //   const d: Date = new Date(b.collection_start_date);
                    //   return (d.getTime()) - (c.getTime());
                    // });
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                });
            }
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
        });
    };
    SamplesComponent.prototype.resetAddSampleForm = function () {
        this.addSampleForm.reset({
            sample_type: { value: null, disabled: true },
            matrix: null,
            filter_type: { value: null, disabled: true },
            study: { value: null, disabled: true },
            study_site_name: { value: '', disabled: true },
            collaborator_sample_id: { value: '', disabled: true },
            sampler_name: { value: '', disabled: true },
            sample_notes: { value: '', disabled: true },
            sample_description: { value: '', disabled: true },
            arrival_date: { value: null, disabled: true },
            arrival_notes: { value: '', disabled: true },
            collection_start_date: { value: null, disabled: true },
            collection_start_time: { value: null, disabled: false },
            collection_end_date: { value: null, disabled: true },
            collection_end_time: { value: null, disabled: true },
            meter_reading_initial: { value: null, disabled: true },
            meter_reading_final: { value: null, disabled: true },
            meter_reading_unit: { value: null, disabled: true },
            total_volume_sampled_initial: { value: null, disabled: true },
            total_volume_sampled_unit_initial: { value: null, disabled: true },
            sample_volume_initial: { value: null, disabled: true },
            filter_born_on_date: { value: null, disabled: true },
            filter_flag: { value: false, disabled: true },
            secondary_concentration_flag: { value: false, disabled: true },
            elution_notes: { value: '', disabled: true },
            technician_initials: { value: '', disabled: true },
            dissolution_volume: { value: null, disabled: true },
            post_dilution_volume: { value: null, disabled: true },
            record_type: { value: null, disabled: true },
            peg_neg: null
        });
    };
    SamplesComponent.prototype.resetAddPegNegForm = function () {
        this.addPegNegForm.reset({
            sample_type: null,
            matrix: null,
            filter_type: null,
            study: null,
            study_site_name: '',
            collaborator_sample_id: '',
            sampler_name: '',
            sample_notes: '',
            sample_description: '',
            arrival_date: null,
            arrival_notes: '',
            collection_start_date: null,
            meter_reading_initial: null,
            meter_reading_final: null,
            meter_reading_unit: null,
            total_volume_sampled_initial: null,
            total_volume_sampled_unit_initial: null,
            total_volume_or_mass_sampled: null,
            sample_volume_initial: null,
            filter_born_on_date: null,
            filter_flag: false,
            secondary_concentration_flag: false,
            elution_notes: '',
            technician_initials: '',
            dissolution_volume: null,
            record_type: 2
        });
    };
    SamplesComponent.prototype.onSubmitSample = function (formId, formValue) {
        var _this = this;
        this.createdSampleID = null;
        this.sampleVolumeErrorFlag = false;
        this.showSampleCreateError = false;
        this.showSampleEditError = false;
        this.showSampleEditSuccess = false;
        this.submitLoading = true;
        this.errorMessage = '';
        var meterVolumesPresent = false;
        var directTVSPresent = false;
        formValue.matrix = Number(formValue.matrix);
        formValue.sample_type = Number(formValue.sample_type);
        formValue.sample_volume_initial = Number(formValue.sample_volume_initial);
        formValue.study = Number(formValue.study);
        formValue.dissolution_volume = Number(formValue.dissolution_volume);
        if (formValue.filter_type !== null) {
            formValue.filter_type = Number(formValue.filter_type);
        }
        switch (formId) {
            case 'edit':
                // update a record
                this._sampleService.update(formValue)
                    .subscribe(function (sample) {
                    _this.updateSamplesArray(formValue);
                    _this.editSampleForm.reset();
                    _this.submitLoading = false;
                    _this.showSampleEditSuccess = true;
                    _this.reloadSamplesTable();
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showSampleEditError = true;
                });
                break;
            case 'add':
                // check if meter_reading_XX fields are present by seeing if they are not disabled (false)
                if (this.displayConfig[formValue.matrix].meter_reading_final === false &&
                    this.displayConfig[formValue.matrix].meter_reading_initial === false &&
                    this.displayConfig[formValue.matrix].meter_reading_unit === false) {
                    if (formValue.meter_reading_final === null ||
                        formValue.meter_reading_initial === null ||
                        formValue.meter_reading_unit === null) {
                        meterVolumesPresent = false;
                    }
                    else if (formValue.meter_reading_final !== null
                        && formValue.meter_reading_initial !== null
                        && formValue.meter_reading_unit !== null) {
                        meterVolumesPresent = true;
                        formValue.meter_reading_final = Number(formValue.meter_reading_final);
                        formValue.meter_reading_initial = Number(formValue.meter_reading_initial);
                        formValue.meter_reading_unit = Number(formValue.meter_reading_unit);
                        // use meter readings, subtraction, and meter_reading_unit to establish total_volume_or_mass_sampled
                        formValue.total_volume_or_mass_sampled = ((formValue.meter_reading_final - formValue.meter_reading_initial) /
                            this.getConversionFactorToLiters(formValue.meter_reading_unit));
                        // send value through trimDecimalPlaces function to trim decimal places if they exceed 10
                        formValue.total_volume_or_mass_sampled = this.trimDecimalPlaces(formValue.total_volume_or_mass_sampled, 10);
                    }
                }
                // check if total_volume_sampled_XX fields are present by seeing if they are not disabled (false)
                if (this.displayConfig[formValue.matrix].total_volume_sampled_initial === false &&
                    this.displayConfig[formValue.matrix].total_volume_sampled_unit_initial === false) {
                    if (formValue.total_volume_sampled_initial === null || formValue.total_volume_sampled_unit_initial === null) {
                        directTVSPresent = false;
                    }
                    else if (formValue.total_volume_sampled_initial !== null && formValue.total_volume_sampled_unit_initial !== null) {
                        directTVSPresent = true;
                        formValue.total_volume_sampled_initial = Number(formValue.total_volume_sampled_initial);
                        formValue.total_volume_sampled_unit_initial = Number(formValue.total_volume_sampled_unit_initial);
                        // use total_volume_sampled_initial + total_volume_sampled_unit_initial to establish total_volume_or_mass_sampled
                        formValue.total_volume_or_mass_sampled = (formValue.total_volume_sampled_initial /
                            this.getConversionFactorToLiters(formValue.total_volume_sampled_unit_initial));
                        // send value through trimDecimalPlaces function to trim decimal places if they exceed 10
                        formValue.total_volume_or_mass_sampled = this.trimDecimalPlaces(formValue.total_volume_or_mass_sampled, 10);
                    }
                }
                if (meterVolumesPresent === false && directTVSPresent === false) {
                    this.submitLoading = false;
                    this.sampleVolumeErrorFlag = true;
                }
                else if (meterVolumesPresent === true || directTVSPresent === true) {
                    // add a record
                    this._sampleService.create(formValue)
                        .subscribe(function (sample) {
                        _this.resetAddSampleForm();
                        _this.sampleVolumeErrorFlag = false;
                        _this.submitLoading = false;
                        _this.showSampleCreateSuccess = true;
                        _this.createdSampleID = sample.id;
                        _this.reloadSamplesTable();
                    }, function (error) {
                        _this.errorMessage = error;
                        _this.submitLoading = false;
                        _this.sampleVolumeErrorFlag = false;
                        _this.showSampleCreateError = true;
                    });
                }
                break;
            case 'addPegNeg':
                // add a record, of type pegneg (control)
                // check if any of the values are missing for the meter reading approach to deriving sample volume
                if (formValue.meter_reading_final === null ||
                    formValue.meter_reading_initial === null ||
                    formValue.meter_reading_unit === null) {
                    // if all are null, set meterVolumesPresent var to false
                    meterVolumesPresent = false;
                }
                else if (formValue.meter_reading_final !== null
                    && formValue.meter_reading_initial !== null
                    && formValue.meter_reading_unit !== null) {
                    // if no needed values are missing for meter reading TVS calculation, proceed with converting values and calculating TVS
                    meterVolumesPresent = true;
                    formValue.meter_reading_final = Number(formValue.meter_reading_final);
                    formValue.meter_reading_initial = Number(formValue.meter_reading_initial);
                    formValue.meter_reading_unit = Number(formValue.meter_reading_unit);
                    // use meter readings, subtraction, and meter_reading_unit to establish total_volume_or_mass_sampled
                    formValue.total_volume_or_mass_sampled = ((formValue.meter_reading_final - formValue.meter_reading_initial) /
                        this.getConversionFactorToLiters(formValue.meter_reading_unit));
                    // send value through trimDecimalPlaces funciton to trim decimal places if they exceed 10
                    formValue.total_volume_or_mass_sampled = this.trimDecimalPlaces(formValue.total_volume_or_mass_sampled, 10);
                }
                // check if values are present for direct TVS input
                if (formValue.total_volume_sampled_initial === null || formValue.total_volume_sampled_unit_initial === null) {
                    // if either are absent, set the directTVSPresent var to false.
                    directTVSPresent = false;
                }
                else if (formValue.total_volume_sampled_initial !== null && formValue.total_volume_sampled_unit_initial !== null) {
                    // if values are present, proceed with converting values and calculating TVS
                    directTVSPresent = true;
                    formValue.total_volume_sampled_initial = Number(formValue.total_volume_sampled_initial);
                    formValue.total_volume_sampled_unit_initial = Number(formValue.total_volume_sampled_unit_initial);
                    // use total_volume_sampled_initial + total_volume_sampled_unit_initial to establish total_volume_or_mass_sampled
                    formValue.total_volume_or_mass_sampled = (formValue.total_volume_sampled_initial /
                        this.getConversionFactorToLiters(formValue.total_volume_sampled_unit_initial));
                    // send value through trimDecimalPlaces funciton to trim decimal places if they exceed 10
                    formValue.total_volume_or_mass_sampled = this.trimDecimalPlaces(formValue.total_volume_or_mass_sampled, 10);
                }
                // need to add required field values as they are assumed and not entered by user
                var now = new Date(Date.now());
                var currentDate = now.toISOString().substring(0, 10);
                var currentTime = now.toTimeString().split(" ")[0];
                formValue.matrix = app_settings_1.APP_SETTINGS.PEGNEG_FIELD_VALUES.matrix;
                // formValue.filter_type = APP_SETTINGS.PEGNEG_FIELD_VALUES.filter_type;
                formValue.sample_type = app_settings_1.APP_SETTINGS.PEGNEG_FIELD_VALUES.sample_type;
                formValue.collaborator_sample_id = 'pegneg_' + formValue.collection_start_date;
                formValue.study = app_settings_1.APP_SETTINGS.PEGNEG_FIELD_VALUES.study;
                // formValue.collection_start_time = APP_SETTINGS.PEGNEG_FIELD_VALUES.collection_start_time;
                // formValue.collection_end_time = APP_SETTINGS.PEGNEG_FIELD_VALUES.collection_end_time;
                // formValue.collection_end_date = formValue.collection_start_date;
                // formValue.arrival_date = formValue.collection_start_date;
                if (meterVolumesPresent === false && directTVSPresent === false) {
                    this.submitLoading = false;
                    this.sampleVolumeErrorFlag = true;
                }
                else if (meterVolumesPresent === true || directTVSPresent === true) {
                    this._sampleService.create(formValue)
                        .subscribe(function (sample) {
                        _this.resetAddPegNegForm();
                        _this.submitLoading = false;
                        _this.createdSampleID = sample.id;
                        _this.showSampleCreateSuccess = true;
                        _this.reloadSamplesTable();
                        _this.populatePegnegList();
                    }, function (error) {
                        _this.errorMessage = error;
                        _this.submitLoading = false;
                        _this.showSampleCreateError = true;
                    });
                }
                break;
            default:
        }
    };
    SamplesComponent.prototype.addLeadingZero = function (value, control) {
        if (value.charAt(0) === '.') {
            control.setValue('0' + value);
        }
    };
    SamplesComponent.prototype.onSubmitSampleQuery = function (formValue) {
        var _this = this;
        this.resetFlags();
        this.submitLoading = true;
        // set functional limit for amount of samples to display in the table at once
        var countLimit = 2000;
        this._sampleService.querySamplesCount(formValue)
            .subscribe(function (count) {
            _this.submitLoading = false;
            // if count exceeds limit, show error message
            if (count.count >= countLimit) {
                _this.sampleQuerySizeErrorFlag = true;
            }
            else if (count.count < countLimit) {
                _this.samplesLoading = true;
                // if sample query count does not exceed functional limit, query for actual results, and set results to the allSamples var
                _this._sampleService.querySamples(formValue)
                    .subscribe(function (samples) {
                    _this.samplesCount = count.count;
                    _this.sampleQueryComplete = true;
                    _this.allSamples = samples;
                    for (var _i = 0, _a = _this.allSamples; _i < _a.length; _i++) {
                        var sample = _a[_i];
                        if (sample.finalconcentratedsamplevolume) {
                            sample.fcsv = sample.finalconcentratedsamplevolume.final_concentrated_sample_volume;
                            sample.fcsv_concentration_type_string = sample.finalconcentratedsamplevolume.concentration_type_string;
                            sample.fcsv_notes = sample.finalconcentratedsamplevolume.notes;
                        }
                    }
                    _this.samplesLoading = false;
                    // for (let sample of samples) {
                    //   if (sample.record_type === 2) {
                    //     this.pegnegs.push(sample);
                    //   }
                    // }
                    // // sort pegnegs by date order
                    // this.pegnegs.sort(function (a, b) {
                    //   const c: Date = new Date(a.collection_start_date);
                    //   const d: Date = new Date(b.collection_start_date);
                    //   return (d.getTime()) - (c.getTime());
                    // });
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                });
            }
        }, function (error) {
            _this.errorMessage = error;
            _this.submitLoading = false;
        });
    };
    return SamplesComponent;
}());
__decorate([
    core_1.ViewChildren(clarity_angular_1.DatagridColumn),
    __metadata("design:type", typeof (_a = typeof core_1.QueryList !== "undefined" && core_1.QueryList) === "function" && _a || Object)
], SamplesComponent.prototype, "columns", void 0);
SamplesComponent = __decorate([
    core_1.Component({
        selector: 'app-samples',
        template: __webpack_require__("./src/app/samples/samples.component.html"),
        styles: [__webpack_require__("./src/app/samples/samples.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_b = typeof sample_service_1.SampleService !== "undefined" && sample_service_1.SampleService) === "function" && _b || Object, typeof (_c = typeof final_concentrated_sample_volume_service_1.FinalConcentratedSampleVolumeService !== "undefined" && final_concentrated_sample_volume_service_1.FinalConcentratedSampleVolumeService) === "function" && _c || Object, typeof (_d = typeof study_service_1.StudyService !== "undefined" && study_service_1.StudyService) === "function" && _d || Object, typeof (_e = typeof sample_type_service_1.SampleTypeService !== "undefined" && sample_type_service_1.SampleTypeService) === "function" && _e || Object, typeof (_f = typeof freezer_service_1.FreezerService !== "undefined" && freezer_service_1.FreezerService) === "function" && _f || Object, typeof (_g = typeof freezer_locations_service_1.FreezerLocationsService !== "undefined" && freezer_locations_service_1.FreezerLocationsService) === "function" && _g || Object, typeof (_h = typeof aliquot_service_1.AliquotService !== "undefined" && aliquot_service_1.AliquotService) === "function" && _h || Object, typeof (_j = typeof filter_type_service_1.FilterTypeService !== "undefined" && filter_type_service_1.FilterTypeService) === "function" && _j || Object, typeof (_k = typeof concentration_types_service_1.ConcentrationTypeService !== "undefined" && concentration_types_service_1.ConcentrationTypeService) === "function" && _k || Object, typeof (_l = typeof matrix_service_1.MatrixService !== "undefined" && matrix_service_1.MatrixService) === "function" && _l || Object, typeof (_m = typeof unit_service_1.UnitService !== "undefined" && unit_service_1.UnitService) === "function" && _m || Object, typeof (_o = typeof user_service_1.UserService !== "undefined" && user_service_1.UserService) === "function" && _o || Object, typeof (_p = typeof analysis_batch_service_1.AnalysisBatchService !== "undefined" && analysis_batch_service_1.AnalysisBatchService) === "function" && _p || Object, typeof (_q = typeof forms_1.FormBuilder !== "undefined" && forms_1.FormBuilder) === "function" && _q || Object])
], SamplesComponent);
exports.SamplesComponent = SamplesComponent;
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/samples/samples.component.js.map

/***/ }),

/***/ "./src/app/studies/studies.component.html":
/***/ (function(module, exports) {

module.exports = "<div class=\"row\">\r\n    <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n        <h3>Studies</h3>\r\n    </div>\r\n</div>\r\n<!-- add study card -->\r\n<div class=\"row\">\r\n    <div class=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\" *ngIf=\"showHideAdd\">\r\n        <div class=\"card\">\r\n            <div class=\"card-block\">\r\n                <div class=\"card-title\">Add Study</div>\r\n                <div class=\"card-text\">\r\n\r\n                    <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showStudyCreateError\">\r\n                        <div clr-alert-item class=\"alert-item\">\r\n                            <span class=\"alert-text\">Submission error. Study not submitted. {{errorMessage}}</span>\r\n                            <div class=\"alert-actions\">\r\n                                <a class=\"alert-action\" (click)=\"onSubmitStudy('add', addStudyForm.value)\">Try again</a>\r\n                            </div>\r\n                        </div>\r\n                    </clr-alert>\r\n\r\n                    <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showStudyCreateSuccess\">\r\n                        <div clr-alert-item class=\"alert-item\">\r\n                            <span class=\"alert-text\">Study successfully submitted. ID: {{createdStudyID}}\r\n                            </span>\r\n\r\n\r\n                            <div class=\"alert-actions\">\r\n                                <a class=\"alert-action\" (click)=\"showHideAdd = false; showStudyCreateSuccess = false\">Close</a>\r\n                            </div>\r\n                        </div>\r\n                    </clr-alert>\r\n\r\n                    <form id=\"addStudyForm\" class=\"compact\" [formGroup]=\"addStudyForm\" (ngSubmit)=\"onSubmitStudy('add', addStudyForm.value)\">\r\n                        <section class=\"form-block\">\r\n                            <!--<label>Add Study</label>-->\r\n                            <div class=\"form-group\">\r\n                                <label class=\"required\">Name</label>\r\n                                <label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"addStudyForm.get('name').invalid && (addStudyForm.get('name').dirty || addStudyForm.get('name').touched)\">\r\n                                    <input id=\"name\" type=\"text\" formControlName=\"name\" size=\"40\">\r\n                                    <span class=\"tooltip-content\">Name is required.</span>\r\n                                </label>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label for=\"description\">Description</label>\r\n                                <textarea id=\"description\" type=\"text\" formControlName=\"description\" rows=\"2\" style=\"max-width:25em\"></textarea>\r\n                            </div>\r\n                            <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"addStudyForm.invalid\" [clrLoading]=\"submitLoading\">Submit</button>\r\n                            <button class=\"btn btn-info\" (click)=\"showHideAdd = !showHideAdd\">Close</button>\r\n                        </section>\r\n                        <!-- <p>Form value: {{ addStudyForm.value | json }}</p>\r\n                        <p>Form status: {{ addStudyForm.status | json }}</p> -->\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"row\">\r\n\r\n    <clr-modal [(clrModalOpen)]=\"showHideEdit\">\r\n        <h3 class=\"modal-title\">Edit Study</h3>\r\n        <div class=\"modal-body\">\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12\">\r\n\r\n                    <form id=\"editStudyForm\" class=\"compact\" [formGroup]=\"editStudyForm\" (ngSubmit)=\"onSubmitStudy('edit', editStudyForm.value)\">\r\n                        <section class=\"form-block\">\r\n\r\n                            <label>Selected Study: {{selectedStudyName}}</label>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"studyId\">Study ID</label>\r\n                                <input type=\"text\" id=\"studyId\" size=\"35\" formControlName=\"id\" readonly>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label class=\"required\">Name</label>\r\n                                <label for=\"name\" aria-haspopup=\"true\" role=\"tooltip\" class=\"tooltip tooltip-validation tooltip-sm\" [class.invalid]=\"editStudyForm.get('name').invalid && (editStudyForm.get('name').dirty || editStudyForm.get('name').touched)\">\r\n                                    <input id=\"name\" type=\"text\" formControlName=\"name\" size=\"40\">\r\n                                    <span class=\"tooltip-content\">Name is required.</span>\r\n                                </label>\r\n                            </div>\r\n                            <div class=\"form-group\">\r\n                                <label for=\"description\">Description</label>\r\n                                <textarea id=\"description\" type=\"text\" formControlName=\"description\" rows=\"2\" style=\"max-width:25em\"></textarea>\r\n                            </div>\r\n\r\n                            <clr-alert [clrAlertType]=\"'alert-danger'\" *ngIf=\"showStudyEditError\">\r\n                                <div clr-alert-item class=\"alert-item\">\r\n                                    <span class=\"alert-text\">Submission error. Study not edited.</span>\r\n                                    <div class=\"alert-actions\">\r\n                                        <a class=\"alert-action\" (click)=\"onSubmitStudy('edit', editStudyForm.value)\">Try again</a>\r\n                                    </div>\r\n                                </div>\r\n                            </clr-alert>\r\n\r\n                            <clr-alert [clrAlertType]=\"'alert-success'\" *ngIf=\"showStudyEditSuccess\">\r\n                                <div clr-alert-item class=\"alert-item\">\r\n                                    <span class=\"alert-text\">Study successfully edited</span>\r\n                                    <div class=\"alert-actions\">\r\n                                        <a class=\"alert-action\" (click)=\"showHideEdit = false; showStudyEditSuccess = false\">Close</a>\r\n                                    </div>\r\n                                </div>\r\n                            </clr-alert>\r\n\r\n                            <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"editStudyForm.invalid\" [clrLoading]=\"submitLoading\">Save Edits</button>\r\n                            <button class=\"btn btn-info\" (click)=\"showHideEdit = !showHideEdit\">Close</button>\r\n                        </section>\r\n                        <!-- <p>Form value: {{ editStudyForm.value | json }}</p>\r\n                        <p>Form status: {{ editStudyForm.status | json }}</p> -->\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!--<div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-outline\" (click)=\"showHideEdit = !showHideEdit\">Close</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" type=\"submit\" [disabled]=\"editStudyForm.invalid\">Save Edits</button>\r\n        </div>-->\r\n    </clr-modal>\r\n\r\n    <div class=\"col-lg-8 col-md-8 col-sm-12 col-xs-12\">\r\n\r\n        <clr-datagrid [(clrDgSingleSelected)]=\"selectedStudy\" [clrDgLoading]=\"studiesLoading\">\r\n\r\n            <clr-dg-action-bar>\r\n                <div class=\"btn-group\">\r\n                    <button type=\"button\" class=\"btn btn-sm btn-secondary\" (click)=\"showHideAdd = !showHideAdd\">\r\n                        <clr-icon shape=\"plus\"></clr-icon> Add Study</button>\r\n                    <button type=\"button\" class=\"btn btn-sm btn-secondary\" [disabled]=\"!selectedStudy\" (click)=\"editStudy(selectedStudy)\">\r\n                        <clr-icon shape=\"note-edit\" size=\"16\"></clr-icon> Edit Study</button>\r\n\r\n                </div>\r\n            </clr-dg-action-bar>\r\n\r\n            <clr-dg-column [clrDgField]=\"'id'\">\r\n                Study ID\r\n                <clr-dg-filter [clrDgFilter]=\"rangeFilter\">\r\n                    <range-filter #rangeFilter></range-filter>\r\n                </clr-dg-filter>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'name'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Study Name\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-column [clrDgField]=\"'description'\">\r\n                <ng-container *clrDgHideableColumn=\"{hidden: false}\">\r\n                    Study Description\r\n                </ng-container>\r\n            </clr-dg-column>\r\n\r\n            <clr-dg-row *clrDgItems=\"let study of allStudies\" [clrDgItem]=\"study\">\r\n                <clr-dg-cell>{{study.id}}</clr-dg-cell>\r\n                <clr-dg-cell>{{study.name}}</clr-dg-cell>\r\n                <clr-dg-cell>{{study.description}}</clr-dg-cell>\r\n            </clr-dg-row>\r\n\r\n            <clr-dg-footer>\r\n                {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{pagination.totalItems}} studies\r\n                <clr-dg-pagination #pagination [clrDgPageSize]=\"20\"></clr-dg-pagination>\r\n            </clr-dg-footer>\r\n\r\n        </clr-datagrid>\r\n    </div>\r\n</div>\r\n\r\n<!--<clr-modal [(clrModalOpen)]=\"deleteStudyConfirm\">\r\n    <h3 class=\"modal-title\"><clr-icon shape=\"warning\" class=\"is-warning\" size=\"36\"></clr-icon> Delete Study</h3>\r\n    <div class=\"modal-body\">\r\n         <p>You have selected the following study to delete:\r\n         <br><b>{{selectedStudy ? selectedStudy.study_name: 'none'}}</b></p>\r\n         <p>Are you sure you want to delete this study?</p>\r\n    </div>\r\n    <div class=\"modal-footer\">\r\n       <button class=\"btn btn-outline\" type=\"button\" (click)=\"deleteStudyConfirm = false\">Close</button>\r\n        <button class=\"btn btn-primary\" type=\"button\" (click)=\"deleteStudyConfirm = false\">Delete this study</button>\r\n    </div>\r\n</clr-modal>-->"

/***/ }),

/***/ "./src/app/studies/studies.component.scss":
/***/ (function(module, exports) {

module.exports = ".datagrid .datagrid-column, .datagrid .datagrid-cell .no-padding {\n  padding: 0px; }\n\n.ten {\n  min-width: 4em; }\n"

/***/ }),

/***/ "./src/app/studies/studies.component.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var forms_1 = __webpack_require__("./node_modules/@angular/forms/@angular/forms.es5.js");
var study_service_1 = __webpack_require__("./src/app/studies/study.service.ts");
var StudiesComponent = (function () {
    function StudiesComponent(_studyService) {
        this._studyService = _studyService;
        this.showHideAdd = false;
        this.showHideEdit = false;
        this.showStudyCreateError = false;
        this.showStudyEditError = false;
        this.showStudyCreateSuccess = false;
        this.showStudyEditSuccess = false;
        this.studiesLoading = false;
        this.submitLoading = false;
        // add study form - declare a reactive form with appropriate study fields
        this.addStudyForm = new forms_1.FormGroup({
            name: new forms_1.FormControl('', forms_1.Validators.required),
            description: new forms_1.FormControl('')
        });
        // edit study form - declare a reactive form
        this.editStudyForm = new forms_1.FormGroup({
            id: new forms_1.FormControl(''),
            name: new forms_1.FormControl('', forms_1.Validators.required),
            description: new forms_1.FormControl('')
        });
    }
    StudiesComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.studiesLoading = true;
        // on init, call getStudies function which subscribes to the StudyService, set results to the allStudies var
        this._studyService.getStudies()
            .subscribe(function (studies) {
            _this.allStudies = studies;
            _this.studiesLoading = false;
        }, function (error) {
            _this.errorMessage = error;
        });
    };
    StudiesComponent.prototype.editStudy = function (selectedStudy) {
        this.showStudyEditSuccess = false;
        this.showStudyEditError = false;
        this.selectedStudyName = selectedStudy.name;
        this.selectedStudyId = selectedStudy.id;
        this.editStudyForm.setValue({
            id: selectedStudy.id,
            name: selectedStudy.name,
            description: selectedStudy.description
        });
        // show the edit study form if not showing already
        if (this.showHideEdit === false) {
            this.showHideEdit = true;
        }
    };
    StudiesComponent.prototype.updateStudiesArray = function (newItem) {
        var updateItem = this.allStudies.find(this.findIndexToUpdate, newItem.id);
        var index = this.allStudies.indexOf(updateItem);
        this.allStudies[index] = newItem;
    };
    StudiesComponent.prototype.findIndexToUpdate = function (newItem) {
        return newItem.id === this;
    };
    // split these out
    StudiesComponent.prototype.onSubmitStudy = function (formId, formValue) {
        var _this = this;
        this.createdStudyID = null;
        this.showStudyCreateError = false;
        this.showStudyEditError = false;
        this.submitLoading = true;
        switch (formId) {
            case 'edit':
                // update a record
                this._studyService.update(formValue)
                    .subscribe(function (study) {
                    _this.updateStudiesArray(formValue);
                    _this.editStudyForm.reset();
                    _this.submitLoading = false;
                    _this.showStudyEditSuccess = true;
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showStudyEditError = true;
                });
                break;
            case 'add':
                // add a record
                this._studyService.create(formValue)
                    .subscribe(function (study) {
                    _this.allStudies.push(study);
                    _this.addStudyForm.reset();
                    _this.submitLoading = false;
                    _this.showStudyCreateSuccess = true;
                    _this.createdStudyID = study.id;
                }, function (error) {
                    _this.errorMessage = error;
                    _this.submitLoading = false;
                    _this.showStudyCreateError = true;
                });
                break;
            default:
        }
    };
    return StudiesComponent;
}());
StudiesComponent = __decorate([
    core_1.Component({
        selector: 'app-studies',
        template: __webpack_require__("./src/app/studies/studies.component.html"),
        styles: [__webpack_require__("./src/app/studies/studies.component.scss")]
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof study_service_1.StudyService !== "undefined" && study_service_1.StudyService) === "function" && _a || Object])
], StudiesComponent);
exports.StudiesComponent = StudiesComponent;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/studies/studies.component.js.map

/***/ }),

/***/ "./src/app/studies/study.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/observable/throw.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var StudyService = (function () {
    function StudyService(_http) {
        this._http = _http;
    }
    StudyService.prototype.extractData = function (res) {
        var body = res.json();
        return body || {};
    };
    //check return from server - may need to adjust response.json below with further dot notation
    StudyService.prototype.getStudies = function () {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS
        });
        return this._http.get(app_settings_1.APP_SETTINGS.STUDIES_URL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    StudyService.prototype.create = function (formValue) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS
        });
        return this._http.post(app_settings_1.APP_SETTINGS.STUDIES_URL, formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    StudyService.prototype.update = function (formValue) {
        var options = new http_1.RequestOptions({
            headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS
        });
        return this._http.put(app_settings_1.APP_SETTINGS.STUDIES_URL + formValue.id + '/', formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    StudyService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(error.json().name[0] || 'Server error');
    };
    return StudyService;
}());
StudyService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], StudyService);
exports.StudyService = StudyService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/studies/study.service.js.map

/***/ }),

/***/ "./src/app/targets/target.resolve.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var target_service_1 = __webpack_require__("./src/app/targets/target.service.ts");
var TargetResolve = (function () {
    function TargetResolve(_targetService) {
        this._targetService = _targetService;
    }
    TargetResolve.prototype.resolve = function (route) {
        return this._targetService.getTargets();
    };
    return TargetResolve;
}());
TargetResolve = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof target_service_1.TargetService !== "undefined" && target_service_1.TargetService) === "function" && _a || Object])
], TargetResolve);
exports.TargetResolve = TargetResolve;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/targets/target.resolve.js.map

/***/ }),

/***/ "./src/app/targets/target.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var TargetService = (function () {
    function TargetService(_http) {
        this._http = _http;
    }
    TargetService.prototype.extractData = function (res) {
        var body = res.json();
        return body.data || {};
    };
    // public getTargetsData(){}
    TargetService.prototype.getTargets = function () {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.get(app_settings_1.APP_SETTINGS.TARGETS_URL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    TargetService.prototype.create = function (formValue) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS });
        return this._http.post(app_settings_1.APP_SETTINGS.TARGETS_URL, formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    TargetService.prototype.update = function (formValue) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.put(app_settings_1.APP_SETTINGS.TARGETS_URL + formValue.id + '/', formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    TargetService.prototype.delete = function (id) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.delete(app_settings_1.APP_SETTINGS.TARGETS_URL + id, options)
            .catch(this.handleError);
    };
    TargetService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return TargetService;
}());
TargetService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], TargetService);
exports.TargetService = TargetService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/targets/target.service.js.map

/***/ }),

/***/ "./src/app/units/unit.resolve.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var unit_service_1 = __webpack_require__("./src/app/units/unit.service.ts");
var UnitResolve = (function () {
    function UnitResolve(_unitService) {
        this._unitService = _unitService;
    }
    UnitResolve.prototype.resolve = function (route) {
        return this._unitService.getUnits();
    };
    return UnitResolve;
}());
UnitResolve = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof unit_service_1.UnitService !== "undefined" && unit_service_1.UnitService) === "function" && _a || Object])
], UnitResolve);
exports.UnitResolve = UnitResolve;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/units/unit.resolve.js.map

/***/ }),

/***/ "./src/app/units/unit.service.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var http_1 = __webpack_require__("./node_modules/@angular/http/@angular/http.es5.js");
var Observable_1 = __webpack_require__("./node_modules/rxjs/_esm5/Observable.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/map.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/do.js");
__webpack_require__("./node_modules/rxjs/_esm5/add/operator/catch.js");
var app_settings_1 = __webpack_require__("./src/app/app.settings.ts");
var UnitService = (function () {
    function UnitService(_http) {
        this._http = _http;
        this._unitsUrl = 'https://raw.githubusercontent.com/USGS-WiM/lide-lims/master/src/app/demo-services/units.json';
    }
    UnitService.prototype.getUnits = function () {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.get(app_settings_1.APP_SETTINGS.UNITS_URL, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    UnitService.prototype.create = function (formValue) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.AUTH_JSON_HEADERS });
        return this._http.post(app_settings_1.APP_SETTINGS.UNITS_URL, formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    UnitService.prototype.update = function (formValue) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.put(app_settings_1.APP_SETTINGS.UNITS_URL + formValue.id + '/', formValue, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    UnitService.prototype.delete = function (id) {
        var options = new http_1.RequestOptions({ headers: app_settings_1.APP_SETTINGS.MIN_AUTH_JSON_HEADERS });
        return this._http.delete(app_settings_1.APP_SETTINGS.UNITS_URL + id, options)
            .catch(this.handleError);
    };
    UnitService.prototype.handleError = function (error) {
        console.error(error);
        return Observable_1.Observable.throw(JSON.stringify(error.json()) || 'Server error');
    };
    return UnitService;
}());
UnitService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [typeof (_a = typeof http_1.Http !== "undefined" && http_1.Http) === "function" && _a || Object])
], UnitService);
exports.UnitService = UnitService;
var _a;
//# sourceMappingURL=D:/projects/lili/src/src/src/app/units/unit.service.js.map

/***/ }),

/***/ "./src/environments/environment.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// The file contents for the current environment will overwrite these during build.
// The build system defaults to the dev environment which uses `environment.ts`, but if you do
// `ng build --env=prod` then `environment.prod.ts` will be used instead.
// The list of which env maps to which file can be found in `angular-cli.json`.
Object.defineProperty(exports, "__esModule", { value: true });
exports.environment = {
    production: false,
    version: __webpack_require__("./package.json").version
};
//# sourceMappingURL=D:/projects/lili/src/src/src/environments/environment.js.map

/***/ }),

/***/ "./src/main.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__("./src/polyfills.ts");
var platform_browser_dynamic_1 = __webpack_require__("./node_modules/@angular/platform-browser-dynamic/@angular/platform-browser-dynamic.es5.js");
var core_1 = __webpack_require__("./node_modules/@angular/core/@angular/core.es5.js");
var environment_1 = __webpack_require__("./src/environments/environment.ts");
var _1 = __webpack_require__("./src/app/index.ts");
if (environment_1.environment.production) {
    core_1.enableProdMode();
}
platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(_1.AppModule);
//# sourceMappingURL=D:/projects/lili/src/src/src/main.js.map

/***/ }),

/***/ "./src/polyfills.ts":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// This file includes polyfills needed by Angular 2 and is loaded before
// the app. You can add your own extra polyfills to this file.
__webpack_require__("./node_modules/core-js/es6/symbol.js");
__webpack_require__("./node_modules/core-js/es6/object.js");
__webpack_require__("./node_modules/core-js/es6/function.js");
__webpack_require__("./node_modules/core-js/es6/parse-int.js");
__webpack_require__("./node_modules/core-js/es6/parse-float.js");
__webpack_require__("./node_modules/core-js/es6/number.js");
__webpack_require__("./node_modules/core-js/es6/math.js");
__webpack_require__("./node_modules/core-js/es6/string.js");
__webpack_require__("./node_modules/core-js/es6/date.js");
__webpack_require__("./node_modules/core-js/es6/array.js");
__webpack_require__("./node_modules/core-js/es6/regexp.js");
__webpack_require__("./node_modules/core-js/es6/map.js");
__webpack_require__("./node_modules/core-js/es6/set.js");
__webpack_require__("./node_modules/core-js/es6/reflect.js");
__webpack_require__("./node_modules/core-js/es7/reflect.js");
__webpack_require__("./node_modules/zone.js/dist/zone.js");
//# sourceMappingURL=D:/projects/lili/src/src/src/polyfills.js.map

/***/ }),

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("./src/main.ts");


/***/ })

},[0]);
//# sourceMappingURL=main.bundle.js.map